
Living_Bath_Bed_Rooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009f18  08009f18  00019f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a40c  0800a40c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a40c  0800a40c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a40c  0800a40c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae4  200001e0  0800a5f4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cc4  0800a5f4  00021cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5c7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a23  00000000  00000000  0003a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef6e  00000000  00000000  000405d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e91  00000000  00000000  0005f546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afc54  00000000  00000000  000763d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012602b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  00126080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f00 	.word	0x08009f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009f00 	.word	0x08009f00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <MX_ADC2_Init+0xb8>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bcc:	2210      	movs	r2, #16
 8000bce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000c18:	f000 fd8e 	bl	8001738 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000c22:	f000 faf9 	bl	8001218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_ADC2_Init+0xb4>)
 8000c44:	f000 ffce 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000c4e:	f000 fae3 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20001b1c 	.word	0x20001b1c
 8000c60:	50000100 	.word	0x50000100

08000c64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_ADC_MspInit+0x74>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d124      	bne.n	8000cd0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_ADC_MspInit+0x78>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_ADC_MspInit+0x78>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_ADC_MspInit+0x78>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_ADC_MspInit+0x78>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_ADC_MspInit+0x78>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_ADC_MspInit+0x78>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = HUMIDITY_Pin;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HUMIDITY_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f001 fbf0 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	50000100 	.word	0x50000100
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <MX_FREERTOS_Init+0x18>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_FREERTOS_Init+0x1c>)
 8000cea:	f003 fc73 	bl	80045d4 <osThreadNew>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <MX_FREERTOS_Init+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08009fcc 	.word	0x08009fcc
 8000cfc:	08000d05 	.word	0x08000d05
 8000d00:	20001b6c 	.word	0x20001b6c

08000d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f003 fd0b 	bl	8004728 <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <StartDefaultTask+0x8>

08000d14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a3b      	ldr	r2, [pc, #236]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a35      	ldr	r2, [pc, #212]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <MX_GPIO_Init+0x108>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|FAN_Pin|CS_NRF_Pin|FLOOD_ALARM_Pin
 8000d72:	2200      	movs	r2, #0
 8000d74:	f240 110f 	movw	r1, #271	; 0x10f
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f001 fd22 	bl	80027c4 <HAL_GPIO_WritePin>
                          |TxEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT_BED_Pin|LIGHT_LIVING_Pin|LIGHT_BATH_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	21c1      	movs	r1, #193	; 0xc1
 8000d84:	4826      	ldr	r0, [pc, #152]	; (8000e20 <MX_GPIO_Init+0x10c>)
 8000d86:	f001 fd1d 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MOTION_BATH_Pin|MOTION_LIVING_Pin;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4821      	ldr	r0, [pc, #132]	; (8000e24 <MX_GPIO_Init+0x110>)
 8000d9e:	f001 fb87 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|FAN_Pin|CS_NRF_Pin|FLOOD_ALARM_Pin
 8000da2:	f240 130f 	movw	r3, #271	; 0x10f
 8000da6:	60fb      	str	r3, [r7, #12]
                          |TxEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f001 fb77 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIGHT_BED_Pin|LIGHT_LIVING_Pin|LIGHT_BATH_Pin;
 8000dc2:	23c1      	movs	r3, #193	; 0xc1
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_GPIO_Init+0x10c>)
 8000dda:	f001 fb69 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTION_BED_Pin|Carrier_Detect_Pin|Address_Match_Pin;
 8000dde:	2332      	movs	r3, #50	; 0x32
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <MX_GPIO_Init+0x10c>)
 8000df2:	f001 fb5d 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Data_Ready_Pin|BUZZER_OFF_Pin;
 8000df6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f001 fb4f 	bl	80024b0 <HAL_GPIO_Init>

}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48001400 	.word	0x48001400

08000e28 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1 , ptr , len , 50);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	2332      	movs	r3, #50	; 0x32
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <_write+0x24>)
 8000e3e:	f003 f82e 	bl	8003e9e <HAL_UART_Transmit>
  return len;
 8000e42:	687b      	ldr	r3, [r7, #4]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20001bec 	.word	0x20001bec

08000e50 <light_livingroom>:



void light_livingroom   (void *pvParameters){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	while(1){

		isLivingroomEmpty = HAL_GPIO_ReadPin(MOTION_LIVING_GPIO_Port, MOTION_LIVING_Pin);
 8000e58:	2102      	movs	r1, #2
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <light_livingroom+0x38>)
 8000e5c:	f001 fc9a 	bl	8002794 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <light_livingroom+0x3c>)
 8000e66:	701a      	strb	r2, [r3, #0]

		if( !isLivingroomEmpty )
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <light_livingroom+0x3c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <light_livingroom+0x2c>
			HAL_GPIO_WritePin(LIGHT_LIVING_GPIO_Port, LIGHT_LIVING_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2140      	movs	r1, #64	; 0x40
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <light_livingroom+0x40>)
 8000e76:	f001 fca5 	bl	80027c4 <HAL_GPIO_WritePin>
 8000e7a:	e7ed      	b.n	8000e58 <light_livingroom+0x8>
		else
			HAL_GPIO_WritePin(LIGHT_LIVING_GPIO_Port, LIGHT_LIVING_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <light_livingroom+0x40>)
 8000e82:	f001 fc9f 	bl	80027c4 <HAL_GPIO_WritePin>
		isLivingroomEmpty = HAL_GPIO_ReadPin(MOTION_LIVING_GPIO_Port, MOTION_LIVING_Pin);
 8000e86:	e7e7      	b.n	8000e58 <light_livingroom+0x8>
 8000e88:	48001400 	.word	0x48001400
 8000e8c:	20000200 	.word	0x20000200
 8000e90:	48000400 	.word	0x48000400

08000e94 <light_bathroom>:

	}
	vTaskDelete(NULL);
}
int a=0;
void light_bathroom   	(void *pvParameters){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	while(1){

		isBathroomEmpty = HAL_GPIO_ReadPin(MOTION_BATH_GPIO_Port, MOTION_BATH_Pin);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <light_bathroom+0x38>)
 8000ea0:	f001 fc78 	bl	8002794 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <light_bathroom+0x3c>)
 8000eaa:	701a      	strb	r2, [r3, #0]

		if( !isBathroomEmpty )
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <light_bathroom+0x3c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <light_bathroom+0x2c>
			HAL_GPIO_WritePin(LIGHT_BATH_GPIO_Port, LIGHT_BATH_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <light_bathroom+0x40>)
 8000eba:	f001 fc83 	bl	80027c4 <HAL_GPIO_WritePin>
 8000ebe:	e7ed      	b.n	8000e9c <light_bathroom+0x8>
		else
			HAL_GPIO_WritePin(LIGHT_BATH_GPIO_Port, LIGHT_BATH_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <light_bathroom+0x40>)
 8000ec6:	f001 fc7d 	bl	80027c4 <HAL_GPIO_WritePin>
		isBathroomEmpty = HAL_GPIO_ReadPin(MOTION_BATH_GPIO_Port, MOTION_BATH_Pin);
 8000eca:	e7e7      	b.n	8000e9c <light_bathroom+0x8>
 8000ecc:	48001400 	.word	0x48001400
 8000ed0:	20000201 	.word	0x20000201
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <light_bedroom>:

	}
	vTaskDelete(NULL);
}

void light_bedroom   	(void *pvParameters){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	while(1){

		isBedroomEmpty = HAL_GPIO_ReadPin(MOTION_BED_GPIO_Port, MOTION_BED_Pin);
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <light_bedroom+0x38>)
 8000ee4:	f001 fc56 	bl	8002794 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <light_bedroom+0x3c>)
 8000eee:	701a      	strb	r2, [r3, #0]

		if( !isBedroomEmpty )
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <light_bedroom+0x3c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <light_bedroom+0x2c>
			HAL_GPIO_WritePin(LIGHT_BED_GPIO_Port, LIGHT_BED_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <light_bedroom+0x38>)
 8000efe:	f001 fc61 	bl	80027c4 <HAL_GPIO_WritePin>
 8000f02:	e7ed      	b.n	8000ee0 <light_bedroom+0x8>
		else
			HAL_GPIO_WritePin(LIGHT_BED_GPIO_Port, LIGHT_BED_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <light_bedroom+0x38>)
 8000f0a:	f001 fc5b 	bl	80027c4 <HAL_GPIO_WritePin>
		isBedroomEmpty = HAL_GPIO_ReadPin(MOTION_BED_GPIO_Port, MOTION_BED_Pin);
 8000f0e:	e7e7      	b.n	8000ee0 <light_bedroom+0x8>
 8000f10:	48000400 	.word	0x48000400
 8000f14:	20000202 	.word	0x20000202

08000f18 <ceiling_fan>:
	vTaskDelete(NULL);
}



void ceiling_fan 	 	(void *pvParameters){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	while(1){

		temperature = ( temperature_measure * 50) / 255;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <ceiling_fan+0x4c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	2332      	movs	r3, #50	; 0x32
 8000f28:	fb03 f302 	mul.w	r3, r3, r2
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <ceiling_fan+0x50>)
 8000f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	11d2      	asrs	r2, r2, #7
 8000f36:	17db      	asrs	r3, r3, #31
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <ceiling_fan+0x54>)
 8000f3e:	701a      	strb	r2, [r3, #0]

		if( temperature > TEMP_THRESHOLD )
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <ceiling_fan+0x54>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b1b      	cmp	r3, #27
 8000f46:	d906      	bls.n	8000f56 <ceiling_fan+0x3e>
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f001 fc38 	bl	80027c4 <HAL_GPIO_WritePin>
 8000f54:	e7e4      	b.n	8000f20 <ceiling_fan+0x8>
		else
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f001 fc31 	bl	80027c4 <HAL_GPIO_WritePin>
		temperature = ( temperature_measure * 50) / 255;
 8000f62:	e7dd      	b.n	8000f20 <ceiling_fan+0x8>
 8000f64:	200001fc 	.word	0x200001fc
 8000f68:	80808081 	.word	0x80808081
 8000f6c:	200001fd 	.word	0x200001fd

08000f70 <flood_protection>:
	}
	vTaskDelete(NULL);
}
int b=0;
void flood_protection 	(void *pvParameters){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	while(1){

		  humidity_measure = HAL_ADC_GetValue(&hadc2);
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <flood_protection+0x78>)
 8000f7a:	f000 fe25 	bl	8001bc8 <HAL_ADC_GetValue>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <flood_protection+0x7c>)
 8000f84:	701a      	strb	r2, [r3, #0]
		  humidity = (humidity_measure * 70)/127  + 20;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <flood_protection+0x7c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2346      	movs	r3, #70	; 0x46
 8000f8e:	fb03 f302 	mul.w	r3, r3, r2
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <flood_protection+0x80>)
 8000f94:	fb82 1203 	smull	r1, r2, r2, r3
 8000f98:	441a      	add	r2, r3
 8000f9a:	1192      	asrs	r2, r2, #6
 8000f9c:	17db      	asrs	r3, r3, #31
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	3314      	adds	r3, #20
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <flood_protection+0x84>)
 8000fa8:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start(&hadc2);
 8000faa:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <flood_protection+0x78>)
 8000fac:	f000 fd56 	bl	8001a5c <HAL_ADC_Start>

		  //printf(" Humidity : %d , measure : %d \r\n", humidity , humidity_measure);
		  printf(" Stan : %d \r\n", isBathroomEmpty );
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <flood_protection+0x88>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4811      	ldr	r0, [pc, #68]	; (8000ffc <flood_protection+0x8c>)
 8000fb8:	f006 ff32 	bl	8007e20 <iprintf>

		  //printf(" Stack : %d \r\n", uxTaskGetStackHighWaterMark(light_fl_handle) );
		  //vTaskResume(light_bath_handle);
		  //vTaskResume(light_bed_handle);
			vTaskDelay( 5 / portTICK_PERIOD_MS);
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f004 fcdb 	bl	8005978 <vTaskDelay>

		  if( humidity >= 70)
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <flood_protection+0x84>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b45      	cmp	r3, #69	; 0x45
 8000fc8:	d906      	bls.n	8000fd8 <flood_protection+0x68>
			HAL_GPIO_WritePin(FLOOD_ALARM_GPIO_Port, FLOOD_ALARM_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2108      	movs	r1, #8
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f001 fbf7 	bl	80027c4 <HAL_GPIO_WritePin>
 8000fd6:	e7cf      	b.n	8000f78 <flood_protection+0x8>
		  else
			HAL_GPIO_WritePin(FLOOD_ALARM_GPIO_Port, FLOOD_ALARM_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2108      	movs	r1, #8
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f001 fbf0 	bl	80027c4 <HAL_GPIO_WritePin>
		  humidity_measure = HAL_ADC_GetValue(&hadc2);
 8000fe4:	e7c8      	b.n	8000f78 <flood_protection+0x8>
 8000fe6:	bf00      	nop
 8000fe8:	20001b1c 	.word	0x20001b1c
 8000fec:	200001fe 	.word	0x200001fe
 8000ff0:	81020409 	.word	0x81020409
 8000ff4:	200001ff 	.word	0x200001ff
 8000ff8:	20000201 	.word	0x20000201
 8000ffc:	08009f24 	.word	0x08009f24

08001000 <alarm_clock>:

	}
	vTaskDelete(NULL);
}

void alarm_clock		(void *pvParameters){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	while(1){
		if( hours == 10 )
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <alarm_clock+0x3c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d105      	bne.n	800101c <alarm_clock+0x1c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2101      	movs	r1, #1
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f001 fbd4 	bl	80027c4 <HAL_GPIO_WritePin>

		if( HAL_GPIO_ReadPin(BUZZER_OFF_GPIO_Port, BUZZER_OFF_Pin) == GPIO_PIN_RESET )
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f001 fbb6 	bl	8002794 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ec      	bne.n	8001008 <alarm_clock+0x8>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2101      	movs	r1, #1
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f001 fbc5 	bl	80027c4 <HAL_GPIO_WritePin>
		if( hours == 10 )
 800103a:	e7e5      	b.n	8001008 <alarm_clock+0x8>
 800103c:	20000203 	.word	0x20000203

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fb11 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f88b 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f7ff fe61 	bl	8000d14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001052:	f000 f8e7 	bl	8001224 <MX_SPI1_Init>
  MX_ADC2_Init();
 8001056:	f7ff fda7 	bl	8000ba8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800105a:	f000 fa69 	bl	8001530 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc2);
 800105e:	482e      	ldr	r0, [pc, #184]	; (8001118 <main+0xd8>)
 8001060:	f000 fcfc 	bl	8001a5c <HAL_ADC_Start>


  xTaskCreate( light_livingroom	, "LIGHT_LIVINGROOM_TASK"	, 100, NULL, 1, light_liv_handle );
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <main+0xdc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2301      	movs	r3, #1
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2264      	movs	r2, #100	; 0x64
 8001072:	492b      	ldr	r1, [pc, #172]	; (8001120 <main+0xe0>)
 8001074:	482b      	ldr	r0, [pc, #172]	; (8001124 <main+0xe4>)
 8001076:	f004 fb43 	bl	8005700 <xTaskCreate>
  xTaskCreate( light_bathroom	, "LIGHT_BATHROOM_TASK"		, 100, NULL, 1, light_bath_handle );
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <main+0xe8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2301      	movs	r3, #1
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2264      	movs	r2, #100	; 0x64
 8001088:	4928      	ldr	r1, [pc, #160]	; (800112c <main+0xec>)
 800108a:	4829      	ldr	r0, [pc, #164]	; (8001130 <main+0xf0>)
 800108c:	f004 fb38 	bl	8005700 <xTaskCreate>
  xTaskCreate( light_bedroom	, "LIGHT_BEDROOM_TASK"		, 100, NULL, 1, light_bed_handle );
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <main+0xf4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	2301      	movs	r3, #1
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	2264      	movs	r2, #100	; 0x64
 800109e:	4926      	ldr	r1, [pc, #152]	; (8001138 <main+0xf8>)
 80010a0:	4826      	ldr	r0, [pc, #152]	; (800113c <main+0xfc>)
 80010a2:	f004 fb2d 	bl	8005700 <xTaskCreate>

  xTaskCreate( ceiling_fan		, "CEILING_FAN_TASK" 		, 100, NULL, 1, NULL );
 80010a6:	2300      	movs	r3, #0
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	2301      	movs	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2300      	movs	r3, #0
 80010b0:	2264      	movs	r2, #100	; 0x64
 80010b2:	4923      	ldr	r1, [pc, #140]	; (8001140 <main+0x100>)
 80010b4:	4823      	ldr	r0, [pc, #140]	; (8001144 <main+0x104>)
 80010b6:	f004 fb23 	bl	8005700 <xTaskCreate>
  xTaskCreate( flood_protection , "FLOOD_PROTECTION_TASK"	, 200, NULL, 2, light_fl_handle );
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <main+0x108>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	22c8      	movs	r2, #200	; 0xc8
 80010c8:	4920      	ldr	r1, [pc, #128]	; (800114c <main+0x10c>)
 80010ca:	4821      	ldr	r0, [pc, #132]	; (8001150 <main+0x110>)
 80010cc:	f004 fb18 	bl	8005700 <xTaskCreate>
  xTaskCreate( alarm_clock		, "ALARM_CLOCK_TASK"		, 100, NULL, 1, light_alarm_handle );
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <main+0x114>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	491e      	ldr	r1, [pc, #120]	; (8001158 <main+0x118>)
 80010e0:	481e      	ldr	r0, [pc, #120]	; (800115c <main+0x11c>)
 80010e2:	f004 fb0d 	bl	8005700 <xTaskCreate>

  mutex = xSemaphoreCreateMutex();
 80010e6:	2001      	movs	r0, #1
 80010e8:	f003 fd8e 	bl	8004c08 <xQueueCreateMutex>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <main+0x120>)
 80010f0:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(mutex, portMAX_DELAY);
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <main+0x120>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 31ff 	mov.w	r1, #4294967295
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f812 	bl	8005124 <xQueueSemaphoreTake>
  vTaskStartScheduler();
 8001100:	f004 fc6e 	bl	80059e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001104:	f003 f9fe 	bl	8004504 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001108:	f7ff fdea 	bl	8000ce0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800110c:	f003 fa2e 	bl	800456c <osKernelStart>



  while (1)
  {
	vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001110:	200a      	movs	r0, #10
 8001112:	f004 fc31 	bl	8005978 <vTaskDelay>
 8001116:	e7fb      	b.n	8001110 <main+0xd0>
 8001118:	20001b1c 	.word	0x20001b1c
 800111c:	20001b70 	.word	0x20001b70
 8001120:	08009f34 	.word	0x08009f34
 8001124:	08000e51 	.word	0x08000e51
 8001128:	20001b7c 	.word	0x20001b7c
 800112c:	08009f4c 	.word	0x08009f4c
 8001130:	08000e95 	.word	0x08000e95
 8001134:	20001b78 	.word	0x20001b78
 8001138:	08009f60 	.word	0x08009f60
 800113c:	08000ed9 	.word	0x08000ed9
 8001140:	08009f74 	.word	0x08009f74
 8001144:	08000f19 	.word	0x08000f19
 8001148:	20001b84 	.word	0x20001b84
 800114c:	08009f88 	.word	0x08009f88
 8001150:	08000f71 	.word	0x08000f71
 8001154:	20001b80 	.word	0x20001b80
 8001158:	08009fa0 	.word	0x08009fa0
 800115c:	08001001 	.word	0x08001001
 8001160:	20000204 	.word	0x20000204

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	; 0x58
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800116e:	2228      	movs	r2, #40	; 0x28
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f006 f9e2 	bl	800753c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fb1c 	bl	80027f4 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011c2:	f000 f829 	bl	8001218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fa0f 	bl	8003604 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011ec:	f000 f814 	bl	8001218 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80011f0:	2381      	movs	r3, #129	; 0x81
 80011f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80011f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fc35 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800120c:	f000 f804 	bl	8001218 <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	3758      	adds	r7, #88	; 0x58
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_SPI1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_SPI1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_SPI1_Init+0x74>)
 8001230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_SPI1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_SPI1_Init+0x74>)
 800123e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001242:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_SPI1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_SPI1_Init+0x74>)
 8001252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001256:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_SPI1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_SPI1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_SPI1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_SPI1_Init+0x74>)
 8001272:	2207      	movs	r2, #7
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_SPI1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_SPI1_Init+0x74>)
 800127e:	2208      	movs	r2, #8
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_SPI1_Init+0x74>)
 8001284:	f002 fd1a 	bl	8003cbc <HAL_SPI_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f7ff ffc3 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001b88 	.word	0x20001b88
 800129c:	40013000 	.word	0x40013000

080012a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_SPI_MspInit+0x7c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d128      	bne.n	8001314 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_SPI_MspInit+0x80>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <HAL_SPI_MspInit+0x80>)
 80012c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_SPI_MspInit+0x80>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_SPI_MspInit+0x80>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <HAL_SPI_MspInit+0x80>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_SPI_MspInit+0x80>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012f2:	23e0      	movs	r3, #224	; 0xe0
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001302:	2305      	movs	r3, #5
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f001 f8ce 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40013000 	.word	0x40013000
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_MspInit+0x4c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_MspInit+0x4c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_MspInit+0x4c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	f06f 0001 	mvn.w	r0, #1
 8001362:	f001 f87c 	bl	800245e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f9a8 	bl	80016f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013a8:	f004 ff6c 	bl	8006284 <xTaskGetSchedulerState>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d001      	beq.n	80013b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013b2:	f005 fe21 	bl	8006ff8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
	return 1;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_kill>:

int _kill(int pid, int sig)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013d4:	f006 f87a 	bl	80074cc <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	2216      	movs	r2, #22
 80013dc:	601a      	str	r2, [r3, #0]
	return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_exit>:

void _exit (int status)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013f2:	f04f 31ff 	mov.w	r1, #4294967295
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffe7 	bl	80013ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80013fc:	e7fe      	b.n	80013fc <_exit+0x12>

080013fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e00a      	b.n	8001426 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001410:	f3af 8000 	nop.w
 8001414:	4601      	mov	r1, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	60ba      	str	r2, [r7, #8]
 800141c:	b2ca      	uxtb	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbf0      	blt.n	8001410 <_read+0x12>
	}

return len;
 800142e:	687b      	ldr	r3, [r7, #4]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001460:	605a      	str	r2, [r3, #4]
	return 0;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_isatty>:

int _isatty(int file)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	return 1;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
	return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f005 fffc 	bl	80074cc <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20003000 	.word	0x20003000
 8001500:	00000400 	.word	0x00000400
 8001504:	20000208 	.word	0x20000208
 8001508:	20001cc8 	.word	0x20001cc8

0800150c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <SystemInit+0x20>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <SystemInit+0x20>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART1_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800153c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001574:	f002 fc45 	bl	8003e02 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f7ff fe4b 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20001bec 	.word	0x20001bec
 800158c:	40013800 	.word	0x40013800

08001590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d129      	bne.n	8001606 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_UART_MspInit+0x84>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f4:	2307      	movs	r3, #7
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f000 ff55 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40013800 	.word	0x40013800
 8001614:	40021000 	.word	0x40021000

08001618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopForever+0x6>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <LoopForever+0xe>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <LoopForever+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001642:	f7ff ff63 	bl	800150c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f005 ff47 	bl	80074d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800164a:	f7ff fcf9 	bl	8001040 <main>

0800164e <LoopForever>:

LoopForever:
    b LoopForever
 800164e:	e7fe      	b.n	800164e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001650:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800165c:	0800a414 	.word	0x0800a414
  ldr r2, =_sbss
 8001660:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001664:	20001cc4 	.word	0x20001cc4

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x28>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 fee3 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fe4c 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 feed 	bl	8002496 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 fec3 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20001c70 	.word	0x20001c70

08001720 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;  
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20001c70 	.word	0x20001c70

08001738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b09a      	sub	sp, #104	; 0x68
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e172      	b.n	8001a3e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d176      	bne.n	8001858 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d152      	bne.n	8001818 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fa69 	bl	8000c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d13b      	bne.n	8001818 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fd3f 	bl	8002224 <ADC_Disable>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d12f      	bne.n	8001818 <HAL_ADC_Init+0xe0>
 80017b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d12b      	bne.n	8001818 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c8:	f023 0302 	bic.w	r3, r3, #2
 80017cc:	f043 0202 	orr.w	r2, r3, #2
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f4:	4b94      	ldr	r3, [pc, #592]	; (8001a48 <HAL_ADC_Init+0x310>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_ADC_Init+0x314>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9a      	lsrs	r2, r3, #18
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800180a:	e002      	b.n	8001812 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3b01      	subs	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f9      	bne.n	800180c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001834:	d110      	bne.n	8001858 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f023 0312 	bic.w	r3, r3, #18
 800183e:	f043 0210 	orr.w	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 80df 	bne.w	8001a24 <HAL_ADC_Init+0x2ec>
 8001866:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80da 	bne.w	8001a24 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 80d2 	bne.w	8001a24 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001888:	f043 0202 	orr.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_ADC_Init+0x318>)
 8001892:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189c:	d102      	bne.n	80018a4 <HAL_ADC_Init+0x16c>
 800189e:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <HAL_ADC_Init+0x31c>)
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e002      	b.n	80018aa <HAL_ADC_Init+0x172>
 80018a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018a8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_ADC_Init+0x192>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x192>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_ADC_Init+0x194>
 80018ca:	2300      	movs	r3, #0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11c      	bne.n	800190a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_ADC_Init+0x1ba>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x1ba>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_ADC_Init+0x1bc>
 80018f2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	431a      	orrs	r2, r3
 8001906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001908:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7e5b      	ldrb	r3, [r3, #25]
 800190e:	035b      	lsls	r3, r3, #13
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001914:	2a01      	cmp	r2, #1
 8001916:	d002      	beq.n	800191e <HAL_ADC_Init+0x1e6>
 8001918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191c:	e000      	b.n	8001920 <HAL_ADC_Init+0x1e8>
 800191e:	2200      	movs	r2, #0
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4313      	orrs	r3, r2
 800192e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001930:	4313      	orrs	r3, r2
 8001932:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d11b      	bne.n	8001976 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7e5b      	ldrb	r3, [r3, #25]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	3b01      	subs	r3, #1
 800194c:	045a      	lsls	r2, r3, #17
 800194e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001950:	4313      	orrs	r3, r2
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	663b      	str	r3, [r7, #96]	; 0x60
 8001958:	e00d      	b.n	8001976 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001962:	f043 0220 	orr.w	r2, r3, #32
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	2b01      	cmp	r3, #1
 800197c:	d007      	beq.n	800198e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	4313      	orrs	r3, r2
 8001988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800198a:	4313      	orrs	r3, r2
 800198c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b00      	cmp	r3, #0
 800199a:	d114      	bne.n	80019c6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019aa:	f023 0302 	bic.w	r3, r3, #2
 80019ae:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e1b      	ldrb	r3, [r3, #24]
 80019b4:	039a      	lsls	r2, r3, #14
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4313      	orrs	r3, r2
 80019c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019c2:	4313      	orrs	r3, r2
 80019c4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_ADC_Init+0x320>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019d6:	430b      	orrs	r3, r1
 80019d8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10c      	bne.n	80019fc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f023 010f 	bic.w	r1, r3, #15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
 80019fa:	e007      	b.n	8001a0c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020f 	bic.w	r2, r2, #15
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
 8001a22:	e00a      	b.n	8001a3a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f023 0312 	bic.w	r3, r3, #18
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3768      	adds	r7, #104	; 0x68
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	50000300 	.word	0x50000300
 8001a54:	50000100 	.word	0x50000100
 8001a58:	fff0c007 	.word	0xfff0c007

08001a5c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 809c 	bne.w	8001bb0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Start+0x2a>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e097      	b.n	8001bb6 <HAL_ADC_Start+0x15a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fb6a 	bl	8002168 <ADC_Enable>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8083 	bne.w	8001ba6 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ab4:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_ADC_Start+0x164>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_ADC_Start+0x6e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac8:	d115      	bne.n	8001af6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d027      	beq.n	8001b34 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001af4:	e01e      	b.n	8001b34 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0a:	d004      	beq.n	8001b16 <HAL_ADC_Start+0xba>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <HAL_ADC_Start+0x168>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10e      	bne.n	8001b34 <HAL_ADC_Start+0xd8>
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f023 0206 	bic.w	r2, r3, #6
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b4e:	e002      	b.n	8001b56 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	221c      	movs	r2, #28
 8001b64:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_ADC_Start+0x164>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d010      	beq.n	8001b94 <HAL_ADC_Start+0x138>
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_ADC_Start+0x164>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d00a      	beq.n	8001b94 <HAL_ADC_Start+0x138>
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_ADC_Start+0x164>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_Start+0x138>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b92:	d10f      	bne.n	8001bb4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0204 	orr.w	r2, r2, #4
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	e006      	b.n	8001bb4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001bae:	e001      	b.n	8001bb4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	50000300 	.word	0x50000300
 8001bc4:	50000100 	.word	0x50000100

08001bc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b09b      	sub	sp, #108	; 0x6c
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x22>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e2a5      	b.n	8002152 <HAL_ADC_ConfigChannel+0x56e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 8289 	bne.w	8002130 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d81c      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	461a      	mov	r2, r3
 8001c3a:	231f      	movs	r3, #31
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4019      	ands	r1, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5e:	e063      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d81e      	bhi.n	8001ca6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	3b1e      	subs	r3, #30
 8001c7c:	221f      	movs	r2, #31
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4019      	ands	r1, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	3b1e      	subs	r3, #30
 8001c98:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca4:	e040      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b0e      	cmp	r3, #14
 8001cac:	d81e      	bhi.n	8001cec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	3b3c      	subs	r3, #60	; 0x3c
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	3b3c      	subs	r3, #60	; 0x3c
 8001cde:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8001cea:	e01d      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	3b5a      	subs	r3, #90	; 0x5a
 8001d00:	221f      	movs	r2, #31
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	4019      	ands	r1, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	3b5a      	subs	r3, #90	; 0x5a
 8001d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80e5 	bne.w	8001f02 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d91c      	bls.n	8001d7a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6999      	ldr	r1, [r3, #24]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6898      	ldr	r0, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	e019      	b.n	8001dae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6959      	ldr	r1, [r3, #20]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d84f      	bhi.n	8001e70 <HAL_ADC_ConfigChannel+0x28c>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001e0b 	.word	0x08001e0b
 8001de0:	08001e2d 	.word	0x08001e2d
 8001de4:	08001e4f 	.word	0x08001e4f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dee:	4b9e      	ldr	r3, [pc, #632]	; (8002068 <HAL_ADC_ConfigChannel+0x484>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	0691      	lsls	r1, r2, #26
 8001df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e06:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e08:	e07e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e10:	4b95      	ldr	r3, [pc, #596]	; (8002068 <HAL_ADC_ConfigChannel+0x484>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	0691      	lsls	r1, r2, #26
 8001e1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e28:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e2a:	e06d      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e32:	4b8d      	ldr	r3, [pc, #564]	; (8002068 <HAL_ADC_ConfigChannel+0x484>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	0691      	lsls	r1, r2, #26
 8001e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e4a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e4c:	e05c      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <HAL_ADC_ConfigChannel+0x484>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	0691      	lsls	r1, r2, #26
 8001e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e60:	430a      	orrs	r2, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e6c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e6e:	e04b      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	069b      	lsls	r3, r3, #26
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	069b      	lsls	r3, r3, #26
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eb6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d107      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eda:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	069b      	lsls	r3, r3, #26
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10a      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001efe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f00:	e001      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f06:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x344>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x344>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x346>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 810b 	bne.w	8002146 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d00f      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	400a      	ands	r2, r1
 8001f52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f56:	e049      	b.n	8001fec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d91c      	bls.n	8001fb4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6999      	ldr	r1, [r3, #24]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b1b      	subs	r3, #27
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4019      	ands	r1, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6898      	ldr	r0, [r3, #8]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b1b      	subs	r3, #27
 8001fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	619a      	str	r2, [r3, #24]
 8001fb2:	e01b      	b.n	8001fec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6959      	ldr	r1, [r3, #20]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4019      	ands	r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6898      	ldr	r0, [r3, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_ADC_ConfigChannel+0x488>)
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b10      	cmp	r3, #16
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002008:	2b11      	cmp	r3, #17
 800200a:	d105      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800200c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800201c:	2b12      	cmp	r3, #18
 800201e:	f040 8092 	bne.w	8002146 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 808b 	bne.w	8002146 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002038:	d102      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x45c>
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_ADC_ConfigChannel+0x48c>)
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e002      	b.n	8002046 <HAL_ADC_ConfigChannel+0x462>
 8002040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002044:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10f      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x490>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x490>
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <HAL_ADC_ConfigChannel+0x492>
 8002066:	bf00      	nop
 8002068:	83fff000 	.word	0x83fff000
 800206c:	50000300 	.word	0x50000300
 8002070:	50000100 	.word	0x50000100
 8002074:	2300      	movs	r3, #0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d150      	bne.n	800211c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800207a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_ADC_ConfigChannel+0x4b8>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x4b8>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_ADC_ConfigChannel+0x4ba>
 800209c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d13c      	bne.n	800211c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d11d      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x502>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b2:	d118      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020be:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_ADC_ConfigChannel+0x57c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a27      	ldr	r2, [pc, #156]	; (8002164 <HAL_ADC_ConfigChannel+0x580>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9a      	lsrs	r2, r3, #18
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d6:	e002      	b.n	80020de <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3b01      	subs	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020e4:	e02e      	b.n	8002144 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	d10b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x522>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f6:	d106      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002102:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002104:	e01e      	b.n	8002144 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b12      	cmp	r3, #18
 800210c:	d11a      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002118:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800211a:	e013      	b.n	8002144 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800212e:	e00a      	b.n	8002146 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002142:	e000      	b.n	8002146 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002144:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800214e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002152:	4618      	mov	r0, r3
 8002154:	376c      	adds	r7, #108	; 0x6c
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000
 8002164:	431bde83 	.word	0x431bde83

08002168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <ADC_Enable+0x2c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <ADC_Enable+0x2c>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <ADC_Enable+0x2e>
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13c      	bne.n	8002214 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <ADC_Enable+0xb8>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e028      	b.n	8002216 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021d4:	f7ff faa4 	bl	8001720 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021da:	e014      	b.n	8002206 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021dc:	f7ff faa0 	bl	8001720 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d90d      	bls.n	8002206 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e007      	b.n	8002216 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d1e3      	bne.n	80021dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	8000003f 	.word	0x8000003f

08002224 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <ADC_Disable+0x2c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <ADC_Disable+0x2c>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <ADC_Disable+0x2e>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d040      	beq.n	80022d8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030d 	and.w	r3, r3, #13
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10f      	bne.n	8002284 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0202 	orr.w	r2, r2, #2
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2203      	movs	r2, #3
 800227a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800227c:	f7ff fa50 	bl	8001720 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002282:	e022      	b.n	80022ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0210 	orr.w	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e01c      	b.n	80022da <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022a0:	f7ff fa3e 	bl	8001720 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d90d      	bls.n	80022ca <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e007      	b.n	80022da <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d0e3      	beq.n	80022a0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff47 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff5c 	bl	800232c <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffb0 	bl	8002404 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	e14e      	b.n	800275e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8140 	beq.w	8002758 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d00b      	beq.n	80024f8 <HAL_GPIO_Init+0x48>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d007      	beq.n	80024f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ec:	2b11      	cmp	r3, #17
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d130      	bne.n	800255a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252e:	2201      	movs	r2, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0201 	and.w	r2, r3, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0xea>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b12      	cmp	r3, #18
 8002598:	d123      	bne.n	80025e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	08da      	lsrs	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3208      	adds	r2, #8
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0203 	and.w	r2, r3, #3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 809a 	beq.w	8002758 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002624:	4b55      	ldr	r3, [pc, #340]	; (800277c <HAL_GPIO_Init+0x2cc>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a54      	ldr	r2, [pc, #336]	; (800277c <HAL_GPIO_Init+0x2cc>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6193      	str	r3, [r2, #24]
 8002630:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_GPIO_Init+0x2cc>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800263c:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_GPIO_Init+0x2d0>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002666:	d013      	beq.n	8002690 <HAL_GPIO_Init+0x1e0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a46      	ldr	r2, [pc, #280]	; (8002784 <HAL_GPIO_Init+0x2d4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_GPIO_Init+0x1dc>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a45      	ldr	r2, [pc, #276]	; (8002788 <HAL_GPIO_Init+0x2d8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_Init+0x1d8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a44      	ldr	r2, [pc, #272]	; (800278c <HAL_GPIO_Init+0x2dc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_GPIO_Init+0x1d4>
 8002680:	2303      	movs	r3, #3
 8002682:	e006      	b.n	8002692 <HAL_GPIO_Init+0x1e2>
 8002684:	2305      	movs	r3, #5
 8002686:	e004      	b.n	8002692 <HAL_GPIO_Init+0x1e2>
 8002688:	2302      	movs	r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x1e2>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_GPIO_Init+0x1e2>
 8002690:	2300      	movs	r3, #0
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	f002 0203 	and.w	r2, r2, #3
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4093      	lsls	r3, r2
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026a2:	4937      	ldr	r1, [pc, #220]	; (8002780 <HAL_GPIO_Init+0x2d0>)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026d4:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026fe:	4a24      	ldr	r2, [pc, #144]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002752:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_GPIO_Init+0x2e0>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	f47f aea9 	bne.w	80024c0 <HAL_GPIO_Init+0x10>
  }
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40021000 	.word	0x40021000
 8002780:	40010000 	.word	0x40010000
 8002784:	48000400 	.word	0x48000400
 8002788:	48000800 	.word	0x48000800
 800278c:	48000c00 	.word	0x48000c00
 8002790:	40010400 	.word	0x40010400

08002794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f000 bef4 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 816a 	beq.w	8002af2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800281e:	4bb3      	ldr	r3, [pc, #716]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800282a:	4bb0      	ldr	r3, [pc, #704]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d159      	bne.n	80028ea <HAL_RCC_OscConfig+0xf6>
 8002836:	4bad      	ldr	r3, [pc, #692]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d152      	bne.n	80028ea <HAL_RCC_OscConfig+0xf6>
 8002844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002848:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002858:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_RCC_OscConfig+0x82>
 8002870:	4b9e      	ldr	r3, [pc, #632]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e015      	b.n	80028a2 <HAL_RCC_OscConfig+0xae>
 8002876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800288a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002892:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800289e:	4b93      	ldr	r3, [pc, #588]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80028aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028ae:	fa92 f2a2 	rbit	r2, r2
 80028b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80028b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80028ba:	fab2 f282 	clz	r2, r2
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f002 021f 	and.w	r2, r2, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f202 	lsl.w	r2, r1, r2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 810c 	beq.w	8002af0 <HAL_RCC_OscConfig+0x2fc>
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 8106 	bne.w	8002af0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f000 be86 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x110>
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7c      	ldr	r2, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e030      	b.n	8002966 <HAL_RCC_OscConfig+0x172>
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x134>
 800290e:	4b77      	ldr	r3, [pc, #476]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a76      	ldr	r2, [pc, #472]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b74      	ldr	r3, [pc, #464]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01e      	b.n	8002966 <HAL_RCC_OscConfig+0x172>
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x15a>
 8002934:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6c      	ldr	r2, [pc, #432]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 800293a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a69      	ldr	r2, [pc, #420]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0x172>
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a66      	ldr	r2, [pc, #408]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b64      	ldr	r3, [pc, #400]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002964:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002966:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f023 020f 	bic.w	r2, r3, #15
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	495d      	ldr	r1, [pc, #372]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d059      	beq.n	8002a38 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fecc 	bl	8001720 <HAL_GetTick>
 8002988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298e:	f7fe fec7 	bl	8001720 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d902      	bls.n	80029a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	f000 be29 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>
 80029a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80029b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HAL_RCC_OscConfig+0x1e2>
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x20e>
 80029d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a06:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a0a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a16:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	f002 021f 	and.w	r2, r2, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ab      	beq.n	800298e <HAL_RCC_OscConfig+0x19a>
 8002a36:	e05c      	b.n	8002af2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fe72 	bl	8001720 <HAL_GetTick>
 8002a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a42:	f7fe fe6d 	bl	8001720 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d902      	bls.n	8002a58 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f000 bdcf 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a6c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_OscConfig+0x296>
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x2c2>
 8002a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002aa6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_RCC_OscConfig+0x2f8>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002abe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002aca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ab      	bne.n	8002a42 <HAL_RCC_OscConfig+0x24e>
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_OscConfig+0x2fe>
 8002aec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 816f 	beq.w	8002de0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b02:	4bd0      	ldr	r3, [pc, #832]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b0e:	4bcd      	ldr	r3, [pc, #820]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d16c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x400>
 8002b1a:	4bca      	ldr	r3, [pc, #808]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d166      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x400>
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b38:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_OscConfig+0x362>
 8002b50:	4bbc      	ldr	r3, [pc, #752]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e013      	b.n	8002b7e <HAL_RCC_OscConfig+0x38a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b7a:	4bb2      	ldr	r3, [pc, #712]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b84:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b88:	fa92 f2a2 	rbit	r2, r2
 8002b8c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b90:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x3cc>
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f000 bd1b 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	21f8      	movs	r1, #248	; 0xf8
 8002bd0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002bd8:	fa91 f1a1 	rbit	r1, r1
 8002bdc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002be0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002be4:	fab1 f181 	clz	r1, r1
 8002be8:	b2c9      	uxtb	r1, r1
 8002bea:	408b      	lsls	r3, r1
 8002bec:	4995      	ldr	r1, [pc, #596]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	e0f5      	b.n	8002de0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8085 	beq.w	8002d0a <HAL_RCC_OscConfig+0x516>
 8002c00:	2301      	movs	r3, #1
 8002c02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	461a      	mov	r2, r3
 8002c28:	2301      	movs	r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd78 	bl	8001720 <HAL_GetTick>
 8002c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c36:	f7fe fd73 	bl	8001720 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d902      	bls.n	8002c4c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	f000 bcd5 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_RCC_OscConfig+0x488>
 8002c76:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e013      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4b0>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002caa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002cae:	fa92 f2a2 	rbit	r2, r2
 8002cb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002cb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002cba:	fab2 f282 	clz	r2, r2
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	f042 0220 	orr.w	r2, r2, #32
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f002 021f 	and.w	r2, r2, #31
 8002cca:	2101      	movs	r1, #1
 8002ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0af      	beq.n	8002c36 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	21f8      	movs	r1, #248	; 0xf8
 8002ce6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cee:	fa91 f1a1 	rbit	r1, r1
 8002cf2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cf6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cfa:	fab1 f181 	clz	r1, r1
 8002cfe:	b2c9      	uxtb	r1, r1
 8002d00:	408b      	lsls	r3, r1
 8002d02:	4950      	ldr	r1, [pc, #320]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e06a      	b.n	8002de0 <HAL_RCC_OscConfig+0x5ec>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2300      	movs	r3, #0
 8002d34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fcf3 	bl	8001720 <HAL_GetTick>
 8002d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fcee 	bl	8001720 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d902      	bls.n	8002d56 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f000 bc50 	b.w	80035f6 <HAL_RCC_OscConfig+0xe02>
 8002d56:	2302      	movs	r3, #2
 8002d58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x592>
 8002d80:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e013      	b.n	8002dae <HAL_RCC_OscConfig+0x5ba>
 8002d86:	2302      	movs	r3, #2
 8002d88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x650>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2202      	movs	r2, #2
 8002db0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002db4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002dc0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f042 0220 	orr.w	r2, r2, #32
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f002 021f 	and.w	r2, r2, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1af      	bne.n	8002d40 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80da 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d069      	beq.n	8002ece <HAL_RCC_OscConfig+0x6da>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_OscConfig+0x654>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fc7c 	bl	8001720 <HAL_GetTick>
 8002e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	e00e      	b.n	8002e4c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fe fc77 	bl	8001720 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d906      	bls.n	8002e4c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e3d9      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	10908120 	.word	0x10908120
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e62:	2202      	movs	r2, #2
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8e:	4ba5      	ldr	r3, [pc, #660]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8002e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e96:	2102      	movs	r1, #2
 8002e98:	6019      	str	r1, [r3, #0]
 8002e9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f1a3 	rbit	r1, r3
 8002ea4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ea8:	6019      	str	r1, [r3, #0]
  return result;
 8002eaa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0b0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x63a>
 8002ecc:	e06a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x7b0>
 8002ece:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ee4:	601a      	str	r2, [r3, #0]
  return result;
 8002ee6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002eea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <HAL_RCC_OscConfig+0x934>)
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	461a      	mov	r2, r3
 8002efc:	2300      	movs	r3, #0
 8002efe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fc0e 	bl	8001720 <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fc09 	bl	8001720 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e36b      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 8002f1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002f22:	2202      	movs	r2, #2
 8002f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f52:	2202      	movs	r2, #2
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	fa93 f2a3 	rbit	r2, r3
 8002f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8002f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f6e:	2102      	movs	r1, #2
 8002f70:	6019      	str	r1, [r3, #0]
 8002f72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f1a3 	rbit	r1, r3
 8002f7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f80:	6019      	str	r1, [r3, #0]
  return result;
 8002f82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1b2      	bne.n	8002f0a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8158 	beq.w	8003264 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d112      	bne.n	8002fec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	61d3      	str	r3, [r2, #28]
 8002fd2:	4b54      	ldr	r3, [pc, #336]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <HAL_RCC_OscConfig+0x938>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11a      	bne.n	800302e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <HAL_RCC_OscConfig+0x938>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_RCC_OscConfig+0x938>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003004:	f7fe fb8c 	bl	8001720 <HAL_GetTick>
 8003008:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e009      	b.n	8003022 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe fb87 	bl	8001720 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e2e9      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b42      	ldr	r3, [pc, #264]	; (800312c <HAL_RCC_OscConfig+0x938>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x852>
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a39      	ldr	r2, [pc, #228]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	e02f      	b.n	80030a6 <HAL_RCC_OscConfig+0x8b2>
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x876>
 8003050:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e01d      	b.n	80030a6 <HAL_RCC_OscConfig+0x8b2>
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x89a>
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x8b2>
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d06b      	beq.n	8003188 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fb36 	bl	8001720 <HAL_GetTick>
 80030b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00b      	b.n	80030d2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe fb31 	bl	8001720 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e291      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 80030d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80030d6:	2202      	movs	r2, #2
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030ee:	2202      	movs	r2, #2
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003100:	601a      	str	r2, [r3, #0]
  return result;
 8003102:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003106:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d109      	bne.n	8003130 <HAL_RCC_OscConfig+0x93c>
 800311c:	4b01      	ldr	r3, [pc, #4]	; (8003124 <HAL_RCC_OscConfig+0x930>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	e014      	b.n	800314c <HAL_RCC_OscConfig+0x958>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	10908120 	.word	0x10908120
 800312c:	40007000 	.word	0x40007000
 8003130:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003134:	2202      	movs	r2, #2
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	4bbb      	ldr	r3, [pc, #748]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003150:	2102      	movs	r1, #2
 8003152:	6011      	str	r1, [r2, #0]
 8003154:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	fa92 f1a2 	rbit	r1, r2
 800315e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003162:	6011      	str	r1, [r2, #0]
  return result;
 8003164:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	f002 021f 	and.w	r2, r2, #31
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d099      	beq.n	80030ba <HAL_RCC_OscConfig+0x8c6>
 8003186:	e063      	b.n	8003250 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003188:	f7fe faca 	bl	8001720 <HAL_GetTick>
 800318c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00b      	b.n	80031aa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fac5 	bl	8001720 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e225      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 80031aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031c6:	2202      	movs	r2, #2
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031d8:	601a      	str	r2, [r3, #0]
  return result;
 80031da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0302 	orr.w	r3, r3, #2
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_OscConfig+0xa06>
 80031f4:	4b90      	ldr	r3, [pc, #576]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	e00d      	b.n	8003216 <HAL_RCC_OscConfig+0xa22>
 80031fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800321a:	2102      	movs	r1, #2
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	fa92 f1a2 	rbit	r1, r2
 8003228:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800322c:	6011      	str	r1, [r2, #0]
  return result;
 800322e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1a0      	bne.n	8003192 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003250:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b77      	ldr	r3, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4a76      	ldr	r2, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 81c2 	beq.w	80035f4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003270:	4b71      	ldr	r3, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	f000 819c 	beq.w	80035b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b02      	cmp	r3, #2
 8003286:	f040 8114 	bne.w	80034b2 <HAL_RCC_OscConfig+0xcbe>
 800328a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800328e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80032a2:	601a      	str	r2, [r3, #0]
  return result;
 80032a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80032a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	461a      	mov	r2, r3
 80032bc:	2300      	movs	r3, #0
 80032be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fa2e 	bl	8001720 <HAL_GetTick>
 80032c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	e009      	b.n	80032de <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fa29 	bl	8001720 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e18b      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 80032de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032f6:	601a      	str	r2, [r3, #0]
  return result;
 80032f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_RCC_OscConfig+0xb24>
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e01b      	b.n	8003350 <HAL_RCC_OscConfig+0xb5c>
 8003318:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800331c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003354:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003358:	6011      	str	r1, [r2, #0]
 800335a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	fa92 f1a2 	rbit	r1, r2
 8003364:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003368:	6011      	str	r1, [r2, #0]
  return result;
 800336a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	fab2 f282 	clz	r2, r2
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f042 0220 	orr.w	r2, r2, #32
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f002 021f 	and.w	r2, r2, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d19e      	bne.n	80032ca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	4925      	ldr	r1, [pc, #148]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033c0:	601a      	str	r2, [r3, #0]
  return result;
 80033c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	461a      	mov	r2, r3
 80033da:	2301      	movs	r3, #1
 80033dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe f99f 	bl	8001720 <HAL_GetTick>
 80033e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e6:	e009      	b.n	80033fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe f99a 	bl	8001720 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e0fc      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 80033fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	fa93 f2a3 	rbit	r2, r3
 8003410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003414:	601a      	str	r2, [r3, #0]
  return result;
 8003416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800341a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_RCC_OscConfig+0xc48>
 8003430:	4b01      	ldr	r3, [pc, #4]	; (8003438 <HAL_RCC_OscConfig+0xc44>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	e01e      	b.n	8003474 <HAL_RCC_OscConfig+0xc80>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800345a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_OscConfig+0xe0c>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003478:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	fa92 f1a2 	rbit	r1, r2
 8003488:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800348c:	6011      	str	r1, [r2, #0]
  return result;
 800348e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d09b      	beq.n	80033e8 <HAL_RCC_OscConfig+0xbf4>
 80034b0:	e0a0      	b.n	80035f4 <HAL_RCC_OscConfig+0xe00>
 80034b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ca:	601a      	str	r2, [r3, #0]
  return result;
 80034cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	461a      	mov	r2, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe f91a 	bl	8001720 <HAL_GetTick>
 80034ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f0:	e009      	b.n	8003506 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe f915 	bl	8001720 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e077      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
 8003506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	601a      	str	r2, [r3, #0]
  return result;
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0xd4c>
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_OscConfig+0xe0c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	e01b      	b.n	8003578 <HAL_RCC_OscConfig+0xd84>
 8003540:	f107 0320 	add.w	r3, r7, #32
 8003544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f107 0320 	add.w	r3, r7, #32
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f2a3 	rbit	r2, r3
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f107 0318 	add.w	r3, r7, #24
 800355e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f107 0318 	add.w	r3, r7, #24
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_OscConfig+0xe0c>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f107 0210 	add.w	r2, r7, #16
 800357c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003580:	6011      	str	r1, [r2, #0]
 8003582:	f107 0210 	add.w	r2, r7, #16
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	fa92 f1a2 	rbit	r1, r2
 800358c:	f107 020c 	add.w	r2, r7, #12
 8003590:	6011      	str	r1, [r2, #0]
  return result;
 8003592:	f107 020c 	add.w	r2, r7, #12
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	fab2 f282 	clz	r2, r2
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f042 0220 	orr.w	r2, r2, #32
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f002 021f 	and.w	r2, r2, #31
 80035a8:	2101      	movs	r1, #1
 80035aa:	fa01 f202 	lsl.w	r2, r1, r2
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d19e      	bne.n	80034f2 <HAL_RCC_OscConfig+0xcfe>
 80035b4:	e01e      	b.n	80035f4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e018      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_RCC_OscConfig+0xe0c>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b09e      	sub	sp, #120	; 0x78
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e162      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b90      	ldr	r3, [pc, #576]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b8d      	ldr	r3, [pc, #564]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	498b      	ldr	r1, [pc, #556]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b89      	ldr	r3, [pc, #548]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e14a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b82      	ldr	r3, [pc, #520]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	497f      	ldr	r1, [pc, #508]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80dc 	beq.w	8003830 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d13c      	bne.n	80036fa <HAL_RCC_ClockConfig+0xf6>
 8003680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003684:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_ClockConfig+0xa6>
 80036a4:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	e00f      	b.n	80036ca <HAL_RCC_ClockConfig+0xc6>
 80036aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	667b      	str	r3, [r7, #100]	; 0x64
 80036b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036bc:	663b      	str	r3, [r7, #96]	; 0x60
 80036be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c6:	4b67      	ldr	r3, [pc, #412]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80036d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d2:	fa92 f2a2 	rbit	r2, r2
 80036d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d17b      	bne.n	80037ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0f3      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d13c      	bne.n	800377c <HAL_RCC_ClockConfig+0x178>
 8003702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003706:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_RCC_ClockConfig+0x128>
 8003726:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	e00f      	b.n	800374c <HAL_RCC_ClockConfig+0x148>
 800372c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003730:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
 800373a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
 8003740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003750:	63ba      	str	r2, [r7, #56]	; 0x38
 8003752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003754:	fa92 f2a2 	rbit	r2, r2
 8003758:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800375a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800375c:	fab2 f282 	clz	r2, r2
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	f042 0220 	orr.w	r2, r2, #32
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f002 021f 	and.w	r2, r2, #31
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f202 	lsl.w	r2, r1, r2
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d13a      	bne.n	80037ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b2      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
 800377c:	2302      	movs	r3, #2
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	e00d      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1bc>
 80037a4:	2302      	movs	r3, #2
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	2302      	movs	r3, #2
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	4b29      	ldr	r3, [pc, #164]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2202      	movs	r2, #2
 80037c2:	61ba      	str	r2, [r7, #24]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	fa92 f2a2 	rbit	r2, r2
 80037ca:	617a      	str	r2, [r7, #20]
  return result;
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	fab2 f282 	clz	r2, r2
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f042 0220 	orr.w	r2, r2, #32
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f002 021f 	and.w	r2, r2, #31
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e079      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	491a      	ldr	r1, [pc, #104]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7fd ff8e 	bl	8001720 <HAL_GetTick>
 8003804:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fd ff8a 	bl	8001720 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e061      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_RCC_ClockConfig+0x260>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d214      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4906      	ldr	r1, [pc, #24]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_ClockConfig+0x25c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e040      	b.n	80038e2 <HAL_RCC_ClockConfig+0x2de>
 8003860:	40022000 	.word	0x40022000
 8003864:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_ClockConfig+0x2e8>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	491a      	ldr	r1, [pc, #104]	; (80038ec <HAL_RCC_ClockConfig+0x2e8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_RCC_ClockConfig+0x2e8>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4912      	ldr	r1, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x2e8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038a6:	f000 f829 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038aa:	4601      	mov	r1, r0
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_RCC_ClockConfig+0x2e8>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b4:	22f0      	movs	r2, #240	; 0xf0
 80038b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	fa92 f2a2 	rbit	r2, r2
 80038be:	60fa      	str	r2, [r7, #12]
  return result;
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	fab2 f282 	clz	r2, r2
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	40d3      	lsrs	r3, r2
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x2ec>)
 80038cc:	5cd3      	ldrb	r3, [r2, r3]
 80038ce:	fa21 f303 	lsr.w	r3, r1, r3
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <HAL_RCC_ClockConfig+0x2f0>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_RCC_ClockConfig+0x2f4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fedc 	bl	8001698 <HAL_InitTick>
  
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3778      	adds	r7, #120	; 0x78
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	08009ff0 	.word	0x08009ff0
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b08b      	sub	sp, #44	; 0x2c
 8003900:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x30>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x36>
 800392a:	e03c      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800392c:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800392e:	623b      	str	r3, [r7, #32]
      break;
 8003930:	e03c      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003938:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800393c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	fa92 f2a2 	rbit	r2, r2
 8003944:	607a      	str	r2, [r7, #4]
  return result;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	fab2 f282 	clz	r2, r2
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	40d3      	lsrs	r3, r2
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	220f      	movs	r2, #15
 8003960:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	fa92 f2a2 	rbit	r2, r2
 8003968:	60fa      	str	r2, [r7, #12]
  return result;
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	fab2 f282 	clz	r2, r2
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	40d3      	lsrs	r3, r2
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	fbb2 f2f3 	udiv	r2, r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	e004      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	623b      	str	r3, [r7, #32]
      break;
 80039a4:	e002      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039a8:	623b      	str	r3, [r7, #32]
      break;
 80039aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ac:	6a3b      	ldr	r3, [r7, #32]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	372c      	adds	r7, #44	; 0x2c
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	0800a008 	.word	0x0800a008
 80039c8:	0800a018 	.word	0x0800a018
 80039cc:	003d0900 	.word	0x003d0900

080039d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000000 	.word	0x20000000

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039ee:	f7ff ffef 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	fa92 f2a2 	rbit	r2, r2
 8003a08:	603a      	str	r2, [r7, #0]
  return result;
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	40d3      	lsrs	r3, r2
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	0800a000 	.word	0x0800a000

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a32:	f7ff ffcd 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a36:	4601      	mov	r1, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	fa92 f2a2 	rbit	r2, r2
 8003a4c:	603a      	str	r2, [r7, #0]
  return result;
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	40d3      	lsrs	r3, r2
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800a000 	.word	0x0800a000

08003a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b092      	sub	sp, #72	; 0x48
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80cd 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a94:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10e      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b83      	ldr	r3, [pc, #524]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4a82      	ldr	r2, [pc, #520]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	61d3      	str	r3, [r2, #28]
 8003aac:	4b80      	ldr	r3, [pc, #512]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	4b7d      	ldr	r3, [pc, #500]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aca:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fe23 	bl	8001720 <HAL_GetTick>
 8003ada:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fd fe1f 	bl	8001720 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	; 0x64
 8003aea:	d901      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0db      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003afc:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d07d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d076      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b1a:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b5e      	ldr	r3, [pc, #376]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	461a      	mov	r2, r3
 8003b44:	2301      	movs	r3, #1
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	461a      	mov	r2, r3
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b6c:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b70:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d045      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fdd0 	bl	8001720 <HAL_GetTick>
 8003b80:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7fd fdcc 	bl	8001720 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e086      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d102      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	e007      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2202      	movs	r2, #2
 8003be0:	613a      	str	r2, [r7, #16]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	fa92 f2a2 	rbit	r2, r2
 8003be8:	60fa      	str	r2, [r7, #12]
  return result;
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f002 021f 	and.w	r2, r2, #31
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0bd      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c08:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4926      	ldr	r1, [pc, #152]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	491a      	ldr	r1, [pc, #104]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f023 0210 	bic.w	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4912      	ldr	r1, [pc, #72]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	490b      	ldr	r1, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3748      	adds	r7, #72	; 0x48
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	10908100 	.word	0x10908100

08003cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e095      	b.n	8003dfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cde:	d009      	beq.n	8003cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61da      	str	r2, [r3, #28]
 8003ce6:	e005      	b.n	8003cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fac6 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d34:	d902      	bls.n	8003d3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e002      	b.n	8003d42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d4a:	d007      	beq.n	8003d5c <HAL_SPI_Init+0xa0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	ea42 0103 	orr.w	r1, r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	f003 0204 	and.w	r2, r3, #4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dd8:	ea42 0103 	orr.w	r1, r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e040      	b.n	8003e96 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd fbb3 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2224      	movs	r2, #36	; 0x24
 8003e2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8c1 	bl	8003fc8 <UART_SetConfig>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e022      	b.n	8003e96 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9eb 	bl	8004234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa72 	bl	8004378 <UART_CheckIdleState>
 8003e94:	4603      	mov	r3, r0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08a      	sub	sp, #40	; 0x28
 8003ea2:	af02      	add	r7, sp, #8
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 8082 	bne.w	8003fbc <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Transmit+0x26>
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e07a      	b.n	8003fbe <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Transmit+0x38>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e073      	b.n	8003fbe <HAL_UART_Transmit+0x120>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2221      	movs	r2, #33	; 0x21
 8003eea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eec:	f7fd fc18 	bl	8001720 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	d108      	bne.n	8003f1e <HAL_UART_Transmit+0x80>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e003      	b.n	8003f26 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f2e:	e02d      	b.n	8003f8c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fa65 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e039      	b.n	8003fbe <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	3302      	adds	r3, #2
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e008      	b.n	8003f7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b292      	uxth	r2, r2
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1cb      	bne.n	8003f30 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa31 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e005      	b.n	8003fbe <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b8a      	ldr	r3, [pc, #552]	; (800421c <UART_SetConfig+0x254>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	6979      	ldr	r1, [r7, #20]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a78      	ldr	r2, [pc, #480]	; (8004220 <UART_SetConfig+0x258>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d120      	bne.n	8004086 <UART_SetConfig+0xbe>
 8004044:	4b77      	ldr	r3, [pc, #476]	; (8004224 <UART_SetConfig+0x25c>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d817      	bhi.n	8004080 <UART_SetConfig+0xb8>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <UART_SetConfig+0x90>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	08004069 	.word	0x08004069
 800405c:	08004075 	.word	0x08004075
 8004060:	0800407b 	.word	0x0800407b
 8004064:	0800406f 	.word	0x0800406f
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e01d      	b.n	80040aa <UART_SetConfig+0xe2>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e01a      	b.n	80040aa <UART_SetConfig+0xe2>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e017      	b.n	80040aa <UART_SetConfig+0xe2>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e014      	b.n	80040aa <UART_SetConfig+0xe2>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e011      	b.n	80040aa <UART_SetConfig+0xe2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a67      	ldr	r2, [pc, #412]	; (8004228 <UART_SetConfig+0x260>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d102      	bne.n	8004096 <UART_SetConfig+0xce>
 8004090:	2300      	movs	r3, #0
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e009      	b.n	80040aa <UART_SetConfig+0xe2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a64      	ldr	r2, [pc, #400]	; (800422c <UART_SetConfig+0x264>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d102      	bne.n	80040a6 <UART_SetConfig+0xde>
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e001      	b.n	80040aa <UART_SetConfig+0xe2>
 80040a6:	2310      	movs	r3, #16
 80040a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b2:	d15b      	bne.n	800416c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d827      	bhi.n	800410a <UART_SetConfig+0x142>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0xf8>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7ff fc80 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80040e8:	61b8      	str	r0, [r7, #24]
        break;
 80040ea:	e013      	b.n	8004114 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7ff fc9e 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 80040f0:	61b8      	str	r0, [r7, #24]
        break;
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <UART_SetConfig+0x268>)
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e00c      	b.n	8004114 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7ff fbff 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80040fe:	61b8      	str	r0, [r7, #24]
        break;
 8004100:	e008      	b.n	8004114 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e004      	b.n	8004114 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	77bb      	strb	r3, [r7, #30]
        break;
 8004112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d074      	beq.n	8004204 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	005a      	lsls	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d916      	bls.n	8004166 <UART_SetConfig+0x19e>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d212      	bcs.n	8004166 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f023 030f 	bic.w	r3, r3, #15
 8004148:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b29a      	uxth	r2, r3
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	4313      	orrs	r3, r2
 800415a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	89fa      	ldrh	r2, [r7, #14]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	e04e      	b.n	8004204 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	77bb      	strb	r3, [r7, #30]
 800416a:	e04b      	b.n	8004204 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416c:	7ffb      	ldrb	r3, [r7, #31]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d827      	bhi.n	80041c2 <UART_SetConfig+0x1fa>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x1b0>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7ff fc24 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 80041a0:	61b8      	str	r0, [r7, #24]
        break;
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7ff fc42 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 80041a8:	61b8      	str	r0, [r7, #24]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b20      	ldr	r3, [pc, #128]	; (8004230 <UART_SetConfig+0x268>)
 80041ae:	61bb      	str	r3, [r7, #24]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7ff fba3 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80041b6:	61b8      	str	r0, [r7, #24]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	61bb      	str	r3, [r7, #24]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77bb      	strb	r3, [r7, #30]
        break;
 80041ca:	bf00      	nop
    }

    if (pclk != 0U)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d908      	bls.n	8004200 <UART_SetConfig+0x238>
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d204      	bcs.n	8004200 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004210:	7fbb      	ldrb	r3, [r7, #30]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	efff69f3 	.word	0xefff69f3
 8004220:	40013800 	.word	0x40013800
 8004224:	40021000 	.word	0x40021000
 8004228:	40004400 	.word	0x40004400
 800422c:	40004800 	.word	0x40004800
 8004230:	007a1200 	.word	0x007a1200

08004234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d10a      	bne.n	800434a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004388:	f7fd f9ca 	bl	8001720 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d10e      	bne.n	80043ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f82d 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e023      	b.n	8004402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d10e      	bne.n	80043e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f817 	bl	800440a <UART_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e00d      	b.n	8004402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441a:	e05e      	b.n	80044da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d05a      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004424:	f7fd f97c 	bl	8001720 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <UART_WaitOnFlagUntilTimeout+0x30>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d11b      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004448:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e043      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02c      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448e:	d124      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e00f      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d091      	beq.n	800441c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800450a:	f3ef 8305 	mrs	r3, IPSR
 800450e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004510:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8310 	mrs	r3, PRIMASK
 800451a:	607b      	str	r3, [r7, #4]
  return(result);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <osKernelInitialize+0x32>
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <osKernelInitialize+0x64>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d109      	bne.n	800453e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800452a:	f3ef 8311 	mrs	r3, BASEPRI
 800452e:	603b      	str	r3, [r7, #0]
  return(result);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004536:	f06f 0305 	mvn.w	r3, #5
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e00c      	b.n	8004558 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <osKernelInitialize+0x64>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <osKernelInitialize+0x64>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e002      	b.n	8004558 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	2000020c 	.word	0x2000020c

0800456c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004572:	f3ef 8305 	mrs	r3, IPSR
 8004576:	60bb      	str	r3, [r7, #8]
  return(result);
 8004578:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457e:	f3ef 8310 	mrs	r3, PRIMASK
 8004582:	607b      	str	r3, [r7, #4]
  return(result);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <osKernelStart+0x32>
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <osKernelStart+0x64>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d109      	bne.n	80045a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004592:	f3ef 8311 	mrs	r3, BASEPRI
 8004596:	603b      	str	r3, [r7, #0]
  return(result);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800459e:	f06f 0305 	mvn.w	r3, #5
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e00e      	b.n	80045c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <osKernelStart+0x64>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <osKernelStart+0x64>)
 80045b0:	2202      	movs	r2, #2
 80045b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80045b4:	f001 fa14 	bl	80059e0 <vTaskStartScheduler>
      stat = osOK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e002      	b.n	80045c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295
 80045c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045c4:	68fb      	ldr	r3, [r7, #12]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000020c 	.word	0x2000020c

080045d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b092      	sub	sp, #72	; 0x48
 80045d8:	af04      	add	r7, sp, #16
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e4:	f3ef 8305 	mrs	r3, IPSR
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8094 	bne.w	800471a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	623b      	str	r3, [r7, #32]
  return(result);
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 808d 	bne.w	800471a <osThreadNew+0x146>
 8004600:	4b48      	ldr	r3, [pc, #288]	; (8004724 <osThreadNew+0x150>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d106      	bne.n	8004616 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004608:	f3ef 8311 	mrs	r3, BASEPRI
 800460c:	61fb      	str	r3, [r7, #28]
  return(result);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8082 	bne.w	800471a <osThreadNew+0x146>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d07e      	beq.n	800471a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004620:	2318      	movs	r3, #24
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004624:	2300      	movs	r3, #0
 8004626:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004628:	f107 031b 	add.w	r3, r7, #27
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d045      	beq.n	80046c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osThreadNew+0x74>
        name = attr->name;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <osThreadNew+0x9a>
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	2b38      	cmp	r3, #56	; 0x38
 8004660:	d805      	bhi.n	800466e <osThreadNew+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <osThreadNew+0x9e>
        return (NULL);
 800466e:	2300      	movs	r3, #0
 8004670:	e054      	b.n	800471c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <osThreadNew+0xd4>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b5b      	cmp	r3, #91	; 0x5b
 8004690:	d90a      	bls.n	80046a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <osThreadNew+0xd4>
        mem = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a6:	e010      	b.n	80046ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10c      	bne.n	80046ca <osThreadNew+0xf6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <osThreadNew+0xf6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <osThreadNew+0xf6>
          mem = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c4:	e001      	b.n	80046ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d110      	bne.n	80046f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d8:	9202      	str	r2, [sp, #8]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 ffae 	bl	8005648 <xTaskCreateStatic>
 80046ec:	4603      	mov	r3, r0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e013      	b.n	800471a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d110      	bne.n	800471a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fff8 	bl	8005700 <xTaskCreate>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d001      	beq.n	800471a <osThreadNew+0x146>
          hTask = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800471a:	697b      	ldr	r3, [r7, #20]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3738      	adds	r7, #56	; 0x38
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	2000020c 	.word	0x2000020c

08004728 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004730:	f3ef 8305 	mrs	r3, IPSR
 8004734:	613b      	str	r3, [r7, #16]
  return(result);
 8004736:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473c:	f3ef 8310 	mrs	r3, PRIMASK
 8004740:	60fb      	str	r3, [r7, #12]
  return(result);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <osDelay+0x34>
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <osDelay+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d109      	bne.n	8004764 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004750:	f3ef 8311 	mrs	r3, BASEPRI
 8004754:	60bb      	str	r3, [r7, #8]
  return(result);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <osDelay+0x3c>
    stat = osErrorISR;
 800475c:	f06f 0305 	mvn.w	r3, #5
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e007      	b.n	8004774 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <osDelay+0x4c>
      vTaskDelay(ticks);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 f902 	bl	8005978 <vTaskDelay>
    }
  }

  return (stat);
 8004774:	697b      	ldr	r3, [r7, #20]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000020c 	.word	0x2000020c

08004784 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004794:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <vApplicationGetIdleTaskMemory+0x30>)
 800479a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000210 	.word	0x20000210
 80047b4:	2000026c 	.word	0x2000026c

080047b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a07      	ldr	r2, [pc, #28]	; (80047e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80047c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a06      	ldr	r2, [pc, #24]	; (80047e8 <vApplicationGetTimerTaskMemory+0x30>)
 80047ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d6:	601a      	str	r2, [r3, #0]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	2000046c 	.word	0x2000046c
 80047e8:	200004c8 	.word	0x200004c8

080047ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f103 0208 	add.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f103 0208 	add.w	r2, r3, #8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f103 0208 	add.w	r2, r3, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d103      	bne.n	80048ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e00c      	b.n	80048c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3308      	adds	r3, #8
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e002      	b.n	80048bc <vListInsert+0x2e>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d2f6      	bcs.n	80048b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6892      	ldr	r2, [r2, #8]
 8004916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6852      	ldr	r2, [r2, #4]
 8004920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d103      	bne.n	8004934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1e5a      	subs	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800497e:	f002 faa9 	bl	8006ed4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	441a      	add	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	3b01      	subs	r3, #1
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	441a      	add	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d114      	bne.n	80049fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01a      	beq.n	8004a12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3310      	adds	r3, #16
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fa8b 	bl	8005efc <xTaskRemoveFromEventList>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d012      	beq.n	8004a12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <xQueueGenericReset+0xcc>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	e009      	b.n	8004a12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3310      	adds	r3, #16
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fef2 	bl	80047ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3324      	adds	r3, #36	; 0x24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff feed 	bl	80047ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a12:	f002 fa8f 	bl	8006f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a16:	2301      	movs	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	; 0x38
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <xQueueGenericCreateStatic+0x52>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <xQueueGenericCreateStatic+0x56>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericCreateStatic+0x58>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	623b      	str	r3, [r7, #32]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <xQueueGenericCreateStatic+0x7e>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <xQueueGenericCreateStatic+0x82>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueGenericCreateStatic+0x84>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61fb      	str	r3, [r7, #28]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ac2:	2350      	movs	r3, #80	; 0x50
 8004ac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d00a      	beq.n	8004ae2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	61bb      	str	r3, [r7, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004af4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f843 	bl	8004b8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3730      	adds	r7, #48	; 0x30
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b08a      	sub	sp, #40	; 0x28
 8004b16:	af02      	add	r7, sp, #8
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	613b      	str	r3, [r7, #16]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	e004      	b.n	8004b52 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3350      	adds	r3, #80	; 0x50
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 fade 	bl	8007118 <pvPortMalloc>
 8004b5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00f      	beq.n	8004b84 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	3350      	adds	r3, #80	; 0x50
 8004b68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b72:	79fa      	ldrb	r2, [r7, #7]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f805 	bl	8004b8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b84:	69bb      	ldr	r3, [r7, #24]
	}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e002      	b.n	8004bb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	69b8      	ldr	r0, [r7, #24]
 8004bc0:	f7ff fec8 	bl	8004954 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00e      	beq.n	8004c00 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f81c 	bl	8004c38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c12:	2301      	movs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6939      	ldr	r1, [r7, #16]
 8004c20:	6978      	ldr	r0, [r7, #20]
 8004c22:	f7ff ff76 	bl	8004b12 <xQueueGenericCreate>
 8004c26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff ffd3 	bl	8004bd4 <prvInitialiseMutex>

		return pxNewQueue;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
	}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c46:	2300      	movs	r3, #0
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xQueueGenericSend+0x32>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <xQueueGenericSend+0x40>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <xQueueGenericSend+0x44>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <xQueueGenericSend+0x46>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <xQueueGenericSend+0x60>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d103      	bne.n	8004ca6 <xQueueGenericSend+0x6e>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <xQueueGenericSend+0x72>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericSend+0x74>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	623b      	str	r3, [r7, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc6:	f001 fadd 	bl	8006284 <xTaskGetSchedulerState>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xQueueGenericSend+0x9e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <xQueueGenericSend+0xa2>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueGenericSend+0xa4>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61fb      	str	r3, [r7, #28]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf6:	f002 f8ed 	bl	8006ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <xQueueGenericSend+0xd4>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d129      	bne.n	8004d60 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d12:	f000 fb2b 	bl	800536c <prvCopyDataToQueue>
 8004d16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d010      	beq.n	8004d42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	3324      	adds	r3, #36	; 0x24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 f8e9 	bl	8005efc <xTaskRemoveFromEventList>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d013      	beq.n	8004d58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d30:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <xQueueGenericSend+0x1f8>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	e00a      	b.n	8004d58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <xQueueGenericSend+0x1f8>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d58:	f002 f8ec 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e063      	b.n	8004e28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d66:	f002 f8e5 	bl	8006f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e05c      	b.n	8004e28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 f923 	bl	8005fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d82:	f002 f8d7 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d86:	f000 fe91 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d8a:	f002 f8a3 	bl	8006ed4 <vPortEnterCritical>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d103      	bne.n	8004da4 <xQueueGenericSend+0x16c>
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d103      	bne.n	8004dba <xQueueGenericSend+0x182>
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dba:	f002 f8bb 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dbe:	1d3a      	adds	r2, r7, #4
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 f912 	bl	8005ff0 <xTaskCheckForTimeOut>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d124      	bne.n	8004e1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd4:	f000 fbc2 	bl	800555c <prvIsQueueFull>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	3310      	adds	r3, #16
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 f838 	bl	8005e5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dee:	f000 fb4d 	bl	800548c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004df2:	f000 fe69 	bl	8005ac8 <xTaskResumeAll>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f47f af7c 	bne.w	8004cf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <xQueueGenericSend+0x1f8>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	e772      	b.n	8004cf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e12:	f000 fb3b 	bl	800548c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e16:	f000 fe57 	bl	8005ac8 <xTaskResumeAll>
 8004e1a:	e76c      	b.n	8004cf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e1e:	f000 fb35 	bl	800548c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e22:	f000 fe51 	bl	8005ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e26:	2300      	movs	r3, #0
		}
	}
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3738      	adds	r7, #56	; 0x38
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <xQueueGenericSendFromISR+0x3c>
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <xQueueGenericSendFromISR+0x40>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <xQueueGenericSendFromISR+0x42>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	623b      	str	r3, [r7, #32]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d103      	bne.n	8004e9e <xQueueGenericSendFromISR+0x6a>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <xQueueGenericSendFromISR+0x6e>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <xQueueGenericSendFromISR+0x70>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	61fb      	str	r3, [r7, #28]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ebe:	f002 f8eb 	bl	8007098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	61ba      	str	r2, [r7, #24]
 8004ed8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <xQueueGenericSendFromISR+0xbc>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d12c      	bne.n	8004f4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f00:	f000 fa34 	bl	800536c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d112      	bne.n	8004f34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d016      	beq.n	8004f44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 ffee 	bl	8005efc <xTaskRemoveFromEventList>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e007      	b.n	8004f44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	b25a      	sxtb	r2, r3
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f44:	2301      	movs	r3, #1
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f48:	e001      	b.n	8004f4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3738      	adds	r7, #56	; 0x38
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08c      	sub	sp, #48	; 0x30
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xQueueReceive+0x30>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	623b      	str	r3, [r7, #32]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <xQueueReceive+0x3e>
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <xQueueReceive+0x42>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <xQueueReceive+0x44>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueReceive+0x5e>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	61fb      	str	r3, [r7, #28]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc2:	f001 f95f 	bl	8006284 <xTaskGetSchedulerState>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <xQueueReceive+0x6e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <xQueueReceive+0x72>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <xQueueReceive+0x74>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <xQueueReceive+0x8e>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61bb      	str	r3, [r7, #24]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff2:	f001 ff6f 	bl	8006ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01f      	beq.n	8005042 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005006:	f000 fa1b 	bl	8005440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	3310      	adds	r3, #16
 800501e:	4618      	mov	r0, r3
 8005020:	f000 ff6c 	bl	8005efc <xTaskRemoveFromEventList>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <xQueueReceive+0x1bc>)
 800502c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800503a:	f001 ff7b 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 800503e:	2301      	movs	r3, #1
 8005040:	e069      	b.n	8005116 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005048:	f001 ff74 	bl	8006f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800504c:	2300      	movs	r3, #0
 800504e:	e062      	b.n	8005116 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005056:	f107 0310 	add.w	r3, r7, #16
 800505a:	4618      	mov	r0, r3
 800505c:	f000 ffb2 	bl	8005fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005064:	f001 ff66 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005068:	f000 fd20 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800506c:	f001 ff32 	bl	8006ed4 <vPortEnterCritical>
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005076:	b25b      	sxtb	r3, r3
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d103      	bne.n	8005086 <xQueueReceive+0x122>
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800508c:	b25b      	sxtb	r3, r3
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d103      	bne.n	800509c <xQueueReceive+0x138>
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800509c:	f001 ff4a 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050a0:	1d3a      	adds	r2, r7, #4
 80050a2:	f107 0310 	add.w	r3, r7, #16
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 ffa1 	bl	8005ff0 <xTaskCheckForTimeOut>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d123      	bne.n	80050fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b6:	f000 fa3b 	bl	8005530 <prvIsQueueEmpty>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d017      	beq.n	80050f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fec7 	bl	8005e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d0:	f000 f9dc 	bl	800548c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050d4:	f000 fcf8 	bl	8005ac8 <xTaskResumeAll>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d189      	bne.n	8004ff2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <xQueueReceive+0x1bc>)
 80050e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	e780      	b.n	8004ff2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f2:	f000 f9cb 	bl	800548c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050f6:	f000 fce7 	bl	8005ac8 <xTaskResumeAll>
 80050fa:	e77a      	b.n	8004ff2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fe:	f000 f9c5 	bl	800548c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005102:	f000 fce1 	bl	8005ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005108:	f000 fa12 	bl	8005530 <prvIsQueueEmpty>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	f43f af6f 	beq.w	8004ff2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005116:	4618      	mov	r0, r3
 8005118:	3730      	adds	r7, #48	; 0x30
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08e      	sub	sp, #56	; 0x38
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005136:	2300      	movs	r3, #0
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	623b      	str	r3, [r7, #32]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	61fb      	str	r3, [r7, #28]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005174:	f001 f886 	bl	8006284 <xTaskGetSchedulerState>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <xQueueSemaphoreTake+0x60>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <xQueueSemaphoreTake+0x64>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <xQueueSemaphoreTake+0x66>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61bb      	str	r3, [r7, #24]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a4:	f001 fe96 	bl	8006ed4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d024      	beq.n	80051fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	1e5a      	subs	r2, r3, #1
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80051c4:	f001 f9de 	bl	8006584 <pvTaskIncrementMutexHeldCount>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00f      	beq.n	80051f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	3310      	adds	r3, #16
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fe8e 	bl	8005efc <xTaskRemoveFromEventList>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <xQueueSemaphoreTake+0x214>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051f6:	f001 fe9d 	bl	8006f34 <vPortExitCritical>
				return pdPASS;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e097      	b.n	800532e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d111      	bne.n	8005228 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	617b      	str	r3, [r7, #20]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005220:	f001 fe88 	bl	8006f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005224:	2300      	movs	r3, #0
 8005226:	e082      	b.n	800532e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800522e:	f107 030c 	add.w	r3, r7, #12
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fec6 	bl	8005fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800523c:	f001 fe7a 	bl	8006f34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005240:	f000 fc34 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005244:	f001 fe46 	bl	8006ed4 <vPortEnterCritical>
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800524e:	b25b      	sxtb	r3, r3
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d103      	bne.n	800525e <xQueueSemaphoreTake+0x13a>
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005264:	b25b      	sxtb	r3, r3
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d103      	bne.n	8005274 <xQueueSemaphoreTake+0x150>
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005274:	f001 fe5e 	bl	8006f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005278:	463a      	mov	r2, r7
 800527a:	f107 030c 	add.w	r3, r7, #12
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f000 feb5 	bl	8005ff0 <xTaskCheckForTimeOut>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d132      	bne.n	80052f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800528c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800528e:	f000 f94f 	bl	8005530 <prvIsQueueEmpty>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d026      	beq.n	80052e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80052a0:	f001 fe18 	bl	8006ed4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 f809 	bl	80062c0 <xTaskPriorityInherit>
 80052ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80052b0:	f001 fe40 	bl	8006f34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	3324      	adds	r3, #36	; 0x24
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fdcd 	bl	8005e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052c4:	f000 f8e2 	bl	800548c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052c8:	f000 fbfe 	bl	8005ac8 <xTaskResumeAll>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f47f af68 	bne.w	80051a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <xQueueSemaphoreTake+0x214>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	e75e      	b.n	80051a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80052e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052e8:	f000 f8d0 	bl	800548c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ec:	f000 fbec 	bl	8005ac8 <xTaskResumeAll>
 80052f0:	e758      	b.n	80051a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80052f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052f4:	f000 f8ca 	bl	800548c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052f8:	f000 fbe6 	bl	8005ac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052fe:	f000 f917 	bl	8005530 <prvIsQueueEmpty>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	f43f af4d 	beq.w	80051a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00d      	beq.n	800532c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005310:	f001 fde0 	bl	8006ed4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005316:	f000 f811 	bl	800533c <prvGetDisinheritPriorityAfterTimeout>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f001 f8a8 	bl	8006478 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005328:	f001 fe04 	bl	8006f34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800532c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800532e:	4618      	mov	r0, r3
 8005330:	3738      	adds	r7, #56	; 0x38
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e001      	b.n	800535e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800535e:	68fb      	ldr	r3, [r7, #12]
	}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d14d      	bne.n	800542e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f800 	bl	800639c <xTaskPriorityDisinherit>
 800539c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	e043      	b.n	800542e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d119      	bne.n	80053e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6898      	ldr	r0, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	461a      	mov	r2, r3
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	f002 f8b2 	bl	8007520 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d32b      	bcc.n	800542e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	e026      	b.n	800542e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68d8      	ldr	r0, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	461a      	mov	r2, r3
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	f002 f898 	bl	8007520 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	425b      	negs	r3, r3
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d207      	bcs.n	800541c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	425b      	negs	r3, r3
 8005416:	441a      	add	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d105      	bne.n	800542e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3b01      	subs	r3, #1
 800542c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005436:	697b      	ldr	r3, [r7, #20]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	441a      	add	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d303      	bcc.n	8005474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68d9      	ldr	r1, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	461a      	mov	r2, r3
 800547e:	6838      	ldr	r0, [r7, #0]
 8005480:	f002 f84e 	bl	8007520 <memcpy>
	}
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005494:	f001 fd1e 	bl	8006ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a0:	e011      	b.n	80054c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d012      	beq.n	80054d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fd24 	bl	8005efc <xTaskRemoveFromEventList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ba:	f000 fdfb 	bl	80060b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	dce9      	bgt.n	80054a2 <prvUnlockQueue+0x16>
 80054ce:	e000      	b.n	80054d2 <prvUnlockQueue+0x46>
					break;
 80054d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054da:	f001 fd2b 	bl	8006f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054de:	f001 fcf9 	bl	8006ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ea:	e011      	b.n	8005510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d012      	beq.n	800551a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3310      	adds	r3, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fcff 	bl	8005efc <xTaskRemoveFromEventList>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005504:	f000 fdd6 	bl	80060b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	3b01      	subs	r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005514:	2b00      	cmp	r3, #0
 8005516:	dce9      	bgt.n	80054ec <prvUnlockQueue+0x60>
 8005518:	e000      	b.n	800551c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800551a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	22ff      	movs	r2, #255	; 0xff
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005524:	f001 fd06 	bl	8006f34 <vPortExitCritical>
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005538:	f001 fccc 	bl	8006ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e001      	b.n	800554e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800554e:	f001 fcf1 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005564:	f001 fcb6 	bl	8006ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	429a      	cmp	r2, r3
 8005572:	d102      	bne.n	800557a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e001      	b.n	800557e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f001 fcd9 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e014      	b.n	80055c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800559c:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <vQueueAddToRegistry+0x50>)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055a8:	490c      	ldr	r1, [pc, #48]	; (80055dc <vQueueAddToRegistry+0x50>)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <vQueueAddToRegistry+0x50>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055be:	e006      	b.n	80055ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b07      	cmp	r3, #7
 80055ca:	d9e7      	bls.n	800559c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20001c74 	.word	0x20001c74

080055e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055f0:	f001 fc70 	bl	8006ed4 <vPortEnterCritical>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d103      	bne.n	800560a <vQueueWaitForMessageRestricted+0x2a>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005610:	b25b      	sxtb	r3, r3
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d103      	bne.n	8005620 <vQueueWaitForMessageRestricted+0x40>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	f001 fc88 	bl	8006f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	2b00      	cmp	r3, #0
 800562a:	d106      	bne.n	800563a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3324      	adds	r3, #36	; 0x24
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fc35 	bl	8005ea4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f7ff ff26 	bl	800548c <prvUnlockQueue>
	}
 8005640:	bf00      	nop
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af04      	add	r7, sp, #16
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	623b      	str	r3, [r7, #32]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <xTaskCreateStatic+0x46>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	61fb      	str	r3, [r7, #28]
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800568e:	235c      	movs	r3, #92	; 0x5c
 8005690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b5c      	cmp	r3, #92	; 0x5c
 8005696:	d00a      	beq.n	80056ae <xTaskCreateStatic+0x66>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	61bb      	str	r3, [r7, #24]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01e      	beq.n	80056f2 <xTaskCreateStatic+0xaa>
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01b      	beq.n	80056f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056cc:	2300      	movs	r3, #0
 80056ce:	9303      	str	r3, [sp, #12]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	9302      	str	r3, [sp, #8]
 80056d4:	f107 0314 	add.w	r3, r7, #20
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f850 	bl	800578a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ec:	f000 f8d4 	bl	8005898 <prvAddNewTaskToReadyList>
 80056f0:	e001      	b.n	80056f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056f6:	697b      	ldr	r3, [r7, #20]
	}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08c      	sub	sp, #48	; 0x30
 8005704:	af04      	add	r7, sp, #16
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4618      	mov	r0, r3
 8005716:	f001 fcff 	bl	8007118 <pvPortMalloc>
 800571a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005722:	205c      	movs	r0, #92	; 0x5c
 8005724:	f001 fcf8 	bl	8007118 <pvPortMalloc>
 8005728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
 8005736:	e005      	b.n	8005744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f001 fdb1 	bl	80072a0 <vPortFree>
 800573e:	e001      	b.n	8005744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d017      	beq.n	800577a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	2300      	movs	r3, #0
 8005756:	9303      	str	r3, [sp, #12]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	9302      	str	r3, [sp, #8]
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f80e 	bl	800578a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800576e:	69f8      	ldr	r0, [r7, #28]
 8005770:	f000 f892 	bl	8005898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e002      	b.n	8005780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005780:	69bb      	ldr	r3, [r7, #24]
	}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b088      	sub	sp, #32
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	461a      	mov	r2, r3
 80057a2:	21a5      	movs	r1, #165	; 0xa5
 80057a4:	f001 feca 	bl	800753c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	3b01      	subs	r3, #1
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	617b      	str	r3, [r7, #20]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	e012      	b.n	800580e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	7819      	ldrb	r1, [r3, #0]
 80057f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	3334      	adds	r3, #52	; 0x34
 80057f8:	460a      	mov	r2, r1
 80057fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d006      	beq.n	8005816 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	3301      	adds	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d9e9      	bls.n	80057e8 <prvInitialiseNewTask+0x5e>
 8005814:	e000      	b.n	8005818 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005816:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b37      	cmp	r3, #55	; 0x37
 8005824:	d901      	bls.n	800582a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005826:	2337      	movs	r3, #55	; 0x37
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005834:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2200      	movs	r2, #0
 800583a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	3304      	adds	r3, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fff3 	bl	800482c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	3318      	adds	r3, #24
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe ffee 	bl	800482c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005854:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	69b8      	ldr	r0, [r7, #24]
 800587a:	f001 f9fd 	bl	8006c78 <pxPortInitialiseStack>
 800587e:	4602      	mov	r2, r0
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005890:	bf00      	nop
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fb18 	bl	8006ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a2c      	ldr	r2, [pc, #176]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ae:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058c4:	f000 fc1a 	bl	80060fc <prvInitialiseTaskLists>
 80058c8:	e00d      	b.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ca:	4b26      	ldr	r3, [pc, #152]	; (8005964 <prvAddNewTaskToReadyList+0xcc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058d2:	4b23      	ldr	r3, [pc, #140]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1e      	ldr	r2, [pc, #120]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <prvAddNewTaskToReadyList+0xd4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d903      	bls.n	800590c <prvAddNewTaskToReadyList+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <prvAddNewTaskToReadyList+0xd4>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a15      	ldr	r2, [pc, #84]	; (8005970 <prvAddNewTaskToReadyList+0xd8>)
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7fe ff8f 	bl	8004846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fb04 	bl	8006f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <prvAddNewTaskToReadyList+0xcc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	429a      	cmp	r2, r3
 8005940:	d207      	bcs.n	8005952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005942:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <prvAddNewTaskToReadyList+0xdc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000d9c 	.word	0x20000d9c
 8005960:	200008c8 	.word	0x200008c8
 8005964:	20000da8 	.word	0x20000da8
 8005968:	20000db8 	.word	0x20000db8
 800596c:	20000da4 	.word	0x20000da4
 8005970:	200008cc 	.word	0x200008cc
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <vTaskDelay+0x60>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <vTaskDelay+0x30>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059a8:	f000 f880 	bl	8005aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ac:	2100      	movs	r1, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fdfc 	bl	80065ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059b4:	f000 f888 	bl	8005ac8 <xTaskResumeAll>
 80059b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d107      	bne.n	80059d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <vTaskDelay+0x64>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000dc4 	.word	0x20000dc4
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ee:	463a      	mov	r2, r7
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fec4 	bl	8004784 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	9202      	str	r2, [sp, #8]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	4921      	ldr	r1, [pc, #132]	; (8005a94 <vTaskStartScheduler+0xb4>)
 8005a10:	4821      	ldr	r0, [pc, #132]	; (8005a98 <vTaskStartScheduler+0xb8>)
 8005a12:	f7ff fe19 	bl	8005648 <xTaskCreateStatic>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e001      	b.n	8005a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d102      	bne.n	8005a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a34:	f000 fe0e 	bl	8006654 <xTimerCreateTimerTask>
 8005a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d116      	bne.n	8005a6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <vTaskStartScheduler+0xc0>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <vTaskStartScheduler+0xc4>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <vTaskStartScheduler+0xc8>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a68:	f001 f992 	bl	8006d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a6c:	e00e      	b.n	8005a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d10a      	bne.n	8005a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskStartScheduler+0xaa>
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08009fb4 	.word	0x08009fb4
 8005a98:	080060cd 	.word	0x080060cd
 8005a9c:	20000dc0 	.word	0x20000dc0
 8005aa0:	20000dbc 	.word	0x20000dbc
 8005aa4:	20000da8 	.word	0x20000da8
 8005aa8:	20000da0 	.word	0x20000da0

08005aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a03      	ldr	r2, [pc, #12]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab8:	6013      	str	r3, [r2, #0]
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20000dc4 	.word	0x20000dc4

08005ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ad6:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <xTaskResumeAll+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	603b      	str	r3, [r7, #0]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005af4:	f001 f9ee 	bl	8006ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005af8:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <xTaskResumeAll+0x118>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a38      	ldr	r2, [pc, #224]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d162      	bne.n	8005bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <xTaskResumeAll+0x11c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d05e      	beq.n	8005bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b12:	e02f      	b.n	8005b74 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe feed 	bl	8004900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fee8 	bl	8004900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b2d      	ldr	r3, [pc, #180]	; (8005bec <xTaskResumeAll+0x124>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskResumeAll+0x7c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <xTaskResumeAll+0x124>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <xTaskResumeAll+0x128>)
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe fe73 	bl	8004846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <xTaskResumeAll+0x12c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b74:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1cb      	bne.n	8005b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b82:	f000 fb59 	bl	8006238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <xTaskResumeAll+0x134>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f000 f847 	bl	8005c24 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f1      	bne.n	8005b92 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <xTaskResumeAll+0x134>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskResumeAll+0x138>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd0:	f001 f9b0 	bl	8006f34 <vPortExitCritical>

	return xAlreadyYielded;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000dc4 	.word	0x20000dc4
 8005be4:	20000d9c 	.word	0x20000d9c
 8005be8:	20000d5c 	.word	0x20000d5c
 8005bec:	20000da4 	.word	0x20000da4
 8005bf0:	200008cc 	.word	0x200008cc
 8005bf4:	200008c8 	.word	0x200008c8
 8005bf8:	20000db0 	.word	0x20000db0
 8005bfc:	20000dac 	.word	0x20000dac
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <xTaskGetTickCount+0x1c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c10:	687b      	ldr	r3, [r7, #4]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000da0 	.word	0x20000da0

08005c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c2e:	4b51      	ldr	r3, [pc, #324]	; (8005d74 <xTaskIncrementTick+0x150>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 808e 	bne.w	8005d54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c38:	4b4f      	ldr	r3, [pc, #316]	; (8005d78 <xTaskIncrementTick+0x154>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c40:	4a4d      	ldr	r2, [pc, #308]	; (8005d78 <xTaskIncrementTick+0x154>)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d120      	bne.n	8005c8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c4c:	4b4b      	ldr	r3, [pc, #300]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskIncrementTick+0x46>
 8005c6c:	4b43      	ldr	r3, [pc, #268]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <xTaskIncrementTick+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a41      	ldr	r2, [pc, #260]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	4a41      	ldr	r2, [pc, #260]	; (8005d80 <xTaskIncrementTick+0x15c>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b40      	ldr	r3, [pc, #256]	; (8005d84 <xTaskIncrementTick+0x160>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a3f      	ldr	r2, [pc, #252]	; (8005d84 <xTaskIncrementTick+0x160>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	f000 fad5 	bl	8006238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c8e:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <xTaskIncrementTick+0x164>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d34e      	bcc.n	8005d36 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c98:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xTaskIncrementTick+0x82>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xTaskIncrementTick+0x84>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cac:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <xTaskIncrementTick+0x164>)
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb2:	601a      	str	r2, [r3, #0]
					break;
 8005cb4:	e03f      	b.n	8005d36 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cb6:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d203      	bcs.n	8005cd6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <xTaskIncrementTick+0x164>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6013      	str	r3, [r2, #0]
						break;
 8005cd4:	e02f      	b.n	8005d36 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fe10 	bl	8004900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fe07 	bl	8004900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <xTaskIncrementTick+0x168>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d903      	bls.n	8005d06 <xTaskIncrementTick+0xe2>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <xTaskIncrementTick+0x168>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <xTaskIncrementTick+0x16c>)
 8005d14:	441a      	add	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fe fd92 	bl	8004846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <xTaskIncrementTick+0x170>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3b3      	bcc.n	8005c98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d34:	e7b0      	b.n	8005c98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d36:	4b17      	ldr	r3, [pc, #92]	; (8005d94 <xTaskIncrementTick+0x170>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4914      	ldr	r1, [pc, #80]	; (8005d90 <xTaskIncrementTick+0x16c>)
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d907      	bls.n	8005d5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e004      	b.n	8005d5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d54:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <xTaskIncrementTick+0x174>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a0f      	ldr	r2, [pc, #60]	; (8005d98 <xTaskIncrementTick+0x174>)
 8005d5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <xTaskIncrementTick+0x178>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000dc4 	.word	0x20000dc4
 8005d78:	20000da0 	.word	0x20000da0
 8005d7c:	20000d54 	.word	0x20000d54
 8005d80:	20000d58 	.word	0x20000d58
 8005d84:	20000db4 	.word	0x20000db4
 8005d88:	20000dbc 	.word	0x20000dbc
 8005d8c:	20000da4 	.word	0x20000da4
 8005d90:	200008cc 	.word	0x200008cc
 8005d94:	200008c8 	.word	0x200008c8
 8005d98:	20000dac 	.word	0x20000dac
 8005d9c:	20000db0 	.word	0x20000db0

08005da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005da6:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <vTaskSwitchContext+0xa8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dae:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <vTaskSwitchContext+0xac>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005db4:	e041      	b.n	8005e3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005db6:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <vTaskSwitchContext+0xac>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <vTaskSwitchContext+0xb0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e010      	b.n	8005de6 <vTaskSwitchContext+0x46>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <vTaskSwitchContext+0x3e>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	491b      	ldr	r1, [pc, #108]	; (8005e54 <vTaskSwitchContext+0xb4>)
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0e4      	beq.n	8005dc4 <vTaskSwitchContext+0x24>
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <vTaskSwitchContext+0xb4>)
 8005e06:	4413      	add	r3, r2
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d104      	bne.n	8005e2a <vTaskSwitchContext+0x8a>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <vTaskSwitchContext+0xb8>)
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4a06      	ldr	r2, [pc, #24]	; (8005e50 <vTaskSwitchContext+0xb0>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6013      	str	r3, [r2, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000dc4 	.word	0x20000dc4
 8005e4c:	20000db0 	.word	0x20000db0
 8005e50:	20000da4 	.word	0x20000da4
 8005e54:	200008cc 	.word	0x200008cc
 8005e58:	200008c8 	.word	0x200008c8

08005e5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <vTaskPlaceOnEventList+0x44>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3318      	adds	r3, #24
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fe fcff 	bl	800488e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e90:	2101      	movs	r1, #1
 8005e92:	6838      	ldr	r0, [r7, #0]
 8005e94:	f000 fb8a 	bl	80065ac <prvAddCurrentTaskToDelayedList>
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200008c8 	.word	0x200008c8

08005ea4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	617b      	str	r3, [r7, #20]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7fe fcb6 	bl	8004846 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f000 fb5f 	bl	80065ac <prvAddCurrentTaskToDelayedList>
	}
 8005eee:	bf00      	nop
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200008c8 	.word	0x200008c8

08005efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60fb      	str	r3, [r7, #12]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	3318      	adds	r3, #24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fce7 	bl	8004900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f32:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <xTaskRemoveFromEventList+0xb0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11d      	bne.n	8005f76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fcde 	bl	8004900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <xTaskRemoveFromEventList+0xb4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d903      	bls.n	8005f58 <xTaskRemoveFromEventList+0x5c>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <xTaskRemoveFromEventList+0xb4>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <xTaskRemoveFromEventList+0xb8>)
 8005f66:	441a      	add	r2, r3
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f7fe fc69 	bl	8004846 <vListInsertEnd>
 8005f74:	e005      	b.n	8005f82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	480e      	ldr	r0, [pc, #56]	; (8005fb8 <xTaskRemoveFromEventList+0xbc>)
 8005f7e:	f7fe fc62 	bl	8004846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <xTaskRemoveFromEventList+0xc0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d905      	bls.n	8005f9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <xTaskRemoveFromEventList+0xc4>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e001      	b.n	8005fa0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005fa0:	697b      	ldr	r3, [r7, #20]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000dc4 	.word	0x20000dc4
 8005fb0:	20000da4 	.word	0x20000da4
 8005fb4:	200008cc 	.word	0x200008cc
 8005fb8:	20000d5c 	.word	0x20000d5c
 8005fbc:	200008c8 	.word	0x200008c8
 8005fc0:	20000db0 	.word	0x20000db0

08005fc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <vTaskInternalSetTimeOutState+0x24>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <vTaskInternalSetTimeOutState+0x28>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	605a      	str	r2, [r3, #4]
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000db4 	.word	0x20000db4
 8005fec:	20000da0 	.word	0x20000da0

08005ff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	60fb      	str	r3, [r7, #12]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006032:	f000 ff4f 	bl	8006ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006036:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <xTaskCheckForTimeOut+0xbc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604e:	d102      	bne.n	8006056 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	e023      	b.n	800609e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <xTaskCheckForTimeOut+0xc0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d007      	beq.n	8006072 <xTaskCheckForTimeOut+0x82>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	429a      	cmp	r2, r3
 800606a:	d302      	bcc.n	8006072 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	e015      	b.n	800609e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	d20b      	bcs.n	8006094 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	1ad2      	subs	r2, r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ff9b 	bl	8005fc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	e004      	b.n	800609e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800609a:	2301      	movs	r3, #1
 800609c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800609e:	f000 ff49 	bl	8006f34 <vPortExitCritical>

	return xReturn;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000da0 	.word	0x20000da0
 80060b0:	20000db4 	.word	0x20000db4

080060b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <vTaskMissedYield+0x14>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
}
 80060be:	bf00      	nop
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000db0 	.word	0x20000db0

080060cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060d4:	f000 f852 	bl	800617c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <prvIdleTask+0x28>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d9f9      	bls.n	80060d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <prvIdleTask+0x2c>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060f0:	e7f0      	b.n	80060d4 <prvIdleTask+0x8>
 80060f2:	bf00      	nop
 80060f4:	200008cc 	.word	0x200008cc
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006102:	2300      	movs	r3, #0
 8006104:	607b      	str	r3, [r7, #4]
 8006106:	e00c      	b.n	8006122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4a12      	ldr	r2, [pc, #72]	; (800615c <prvInitialiseTaskLists+0x60>)
 8006114:	4413      	add	r3, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fb68 	bl	80047ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3301      	adds	r3, #1
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b37      	cmp	r3, #55	; 0x37
 8006126:	d9ef      	bls.n	8006108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006128:	480d      	ldr	r0, [pc, #52]	; (8006160 <prvInitialiseTaskLists+0x64>)
 800612a:	f7fe fb5f 	bl	80047ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800612e:	480d      	ldr	r0, [pc, #52]	; (8006164 <prvInitialiseTaskLists+0x68>)
 8006130:	f7fe fb5c 	bl	80047ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006134:	480c      	ldr	r0, [pc, #48]	; (8006168 <prvInitialiseTaskLists+0x6c>)
 8006136:	f7fe fb59 	bl	80047ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800613a:	480c      	ldr	r0, [pc, #48]	; (800616c <prvInitialiseTaskLists+0x70>)
 800613c:	f7fe fb56 	bl	80047ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006140:	480b      	ldr	r0, [pc, #44]	; (8006170 <prvInitialiseTaskLists+0x74>)
 8006142:	f7fe fb53 	bl	80047ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <prvInitialiseTaskLists+0x78>)
 8006148:	4a05      	ldr	r2, [pc, #20]	; (8006160 <prvInitialiseTaskLists+0x64>)
 800614a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <prvInitialiseTaskLists+0x7c>)
 800614e:	4a05      	ldr	r2, [pc, #20]	; (8006164 <prvInitialiseTaskLists+0x68>)
 8006150:	601a      	str	r2, [r3, #0]
}
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	200008cc 	.word	0x200008cc
 8006160:	20000d2c 	.word	0x20000d2c
 8006164:	20000d40 	.word	0x20000d40
 8006168:	20000d5c 	.word	0x20000d5c
 800616c:	20000d70 	.word	0x20000d70
 8006170:	20000d88 	.word	0x20000d88
 8006174:	20000d54 	.word	0x20000d54
 8006178:	20000d58 	.word	0x20000d58

0800617c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006182:	e019      	b.n	80061b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006184:	f000 fea6 	bl	8006ed4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006188:	4b10      	ldr	r3, [pc, #64]	; (80061cc <prvCheckTasksWaitingTermination+0x50>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fbb3 	bl	8004900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <prvCheckTasksWaitingTermination+0x54>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3b01      	subs	r3, #1
 80061a0:	4a0b      	ldr	r2, [pc, #44]	; (80061d0 <prvCheckTasksWaitingTermination+0x54>)
 80061a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <prvCheckTasksWaitingTermination+0x58>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <prvCheckTasksWaitingTermination+0x58>)
 80061ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ae:	f000 fec1 	bl	8006f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f810 	bl	80061d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <prvCheckTasksWaitingTermination+0x58>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e1      	bne.n	8006184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000d70 	.word	0x20000d70
 80061d0:	20000d9c 	.word	0x20000d9c
 80061d4:	20000d84 	.word	0x20000d84

080061d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 f856 	bl	80072a0 <vPortFree>
				vPortFree( pxTCB );
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f853 	bl	80072a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061fa:	e018      	b.n	800622e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006202:	2b01      	cmp	r3, #1
 8006204:	d103      	bne.n	800620e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f84a 	bl	80072a0 <vPortFree>
	}
 800620c:	e00f      	b.n	800622e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006214:	2b02      	cmp	r3, #2
 8006216:	d00a      	beq.n	800622e <prvDeleteTCB+0x56>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60fb      	str	r3, [r7, #12]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <prvDeleteTCB+0x54>
	}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <prvResetNextTaskUnblockTime+0x44>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <prvResetNextTaskUnblockTime+0x14>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <prvResetNextTaskUnblockTime+0x16>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <prvResetNextTaskUnblockTime+0x48>)
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800625a:	e008      	b.n	800626e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvResetNextTaskUnblockTime+0x44>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4a05      	ldr	r2, [pc, #20]	; (8006280 <prvResetNextTaskUnblockTime+0x48>)
 800626c:	6013      	str	r3, [r2, #0]
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000d54 	.word	0x20000d54
 8006280:	20000dbc 	.word	0x20000dbc

08006284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <xTaskGetSchedulerState+0x34>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006292:	2301      	movs	r3, #1
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	e008      	b.n	80062aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <xTaskGetSchedulerState+0x38>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062a0:	2302      	movs	r3, #2
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	e001      	b.n	80062aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062aa:	687b      	ldr	r3, [r7, #4]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	20000da8 	.word	0x20000da8
 80062bc:	20000dc4 	.word	0x20000dc4

080062c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d056      	beq.n	8006384 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <xTaskPriorityInherit+0xd0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d246      	bcs.n	8006372 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db06      	blt.n	80062fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ec:	4b28      	ldr	r3, [pc, #160]	; (8006390 <xTaskPriorityInherit+0xd0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6959      	ldr	r1, [r3, #20]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4a22      	ldr	r2, [pc, #136]	; (8006394 <xTaskPriorityInherit+0xd4>)
 800630c:	4413      	add	r3, r2
 800630e:	4299      	cmp	r1, r3
 8006310:	d101      	bne.n	8006316 <xTaskPriorityInherit+0x56>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <xTaskPriorityInherit+0x58>
 8006316:	2300      	movs	r3, #0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d022      	beq.n	8006362 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	3304      	adds	r3, #4
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe faed 	bl	8004900 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006326:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <xTaskPriorityInherit+0xd0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	4b18      	ldr	r3, [pc, #96]	; (8006398 <xTaskPriorityInherit+0xd8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d903      	bls.n	8006344 <xTaskPriorityInherit+0x84>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <xTaskPriorityInherit+0xd8>)
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4a10      	ldr	r2, [pc, #64]	; (8006394 <xTaskPriorityInherit+0xd4>)
 8006352:	441a      	add	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7fe fa73 	bl	8004846 <vListInsertEnd>
 8006360:	e004      	b.n	800636c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <xTaskPriorityInherit+0xd0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800636c:	2301      	movs	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e008      	b.n	8006384 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <xTaskPriorityInherit+0xd0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	429a      	cmp	r2, r3
 800637e:	d201      	bcs.n	8006384 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006384:	68fb      	ldr	r3, [r7, #12]
	}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	200008c8 	.word	0x200008c8
 8006394:	200008cc 	.word	0x200008cc
 8006398:	20000da4 	.word	0x20000da4

0800639c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d056      	beq.n	8006460 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063b2:	4b2e      	ldr	r3, [pc, #184]	; (800646c <xTaskPriorityDisinherit+0xd0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d00a      	beq.n	80063d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60fb      	str	r3, [r7, #12]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60bb      	str	r3, [r7, #8]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006402:	429a      	cmp	r2, r3
 8006404:	d02c      	beq.n	8006460 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640a:	2b00      	cmp	r3, #0
 800640c:	d128      	bne.n	8006460 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fa74 	bl	8004900 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <xTaskPriorityDisinherit+0xd4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d903      	bls.n	8006440 <xTaskPriorityDisinherit+0xa4>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <xTaskPriorityDisinherit+0xd4>)
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <xTaskPriorityDisinherit+0xd8>)
 800644e:	441a      	add	r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7fe f9f5 	bl	8004846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006460:	697b      	ldr	r3, [r7, #20]
	}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200008c8 	.word	0x200008c8
 8006470:	20000da4 	.word	0x20000da4
 8006474:	200008cc 	.word	0x200008cc

08006478 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d06f      	beq.n	8006570 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d902      	bls.n	80064be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e002      	b.n	80064c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d050      	beq.n	8006570 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d14b      	bne.n	8006570 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064d8:	4b27      	ldr	r3, [pc, #156]	; (8006578 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d10a      	bne.n	80064f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60bb      	str	r3, [r7, #8]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db04      	blt.n	8006516 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	6959      	ldr	r1, [r3, #20]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006526:	4413      	add	r3, r2
 8006528:	4299      	cmp	r1, r3
 800652a:	d101      	bne.n	8006530 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006530:	2300      	movs	r3, #0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01c      	beq.n	8006570 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	3304      	adds	r3, #4
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe f9e0 	bl	8004900 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d903      	bls.n	8006554 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a0b      	ldr	r2, [pc, #44]	; (8006580 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4a06      	ldr	r2, [pc, #24]	; (800657c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006562:	441a      	add	r2, r3
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7fe f96b 	bl	8004846 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006570:	bf00      	nop
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200008c8 	.word	0x200008c8
 800657c:	200008cc 	.word	0x200008cc
 8006580:	20000da4 	.word	0x20000da4

08006584 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006596:	3201      	adds	r2, #1
 8006598:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800659a:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800659c:	681b      	ldr	r3, [r3, #0]
	}
 800659e:	4618      	mov	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	200008c8 	.word	0x200008c8

080065ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065b6:	4b21      	ldr	r3, [pc, #132]	; (800663c <prvAddCurrentTaskToDelayedList+0x90>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065bc:	4b20      	ldr	r3, [pc, #128]	; (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe f99c 	bl	8004900 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d10a      	bne.n	80065e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3304      	adds	r3, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	4819      	ldr	r0, [pc, #100]	; (8006644 <prvAddCurrentTaskToDelayedList+0x98>)
 80065e0:	f7fe f931 	bl	8004846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065e4:	e026      	b.n	8006634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d209      	bcs.n	8006612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fe f93f 	bl	800488e <vListInsert>
}
 8006610:	e010      	b.n	8006634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006612:	4b0e      	ldr	r3, [pc, #56]	; (800664c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe f935 	bl	800488e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	d202      	bcs.n	8006634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800662e:	4a08      	ldr	r2, [pc, #32]	; (8006650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6013      	str	r3, [r2, #0]
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000da0 	.word	0x20000da0
 8006640:	200008c8 	.word	0x200008c8
 8006644:	20000d88 	.word	0x20000d88
 8006648:	20000d58 	.word	0x20000d58
 800664c:	20000d54 	.word	0x20000d54
 8006650:	20000dbc 	.word	0x20000dbc

08006654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800665e:	f000 facb 	bl	8006bf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006662:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <xTimerCreateTimerTask+0x80>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d021      	beq.n	80066ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006672:	1d3a      	adds	r2, r7, #4
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe f89b 	bl	80047b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	9202      	str	r2, [sp, #8]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	2302      	movs	r3, #2
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	460a      	mov	r2, r1
 8006694:	4910      	ldr	r1, [pc, #64]	; (80066d8 <xTimerCreateTimerTask+0x84>)
 8006696:	4811      	ldr	r0, [pc, #68]	; (80066dc <xTimerCreateTimerTask+0x88>)
 8006698:	f7fe ffd6 	bl	8005648 <xTaskCreateStatic>
 800669c:	4603      	mov	r3, r0
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <xTimerCreateTimerTask+0x8c>)
 80066a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <xTimerCreateTimerTask+0x8c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066aa:	2301      	movs	r3, #1
 80066ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	613b      	str	r3, [r7, #16]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066ca:	697b      	ldr	r3, [r7, #20]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000df8 	.word	0x20000df8
 80066d8:	08009fbc 	.word	0x08009fbc
 80066dc:	08006801 	.word	0x08006801
 80066e0:	20000dfc 	.word	0x20000dfc

080066e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xTimerGenericCommand+0x2e>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006712:	4b1a      	ldr	r3, [pc, #104]	; (800677c <xTimerGenericCommand+0x98>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02a      	beq.n	8006770 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b05      	cmp	r3, #5
 800672a:	dc18      	bgt.n	800675e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800672c:	f7ff fdaa 	bl	8006284 <xTaskGetSchedulerState>
 8006730:	4603      	mov	r3, r0
 8006732:	2b02      	cmp	r3, #2
 8006734:	d109      	bne.n	800674a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <xTimerGenericCommand+0x98>)
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	f107 0110 	add.w	r1, r7, #16
 800673e:	2300      	movs	r3, #0
 8006740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006742:	f7fe fa79 	bl	8004c38 <xQueueGenericSend>
 8006746:	6278      	str	r0, [r7, #36]	; 0x24
 8006748:	e012      	b.n	8006770 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <xTimerGenericCommand+0x98>)
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	f107 0110 	add.w	r1, r7, #16
 8006752:	2300      	movs	r3, #0
 8006754:	2200      	movs	r2, #0
 8006756:	f7fe fa6f 	bl	8004c38 <xQueueGenericSend>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24
 800675c:	e008      	b.n	8006770 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <xTimerGenericCommand+0x98>)
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f107 0110 	add.w	r1, r7, #16
 8006766:	2300      	movs	r3, #0
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	f7fe fb63 	bl	8004e34 <xQueueGenericSendFromISR>
 800676e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006772:	4618      	mov	r0, r3
 8006774:	3728      	adds	r7, #40	; 0x28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000df8 	.word	0x20000df8

08006780 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <prvProcessExpiredTimer+0x7c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3304      	adds	r3, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe f8b1 	bl	8004900 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d122      	bne.n	80067ec <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	18d1      	adds	r1, r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	6978      	ldr	r0, [r7, #20]
 80067b4:	f000 f8c8 	bl	8006948 <prvInsertTimerInActiveList>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d016      	beq.n	80067ec <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	2100      	movs	r1, #0
 80067c8:	6978      	ldr	r0, [r7, #20]
 80067ca:	f7ff ff8b 	bl	80066e4 <xTimerGenericCommand>
 80067ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60fb      	str	r3, [r7, #12]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	6978      	ldr	r0, [r7, #20]
 80067f2:	4798      	blx	r3
}
 80067f4:	bf00      	nop
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000df0 	.word	0x20000df0

08006800 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f857 	bl	80068c0 <prvGetNextExpireTime>
 8006812:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4619      	mov	r1, r3
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f803 	bl	8006824 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800681e:	f000 f8d5 	bl	80069cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006822:	e7f1      	b.n	8006808 <prvTimerTask+0x8>

08006824 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800682e:	f7ff f93d 	bl	8005aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006832:	f107 0308 	add.w	r3, r7, #8
 8006836:	4618      	mov	r0, r3
 8006838:	f000 f866 	bl	8006908 <prvSampleTimeNow>
 800683c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d130      	bne.n	80068a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <prvProcessTimerOrBlockTask+0x3c>
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	429a      	cmp	r2, r3
 8006850:	d806      	bhi.n	8006860 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006852:	f7ff f939 	bl	8005ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff91 	bl	8006780 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800685e:	e024      	b.n	80068aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <prvProcessTimerOrBlockTask+0x90>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <prvProcessTimerOrBlockTask+0x94>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	4619      	mov	r1, r3
 8006886:	f7fe feab 	bl	80055e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800688a:	f7ff f91d 	bl	8005ac8 <xTaskResumeAll>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <prvProcessTimerOrBlockTask+0x98>)
 8006896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	f3bf 8f6f 	isb	sy
}
 80068a4:	e001      	b.n	80068aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068a6:	f7ff f90f 	bl	8005ac8 <xTaskResumeAll>
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000df4 	.word	0x20000df4
 80068b8:	20000df8 	.word	0x20000df8
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <prvGetNextExpireTime+0x44>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d105      	bne.n	80068f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <prvGetNextExpireTime+0x44>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e001      	b.n	80068f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20000df0 	.word	0x20000df0

08006908 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006910:	f7ff f978 	bl	8005c04 <xTaskGetTickCount>
 8006914:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <prvSampleTimeNow+0x3c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d205      	bcs.n	800692c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006920:	f000 f908 	bl	8006b34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e002      	b.n	8006932 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006932:	4a04      	ldr	r2, [pc, #16]	; (8006944 <prvSampleTimeNow+0x3c>)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000e00 	.word	0x20000e00

08006948 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	429a      	cmp	r2, r3
 800696c:	d812      	bhi.n	8006994 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e01b      	b.n	80069ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <prvInsertTimerInActiveList+0x7c>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fd ff7e 	bl	800488e <vListInsert>
 8006992:	e012      	b.n	80069ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d206      	bcs.n	80069aa <prvInsertTimerInActiveList+0x62>
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e007      	b.n	80069ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <prvInsertTimerInActiveList+0x80>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f7fd ff6a 	bl	800488e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000df4 	.word	0x20000df4
 80069c8:	20000df0 	.word	0x20000df0

080069cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	; 0x38
 80069d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069d2:	e09d      	b.n	8006b10 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da18      	bge.n	8006a0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	3304      	adds	r3, #4
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	61fb      	str	r3, [r7, #28]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a02:	6850      	ldr	r0, [r2, #4]
 8006a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a06:	6892      	ldr	r2, [r2, #8]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db7d      	blt.n	8006b0e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd ff6c 	bl	8004900 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a28:	463b      	mov	r3, r7
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff ff6c 	bl	8006908 <prvSampleTimeNow>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b09      	cmp	r3, #9
 8006a36:	d86b      	bhi.n	8006b10 <prvProcessReceivedCommands+0x144>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <prvProcessReceivedCommands+0x74>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a69 	.word	0x08006a69
 8006a4c:	08006b11 	.word	0x08006b11
 8006a50:	08006ac5 	.word	0x08006ac5
 8006a54:	08006afd 	.word	0x08006afd
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a69 	.word	0x08006a69
 8006a60:	08006b11 	.word	0x08006b11
 8006a64:	08006ac5 	.word	0x08006ac5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	18d1      	adds	r1, r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a76:	f7ff ff67 	bl	8006948 <prvInsertTimerInActiveList>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d047      	beq.n	8006b10 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d13f      	bne.n	8006b10 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	441a      	add	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa2:	f7ff fe1f 	bl	80066e4 <xTimerGenericCommand>
 8006aa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d130      	bne.n	8006b10 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	61bb      	str	r3, [r7, #24]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	617b      	str	r3, [r7, #20]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	18d1      	adds	r1, r2, r3
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af6:	f7ff ff27 	bl	8006948 <prvInsertTimerInActiveList>
					break;
 8006afa:	e009      	b.n	8006b10 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b08:	f000 fbca 	bl	80072a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b0c:	e000      	b.n	8006b10 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b0e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <prvProcessReceivedCommands+0x164>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	1d39      	adds	r1, r7, #4
 8006b16:	2200      	movs	r2, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fa23 	bl	8004f64 <xQueueReceive>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f47f af57 	bne.w	80069d4 <prvProcessReceivedCommands+0x8>
	}
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	3730      	adds	r7, #48	; 0x30
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000df8 	.word	0x20000df8

08006b34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b3a:	e045      	b.n	8006bc8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b3c:	4b2c      	ldr	r3, [pc, #176]	; (8006bf0 <prvSwitchTimerLists+0xbc>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b46:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <prvSwitchTimerLists+0xbc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fd fed3 	bl	8004900 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d12e      	bne.n	8006bc8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d90e      	bls.n	8006b9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <prvSwitchTimerLists+0xbc>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7fd fe7b 	bl	800488e <vListInsert>
 8006b98:	e016      	b.n	8006bc8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7ff fd9d 	bl	80066e4 <xTimerGenericCommand>
 8006baa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	603b      	str	r3, [r7, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <prvSwitchTimerLists+0xbc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1b4      	bne.n	8006b3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <prvSwitchTimerLists+0xbc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <prvSwitchTimerLists+0xc0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <prvSwitchTimerLists+0xbc>)
 8006bde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006be0:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <prvSwitchTimerLists+0xc0>)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	6013      	str	r3, [r2, #0]
}
 8006be6:	bf00      	nop
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000df0 	.word	0x20000df0
 8006bf4:	20000df4 	.word	0x20000df4

08006bf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bfe:	f000 f969 	bl	8006ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d120      	bne.n	8006c4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c0a:	4814      	ldr	r0, [pc, #80]	; (8006c5c <prvCheckForValidListAndQueue+0x64>)
 8006c0c:	f7fd fdee 	bl	80047ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c10:	4813      	ldr	r0, [pc, #76]	; (8006c60 <prvCheckForValidListAndQueue+0x68>)
 8006c12:	f7fd fdeb 	bl	80047ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c16:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <prvCheckForValidListAndQueue+0x6c>)
 8006c18:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <prvCheckForValidListAndQueue+0x64>)
 8006c1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <prvCheckForValidListAndQueue+0x70>)
 8006c1e:	4a10      	ldr	r2, [pc, #64]	; (8006c60 <prvCheckForValidListAndQueue+0x68>)
 8006c20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c22:	2300      	movs	r3, #0
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <prvCheckForValidListAndQueue+0x74>)
 8006c28:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <prvCheckForValidListAndQueue+0x78>)
 8006c2a:	2110      	movs	r1, #16
 8006c2c:	200a      	movs	r0, #10
 8006c2e:	f7fd fef9 	bl	8004a24 <xQueueGenericCreateStatic>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	490b      	ldr	r1, [pc, #44]	; (8006c74 <prvCheckForValidListAndQueue+0x7c>)
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fca0 	bl	800558c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c4c:	f000 f972 	bl	8006f34 <vPortExitCritical>
}
 8006c50:	bf00      	nop
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000df8 	.word	0x20000df8
 8006c5c:	20000dc8 	.word	0x20000dc8
 8006c60:	20000ddc 	.word	0x20000ddc
 8006c64:	20000df0 	.word	0x20000df0
 8006c68:	20000df4 	.word	0x20000df4
 8006c6c:	20000ea4 	.word	0x20000ea4
 8006c70:	20000e04 	.word	0x20000e04
 8006c74:	08009fc4 	.word	0x08009fc4

08006c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3b04      	subs	r3, #4
 8006c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b04      	subs	r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f023 0201 	bic.w	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ca8:	4a0c      	ldr	r2, [pc, #48]	; (8006cdc <pxPortInitialiseStack+0x64>)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3b14      	subs	r3, #20
 8006cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3b04      	subs	r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f06f 0202 	mvn.w	r2, #2
 8006cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3b20      	subs	r3, #32
 8006ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cce:	68fb      	ldr	r3, [r7, #12]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	08006ce1 	.word	0x08006ce1

08006ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <prvTaskExitError+0x54>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf2:	d00a      	beq.n	8006d0a <prvTaskExitError+0x2a>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	60fb      	str	r3, [r7, #12]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <prvTaskExitError+0x28>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	60bb      	str	r3, [r7, #8]
}
 8006d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d1e:	bf00      	nop
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0fc      	beq.n	8006d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	2000000c 	.word	0x2000000c
	...

08006d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <pxCurrentTCBConst2>)
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	f380 8809 	msr	PSP, r0
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8811 	msr	BASEPRI, r0
 8006d5a:	4770      	bx	lr
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst2>:
 8006d60:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d68:	4808      	ldr	r0, [pc, #32]	; (8006d8c <prvPortStartFirstTask+0x24>)
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f380 8808 	msr	MSP, r0
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8814 	msr	CONTROL, r0
 8006d7a:	b662      	cpsie	i
 8006d7c:	b661      	cpsie	f
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	df00      	svc	0
 8006d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d8a:	bf00      	nop
 8006d8c:	e000ed08 	.word	0xe000ed08

08006d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d96:	4b46      	ldr	r3, [pc, #280]	; (8006eb0 <xPortStartScheduler+0x120>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a46      	ldr	r2, [pc, #280]	; (8006eb4 <xPortStartScheduler+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10a      	bne.n	8006db6 <xPortStartScheduler+0x26>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <xPortStartScheduler+0x120>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3f      	ldr	r2, [pc, #252]	; (8006eb8 <xPortStartScheduler+0x128>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10a      	bne.n	8006dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dd6:	4b39      	ldr	r3, [pc, #228]	; (8006ebc <xPortStartScheduler+0x12c>)
 8006dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	22ff      	movs	r2, #255	; 0xff
 8006de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <xPortStartScheduler+0x130>)
 8006dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e04:	e009      	b.n	8006e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	d0ef      	beq.n	8006e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1c3 0307 	rsb	r3, r3, #7
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d00a      	beq.n	8006e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e48:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <xPortStartScheduler+0x134>)
 8006e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <xPortStartScheduler+0x138>)
 8006e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e7e:	f000 f8dd 	bl	800703c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <xPortStartScheduler+0x13c>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e88:	f000 f8fc 	bl	8007084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <xPortStartScheduler+0x140>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <xPortStartScheduler+0x140>)
 8006e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e98:	f7ff ff66 	bl	8006d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e9c:	f7fe ff80 	bl	8005da0 <vTaskSwitchContext>
	prvTaskExitError();
 8006ea0:	f7ff ff1e 	bl	8006ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	e000ed00 	.word	0xe000ed00
 8006eb4:	410fc271 	.word	0x410fc271
 8006eb8:	410fc270 	.word	0x410fc270
 8006ebc:	e000e400 	.word	0xe000e400
 8006ec0:	20000ef4 	.word	0x20000ef4
 8006ec4:	20000ef8 	.word	0x20000ef8
 8006ec8:	e000ed20 	.word	0xe000ed20
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	e000ef34 	.word	0xe000ef34

08006ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	607b      	str	r3, [r7, #4]
}
 8006eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <vPortEnterCritical+0x58>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <vPortEnterCritical+0x58>)
 8006ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <vPortEnterCritical+0x58>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d10f      	bne.n	8006f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <vPortEnterCritical+0x5c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	603b      	str	r3, [r7, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <vPortEnterCritical+0x4a>
	}
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	2000000c 	.word	0x2000000c
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f3a:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <vPortExitCritical+0x50>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <vPortExitCritical+0x24>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	607b      	str	r3, [r7, #4]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <vPortExitCritical+0x50>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <vPortExitCritical+0x50>)
 8006f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <vPortExitCritical+0x50>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <vPortExitCritical+0x42>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	f383 8811 	msr	BASEPRI, r3
}
 8006f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c
	...

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f01e 0f10 	tst.w	lr, #16
 8006fa0:	bf08      	it	eq
 8006fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fb4:	f380 8811 	msr	BASEPRI, r0
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f7fe feee 	bl	8005da0 <vTaskSwitchContext>
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f380 8811 	msr	BASEPRI, r0
 8006fcc:	bc09      	pop	{r0, r3}
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	f01e 0f10 	tst.w	lr, #16
 8006fda:	bf08      	it	eq
 8006fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fe0:	f380 8809 	msr	PSP, r0
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007012:	f7fe fe07 	bl	8005c24 <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <xPortSysTickHandler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <vPortSetupTimerInterrupt+0x38>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800704c:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <vPortSetupTimerInterrupt+0x3c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <vPortSetupTimerInterrupt+0x40>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <vPortSetupTimerInterrupt+0x44>)
 800705a:	3b01      	subs	r3, #1
 800705c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	e000e010 	.word	0xe000e010
 8007074:	e000e018 	.word	0xe000e018
 8007078:	20000000 	.word	0x20000000
 800707c:	10624dd3 	.word	0x10624dd3
 8007080:	e000e014 	.word	0xe000e014

08007084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007094 <vPortEnableVFP+0x10>
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800708e:	6001      	str	r1, [r0, #0]
 8007090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007092:	bf00      	nop
 8007094:	e000ed88 	.word	0xe000ed88

08007098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800709e:	f3ef 8305 	mrs	r3, IPSR
 80070a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d914      	bls.n	80070d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <vPortValidateInterruptPriority+0x70>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <vPortValidateInterruptPriority+0x74>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	7afa      	ldrb	r2, [r7, #11]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20a      	bcs.n	80070d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <vPortValidateInterruptPriority+0x78>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <vPortValidateInterruptPriority+0x7c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d90a      	bls.n	80070fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	603b      	str	r3, [r7, #0]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <vPortValidateInterruptPriority+0x60>
	}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	e000e3f0 	.word	0xe000e3f0
 800710c:	20000ef4 	.word	0x20000ef4
 8007110:	e000ed0c 	.word	0xe000ed0c
 8007114:	20000ef8 	.word	0x20000ef8

08007118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007124:	f7fe fcc2 	bl	8005aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007128:	4b58      	ldr	r3, [pc, #352]	; (800728c <pvPortMalloc+0x174>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007130:	f000 f910 	bl	8007354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007134:	4b56      	ldr	r3, [pc, #344]	; (8007290 <pvPortMalloc+0x178>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 808e 	bne.w	800725e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01d      	beq.n	8007184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007148:	2208      	movs	r2, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d014      	beq.n	8007184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f023 0307 	bic.w	r3, r3, #7
 8007160:	3308      	adds	r3, #8
 8007162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <pvPortMalloc+0x6c>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	617b      	str	r3, [r7, #20]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d069      	beq.n	800725e <pvPortMalloc+0x146>
 800718a:	4b42      	ldr	r3, [pc, #264]	; (8007294 <pvPortMalloc+0x17c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d864      	bhi.n	800725e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007194:	4b40      	ldr	r3, [pc, #256]	; (8007298 <pvPortMalloc+0x180>)
 8007196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007198:	4b3f      	ldr	r3, [pc, #252]	; (8007298 <pvPortMalloc+0x180>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800719e:	e004      	b.n	80071aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d903      	bls.n	80071bc <pvPortMalloc+0xa4>
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f1      	bne.n	80071a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071bc:	4b33      	ldr	r3, [pc, #204]	; (800728c <pvPortMalloc+0x174>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d04b      	beq.n	800725e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2208      	movs	r2, #8
 80071cc:	4413      	add	r3, r2
 80071ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	2308      	movs	r3, #8
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d91f      	bls.n	8007228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <pvPortMalloc+0xf8>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	613b      	str	r3, [r7, #16]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007222:	69b8      	ldr	r0, [r7, #24]
 8007224:	f000 f8f8 	bl	8007418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <pvPortMalloc+0x17c>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	4a18      	ldr	r2, [pc, #96]	; (8007294 <pvPortMalloc+0x17c>)
 8007234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007236:	4b17      	ldr	r3, [pc, #92]	; (8007294 <pvPortMalloc+0x17c>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b18      	ldr	r3, [pc, #96]	; (800729c <pvPortMalloc+0x184>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d203      	bcs.n	800724a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007242:	4b14      	ldr	r3, [pc, #80]	; (8007294 <pvPortMalloc+0x17c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <pvPortMalloc+0x184>)
 8007248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <pvPortMalloc+0x178>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	431a      	orrs	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800725e:	f7fe fc33 	bl	8005ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <pvPortMalloc+0x16a>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60fb      	str	r3, [r7, #12]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <pvPortMalloc+0x168>
	return pvReturn;
 8007282:	69fb      	ldr	r3, [r7, #28]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3728      	adds	r7, #40	; 0x28
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20001b04 	.word	0x20001b04
 8007290:	20001b10 	.word	0x20001b10
 8007294:	20001b08 	.word	0x20001b08
 8007298:	20001afc 	.word	0x20001afc
 800729c:	20001b0c 	.word	0x20001b0c

080072a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d048      	beq.n	8007344 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072b2:	2308      	movs	r3, #8
 80072b4:	425b      	negs	r3, r3
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	4b21      	ldr	r3, [pc, #132]	; (800734c <vPortFree+0xac>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <vPortFree+0x44>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <vPortFree+0x62>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60bb      	str	r3, [r7, #8]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <vPortFree+0xac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d019      	beq.n	8007344 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d115      	bne.n	8007344 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <vPortFree+0xac>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007328:	f7fe fbc0 	bl	8005aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <vPortFree+0xb0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4413      	add	r3, r2
 8007336:	4a06      	ldr	r2, [pc, #24]	; (8007350 <vPortFree+0xb0>)
 8007338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f000 f86c 	bl	8007418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007340:	f7fe fbc2 	bl	8005ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007344:	bf00      	nop
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20001b10 	.word	0x20001b10
 8007350:	20001b08 	.word	0x20001b08

08007354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800735a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800735e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007360:	4b27      	ldr	r3, [pc, #156]	; (8007400 <prvHeapInit+0xac>)
 8007362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00c      	beq.n	8007388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3307      	adds	r3, #7
 8007372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	4a1f      	ldr	r2, [pc, #124]	; (8007400 <prvHeapInit+0xac>)
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <prvHeapInit+0xb0>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <prvHeapInit+0xb0>)
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073a0:	2208      	movs	r2, #8
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <prvHeapInit+0xb4>)
 80073b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <prvHeapInit+0xb4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <prvHeapInit+0xb4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <prvHeapInit+0xb4>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <prvHeapInit+0xb8>)
 80073e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <prvHeapInit+0xbc>)
 80073ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <prvHeapInit+0xc0>)
 80073ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000efc 	.word	0x20000efc
 8007404:	20001afc 	.word	0x20001afc
 8007408:	20001b04 	.word	0x20001b04
 800740c:	20001b0c 	.word	0x20001b0c
 8007410:	20001b08 	.word	0x20001b08
 8007414:	20001b10 	.word	0x20001b10

08007418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <prvInsertBlockIntoFreeList+0xac>)
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e002      	b.n	800742c <prvInsertBlockIntoFreeList+0x14>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d8f7      	bhi.n	8007426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4413      	add	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d108      	bne.n	800745a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	441a      	add	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d118      	bne.n	80074a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d00d      	beq.n	8007496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e008      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e003      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d002      	beq.n	80074b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20001afc 	.word	0x20001afc
 80074c8:	20001b04 	.word	0x20001b04

080074cc <__errno>:
 80074cc:	4b01      	ldr	r3, [pc, #4]	; (80074d4 <__errno+0x8>)
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000010 	.word	0x20000010

080074d8 <__libc_init_array>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4d0d      	ldr	r5, [pc, #52]	; (8007510 <__libc_init_array+0x38>)
 80074dc:	4c0d      	ldr	r4, [pc, #52]	; (8007514 <__libc_init_array+0x3c>)
 80074de:	1b64      	subs	r4, r4, r5
 80074e0:	10a4      	asrs	r4, r4, #2
 80074e2:	2600      	movs	r6, #0
 80074e4:	42a6      	cmp	r6, r4
 80074e6:	d109      	bne.n	80074fc <__libc_init_array+0x24>
 80074e8:	4d0b      	ldr	r5, [pc, #44]	; (8007518 <__libc_init_array+0x40>)
 80074ea:	4c0c      	ldr	r4, [pc, #48]	; (800751c <__libc_init_array+0x44>)
 80074ec:	f002 fd08 	bl	8009f00 <_init>
 80074f0:	1b64      	subs	r4, r4, r5
 80074f2:	10a4      	asrs	r4, r4, #2
 80074f4:	2600      	movs	r6, #0
 80074f6:	42a6      	cmp	r6, r4
 80074f8:	d105      	bne.n	8007506 <__libc_init_array+0x2e>
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007500:	4798      	blx	r3
 8007502:	3601      	adds	r6, #1
 8007504:	e7ee      	b.n	80074e4 <__libc_init_array+0xc>
 8007506:	f855 3b04 	ldr.w	r3, [r5], #4
 800750a:	4798      	blx	r3
 800750c:	3601      	adds	r6, #1
 800750e:	e7f2      	b.n	80074f6 <__libc_init_array+0x1e>
 8007510:	0800a40c 	.word	0x0800a40c
 8007514:	0800a40c 	.word	0x0800a40c
 8007518:	0800a40c 	.word	0x0800a40c
 800751c:	0800a410 	.word	0x0800a410

08007520 <memcpy>:
 8007520:	440a      	add	r2, r1
 8007522:	4291      	cmp	r1, r2
 8007524:	f100 33ff 	add.w	r3, r0, #4294967295
 8007528:	d100      	bne.n	800752c <memcpy+0xc>
 800752a:	4770      	bx	lr
 800752c:	b510      	push	{r4, lr}
 800752e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007536:	4291      	cmp	r1, r2
 8007538:	d1f9      	bne.n	800752e <memcpy+0xe>
 800753a:	bd10      	pop	{r4, pc}

0800753c <memset>:
 800753c:	4402      	add	r2, r0
 800753e:	4603      	mov	r3, r0
 8007540:	4293      	cmp	r3, r2
 8007542:	d100      	bne.n	8007546 <memset+0xa>
 8007544:	4770      	bx	lr
 8007546:	f803 1b01 	strb.w	r1, [r3], #1
 800754a:	e7f9      	b.n	8007540 <memset+0x4>

0800754c <__cvt>:
 800754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	ec55 4b10 	vmov	r4, r5, d0
 8007554:	2d00      	cmp	r5, #0
 8007556:	460e      	mov	r6, r1
 8007558:	4619      	mov	r1, r3
 800755a:	462b      	mov	r3, r5
 800755c:	bfbb      	ittet	lt
 800755e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007562:	461d      	movlt	r5, r3
 8007564:	2300      	movge	r3, #0
 8007566:	232d      	movlt	r3, #45	; 0x2d
 8007568:	700b      	strb	r3, [r1, #0]
 800756a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800756c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007570:	4691      	mov	r9, r2
 8007572:	f023 0820 	bic.w	r8, r3, #32
 8007576:	bfbc      	itt	lt
 8007578:	4622      	movlt	r2, r4
 800757a:	4614      	movlt	r4, r2
 800757c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007580:	d005      	beq.n	800758e <__cvt+0x42>
 8007582:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007586:	d100      	bne.n	800758a <__cvt+0x3e>
 8007588:	3601      	adds	r6, #1
 800758a:	2102      	movs	r1, #2
 800758c:	e000      	b.n	8007590 <__cvt+0x44>
 800758e:	2103      	movs	r1, #3
 8007590:	ab03      	add	r3, sp, #12
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	ab02      	add	r3, sp, #8
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	ec45 4b10 	vmov	d0, r4, r5
 800759c:	4653      	mov	r3, sl
 800759e:	4632      	mov	r2, r6
 80075a0:	f000 fce2 	bl	8007f68 <_dtoa_r>
 80075a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075a8:	4607      	mov	r7, r0
 80075aa:	d102      	bne.n	80075b2 <__cvt+0x66>
 80075ac:	f019 0f01 	tst.w	r9, #1
 80075b0:	d022      	beq.n	80075f8 <__cvt+0xac>
 80075b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075b6:	eb07 0906 	add.w	r9, r7, r6
 80075ba:	d110      	bne.n	80075de <__cvt+0x92>
 80075bc:	783b      	ldrb	r3, [r7, #0]
 80075be:	2b30      	cmp	r3, #48	; 0x30
 80075c0:	d10a      	bne.n	80075d8 <__cvt+0x8c>
 80075c2:	2200      	movs	r2, #0
 80075c4:	2300      	movs	r3, #0
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f9 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ce:	b918      	cbnz	r0, 80075d8 <__cvt+0x8c>
 80075d0:	f1c6 0601 	rsb	r6, r6, #1
 80075d4:	f8ca 6000 	str.w	r6, [sl]
 80075d8:	f8da 3000 	ldr.w	r3, [sl]
 80075dc:	4499      	add	r9, r3
 80075de:	2200      	movs	r2, #0
 80075e0:	2300      	movs	r3, #0
 80075e2:	4620      	mov	r0, r4
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7f9 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ea:	b108      	cbz	r0, 80075f0 <__cvt+0xa4>
 80075ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80075f0:	2230      	movs	r2, #48	; 0x30
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	454b      	cmp	r3, r9
 80075f6:	d307      	bcc.n	8007608 <__cvt+0xbc>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075fc:	1bdb      	subs	r3, r3, r7
 80075fe:	4638      	mov	r0, r7
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	b004      	add	sp, #16
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	1c59      	adds	r1, r3, #1
 800760a:	9103      	str	r1, [sp, #12]
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e7f0      	b.n	80075f2 <__cvt+0xa6>

08007610 <__exponent>:
 8007610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007612:	4603      	mov	r3, r0
 8007614:	2900      	cmp	r1, #0
 8007616:	bfb8      	it	lt
 8007618:	4249      	neglt	r1, r1
 800761a:	f803 2b02 	strb.w	r2, [r3], #2
 800761e:	bfb4      	ite	lt
 8007620:	222d      	movlt	r2, #45	; 0x2d
 8007622:	222b      	movge	r2, #43	; 0x2b
 8007624:	2909      	cmp	r1, #9
 8007626:	7042      	strb	r2, [r0, #1]
 8007628:	dd2a      	ble.n	8007680 <__exponent+0x70>
 800762a:	f10d 0407 	add.w	r4, sp, #7
 800762e:	46a4      	mov	ip, r4
 8007630:	270a      	movs	r7, #10
 8007632:	46a6      	mov	lr, r4
 8007634:	460a      	mov	r2, r1
 8007636:	fb91 f6f7 	sdiv	r6, r1, r7
 800763a:	fb07 1516 	mls	r5, r7, r6, r1
 800763e:	3530      	adds	r5, #48	; 0x30
 8007640:	2a63      	cmp	r2, #99	; 0x63
 8007642:	f104 34ff 	add.w	r4, r4, #4294967295
 8007646:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800764a:	4631      	mov	r1, r6
 800764c:	dcf1      	bgt.n	8007632 <__exponent+0x22>
 800764e:	3130      	adds	r1, #48	; 0x30
 8007650:	f1ae 0502 	sub.w	r5, lr, #2
 8007654:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007658:	1c44      	adds	r4, r0, #1
 800765a:	4629      	mov	r1, r5
 800765c:	4561      	cmp	r1, ip
 800765e:	d30a      	bcc.n	8007676 <__exponent+0x66>
 8007660:	f10d 0209 	add.w	r2, sp, #9
 8007664:	eba2 020e 	sub.w	r2, r2, lr
 8007668:	4565      	cmp	r5, ip
 800766a:	bf88      	it	hi
 800766c:	2200      	movhi	r2, #0
 800766e:	4413      	add	r3, r2
 8007670:	1a18      	subs	r0, r3, r0
 8007672:	b003      	add	sp, #12
 8007674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800767a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800767e:	e7ed      	b.n	800765c <__exponent+0x4c>
 8007680:	2330      	movs	r3, #48	; 0x30
 8007682:	3130      	adds	r1, #48	; 0x30
 8007684:	7083      	strb	r3, [r0, #2]
 8007686:	70c1      	strb	r1, [r0, #3]
 8007688:	1d03      	adds	r3, r0, #4
 800768a:	e7f1      	b.n	8007670 <__exponent+0x60>

0800768c <_printf_float>:
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	ed2d 8b02 	vpush	{d8}
 8007694:	b08d      	sub	sp, #52	; 0x34
 8007696:	460c      	mov	r4, r1
 8007698:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800769c:	4616      	mov	r6, r2
 800769e:	461f      	mov	r7, r3
 80076a0:	4605      	mov	r5, r0
 80076a2:	f001 fb43 	bl	8008d2c <_localeconv_r>
 80076a6:	f8d0 a000 	ldr.w	sl, [r0]
 80076aa:	4650      	mov	r0, sl
 80076ac:	f7f8 fd90 	bl	80001d0 <strlen>
 80076b0:	2300      	movs	r3, #0
 80076b2:	930a      	str	r3, [sp, #40]	; 0x28
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	9305      	str	r3, [sp, #20]
 80076b8:	f8d8 3000 	ldr.w	r3, [r8]
 80076bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076c0:	3307      	adds	r3, #7
 80076c2:	f023 0307 	bic.w	r3, r3, #7
 80076c6:	f103 0208 	add.w	r2, r3, #8
 80076ca:	f8c8 2000 	str.w	r2, [r8]
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80076e4:	ee08 0a10 	vmov	s16, r0
 80076e8:	4b9f      	ldr	r3, [pc, #636]	; (8007968 <_printf_float+0x2dc>)
 80076ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295
 80076f2:	f7f9 fa1b 	bl	8000b2c <__aeabi_dcmpun>
 80076f6:	bb88      	cbnz	r0, 800775c <_printf_float+0xd0>
 80076f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076fc:	4b9a      	ldr	r3, [pc, #616]	; (8007968 <_printf_float+0x2dc>)
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007702:	f7f9 f9f5 	bl	8000af0 <__aeabi_dcmple>
 8007706:	bb48      	cbnz	r0, 800775c <_printf_float+0xd0>
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	4640      	mov	r0, r8
 800770e:	4649      	mov	r1, r9
 8007710:	f7f9 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8007714:	b110      	cbz	r0, 800771c <_printf_float+0x90>
 8007716:	232d      	movs	r3, #45	; 0x2d
 8007718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800771c:	4b93      	ldr	r3, [pc, #588]	; (800796c <_printf_float+0x2e0>)
 800771e:	4894      	ldr	r0, [pc, #592]	; (8007970 <_printf_float+0x2e4>)
 8007720:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007724:	bf94      	ite	ls
 8007726:	4698      	movls	r8, r3
 8007728:	4680      	movhi	r8, r0
 800772a:	2303      	movs	r3, #3
 800772c:	6123      	str	r3, [r4, #16]
 800772e:	9b05      	ldr	r3, [sp, #20]
 8007730:	f023 0204 	bic.w	r2, r3, #4
 8007734:	6022      	str	r2, [r4, #0]
 8007736:	f04f 0900 	mov.w	r9, #0
 800773a:	9700      	str	r7, [sp, #0]
 800773c:	4633      	mov	r3, r6
 800773e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f9d8 	bl	8007af8 <_printf_common>
 8007748:	3001      	adds	r0, #1
 800774a:	f040 8090 	bne.w	800786e <_printf_float+0x1e2>
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	b00d      	add	sp, #52	; 0x34
 8007754:	ecbd 8b02 	vpop	{d8}
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	4640      	mov	r0, r8
 8007762:	4649      	mov	r1, r9
 8007764:	f7f9 f9e2 	bl	8000b2c <__aeabi_dcmpun>
 8007768:	b140      	cbz	r0, 800777c <_printf_float+0xf0>
 800776a:	464b      	mov	r3, r9
 800776c:	2b00      	cmp	r3, #0
 800776e:	bfbc      	itt	lt
 8007770:	232d      	movlt	r3, #45	; 0x2d
 8007772:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007776:	487f      	ldr	r0, [pc, #508]	; (8007974 <_printf_float+0x2e8>)
 8007778:	4b7f      	ldr	r3, [pc, #508]	; (8007978 <_printf_float+0x2ec>)
 800777a:	e7d1      	b.n	8007720 <_printf_float+0x94>
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007782:	9206      	str	r2, [sp, #24]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	d13f      	bne.n	8007808 <_printf_float+0x17c>
 8007788:	2306      	movs	r3, #6
 800778a:	6063      	str	r3, [r4, #4]
 800778c:	9b05      	ldr	r3, [sp, #20]
 800778e:	6861      	ldr	r1, [r4, #4]
 8007790:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007794:	2300      	movs	r3, #0
 8007796:	9303      	str	r3, [sp, #12]
 8007798:	ab0a      	add	r3, sp, #40	; 0x28
 800779a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800779e:	ab09      	add	r3, sp, #36	; 0x24
 80077a0:	ec49 8b10 	vmov	d0, r8, r9
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7ff fecd 	bl	800754c <__cvt>
 80077b2:	9b06      	ldr	r3, [sp, #24]
 80077b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077b6:	2b47      	cmp	r3, #71	; 0x47
 80077b8:	4680      	mov	r8, r0
 80077ba:	d108      	bne.n	80077ce <_printf_float+0x142>
 80077bc:	1cc8      	adds	r0, r1, #3
 80077be:	db02      	blt.n	80077c6 <_printf_float+0x13a>
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	4299      	cmp	r1, r3
 80077c4:	dd41      	ble.n	800784a <_printf_float+0x1be>
 80077c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80077ca:	fa5f fb8b 	uxtb.w	fp, fp
 80077ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077d2:	d820      	bhi.n	8007816 <_printf_float+0x18a>
 80077d4:	3901      	subs	r1, #1
 80077d6:	465a      	mov	r2, fp
 80077d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077dc:	9109      	str	r1, [sp, #36]	; 0x24
 80077de:	f7ff ff17 	bl	8007610 <__exponent>
 80077e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077e4:	1813      	adds	r3, r2, r0
 80077e6:	2a01      	cmp	r2, #1
 80077e8:	4681      	mov	r9, r0
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	dc02      	bgt.n	80077f4 <_printf_float+0x168>
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	07d2      	lsls	r2, r2, #31
 80077f2:	d501      	bpl.n	80077f8 <_printf_float+0x16c>
 80077f4:	3301      	adds	r3, #1
 80077f6:	6123      	str	r3, [r4, #16]
 80077f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d09c      	beq.n	800773a <_printf_float+0xae>
 8007800:	232d      	movs	r3, #45	; 0x2d
 8007802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007806:	e798      	b.n	800773a <_printf_float+0xae>
 8007808:	9a06      	ldr	r2, [sp, #24]
 800780a:	2a47      	cmp	r2, #71	; 0x47
 800780c:	d1be      	bne.n	800778c <_printf_float+0x100>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1bc      	bne.n	800778c <_printf_float+0x100>
 8007812:	2301      	movs	r3, #1
 8007814:	e7b9      	b.n	800778a <_printf_float+0xfe>
 8007816:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800781a:	d118      	bne.n	800784e <_printf_float+0x1c2>
 800781c:	2900      	cmp	r1, #0
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	dd0b      	ble.n	800783a <_printf_float+0x1ae>
 8007822:	6121      	str	r1, [r4, #16]
 8007824:	b913      	cbnz	r3, 800782c <_printf_float+0x1a0>
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	07d0      	lsls	r0, r2, #31
 800782a:	d502      	bpl.n	8007832 <_printf_float+0x1a6>
 800782c:	3301      	adds	r3, #1
 800782e:	440b      	add	r3, r1
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	65a1      	str	r1, [r4, #88]	; 0x58
 8007834:	f04f 0900 	mov.w	r9, #0
 8007838:	e7de      	b.n	80077f8 <_printf_float+0x16c>
 800783a:	b913      	cbnz	r3, 8007842 <_printf_float+0x1b6>
 800783c:	6822      	ldr	r2, [r4, #0]
 800783e:	07d2      	lsls	r2, r2, #31
 8007840:	d501      	bpl.n	8007846 <_printf_float+0x1ba>
 8007842:	3302      	adds	r3, #2
 8007844:	e7f4      	b.n	8007830 <_printf_float+0x1a4>
 8007846:	2301      	movs	r3, #1
 8007848:	e7f2      	b.n	8007830 <_printf_float+0x1a4>
 800784a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800784e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007850:	4299      	cmp	r1, r3
 8007852:	db05      	blt.n	8007860 <_printf_float+0x1d4>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	6121      	str	r1, [r4, #16]
 8007858:	07d8      	lsls	r0, r3, #31
 800785a:	d5ea      	bpl.n	8007832 <_printf_float+0x1a6>
 800785c:	1c4b      	adds	r3, r1, #1
 800785e:	e7e7      	b.n	8007830 <_printf_float+0x1a4>
 8007860:	2900      	cmp	r1, #0
 8007862:	bfd4      	ite	le
 8007864:	f1c1 0202 	rsble	r2, r1, #2
 8007868:	2201      	movgt	r2, #1
 800786a:	4413      	add	r3, r2
 800786c:	e7e0      	b.n	8007830 <_printf_float+0x1a4>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	055a      	lsls	r2, r3, #21
 8007872:	d407      	bmi.n	8007884 <_printf_float+0x1f8>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	4642      	mov	r2, r8
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	d12c      	bne.n	80078dc <_printf_float+0x250>
 8007882:	e764      	b.n	800774e <_printf_float+0xc2>
 8007884:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007888:	f240 80e0 	bls.w	8007a4c <_printf_float+0x3c0>
 800788c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007890:	2200      	movs	r2, #0
 8007892:	2300      	movs	r3, #0
 8007894:	f7f9 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8007898:	2800      	cmp	r0, #0
 800789a:	d034      	beq.n	8007906 <_printf_float+0x27a>
 800789c:	4a37      	ldr	r2, [pc, #220]	; (800797c <_printf_float+0x2f0>)
 800789e:	2301      	movs	r3, #1
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f af51 	beq.w	800774e <_printf_float+0xc2>
 80078ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078b0:	429a      	cmp	r2, r3
 80078b2:	db02      	blt.n	80078ba <_printf_float+0x22e>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	07d8      	lsls	r0, r3, #31
 80078b8:	d510      	bpl.n	80078dc <_printf_float+0x250>
 80078ba:	ee18 3a10 	vmov	r3, s16
 80078be:	4652      	mov	r2, sl
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f af41 	beq.w	800774e <_printf_float+0xc2>
 80078cc:	f04f 0800 	mov.w	r8, #0
 80078d0:	f104 091a 	add.w	r9, r4, #26
 80078d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d6:	3b01      	subs	r3, #1
 80078d8:	4543      	cmp	r3, r8
 80078da:	dc09      	bgt.n	80078f0 <_printf_float+0x264>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	079b      	lsls	r3, r3, #30
 80078e0:	f100 8105 	bmi.w	8007aee <_printf_float+0x462>
 80078e4:	68e0      	ldr	r0, [r4, #12]
 80078e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e8:	4298      	cmp	r0, r3
 80078ea:	bfb8      	it	lt
 80078ec:	4618      	movlt	r0, r3
 80078ee:	e730      	b.n	8007752 <_printf_float+0xc6>
 80078f0:	2301      	movs	r3, #1
 80078f2:	464a      	mov	r2, r9
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af27 	beq.w	800774e <_printf_float+0xc2>
 8007900:	f108 0801 	add.w	r8, r8, #1
 8007904:	e7e6      	b.n	80078d4 <_printf_float+0x248>
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc39      	bgt.n	8007980 <_printf_float+0x2f4>
 800790c:	4a1b      	ldr	r2, [pc, #108]	; (800797c <_printf_float+0x2f0>)
 800790e:	2301      	movs	r3, #1
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f af19 	beq.w	800774e <_printf_float+0xc2>
 800791c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007920:	4313      	orrs	r3, r2
 8007922:	d102      	bne.n	800792a <_printf_float+0x29e>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	d5d8      	bpl.n	80078dc <_printf_float+0x250>
 800792a:	ee18 3a10 	vmov	r3, s16
 800792e:	4652      	mov	r2, sl
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af09 	beq.w	800774e <_printf_float+0xc2>
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	f104 0a1a 	add.w	sl, r4, #26
 8007944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007946:	425b      	negs	r3, r3
 8007948:	454b      	cmp	r3, r9
 800794a:	dc01      	bgt.n	8007950 <_printf_float+0x2c4>
 800794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794e:	e792      	b.n	8007876 <_printf_float+0x1ea>
 8007950:	2301      	movs	r3, #1
 8007952:	4652      	mov	r2, sl
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f aef7 	beq.w	800774e <_printf_float+0xc2>
 8007960:	f109 0901 	add.w	r9, r9, #1
 8007964:	e7ee      	b.n	8007944 <_printf_float+0x2b8>
 8007966:	bf00      	nop
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	0800a02c 	.word	0x0800a02c
 8007970:	0800a030 	.word	0x0800a030
 8007974:	0800a038 	.word	0x0800a038
 8007978:	0800a034 	.word	0x0800a034
 800797c:	0800a03c 	.word	0x0800a03c
 8007980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007984:	429a      	cmp	r2, r3
 8007986:	bfa8      	it	ge
 8007988:	461a      	movge	r2, r3
 800798a:	2a00      	cmp	r2, #0
 800798c:	4691      	mov	r9, r2
 800798e:	dc37      	bgt.n	8007a00 <_printf_float+0x374>
 8007990:	f04f 0b00 	mov.w	fp, #0
 8007994:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007998:	f104 021a 	add.w	r2, r4, #26
 800799c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800799e:	9305      	str	r3, [sp, #20]
 80079a0:	eba3 0309 	sub.w	r3, r3, r9
 80079a4:	455b      	cmp	r3, fp
 80079a6:	dc33      	bgt.n	8007a10 <_printf_float+0x384>
 80079a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ac:	429a      	cmp	r2, r3
 80079ae:	db3b      	blt.n	8007a28 <_printf_float+0x39c>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	07da      	lsls	r2, r3, #31
 80079b4:	d438      	bmi.n	8007a28 <_printf_float+0x39c>
 80079b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079b8:	9b05      	ldr	r3, [sp, #20]
 80079ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	eba2 0901 	sub.w	r9, r2, r1
 80079c2:	4599      	cmp	r9, r3
 80079c4:	bfa8      	it	ge
 80079c6:	4699      	movge	r9, r3
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	dc35      	bgt.n	8007a3a <_printf_float+0x3ae>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d6:	f104 0a1a 	add.w	sl, r4, #26
 80079da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	eba3 0309 	sub.w	r3, r3, r9
 80079e4:	4543      	cmp	r3, r8
 80079e6:	f77f af79 	ble.w	80078dc <_printf_float+0x250>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4652      	mov	r2, sl
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f aeaa 	beq.w	800774e <_printf_float+0xc2>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	e7ec      	b.n	80079da <_printf_float+0x34e>
 8007a00:	4613      	mov	r3, r2
 8007a02:	4631      	mov	r1, r6
 8007a04:	4642      	mov	r2, r8
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b8      	blx	r7
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d1c0      	bne.n	8007990 <_printf_float+0x304>
 8007a0e:	e69e      	b.n	800774e <_printf_float+0xc2>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	9205      	str	r2, [sp, #20]
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f43f ae97 	beq.w	800774e <_printf_float+0xc2>
 8007a20:	9a05      	ldr	r2, [sp, #20]
 8007a22:	f10b 0b01 	add.w	fp, fp, #1
 8007a26:	e7b9      	b.n	800799c <_printf_float+0x310>
 8007a28:	ee18 3a10 	vmov	r3, s16
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	d1be      	bne.n	80079b6 <_printf_float+0x32a>
 8007a38:	e689      	b.n	800774e <_printf_float+0xc2>
 8007a3a:	9a05      	ldr	r2, [sp, #20]
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	4442      	add	r2, r8
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	d1c1      	bne.n	80079ce <_printf_float+0x342>
 8007a4a:	e680      	b.n	800774e <_printf_float+0xc2>
 8007a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4e:	2a01      	cmp	r2, #1
 8007a50:	dc01      	bgt.n	8007a56 <_printf_float+0x3ca>
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d538      	bpl.n	8007ac8 <_printf_float+0x43c>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4642      	mov	r2, r8
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae74 	beq.w	800774e <_printf_float+0xc2>
 8007a66:	ee18 3a10 	vmov	r3, s16
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f ae6b 	beq.w	800774e <_printf_float+0xc2>
 8007a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f7f9 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a84:	b9d8      	cbnz	r0, 8007abe <_printf_float+0x432>
 8007a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a88:	f108 0201 	add.w	r2, r8, #1
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	d10e      	bne.n	8007ab6 <_printf_float+0x42a>
 8007a98:	e659      	b.n	800774e <_printf_float+0xc2>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4652      	mov	r2, sl
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f ae52 	beq.w	800774e <_printf_float+0xc2>
 8007aaa:	f108 0801 	add.w	r8, r8, #1
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	4543      	cmp	r3, r8
 8007ab4:	dcf1      	bgt.n	8007a9a <_printf_float+0x40e>
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007abc:	e6dc      	b.n	8007878 <_printf_float+0x1ec>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	f104 0a1a 	add.w	sl, r4, #26
 8007ac6:	e7f2      	b.n	8007aae <_printf_float+0x422>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4642      	mov	r2, r8
 8007acc:	e7df      	b.n	8007a8e <_printf_float+0x402>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	464a      	mov	r2, r9
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f43f ae38 	beq.w	800774e <_printf_float+0xc2>
 8007ade:	f108 0801 	add.w	r8, r8, #1
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ae6:	1a5b      	subs	r3, r3, r1
 8007ae8:	4543      	cmp	r3, r8
 8007aea:	dcf0      	bgt.n	8007ace <_printf_float+0x442>
 8007aec:	e6fa      	b.n	80078e4 <_printf_float+0x258>
 8007aee:	f04f 0800 	mov.w	r8, #0
 8007af2:	f104 0919 	add.w	r9, r4, #25
 8007af6:	e7f4      	b.n	8007ae2 <_printf_float+0x456>

08007af8 <_printf_common>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	4616      	mov	r6, r2
 8007afe:	4699      	mov	r9, r3
 8007b00:	688a      	ldr	r2, [r1, #8]
 8007b02:	690b      	ldr	r3, [r1, #16]
 8007b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	bfb8      	it	lt
 8007b0c:	4613      	movlt	r3, r2
 8007b0e:	6033      	str	r3, [r6, #0]
 8007b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b14:	4607      	mov	r7, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	b10a      	cbz	r2, 8007b1e <_printf_common+0x26>
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	6033      	str	r3, [r6, #0]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	0699      	lsls	r1, r3, #26
 8007b22:	bf42      	ittt	mi
 8007b24:	6833      	ldrmi	r3, [r6, #0]
 8007b26:	3302      	addmi	r3, #2
 8007b28:	6033      	strmi	r3, [r6, #0]
 8007b2a:	6825      	ldr	r5, [r4, #0]
 8007b2c:	f015 0506 	ands.w	r5, r5, #6
 8007b30:	d106      	bne.n	8007b40 <_printf_common+0x48>
 8007b32:	f104 0a19 	add.w	sl, r4, #25
 8007b36:	68e3      	ldr	r3, [r4, #12]
 8007b38:	6832      	ldr	r2, [r6, #0]
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	42ab      	cmp	r3, r5
 8007b3e:	dc26      	bgt.n	8007b8e <_printf_common+0x96>
 8007b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b44:	1e13      	subs	r3, r2, #0
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	bf18      	it	ne
 8007b4a:	2301      	movne	r3, #1
 8007b4c:	0692      	lsls	r2, r2, #26
 8007b4e:	d42b      	bmi.n	8007ba8 <_printf_common+0xb0>
 8007b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b54:	4649      	mov	r1, r9
 8007b56:	4638      	mov	r0, r7
 8007b58:	47c0      	blx	r8
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d01e      	beq.n	8007b9c <_printf_common+0xa4>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	68e5      	ldr	r5, [r4, #12]
 8007b62:	6832      	ldr	r2, [r6, #0]
 8007b64:	f003 0306 	and.w	r3, r3, #6
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	bf08      	it	eq
 8007b6c:	1aad      	subeq	r5, r5, r2
 8007b6e:	68a3      	ldr	r3, [r4, #8]
 8007b70:	6922      	ldr	r2, [r4, #16]
 8007b72:	bf0c      	ite	eq
 8007b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b78:	2500      	movne	r5, #0
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	bfc4      	itt	gt
 8007b7e:	1a9b      	subgt	r3, r3, r2
 8007b80:	18ed      	addgt	r5, r5, r3
 8007b82:	2600      	movs	r6, #0
 8007b84:	341a      	adds	r4, #26
 8007b86:	42b5      	cmp	r5, r6
 8007b88:	d11a      	bne.n	8007bc0 <_printf_common+0xc8>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e008      	b.n	8007ba0 <_printf_common+0xa8>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4652      	mov	r2, sl
 8007b92:	4649      	mov	r1, r9
 8007b94:	4638      	mov	r0, r7
 8007b96:	47c0      	blx	r8
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d103      	bne.n	8007ba4 <_printf_common+0xac>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	e7c6      	b.n	8007b36 <_printf_common+0x3e>
 8007ba8:	18e1      	adds	r1, r4, r3
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	2030      	movs	r0, #48	; 0x30
 8007bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bb2:	4422      	add	r2, r4
 8007bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	e7c7      	b.n	8007b50 <_printf_common+0x58>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c0      	blx	r8
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d0e6      	beq.n	8007b9c <_printf_common+0xa4>
 8007bce:	3601      	adds	r6, #1
 8007bd0:	e7d9      	b.n	8007b86 <_printf_common+0x8e>
	...

08007bd4 <_printf_i>:
 8007bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd8:	460c      	mov	r4, r1
 8007bda:	4691      	mov	r9, r2
 8007bdc:	7e27      	ldrb	r7, [r4, #24]
 8007bde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007be0:	2f78      	cmp	r7, #120	; 0x78
 8007be2:	4680      	mov	r8, r0
 8007be4:	469a      	mov	sl, r3
 8007be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bea:	d807      	bhi.n	8007bfc <_printf_i+0x28>
 8007bec:	2f62      	cmp	r7, #98	; 0x62
 8007bee:	d80a      	bhi.n	8007c06 <_printf_i+0x32>
 8007bf0:	2f00      	cmp	r7, #0
 8007bf2:	f000 80d8 	beq.w	8007da6 <_printf_i+0x1d2>
 8007bf6:	2f58      	cmp	r7, #88	; 0x58
 8007bf8:	f000 80a3 	beq.w	8007d42 <_printf_i+0x16e>
 8007bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c04:	e03a      	b.n	8007c7c <_printf_i+0xa8>
 8007c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c0a:	2b15      	cmp	r3, #21
 8007c0c:	d8f6      	bhi.n	8007bfc <_printf_i+0x28>
 8007c0e:	a001      	add	r0, pc, #4	; (adr r0, 8007c14 <_printf_i+0x40>)
 8007c10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c14:	08007c6d 	.word	0x08007c6d
 8007c18:	08007c81 	.word	0x08007c81
 8007c1c:	08007bfd 	.word	0x08007bfd
 8007c20:	08007bfd 	.word	0x08007bfd
 8007c24:	08007bfd 	.word	0x08007bfd
 8007c28:	08007bfd 	.word	0x08007bfd
 8007c2c:	08007c81 	.word	0x08007c81
 8007c30:	08007bfd 	.word	0x08007bfd
 8007c34:	08007bfd 	.word	0x08007bfd
 8007c38:	08007bfd 	.word	0x08007bfd
 8007c3c:	08007bfd 	.word	0x08007bfd
 8007c40:	08007d8d 	.word	0x08007d8d
 8007c44:	08007cb1 	.word	0x08007cb1
 8007c48:	08007d6f 	.word	0x08007d6f
 8007c4c:	08007bfd 	.word	0x08007bfd
 8007c50:	08007bfd 	.word	0x08007bfd
 8007c54:	08007daf 	.word	0x08007daf
 8007c58:	08007bfd 	.word	0x08007bfd
 8007c5c:	08007cb1 	.word	0x08007cb1
 8007c60:	08007bfd 	.word	0x08007bfd
 8007c64:	08007bfd 	.word	0x08007bfd
 8007c68:	08007d77 	.word	0x08007d77
 8007c6c:	680b      	ldr	r3, [r1, #0]
 8007c6e:	1d1a      	adds	r2, r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	600a      	str	r2, [r1, #0]
 8007c74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e0a3      	b.n	8007dc8 <_printf_i+0x1f4>
 8007c80:	6825      	ldr	r5, [r4, #0]
 8007c82:	6808      	ldr	r0, [r1, #0]
 8007c84:	062e      	lsls	r6, r5, #24
 8007c86:	f100 0304 	add.w	r3, r0, #4
 8007c8a:	d50a      	bpl.n	8007ca2 <_printf_i+0xce>
 8007c8c:	6805      	ldr	r5, [r0, #0]
 8007c8e:	600b      	str	r3, [r1, #0]
 8007c90:	2d00      	cmp	r5, #0
 8007c92:	da03      	bge.n	8007c9c <_printf_i+0xc8>
 8007c94:	232d      	movs	r3, #45	; 0x2d
 8007c96:	426d      	negs	r5, r5
 8007c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c9c:	485e      	ldr	r0, [pc, #376]	; (8007e18 <_printf_i+0x244>)
 8007c9e:	230a      	movs	r3, #10
 8007ca0:	e019      	b.n	8007cd6 <_printf_i+0x102>
 8007ca2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ca6:	6805      	ldr	r5, [r0, #0]
 8007ca8:	600b      	str	r3, [r1, #0]
 8007caa:	bf18      	it	ne
 8007cac:	b22d      	sxthne	r5, r5
 8007cae:	e7ef      	b.n	8007c90 <_printf_i+0xbc>
 8007cb0:	680b      	ldr	r3, [r1, #0]
 8007cb2:	6825      	ldr	r5, [r4, #0]
 8007cb4:	1d18      	adds	r0, r3, #4
 8007cb6:	6008      	str	r0, [r1, #0]
 8007cb8:	0628      	lsls	r0, r5, #24
 8007cba:	d501      	bpl.n	8007cc0 <_printf_i+0xec>
 8007cbc:	681d      	ldr	r5, [r3, #0]
 8007cbe:	e002      	b.n	8007cc6 <_printf_i+0xf2>
 8007cc0:	0669      	lsls	r1, r5, #25
 8007cc2:	d5fb      	bpl.n	8007cbc <_printf_i+0xe8>
 8007cc4:	881d      	ldrh	r5, [r3, #0]
 8007cc6:	4854      	ldr	r0, [pc, #336]	; (8007e18 <_printf_i+0x244>)
 8007cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8007cca:	bf0c      	ite	eq
 8007ccc:	2308      	moveq	r3, #8
 8007cce:	230a      	movne	r3, #10
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cd6:	6866      	ldr	r6, [r4, #4]
 8007cd8:	60a6      	str	r6, [r4, #8]
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	bfa2      	ittt	ge
 8007cde:	6821      	ldrge	r1, [r4, #0]
 8007ce0:	f021 0104 	bicge.w	r1, r1, #4
 8007ce4:	6021      	strge	r1, [r4, #0]
 8007ce6:	b90d      	cbnz	r5, 8007cec <_printf_i+0x118>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	d04d      	beq.n	8007d88 <_printf_i+0x1b4>
 8007cec:	4616      	mov	r6, r2
 8007cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8007cf6:	5dc7      	ldrb	r7, [r0, r7]
 8007cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cfc:	462f      	mov	r7, r5
 8007cfe:	42bb      	cmp	r3, r7
 8007d00:	460d      	mov	r5, r1
 8007d02:	d9f4      	bls.n	8007cee <_printf_i+0x11a>
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d10b      	bne.n	8007d20 <_printf_i+0x14c>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	07df      	lsls	r7, r3, #31
 8007d0c:	d508      	bpl.n	8007d20 <_printf_i+0x14c>
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	6861      	ldr	r1, [r4, #4]
 8007d12:	4299      	cmp	r1, r3
 8007d14:	bfde      	ittt	le
 8007d16:	2330      	movle	r3, #48	; 0x30
 8007d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d20:	1b92      	subs	r2, r2, r6
 8007d22:	6122      	str	r2, [r4, #16]
 8007d24:	f8cd a000 	str.w	sl, [sp]
 8007d28:	464b      	mov	r3, r9
 8007d2a:	aa03      	add	r2, sp, #12
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f7ff fee2 	bl	8007af8 <_printf_common>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d14c      	bne.n	8007dd2 <_printf_i+0x1fe>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b004      	add	sp, #16
 8007d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d42:	4835      	ldr	r0, [pc, #212]	; (8007e18 <_printf_i+0x244>)
 8007d44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	680e      	ldr	r6, [r1, #0]
 8007d4c:	061f      	lsls	r7, r3, #24
 8007d4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d52:	600e      	str	r6, [r1, #0]
 8007d54:	d514      	bpl.n	8007d80 <_printf_i+0x1ac>
 8007d56:	07d9      	lsls	r1, r3, #31
 8007d58:	bf44      	itt	mi
 8007d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d5e:	6023      	strmi	r3, [r4, #0]
 8007d60:	b91d      	cbnz	r5, 8007d6a <_printf_i+0x196>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	f023 0320 	bic.w	r3, r3, #32
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	2310      	movs	r3, #16
 8007d6c:	e7b0      	b.n	8007cd0 <_printf_i+0xfc>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	f043 0320 	orr.w	r3, r3, #32
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	2378      	movs	r3, #120	; 0x78
 8007d78:	4828      	ldr	r0, [pc, #160]	; (8007e1c <_printf_i+0x248>)
 8007d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d7e:	e7e3      	b.n	8007d48 <_printf_i+0x174>
 8007d80:	065e      	lsls	r6, r3, #25
 8007d82:	bf48      	it	mi
 8007d84:	b2ad      	uxthmi	r5, r5
 8007d86:	e7e6      	b.n	8007d56 <_printf_i+0x182>
 8007d88:	4616      	mov	r6, r2
 8007d8a:	e7bb      	b.n	8007d04 <_printf_i+0x130>
 8007d8c:	680b      	ldr	r3, [r1, #0]
 8007d8e:	6826      	ldr	r6, [r4, #0]
 8007d90:	6960      	ldr	r0, [r4, #20]
 8007d92:	1d1d      	adds	r5, r3, #4
 8007d94:	600d      	str	r5, [r1, #0]
 8007d96:	0635      	lsls	r5, r6, #24
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	d501      	bpl.n	8007da0 <_printf_i+0x1cc>
 8007d9c:	6018      	str	r0, [r3, #0]
 8007d9e:	e002      	b.n	8007da6 <_printf_i+0x1d2>
 8007da0:	0671      	lsls	r1, r6, #25
 8007da2:	d5fb      	bpl.n	8007d9c <_printf_i+0x1c8>
 8007da4:	8018      	strh	r0, [r3, #0]
 8007da6:	2300      	movs	r3, #0
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	4616      	mov	r6, r2
 8007dac:	e7ba      	b.n	8007d24 <_printf_i+0x150>
 8007dae:	680b      	ldr	r3, [r1, #0]
 8007db0:	1d1a      	adds	r2, r3, #4
 8007db2:	600a      	str	r2, [r1, #0]
 8007db4:	681e      	ldr	r6, [r3, #0]
 8007db6:	6862      	ldr	r2, [r4, #4]
 8007db8:	2100      	movs	r1, #0
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7f8 fa10 	bl	80001e0 <memchr>
 8007dc0:	b108      	cbz	r0, 8007dc6 <_printf_i+0x1f2>
 8007dc2:	1b80      	subs	r0, r0, r6
 8007dc4:	6060      	str	r0, [r4, #4]
 8007dc6:	6863      	ldr	r3, [r4, #4]
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd0:	e7a8      	b.n	8007d24 <_printf_i+0x150>
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	4632      	mov	r2, r6
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	47d0      	blx	sl
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d0ab      	beq.n	8007d38 <_printf_i+0x164>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	079b      	lsls	r3, r3, #30
 8007de4:	d413      	bmi.n	8007e0e <_printf_i+0x23a>
 8007de6:	68e0      	ldr	r0, [r4, #12]
 8007de8:	9b03      	ldr	r3, [sp, #12]
 8007dea:	4298      	cmp	r0, r3
 8007dec:	bfb8      	it	lt
 8007dee:	4618      	movlt	r0, r3
 8007df0:	e7a4      	b.n	8007d3c <_printf_i+0x168>
 8007df2:	2301      	movs	r3, #1
 8007df4:	4632      	mov	r2, r6
 8007df6:	4649      	mov	r1, r9
 8007df8:	4640      	mov	r0, r8
 8007dfa:	47d0      	blx	sl
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d09b      	beq.n	8007d38 <_printf_i+0x164>
 8007e00:	3501      	adds	r5, #1
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	9903      	ldr	r1, [sp, #12]
 8007e06:	1a5b      	subs	r3, r3, r1
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	dcf2      	bgt.n	8007df2 <_printf_i+0x21e>
 8007e0c:	e7eb      	b.n	8007de6 <_printf_i+0x212>
 8007e0e:	2500      	movs	r5, #0
 8007e10:	f104 0619 	add.w	r6, r4, #25
 8007e14:	e7f5      	b.n	8007e02 <_printf_i+0x22e>
 8007e16:	bf00      	nop
 8007e18:	0800a03e 	.word	0x0800a03e
 8007e1c:	0800a04f 	.word	0x0800a04f

08007e20 <iprintf>:
 8007e20:	b40f      	push	{r0, r1, r2, r3}
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <iprintf+0x2c>)
 8007e24:	b513      	push	{r0, r1, r4, lr}
 8007e26:	681c      	ldr	r4, [r3, #0]
 8007e28:	b124      	cbz	r4, 8007e34 <iprintf+0x14>
 8007e2a:	69a3      	ldr	r3, [r4, #24]
 8007e2c:	b913      	cbnz	r3, 8007e34 <iprintf+0x14>
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fede 	bl	8008bf0 <__sinit>
 8007e34:	ab05      	add	r3, sp, #20
 8007e36:	9a04      	ldr	r2, [sp, #16]
 8007e38:	68a1      	ldr	r1, [r4, #8]
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f001 fbe7 	bl	8009610 <_vfiprintf_r>
 8007e42:	b002      	add	sp, #8
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	b004      	add	sp, #16
 8007e4a:	4770      	bx	lr
 8007e4c:	20000010 	.word	0x20000010

08007e50 <quorem>:
 8007e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	6903      	ldr	r3, [r0, #16]
 8007e56:	690c      	ldr	r4, [r1, #16]
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	f2c0 8081 	blt.w	8007f62 <quorem+0x112>
 8007e60:	3c01      	subs	r4, #1
 8007e62:	f101 0814 	add.w	r8, r1, #20
 8007e66:	f100 0514 	add.w	r5, r0, #20
 8007e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e88:	d331      	bcc.n	8007eee <quorem+0x9e>
 8007e8a:	f04f 0e00 	mov.w	lr, #0
 8007e8e:	4640      	mov	r0, r8
 8007e90:	46ac      	mov	ip, r5
 8007e92:	46f2      	mov	sl, lr
 8007e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e98:	b293      	uxth	r3, r2
 8007e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ea8:	0c12      	lsrs	r2, r2, #16
 8007eaa:	f8dc a000 	ldr.w	sl, [ip]
 8007eae:	fb06 e202 	mla	r2, r6, r2, lr
 8007eb2:	fa13 f38a 	uxtah	r3, r3, sl
 8007eb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eba:	fa1f fa82 	uxth.w	sl, r2
 8007ebe:	f8dc 2000 	ldr.w	r2, [ip]
 8007ec2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ec6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ed0:	4581      	cmp	r9, r0
 8007ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eda:	d2db      	bcs.n	8007e94 <quorem+0x44>
 8007edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ee0:	b92b      	cbnz	r3, 8007eee <quorem+0x9e>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	3b04      	subs	r3, #4
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	d32e      	bcc.n	8007f4a <quorem+0xfa>
 8007eec:	613c      	str	r4, [r7, #16]
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f001 f9aa 	bl	8009248 <__mcmp>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	db24      	blt.n	8007f42 <quorem+0xf2>
 8007ef8:	3601      	adds	r6, #1
 8007efa:	4628      	mov	r0, r5
 8007efc:	f04f 0c00 	mov.w	ip, #0
 8007f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f04:	f8d0 e000 	ldr.w	lr, [r0]
 8007f08:	b293      	uxth	r3, r2
 8007f0a:	ebac 0303 	sub.w	r3, ip, r3
 8007f0e:	0c12      	lsrs	r2, r2, #16
 8007f10:	fa13 f38e 	uxtah	r3, r3, lr
 8007f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f22:	45c1      	cmp	r9, r8
 8007f24:	f840 3b04 	str.w	r3, [r0], #4
 8007f28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f2c:	d2e8      	bcs.n	8007f00 <quorem+0xb0>
 8007f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f36:	b922      	cbnz	r2, 8007f42 <quorem+0xf2>
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	d30a      	bcc.n	8007f56 <quorem+0x106>
 8007f40:	613c      	str	r4, [r7, #16]
 8007f42:	4630      	mov	r0, r6
 8007f44:	b003      	add	sp, #12
 8007f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	3b04      	subs	r3, #4
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	d1cc      	bne.n	8007eec <quorem+0x9c>
 8007f52:	3c01      	subs	r4, #1
 8007f54:	e7c7      	b.n	8007ee6 <quorem+0x96>
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d1f0      	bne.n	8007f40 <quorem+0xf0>
 8007f5e:	3c01      	subs	r4, #1
 8007f60:	e7eb      	b.n	8007f3a <quorem+0xea>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e7ee      	b.n	8007f44 <quorem+0xf4>
	...

08007f68 <_dtoa_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	ed2d 8b02 	vpush	{d8}
 8007f70:	ec57 6b10 	vmov	r6, r7, d0
 8007f74:	b095      	sub	sp, #84	; 0x54
 8007f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f7c:	9105      	str	r1, [sp, #20]
 8007f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f82:	4604      	mov	r4, r0
 8007f84:	9209      	str	r2, [sp, #36]	; 0x24
 8007f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f88:	b975      	cbnz	r5, 8007fa8 <_dtoa_r+0x40>
 8007f8a:	2010      	movs	r0, #16
 8007f8c:	f000 fed6 	bl	8008d3c <malloc>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6260      	str	r0, [r4, #36]	; 0x24
 8007f94:	b920      	cbnz	r0, 8007fa0 <_dtoa_r+0x38>
 8007f96:	4bb2      	ldr	r3, [pc, #712]	; (8008260 <_dtoa_r+0x2f8>)
 8007f98:	21ea      	movs	r1, #234	; 0xea
 8007f9a:	48b2      	ldr	r0, [pc, #712]	; (8008264 <_dtoa_r+0x2fc>)
 8007f9c:	f001 fd8e 	bl	8009abc <__assert_func>
 8007fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fa4:	6005      	str	r5, [r0, #0]
 8007fa6:	60c5      	str	r5, [r0, #12]
 8007fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007faa:	6819      	ldr	r1, [r3, #0]
 8007fac:	b151      	cbz	r1, 8007fc4 <_dtoa_r+0x5c>
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	604a      	str	r2, [r1, #4]
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4093      	lsls	r3, r2
 8007fb6:	608b      	str	r3, [r1, #8]
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 ff07 	bl	8008dcc <_Bfree>
 8007fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	1e3b      	subs	r3, r7, #0
 8007fc6:	bfb9      	ittee	lt
 8007fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fcc:	9303      	strlt	r3, [sp, #12]
 8007fce:	2300      	movge	r3, #0
 8007fd0:	f8c8 3000 	strge.w	r3, [r8]
 8007fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007fd8:	4ba3      	ldr	r3, [pc, #652]	; (8008268 <_dtoa_r+0x300>)
 8007fda:	bfbc      	itt	lt
 8007fdc:	2201      	movlt	r2, #1
 8007fde:	f8c8 2000 	strlt.w	r2, [r8]
 8007fe2:	ea33 0309 	bics.w	r3, r3, r9
 8007fe6:	d11b      	bne.n	8008020 <_dtoa_r+0xb8>
 8007fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ff4:	4333      	orrs	r3, r6
 8007ff6:	f000 857a 	beq.w	8008aee <_dtoa_r+0xb86>
 8007ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ffc:	b963      	cbnz	r3, 8008018 <_dtoa_r+0xb0>
 8007ffe:	4b9b      	ldr	r3, [pc, #620]	; (800826c <_dtoa_r+0x304>)
 8008000:	e024      	b.n	800804c <_dtoa_r+0xe4>
 8008002:	4b9b      	ldr	r3, [pc, #620]	; (8008270 <_dtoa_r+0x308>)
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	9800      	ldr	r0, [sp, #0]
 800800e:	b015      	add	sp, #84	; 0x54
 8008010:	ecbd 8b02 	vpop	{d8}
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	4b94      	ldr	r3, [pc, #592]	; (800826c <_dtoa_r+0x304>)
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	3303      	adds	r3, #3
 800801e:	e7f3      	b.n	8008008 <_dtoa_r+0xa0>
 8008020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	ec51 0b17 	vmov	r0, r1, d7
 800802a:	2300      	movs	r3, #0
 800802c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008030:	f7f8 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008034:	4680      	mov	r8, r0
 8008036:	b158      	cbz	r0, 8008050 <_dtoa_r+0xe8>
 8008038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800803a:	2301      	movs	r3, #1
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8551 	beq.w	8008ae8 <_dtoa_r+0xb80>
 8008046:	488b      	ldr	r0, [pc, #556]	; (8008274 <_dtoa_r+0x30c>)
 8008048:	6018      	str	r0, [r3, #0]
 800804a:	1e43      	subs	r3, r0, #1
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	e7dd      	b.n	800800c <_dtoa_r+0xa4>
 8008050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008054:	aa12      	add	r2, sp, #72	; 0x48
 8008056:	a913      	add	r1, sp, #76	; 0x4c
 8008058:	4620      	mov	r0, r4
 800805a:	f001 f999 	bl	8009390 <__d2b>
 800805e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008062:	4683      	mov	fp, r0
 8008064:	2d00      	cmp	r5, #0
 8008066:	d07c      	beq.n	8008162 <_dtoa_r+0x1fa>
 8008068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800806e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800807a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800807e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008082:	4b7d      	ldr	r3, [pc, #500]	; (8008278 <_dtoa_r+0x310>)
 8008084:	2200      	movs	r2, #0
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 f8fd 	bl	8000288 <__aeabi_dsub>
 800808e:	a36e      	add	r3, pc, #440	; (adr r3, 8008248 <_dtoa_r+0x2e0>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f7f8 fab0 	bl	80005f8 <__aeabi_dmul>
 8008098:	a36d      	add	r3, pc, #436	; (adr r3, 8008250 <_dtoa_r+0x2e8>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 f8f5 	bl	800028c <__adddf3>
 80080a2:	4606      	mov	r6, r0
 80080a4:	4628      	mov	r0, r5
 80080a6:	460f      	mov	r7, r1
 80080a8:	f7f8 fa3c 	bl	8000524 <__aeabi_i2d>
 80080ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008258 <_dtoa_r+0x2f0>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 faa1 	bl	80005f8 <__aeabi_dmul>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4630      	mov	r0, r6
 80080bc:	4639      	mov	r1, r7
 80080be:	f7f8 f8e5 	bl	800028c <__adddf3>
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	f7f8 fd47 	bl	8000b58 <__aeabi_d2iz>
 80080ca:	2200      	movs	r2, #0
 80080cc:	4682      	mov	sl, r0
 80080ce:	2300      	movs	r3, #0
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 fd02 	bl	8000adc <__aeabi_dcmplt>
 80080d8:	b148      	cbz	r0, 80080ee <_dtoa_r+0x186>
 80080da:	4650      	mov	r0, sl
 80080dc:	f7f8 fa22 	bl	8000524 <__aeabi_i2d>
 80080e0:	4632      	mov	r2, r6
 80080e2:	463b      	mov	r3, r7
 80080e4:	f7f8 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e8:	b908      	cbnz	r0, 80080ee <_dtoa_r+0x186>
 80080ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ee:	f1ba 0f16 	cmp.w	sl, #22
 80080f2:	d854      	bhi.n	800819e <_dtoa_r+0x236>
 80080f4:	4b61      	ldr	r3, [pc, #388]	; (800827c <_dtoa_r+0x314>)
 80080f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008102:	f7f8 fceb 	bl	8000adc <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d04b      	beq.n	80081a2 <_dtoa_r+0x23a>
 800810a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810e:	2300      	movs	r3, #0
 8008110:	930e      	str	r3, [sp, #56]	; 0x38
 8008112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008114:	1b5d      	subs	r5, r3, r5
 8008116:	1e6b      	subs	r3, r5, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	bf43      	ittte	mi
 800811c:	2300      	movmi	r3, #0
 800811e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008122:	9304      	strmi	r3, [sp, #16]
 8008124:	f04f 0800 	movpl.w	r8, #0
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	db3b      	blt.n	80081a6 <_dtoa_r+0x23e>
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008134:	4453      	add	r3, sl
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	2300      	movs	r3, #0
 800813a:	9306      	str	r3, [sp, #24]
 800813c:	9b05      	ldr	r3, [sp, #20]
 800813e:	2b09      	cmp	r3, #9
 8008140:	d869      	bhi.n	8008216 <_dtoa_r+0x2ae>
 8008142:	2b05      	cmp	r3, #5
 8008144:	bfc4      	itt	gt
 8008146:	3b04      	subgt	r3, #4
 8008148:	9305      	strgt	r3, [sp, #20]
 800814a:	9b05      	ldr	r3, [sp, #20]
 800814c:	f1a3 0302 	sub.w	r3, r3, #2
 8008150:	bfcc      	ite	gt
 8008152:	2500      	movgt	r5, #0
 8008154:	2501      	movle	r5, #1
 8008156:	2b03      	cmp	r3, #3
 8008158:	d869      	bhi.n	800822e <_dtoa_r+0x2c6>
 800815a:	e8df f003 	tbb	[pc, r3]
 800815e:	4e2c      	.short	0x4e2c
 8008160:	5a4c      	.short	0x5a4c
 8008162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008166:	441d      	add	r5, r3
 8008168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800816c:	2b20      	cmp	r3, #32
 800816e:	bfc1      	itttt	gt
 8008170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008178:	fa09 f303 	lslgt.w	r3, r9, r3
 800817c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008180:	bfda      	itte	le
 8008182:	f1c3 0320 	rsble	r3, r3, #32
 8008186:	fa06 f003 	lslle.w	r0, r6, r3
 800818a:	4318      	orrgt	r0, r3
 800818c:	f7f8 f9ba 	bl	8000504 <__aeabi_ui2d>
 8008190:	2301      	movs	r3, #1
 8008192:	4606      	mov	r6, r0
 8008194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008198:	3d01      	subs	r5, #1
 800819a:	9310      	str	r3, [sp, #64]	; 0x40
 800819c:	e771      	b.n	8008082 <_dtoa_r+0x11a>
 800819e:	2301      	movs	r3, #1
 80081a0:	e7b6      	b.n	8008110 <_dtoa_r+0x1a8>
 80081a2:	900e      	str	r0, [sp, #56]	; 0x38
 80081a4:	e7b5      	b.n	8008112 <_dtoa_r+0x1aa>
 80081a6:	f1ca 0300 	rsb	r3, sl, #0
 80081aa:	9306      	str	r3, [sp, #24]
 80081ac:	2300      	movs	r3, #0
 80081ae:	eba8 080a 	sub.w	r8, r8, sl
 80081b2:	930d      	str	r3, [sp, #52]	; 0x34
 80081b4:	e7c2      	b.n	800813c <_dtoa_r+0x1d4>
 80081b6:	2300      	movs	r3, #0
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dc39      	bgt.n	8008234 <_dtoa_r+0x2cc>
 80081c0:	f04f 0901 	mov.w	r9, #1
 80081c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80081c8:	464b      	mov	r3, r9
 80081ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081d0:	2200      	movs	r2, #0
 80081d2:	6042      	str	r2, [r0, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	f102 0614 	add.w	r6, r2, #20
 80081da:	429e      	cmp	r6, r3
 80081dc:	6841      	ldr	r1, [r0, #4]
 80081de:	d92f      	bls.n	8008240 <_dtoa_r+0x2d8>
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fdb3 	bl	8008d4c <_Balloc>
 80081e6:	9000      	str	r0, [sp, #0]
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d14b      	bne.n	8008284 <_dtoa_r+0x31c>
 80081ec:	4b24      	ldr	r3, [pc, #144]	; (8008280 <_dtoa_r+0x318>)
 80081ee:	4602      	mov	r2, r0
 80081f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081f4:	e6d1      	b.n	8007f9a <_dtoa_r+0x32>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e7de      	b.n	80081b8 <_dtoa_r+0x250>
 80081fa:	2300      	movs	r3, #0
 80081fc:	9308      	str	r3, [sp, #32]
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	eb0a 0903 	add.w	r9, sl, r3
 8008204:	f109 0301 	add.w	r3, r9, #1
 8008208:	2b01      	cmp	r3, #1
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	bfb8      	it	lt
 800820e:	2301      	movlt	r3, #1
 8008210:	e7dd      	b.n	80081ce <_dtoa_r+0x266>
 8008212:	2301      	movs	r3, #1
 8008214:	e7f2      	b.n	80081fc <_dtoa_r+0x294>
 8008216:	2501      	movs	r5, #1
 8008218:	2300      	movs	r3, #0
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	9508      	str	r5, [sp, #32]
 800821e:	f04f 39ff 	mov.w	r9, #4294967295
 8008222:	2200      	movs	r2, #0
 8008224:	f8cd 9004 	str.w	r9, [sp, #4]
 8008228:	2312      	movs	r3, #18
 800822a:	9209      	str	r2, [sp, #36]	; 0x24
 800822c:	e7cf      	b.n	80081ce <_dtoa_r+0x266>
 800822e:	2301      	movs	r3, #1
 8008230:	9308      	str	r3, [sp, #32]
 8008232:	e7f4      	b.n	800821e <_dtoa_r+0x2b6>
 8008234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008238:	f8cd 9004 	str.w	r9, [sp, #4]
 800823c:	464b      	mov	r3, r9
 800823e:	e7c6      	b.n	80081ce <_dtoa_r+0x266>
 8008240:	3101      	adds	r1, #1
 8008242:	6041      	str	r1, [r0, #4]
 8008244:	0052      	lsls	r2, r2, #1
 8008246:	e7c6      	b.n	80081d6 <_dtoa_r+0x26e>
 8008248:	636f4361 	.word	0x636f4361
 800824c:	3fd287a7 	.word	0x3fd287a7
 8008250:	8b60c8b3 	.word	0x8b60c8b3
 8008254:	3fc68a28 	.word	0x3fc68a28
 8008258:	509f79fb 	.word	0x509f79fb
 800825c:	3fd34413 	.word	0x3fd34413
 8008260:	0800a06d 	.word	0x0800a06d
 8008264:	0800a084 	.word	0x0800a084
 8008268:	7ff00000 	.word	0x7ff00000
 800826c:	0800a069 	.word	0x0800a069
 8008270:	0800a060 	.word	0x0800a060
 8008274:	0800a03d 	.word	0x0800a03d
 8008278:	3ff80000 	.word	0x3ff80000
 800827c:	0800a1e0 	.word	0x0800a1e0
 8008280:	0800a0e3 	.word	0x0800a0e3
 8008284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008286:	9a00      	ldr	r2, [sp, #0]
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	2b0e      	cmp	r3, #14
 800828e:	f200 80ad 	bhi.w	80083ec <_dtoa_r+0x484>
 8008292:	2d00      	cmp	r5, #0
 8008294:	f000 80aa 	beq.w	80083ec <_dtoa_r+0x484>
 8008298:	f1ba 0f00 	cmp.w	sl, #0
 800829c:	dd36      	ble.n	800830c <_dtoa_r+0x3a4>
 800829e:	4ac3      	ldr	r2, [pc, #780]	; (80085ac <_dtoa_r+0x644>)
 80082a0:	f00a 030f 	and.w	r3, sl, #15
 80082a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082a8:	ed93 7b00 	vldr	d7, [r3]
 80082ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082b4:	eeb0 8a47 	vmov.f32	s16, s14
 80082b8:	eef0 8a67 	vmov.f32	s17, s15
 80082bc:	d016      	beq.n	80082ec <_dtoa_r+0x384>
 80082be:	4bbc      	ldr	r3, [pc, #752]	; (80085b0 <_dtoa_r+0x648>)
 80082c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082c8:	f7f8 fac0 	bl	800084c <__aeabi_ddiv>
 80082cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d0:	f007 070f 	and.w	r7, r7, #15
 80082d4:	2503      	movs	r5, #3
 80082d6:	4eb6      	ldr	r6, [pc, #728]	; (80085b0 <_dtoa_r+0x648>)
 80082d8:	b957      	cbnz	r7, 80082f0 <_dtoa_r+0x388>
 80082da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082de:	ec53 2b18 	vmov	r2, r3, d8
 80082e2:	f7f8 fab3 	bl	800084c <__aeabi_ddiv>
 80082e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ea:	e029      	b.n	8008340 <_dtoa_r+0x3d8>
 80082ec:	2502      	movs	r5, #2
 80082ee:	e7f2      	b.n	80082d6 <_dtoa_r+0x36e>
 80082f0:	07f9      	lsls	r1, r7, #31
 80082f2:	d508      	bpl.n	8008306 <_dtoa_r+0x39e>
 80082f4:	ec51 0b18 	vmov	r0, r1, d8
 80082f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	ec41 0b18 	vmov	d8, r0, r1
 8008304:	3501      	adds	r5, #1
 8008306:	107f      	asrs	r7, r7, #1
 8008308:	3608      	adds	r6, #8
 800830a:	e7e5      	b.n	80082d8 <_dtoa_r+0x370>
 800830c:	f000 80a6 	beq.w	800845c <_dtoa_r+0x4f4>
 8008310:	f1ca 0600 	rsb	r6, sl, #0
 8008314:	4ba5      	ldr	r3, [pc, #660]	; (80085ac <_dtoa_r+0x644>)
 8008316:	4fa6      	ldr	r7, [pc, #664]	; (80085b0 <_dtoa_r+0x648>)
 8008318:	f006 020f 	and.w	r2, r6, #15
 800831c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008328:	f7f8 f966 	bl	80005f8 <__aeabi_dmul>
 800832c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008330:	1136      	asrs	r6, r6, #4
 8008332:	2300      	movs	r3, #0
 8008334:	2502      	movs	r5, #2
 8008336:	2e00      	cmp	r6, #0
 8008338:	f040 8085 	bne.w	8008446 <_dtoa_r+0x4de>
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1d2      	bne.n	80082e6 <_dtoa_r+0x37e>
 8008340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 808c 	beq.w	8008460 <_dtoa_r+0x4f8>
 8008348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800834c:	4b99      	ldr	r3, [pc, #612]	; (80085b4 <_dtoa_r+0x64c>)
 800834e:	2200      	movs	r2, #0
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f8 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8008358:	2800      	cmp	r0, #0
 800835a:	f000 8081 	beq.w	8008460 <_dtoa_r+0x4f8>
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d07d      	beq.n	8008460 <_dtoa_r+0x4f8>
 8008364:	f1b9 0f00 	cmp.w	r9, #0
 8008368:	dd3c      	ble.n	80083e4 <_dtoa_r+0x47c>
 800836a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	2200      	movs	r2, #0
 8008372:	4b91      	ldr	r3, [pc, #580]	; (80085b8 <_dtoa_r+0x650>)
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008380:	3501      	adds	r5, #1
 8008382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800838a:	4628      	mov	r0, r5
 800838c:	f7f8 f8ca 	bl	8000524 <__aeabi_i2d>
 8008390:	4632      	mov	r2, r6
 8008392:	463b      	mov	r3, r7
 8008394:	f7f8 f930 	bl	80005f8 <__aeabi_dmul>
 8008398:	4b88      	ldr	r3, [pc, #544]	; (80085bc <_dtoa_r+0x654>)
 800839a:	2200      	movs	r2, #0
 800839c:	f7f7 ff76 	bl	800028c <__adddf3>
 80083a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80083a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d15c      	bne.n	800846a <_dtoa_r+0x502>
 80083b0:	4b83      	ldr	r3, [pc, #524]	; (80085c0 <_dtoa_r+0x658>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f7 ff66 	bl	8000288 <__aeabi_dsub>
 80083bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c0:	4606      	mov	r6, r0
 80083c2:	460f      	mov	r7, r1
 80083c4:	f7f8 fba8 	bl	8000b18 <__aeabi_dcmpgt>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f040 8296 	bne.w	80088fa <_dtoa_r+0x992>
 80083ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083d2:	4630      	mov	r0, r6
 80083d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083d8:	4639      	mov	r1, r7
 80083da:	f7f8 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f040 8288 	bne.w	80088f4 <_dtoa_r+0x98c>
 80083e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f2c0 8158 	blt.w	80086a4 <_dtoa_r+0x73c>
 80083f4:	f1ba 0f0e 	cmp.w	sl, #14
 80083f8:	f300 8154 	bgt.w	80086a4 <_dtoa_r+0x73c>
 80083fc:	4b6b      	ldr	r3, [pc, #428]	; (80085ac <_dtoa_r+0x644>)
 80083fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	2b00      	cmp	r3, #0
 800840a:	f280 80e3 	bge.w	80085d4 <_dtoa_r+0x66c>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f300 80df 	bgt.w	80085d4 <_dtoa_r+0x66c>
 8008416:	f040 826d 	bne.w	80088f4 <_dtoa_r+0x98c>
 800841a:	4b69      	ldr	r3, [pc, #420]	; (80085c0 <_dtoa_r+0x658>)
 800841c:	2200      	movs	r2, #0
 800841e:	4640      	mov	r0, r8
 8008420:	4649      	mov	r1, r9
 8008422:	f7f8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8008426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800842a:	f7f8 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800842e:	9e01      	ldr	r6, [sp, #4]
 8008430:	4637      	mov	r7, r6
 8008432:	2800      	cmp	r0, #0
 8008434:	f040 8243 	bne.w	80088be <_dtoa_r+0x956>
 8008438:	9d00      	ldr	r5, [sp, #0]
 800843a:	2331      	movs	r3, #49	; 0x31
 800843c:	f805 3b01 	strb.w	r3, [r5], #1
 8008440:	f10a 0a01 	add.w	sl, sl, #1
 8008444:	e23f      	b.n	80088c6 <_dtoa_r+0x95e>
 8008446:	07f2      	lsls	r2, r6, #31
 8008448:	d505      	bpl.n	8008456 <_dtoa_r+0x4ee>
 800844a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844e:	f7f8 f8d3 	bl	80005f8 <__aeabi_dmul>
 8008452:	3501      	adds	r5, #1
 8008454:	2301      	movs	r3, #1
 8008456:	1076      	asrs	r6, r6, #1
 8008458:	3708      	adds	r7, #8
 800845a:	e76c      	b.n	8008336 <_dtoa_r+0x3ce>
 800845c:	2502      	movs	r5, #2
 800845e:	e76f      	b.n	8008340 <_dtoa_r+0x3d8>
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	f8cd a01c 	str.w	sl, [sp, #28]
 8008466:	930c      	str	r3, [sp, #48]	; 0x30
 8008468:	e78d      	b.n	8008386 <_dtoa_r+0x41e>
 800846a:	9900      	ldr	r1, [sp, #0]
 800846c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800846e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008470:	4b4e      	ldr	r3, [pc, #312]	; (80085ac <_dtoa_r+0x644>)
 8008472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008476:	4401      	add	r1, r0
 8008478:	9102      	str	r1, [sp, #8]
 800847a:	9908      	ldr	r1, [sp, #32]
 800847c:	eeb0 8a47 	vmov.f32	s16, s14
 8008480:	eef0 8a67 	vmov.f32	s17, s15
 8008484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800848c:	2900      	cmp	r1, #0
 800848e:	d045      	beq.n	800851c <_dtoa_r+0x5b4>
 8008490:	494c      	ldr	r1, [pc, #304]	; (80085c4 <_dtoa_r+0x65c>)
 8008492:	2000      	movs	r0, #0
 8008494:	f7f8 f9da 	bl	800084c <__aeabi_ddiv>
 8008498:	ec53 2b18 	vmov	r2, r3, d8
 800849c:	f7f7 fef4 	bl	8000288 <__aeabi_dsub>
 80084a0:	9d00      	ldr	r5, [sp, #0]
 80084a2:	ec41 0b18 	vmov	d8, r0, r1
 80084a6:	4639      	mov	r1, r7
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7f8 fb55 	bl	8000b58 <__aeabi_d2iz>
 80084ae:	900c      	str	r0, [sp, #48]	; 0x30
 80084b0:	f7f8 f838 	bl	8000524 <__aeabi_i2d>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4630      	mov	r0, r6
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	3330      	adds	r3, #48	; 0x30
 80084c4:	f805 3b01 	strb.w	r3, [r5], #1
 80084c8:	ec53 2b18 	vmov	r2, r3, d8
 80084cc:	4606      	mov	r6, r0
 80084ce:	460f      	mov	r7, r1
 80084d0:	f7f8 fb04 	bl	8000adc <__aeabi_dcmplt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d165      	bne.n	80085a4 <_dtoa_r+0x63c>
 80084d8:	4632      	mov	r2, r6
 80084da:	463b      	mov	r3, r7
 80084dc:	4935      	ldr	r1, [pc, #212]	; (80085b4 <_dtoa_r+0x64c>)
 80084de:	2000      	movs	r0, #0
 80084e0:	f7f7 fed2 	bl	8000288 <__aeabi_dsub>
 80084e4:	ec53 2b18 	vmov	r2, r3, d8
 80084e8:	f7f8 faf8 	bl	8000adc <__aeabi_dcmplt>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	f040 80b9 	bne.w	8008664 <_dtoa_r+0x6fc>
 80084f2:	9b02      	ldr	r3, [sp, #8]
 80084f4:	429d      	cmp	r5, r3
 80084f6:	f43f af75 	beq.w	80083e4 <_dtoa_r+0x47c>
 80084fa:	4b2f      	ldr	r3, [pc, #188]	; (80085b8 <_dtoa_r+0x650>)
 80084fc:	ec51 0b18 	vmov	r0, r1, d8
 8008500:	2200      	movs	r2, #0
 8008502:	f7f8 f879 	bl	80005f8 <__aeabi_dmul>
 8008506:	4b2c      	ldr	r3, [pc, #176]	; (80085b8 <_dtoa_r+0x650>)
 8008508:	ec41 0b18 	vmov	d8, r0, r1
 800850c:	2200      	movs	r2, #0
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	f7f8 f871 	bl	80005f8 <__aeabi_dmul>
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	e7c4      	b.n	80084a6 <_dtoa_r+0x53e>
 800851c:	ec51 0b17 	vmov	r0, r1, d7
 8008520:	f7f8 f86a 	bl	80005f8 <__aeabi_dmul>
 8008524:	9b02      	ldr	r3, [sp, #8]
 8008526:	9d00      	ldr	r5, [sp, #0]
 8008528:	930c      	str	r3, [sp, #48]	; 0x30
 800852a:	ec41 0b18 	vmov	d8, r0, r1
 800852e:	4639      	mov	r1, r7
 8008530:	4630      	mov	r0, r6
 8008532:	f7f8 fb11 	bl	8000b58 <__aeabi_d2iz>
 8008536:	9011      	str	r0, [sp, #68]	; 0x44
 8008538:	f7f7 fff4 	bl	8000524 <__aeabi_i2d>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	f7f7 fea0 	bl	8000288 <__aeabi_dsub>
 8008548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800854a:	3330      	adds	r3, #48	; 0x30
 800854c:	f805 3b01 	strb.w	r3, [r5], #1
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	429d      	cmp	r5, r3
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	d134      	bne.n	80085c8 <_dtoa_r+0x660>
 800855e:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <_dtoa_r+0x65c>)
 8008560:	ec51 0b18 	vmov	r0, r1, d8
 8008564:	f7f7 fe92 	bl	800028c <__adddf3>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8008574:	2800      	cmp	r0, #0
 8008576:	d175      	bne.n	8008664 <_dtoa_r+0x6fc>
 8008578:	ec53 2b18 	vmov	r2, r3, d8
 800857c:	4911      	ldr	r1, [pc, #68]	; (80085c4 <_dtoa_r+0x65c>)
 800857e:	2000      	movs	r0, #0
 8008580:	f7f7 fe82 	bl	8000288 <__aeabi_dsub>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7f8 faa6 	bl	8000adc <__aeabi_dcmplt>
 8008590:	2800      	cmp	r0, #0
 8008592:	f43f af27 	beq.w	80083e4 <_dtoa_r+0x47c>
 8008596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008598:	1e6b      	subs	r3, r5, #1
 800859a:	930c      	str	r3, [sp, #48]	; 0x30
 800859c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085a0:	2b30      	cmp	r3, #48	; 0x30
 80085a2:	d0f8      	beq.n	8008596 <_dtoa_r+0x62e>
 80085a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80085a8:	e04a      	b.n	8008640 <_dtoa_r+0x6d8>
 80085aa:	bf00      	nop
 80085ac:	0800a1e0 	.word	0x0800a1e0
 80085b0:	0800a1b8 	.word	0x0800a1b8
 80085b4:	3ff00000 	.word	0x3ff00000
 80085b8:	40240000 	.word	0x40240000
 80085bc:	401c0000 	.word	0x401c0000
 80085c0:	40140000 	.word	0x40140000
 80085c4:	3fe00000 	.word	0x3fe00000
 80085c8:	4baf      	ldr	r3, [pc, #700]	; (8008888 <_dtoa_r+0x920>)
 80085ca:	f7f8 f815 	bl	80005f8 <__aeabi_dmul>
 80085ce:	4606      	mov	r6, r0
 80085d0:	460f      	mov	r7, r1
 80085d2:	e7ac      	b.n	800852e <_dtoa_r+0x5c6>
 80085d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085d8:	9d00      	ldr	r5, [sp, #0]
 80085da:	4642      	mov	r2, r8
 80085dc:	464b      	mov	r3, r9
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f8 f933 	bl	800084c <__aeabi_ddiv>
 80085e6:	f7f8 fab7 	bl	8000b58 <__aeabi_d2iz>
 80085ea:	9002      	str	r0, [sp, #8]
 80085ec:	f7f7 ff9a 	bl	8000524 <__aeabi_i2d>
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	f7f8 f800 	bl	80005f8 <__aeabi_dmul>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f7 fe42 	bl	8000288 <__aeabi_dsub>
 8008604:	9e02      	ldr	r6, [sp, #8]
 8008606:	9f01      	ldr	r7, [sp, #4]
 8008608:	3630      	adds	r6, #48	; 0x30
 800860a:	f805 6b01 	strb.w	r6, [r5], #1
 800860e:	9e00      	ldr	r6, [sp, #0]
 8008610:	1bae      	subs	r6, r5, r6
 8008612:	42b7      	cmp	r7, r6
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	d137      	bne.n	800868a <_dtoa_r+0x722>
 800861a:	f7f7 fe37 	bl	800028c <__adddf3>
 800861e:	4642      	mov	r2, r8
 8008620:	464b      	mov	r3, r9
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	f7f8 fa77 	bl	8000b18 <__aeabi_dcmpgt>
 800862a:	b9c8      	cbnz	r0, 8008660 <_dtoa_r+0x6f8>
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f8 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8008638:	b110      	cbz	r0, 8008640 <_dtoa_r+0x6d8>
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	07d9      	lsls	r1, r3, #31
 800863e:	d40f      	bmi.n	8008660 <_dtoa_r+0x6f8>
 8008640:	4620      	mov	r0, r4
 8008642:	4659      	mov	r1, fp
 8008644:	f000 fbc2 	bl	8008dcc <_Bfree>
 8008648:	2300      	movs	r3, #0
 800864a:	702b      	strb	r3, [r5, #0]
 800864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864e:	f10a 0001 	add.w	r0, sl, #1
 8008652:	6018      	str	r0, [r3, #0]
 8008654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008656:	2b00      	cmp	r3, #0
 8008658:	f43f acd8 	beq.w	800800c <_dtoa_r+0xa4>
 800865c:	601d      	str	r5, [r3, #0]
 800865e:	e4d5      	b.n	800800c <_dtoa_r+0xa4>
 8008660:	f8cd a01c 	str.w	sl, [sp, #28]
 8008664:	462b      	mov	r3, r5
 8008666:	461d      	mov	r5, r3
 8008668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800866c:	2a39      	cmp	r2, #57	; 0x39
 800866e:	d108      	bne.n	8008682 <_dtoa_r+0x71a>
 8008670:	9a00      	ldr	r2, [sp, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d1f7      	bne.n	8008666 <_dtoa_r+0x6fe>
 8008676:	9a07      	ldr	r2, [sp, #28]
 8008678:	9900      	ldr	r1, [sp, #0]
 800867a:	3201      	adds	r2, #1
 800867c:	9207      	str	r2, [sp, #28]
 800867e:	2230      	movs	r2, #48	; 0x30
 8008680:	700a      	strb	r2, [r1, #0]
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	3201      	adds	r2, #1
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e78c      	b.n	80085a4 <_dtoa_r+0x63c>
 800868a:	4b7f      	ldr	r3, [pc, #508]	; (8008888 <_dtoa_r+0x920>)
 800868c:	2200      	movs	r2, #0
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	2200      	movs	r2, #0
 8008694:	2300      	movs	r3, #0
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	f7f8 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d09b      	beq.n	80085da <_dtoa_r+0x672>
 80086a2:	e7cd      	b.n	8008640 <_dtoa_r+0x6d8>
 80086a4:	9a08      	ldr	r2, [sp, #32]
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	f000 80c4 	beq.w	8008834 <_dtoa_r+0x8cc>
 80086ac:	9a05      	ldr	r2, [sp, #20]
 80086ae:	2a01      	cmp	r2, #1
 80086b0:	f300 80a8 	bgt.w	8008804 <_dtoa_r+0x89c>
 80086b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	f000 80a0 	beq.w	80087fc <_dtoa_r+0x894>
 80086bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086c0:	9e06      	ldr	r6, [sp, #24]
 80086c2:	4645      	mov	r5, r8
 80086c4:	9a04      	ldr	r2, [sp, #16]
 80086c6:	2101      	movs	r1, #1
 80086c8:	441a      	add	r2, r3
 80086ca:	4620      	mov	r0, r4
 80086cc:	4498      	add	r8, r3
 80086ce:	9204      	str	r2, [sp, #16]
 80086d0:	f000 fc38 	bl	8008f44 <__i2b>
 80086d4:	4607      	mov	r7, r0
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	dd0b      	ble.n	80086f2 <_dtoa_r+0x78a>
 80086da:	9b04      	ldr	r3, [sp, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dd08      	ble.n	80086f2 <_dtoa_r+0x78a>
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	9a04      	ldr	r2, [sp, #16]
 80086e4:	bfa8      	it	ge
 80086e6:	462b      	movge	r3, r5
 80086e8:	eba8 0803 	sub.w	r8, r8, r3
 80086ec:	1aed      	subs	r5, r5, r3
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	9b06      	ldr	r3, [sp, #24]
 80086f4:	b1fb      	cbz	r3, 8008736 <_dtoa_r+0x7ce>
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 809f 	beq.w	800883c <_dtoa_r+0x8d4>
 80086fe:	2e00      	cmp	r6, #0
 8008700:	dd11      	ble.n	8008726 <_dtoa_r+0x7be>
 8008702:	4639      	mov	r1, r7
 8008704:	4632      	mov	r2, r6
 8008706:	4620      	mov	r0, r4
 8008708:	f000 fcd8 	bl	80090bc <__pow5mult>
 800870c:	465a      	mov	r2, fp
 800870e:	4601      	mov	r1, r0
 8008710:	4607      	mov	r7, r0
 8008712:	4620      	mov	r0, r4
 8008714:	f000 fc2c 	bl	8008f70 <__multiply>
 8008718:	4659      	mov	r1, fp
 800871a:	9007      	str	r0, [sp, #28]
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fb55 	bl	8008dcc <_Bfree>
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	469b      	mov	fp, r3
 8008726:	9b06      	ldr	r3, [sp, #24]
 8008728:	1b9a      	subs	r2, r3, r6
 800872a:	d004      	beq.n	8008736 <_dtoa_r+0x7ce>
 800872c:	4659      	mov	r1, fp
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fcc4 	bl	80090bc <__pow5mult>
 8008734:	4683      	mov	fp, r0
 8008736:	2101      	movs	r1, #1
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fc03 	bl	8008f44 <__i2b>
 800873e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008740:	2b00      	cmp	r3, #0
 8008742:	4606      	mov	r6, r0
 8008744:	dd7c      	ble.n	8008840 <_dtoa_r+0x8d8>
 8008746:	461a      	mov	r2, r3
 8008748:	4601      	mov	r1, r0
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fcb6 	bl	80090bc <__pow5mult>
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	2b01      	cmp	r3, #1
 8008754:	4606      	mov	r6, r0
 8008756:	dd76      	ble.n	8008846 <_dtoa_r+0x8de>
 8008758:	2300      	movs	r3, #0
 800875a:	9306      	str	r3, [sp, #24]
 800875c:	6933      	ldr	r3, [r6, #16]
 800875e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008762:	6918      	ldr	r0, [r3, #16]
 8008764:	f000 fb9e 	bl	8008ea4 <__hi0bits>
 8008768:	f1c0 0020 	rsb	r0, r0, #32
 800876c:	9b04      	ldr	r3, [sp, #16]
 800876e:	4418      	add	r0, r3
 8008770:	f010 001f 	ands.w	r0, r0, #31
 8008774:	f000 8086 	beq.w	8008884 <_dtoa_r+0x91c>
 8008778:	f1c0 0320 	rsb	r3, r0, #32
 800877c:	2b04      	cmp	r3, #4
 800877e:	dd7f      	ble.n	8008880 <_dtoa_r+0x918>
 8008780:	f1c0 001c 	rsb	r0, r0, #28
 8008784:	9b04      	ldr	r3, [sp, #16]
 8008786:	4403      	add	r3, r0
 8008788:	4480      	add	r8, r0
 800878a:	4405      	add	r5, r0
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	f1b8 0f00 	cmp.w	r8, #0
 8008792:	dd05      	ble.n	80087a0 <_dtoa_r+0x838>
 8008794:	4659      	mov	r1, fp
 8008796:	4642      	mov	r2, r8
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fce9 	bl	8009170 <__lshift>
 800879e:	4683      	mov	fp, r0
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd05      	ble.n	80087b2 <_dtoa_r+0x84a>
 80087a6:	4631      	mov	r1, r6
 80087a8:	461a      	mov	r2, r3
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 fce0 	bl	8009170 <__lshift>
 80087b0:	4606      	mov	r6, r0
 80087b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d069      	beq.n	800888c <_dtoa_r+0x924>
 80087b8:	4631      	mov	r1, r6
 80087ba:	4658      	mov	r0, fp
 80087bc:	f000 fd44 	bl	8009248 <__mcmp>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	da63      	bge.n	800888c <_dtoa_r+0x924>
 80087c4:	2300      	movs	r3, #0
 80087c6:	4659      	mov	r1, fp
 80087c8:	220a      	movs	r2, #10
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fb20 	bl	8008e10 <__multadd>
 80087d0:	9b08      	ldr	r3, [sp, #32]
 80087d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087d6:	4683      	mov	fp, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 818f 	beq.w	8008afc <_dtoa_r+0xb94>
 80087de:	4639      	mov	r1, r7
 80087e0:	2300      	movs	r3, #0
 80087e2:	220a      	movs	r2, #10
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fb13 	bl	8008e10 <__multadd>
 80087ea:	f1b9 0f00 	cmp.w	r9, #0
 80087ee:	4607      	mov	r7, r0
 80087f0:	f300 808e 	bgt.w	8008910 <_dtoa_r+0x9a8>
 80087f4:	9b05      	ldr	r3, [sp, #20]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	dc50      	bgt.n	800889c <_dtoa_r+0x934>
 80087fa:	e089      	b.n	8008910 <_dtoa_r+0x9a8>
 80087fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008802:	e75d      	b.n	80086c0 <_dtoa_r+0x758>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	1e5e      	subs	r6, r3, #1
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	42b3      	cmp	r3, r6
 800880c:	bfbf      	itttt	lt
 800880e:	9b06      	ldrlt	r3, [sp, #24]
 8008810:	9606      	strlt	r6, [sp, #24]
 8008812:	1af2      	sublt	r2, r6, r3
 8008814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008816:	bfb6      	itet	lt
 8008818:	189b      	addlt	r3, r3, r2
 800881a:	1b9e      	subge	r6, r3, r6
 800881c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	bfb8      	it	lt
 8008822:	2600      	movlt	r6, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	bfb5      	itete	lt
 8008828:	eba8 0503 	sublt.w	r5, r8, r3
 800882c:	9b01      	ldrge	r3, [sp, #4]
 800882e:	2300      	movlt	r3, #0
 8008830:	4645      	movge	r5, r8
 8008832:	e747      	b.n	80086c4 <_dtoa_r+0x75c>
 8008834:	9e06      	ldr	r6, [sp, #24]
 8008836:	9f08      	ldr	r7, [sp, #32]
 8008838:	4645      	mov	r5, r8
 800883a:	e74c      	b.n	80086d6 <_dtoa_r+0x76e>
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	e775      	b.n	800872c <_dtoa_r+0x7c4>
 8008840:	9b05      	ldr	r3, [sp, #20]
 8008842:	2b01      	cmp	r3, #1
 8008844:	dc18      	bgt.n	8008878 <_dtoa_r+0x910>
 8008846:	9b02      	ldr	r3, [sp, #8]
 8008848:	b9b3      	cbnz	r3, 8008878 <_dtoa_r+0x910>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008850:	b9a3      	cbnz	r3, 800887c <_dtoa_r+0x914>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008858:	0d1b      	lsrs	r3, r3, #20
 800885a:	051b      	lsls	r3, r3, #20
 800885c:	b12b      	cbz	r3, 800886a <_dtoa_r+0x902>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	f108 0801 	add.w	r8, r8, #1
 8008868:	2301      	movs	r3, #1
 800886a:	9306      	str	r3, [sp, #24]
 800886c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886e:	2b00      	cmp	r3, #0
 8008870:	f47f af74 	bne.w	800875c <_dtoa_r+0x7f4>
 8008874:	2001      	movs	r0, #1
 8008876:	e779      	b.n	800876c <_dtoa_r+0x804>
 8008878:	2300      	movs	r3, #0
 800887a:	e7f6      	b.n	800886a <_dtoa_r+0x902>
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	e7f4      	b.n	800886a <_dtoa_r+0x902>
 8008880:	d085      	beq.n	800878e <_dtoa_r+0x826>
 8008882:	4618      	mov	r0, r3
 8008884:	301c      	adds	r0, #28
 8008886:	e77d      	b.n	8008784 <_dtoa_r+0x81c>
 8008888:	40240000 	.word	0x40240000
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dc38      	bgt.n	8008904 <_dtoa_r+0x99c>
 8008892:	9b05      	ldr	r3, [sp, #20]
 8008894:	2b02      	cmp	r3, #2
 8008896:	dd35      	ble.n	8008904 <_dtoa_r+0x99c>
 8008898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	d10d      	bne.n	80088be <_dtoa_r+0x956>
 80088a2:	4631      	mov	r1, r6
 80088a4:	464b      	mov	r3, r9
 80088a6:	2205      	movs	r2, #5
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fab1 	bl	8008e10 <__multadd>
 80088ae:	4601      	mov	r1, r0
 80088b0:	4606      	mov	r6, r0
 80088b2:	4658      	mov	r0, fp
 80088b4:	f000 fcc8 	bl	8009248 <__mcmp>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	f73f adbd 	bgt.w	8008438 <_dtoa_r+0x4d0>
 80088be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c0:	9d00      	ldr	r5, [sp, #0]
 80088c2:	ea6f 0a03 	mvn.w	sl, r3
 80088c6:	f04f 0800 	mov.w	r8, #0
 80088ca:	4631      	mov	r1, r6
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 fa7d 	bl	8008dcc <_Bfree>
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	f43f aeb4 	beq.w	8008640 <_dtoa_r+0x6d8>
 80088d8:	f1b8 0f00 	cmp.w	r8, #0
 80088dc:	d005      	beq.n	80088ea <_dtoa_r+0x982>
 80088de:	45b8      	cmp	r8, r7
 80088e0:	d003      	beq.n	80088ea <_dtoa_r+0x982>
 80088e2:	4641      	mov	r1, r8
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fa71 	bl	8008dcc <_Bfree>
 80088ea:	4639      	mov	r1, r7
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fa6d 	bl	8008dcc <_Bfree>
 80088f2:	e6a5      	b.n	8008640 <_dtoa_r+0x6d8>
 80088f4:	2600      	movs	r6, #0
 80088f6:	4637      	mov	r7, r6
 80088f8:	e7e1      	b.n	80088be <_dtoa_r+0x956>
 80088fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008900:	4637      	mov	r7, r6
 8008902:	e599      	b.n	8008438 <_dtoa_r+0x4d0>
 8008904:	9b08      	ldr	r3, [sp, #32]
 8008906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 80fd 	beq.w	8008b0a <_dtoa_r+0xba2>
 8008910:	2d00      	cmp	r5, #0
 8008912:	dd05      	ble.n	8008920 <_dtoa_r+0x9b8>
 8008914:	4639      	mov	r1, r7
 8008916:	462a      	mov	r2, r5
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fc29 	bl	8009170 <__lshift>
 800891e:	4607      	mov	r7, r0
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d05c      	beq.n	80089e0 <_dtoa_r+0xa78>
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fa0f 	bl	8008d4c <_Balloc>
 800892e:	4605      	mov	r5, r0
 8008930:	b928      	cbnz	r0, 800893e <_dtoa_r+0x9d6>
 8008932:	4b80      	ldr	r3, [pc, #512]	; (8008b34 <_dtoa_r+0xbcc>)
 8008934:	4602      	mov	r2, r0
 8008936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800893a:	f7ff bb2e 	b.w	8007f9a <_dtoa_r+0x32>
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	3202      	adds	r2, #2
 8008942:	0092      	lsls	r2, r2, #2
 8008944:	f107 010c 	add.w	r1, r7, #12
 8008948:	300c      	adds	r0, #12
 800894a:	f7fe fde9 	bl	8007520 <memcpy>
 800894e:	2201      	movs	r2, #1
 8008950:	4629      	mov	r1, r5
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fc0c 	bl	8009170 <__lshift>
 8008958:	9b00      	ldr	r3, [sp, #0]
 800895a:	3301      	adds	r3, #1
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	444b      	add	r3, r9
 8008962:	9307      	str	r3, [sp, #28]
 8008964:	9b02      	ldr	r3, [sp, #8]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	46b8      	mov	r8, r7
 800896c:	9306      	str	r3, [sp, #24]
 800896e:	4607      	mov	r7, r0
 8008970:	9b01      	ldr	r3, [sp, #4]
 8008972:	4631      	mov	r1, r6
 8008974:	3b01      	subs	r3, #1
 8008976:	4658      	mov	r0, fp
 8008978:	9302      	str	r3, [sp, #8]
 800897a:	f7ff fa69 	bl	8007e50 <quorem>
 800897e:	4603      	mov	r3, r0
 8008980:	3330      	adds	r3, #48	; 0x30
 8008982:	9004      	str	r0, [sp, #16]
 8008984:	4641      	mov	r1, r8
 8008986:	4658      	mov	r0, fp
 8008988:	9308      	str	r3, [sp, #32]
 800898a:	f000 fc5d 	bl	8009248 <__mcmp>
 800898e:	463a      	mov	r2, r7
 8008990:	4681      	mov	r9, r0
 8008992:	4631      	mov	r1, r6
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fc73 	bl	8009280 <__mdiff>
 800899a:	68c2      	ldr	r2, [r0, #12]
 800899c:	9b08      	ldr	r3, [sp, #32]
 800899e:	4605      	mov	r5, r0
 80089a0:	bb02      	cbnz	r2, 80089e4 <_dtoa_r+0xa7c>
 80089a2:	4601      	mov	r1, r0
 80089a4:	4658      	mov	r0, fp
 80089a6:	f000 fc4f 	bl	8009248 <__mcmp>
 80089aa:	9b08      	ldr	r3, [sp, #32]
 80089ac:	4602      	mov	r2, r0
 80089ae:	4629      	mov	r1, r5
 80089b0:	4620      	mov	r0, r4
 80089b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089b6:	f000 fa09 	bl	8008dcc <_Bfree>
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089be:	9d01      	ldr	r5, [sp, #4]
 80089c0:	ea43 0102 	orr.w	r1, r3, r2
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	430b      	orrs	r3, r1
 80089c8:	9b08      	ldr	r3, [sp, #32]
 80089ca:	d10d      	bne.n	80089e8 <_dtoa_r+0xa80>
 80089cc:	2b39      	cmp	r3, #57	; 0x39
 80089ce:	d029      	beq.n	8008a24 <_dtoa_r+0xabc>
 80089d0:	f1b9 0f00 	cmp.w	r9, #0
 80089d4:	dd01      	ble.n	80089da <_dtoa_r+0xa72>
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	3331      	adds	r3, #49	; 0x31
 80089da:	9a02      	ldr	r2, [sp, #8]
 80089dc:	7013      	strb	r3, [r2, #0]
 80089de:	e774      	b.n	80088ca <_dtoa_r+0x962>
 80089e0:	4638      	mov	r0, r7
 80089e2:	e7b9      	b.n	8008958 <_dtoa_r+0x9f0>
 80089e4:	2201      	movs	r2, #1
 80089e6:	e7e2      	b.n	80089ae <_dtoa_r+0xa46>
 80089e8:	f1b9 0f00 	cmp.w	r9, #0
 80089ec:	db06      	blt.n	80089fc <_dtoa_r+0xa94>
 80089ee:	9905      	ldr	r1, [sp, #20]
 80089f0:	ea41 0909 	orr.w	r9, r1, r9
 80089f4:	9906      	ldr	r1, [sp, #24]
 80089f6:	ea59 0101 	orrs.w	r1, r9, r1
 80089fa:	d120      	bne.n	8008a3e <_dtoa_r+0xad6>
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	ddec      	ble.n	80089da <_dtoa_r+0xa72>
 8008a00:	4659      	mov	r1, fp
 8008a02:	2201      	movs	r2, #1
 8008a04:	4620      	mov	r0, r4
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	f000 fbb2 	bl	8009170 <__lshift>
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4683      	mov	fp, r0
 8008a10:	f000 fc1a 	bl	8009248 <__mcmp>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	dc02      	bgt.n	8008a20 <_dtoa_r+0xab8>
 8008a1a:	d1de      	bne.n	80089da <_dtoa_r+0xa72>
 8008a1c:	07da      	lsls	r2, r3, #31
 8008a1e:	d5dc      	bpl.n	80089da <_dtoa_r+0xa72>
 8008a20:	2b39      	cmp	r3, #57	; 0x39
 8008a22:	d1d8      	bne.n	80089d6 <_dtoa_r+0xa6e>
 8008a24:	9a02      	ldr	r2, [sp, #8]
 8008a26:	2339      	movs	r3, #57	; 0x39
 8008a28:	7013      	strb	r3, [r2, #0]
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a34:	2a39      	cmp	r2, #57	; 0x39
 8008a36:	d050      	beq.n	8008ada <_dtoa_r+0xb72>
 8008a38:	3201      	adds	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	e745      	b.n	80088ca <_dtoa_r+0x962>
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	dd03      	ble.n	8008a4a <_dtoa_r+0xae2>
 8008a42:	2b39      	cmp	r3, #57	; 0x39
 8008a44:	d0ee      	beq.n	8008a24 <_dtoa_r+0xabc>
 8008a46:	3301      	adds	r3, #1
 8008a48:	e7c7      	b.n	80089da <_dtoa_r+0xa72>
 8008a4a:	9a01      	ldr	r2, [sp, #4]
 8008a4c:	9907      	ldr	r1, [sp, #28]
 8008a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a52:	428a      	cmp	r2, r1
 8008a54:	d02a      	beq.n	8008aac <_dtoa_r+0xb44>
 8008a56:	4659      	mov	r1, fp
 8008a58:	2300      	movs	r3, #0
 8008a5a:	220a      	movs	r2, #10
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 f9d7 	bl	8008e10 <__multadd>
 8008a62:	45b8      	cmp	r8, r7
 8008a64:	4683      	mov	fp, r0
 8008a66:	f04f 0300 	mov.w	r3, #0
 8008a6a:	f04f 020a 	mov.w	r2, #10
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4620      	mov	r0, r4
 8008a72:	d107      	bne.n	8008a84 <_dtoa_r+0xb1c>
 8008a74:	f000 f9cc 	bl	8008e10 <__multadd>
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	e775      	b.n	8008970 <_dtoa_r+0xa08>
 8008a84:	f000 f9c4 	bl	8008e10 <__multadd>
 8008a88:	4639      	mov	r1, r7
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	220a      	movs	r2, #10
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f9bd 	bl	8008e10 <__multadd>
 8008a96:	4607      	mov	r7, r0
 8008a98:	e7f0      	b.n	8008a7c <_dtoa_r+0xb14>
 8008a9a:	f1b9 0f00 	cmp.w	r9, #0
 8008a9e:	9a00      	ldr	r2, [sp, #0]
 8008aa0:	bfcc      	ite	gt
 8008aa2:	464d      	movgt	r5, r9
 8008aa4:	2501      	movle	r5, #1
 8008aa6:	4415      	add	r5, r2
 8008aa8:	f04f 0800 	mov.w	r8, #0
 8008aac:	4659      	mov	r1, fp
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	f000 fb5c 	bl	8009170 <__lshift>
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4683      	mov	fp, r0
 8008abc:	f000 fbc4 	bl	8009248 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	dcb2      	bgt.n	8008a2a <_dtoa_r+0xac2>
 8008ac4:	d102      	bne.n	8008acc <_dtoa_r+0xb64>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d4ae      	bmi.n	8008a2a <_dtoa_r+0xac2>
 8008acc:	462b      	mov	r3, r5
 8008ace:	461d      	mov	r5, r3
 8008ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ad4:	2a30      	cmp	r2, #48	; 0x30
 8008ad6:	d0fa      	beq.n	8008ace <_dtoa_r+0xb66>
 8008ad8:	e6f7      	b.n	80088ca <_dtoa_r+0x962>
 8008ada:	9a00      	ldr	r2, [sp, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1a5      	bne.n	8008a2c <_dtoa_r+0xac4>
 8008ae0:	f10a 0a01 	add.w	sl, sl, #1
 8008ae4:	2331      	movs	r3, #49	; 0x31
 8008ae6:	e779      	b.n	80089dc <_dtoa_r+0xa74>
 8008ae8:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <_dtoa_r+0xbd0>)
 8008aea:	f7ff baaf 	b.w	800804c <_dtoa_r+0xe4>
 8008aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f47f aa86 	bne.w	8008002 <_dtoa_r+0x9a>
 8008af6:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <_dtoa_r+0xbd4>)
 8008af8:	f7ff baa8 	b.w	800804c <_dtoa_r+0xe4>
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	dc03      	bgt.n	8008b0a <_dtoa_r+0xba2>
 8008b02:	9b05      	ldr	r3, [sp, #20]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	f73f aec9 	bgt.w	800889c <_dtoa_r+0x934>
 8008b0a:	9d00      	ldr	r5, [sp, #0]
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4658      	mov	r0, fp
 8008b10:	f7ff f99e 	bl	8007e50 <quorem>
 8008b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b18:	f805 3b01 	strb.w	r3, [r5], #1
 8008b1c:	9a00      	ldr	r2, [sp, #0]
 8008b1e:	1aaa      	subs	r2, r5, r2
 8008b20:	4591      	cmp	r9, r2
 8008b22:	ddba      	ble.n	8008a9a <_dtoa_r+0xb32>
 8008b24:	4659      	mov	r1, fp
 8008b26:	2300      	movs	r3, #0
 8008b28:	220a      	movs	r2, #10
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 f970 	bl	8008e10 <__multadd>
 8008b30:	4683      	mov	fp, r0
 8008b32:	e7eb      	b.n	8008b0c <_dtoa_r+0xba4>
 8008b34:	0800a0e3 	.word	0x0800a0e3
 8008b38:	0800a03c 	.word	0x0800a03c
 8008b3c:	0800a060 	.word	0x0800a060

08008b40 <std>:
 8008b40:	2300      	movs	r3, #0
 8008b42:	b510      	push	{r4, lr}
 8008b44:	4604      	mov	r4, r0
 8008b46:	e9c0 3300 	strd	r3, r3, [r0]
 8008b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b4e:	6083      	str	r3, [r0, #8]
 8008b50:	8181      	strh	r1, [r0, #12]
 8008b52:	6643      	str	r3, [r0, #100]	; 0x64
 8008b54:	81c2      	strh	r2, [r0, #14]
 8008b56:	6183      	str	r3, [r0, #24]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	2208      	movs	r2, #8
 8008b5c:	305c      	adds	r0, #92	; 0x5c
 8008b5e:	f7fe fced 	bl	800753c <memset>
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <std+0x38>)
 8008b64:	6263      	str	r3, [r4, #36]	; 0x24
 8008b66:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <std+0x3c>)
 8008b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b6a:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <std+0x40>)
 8008b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <std+0x44>)
 8008b70:	6224      	str	r4, [r4, #32]
 8008b72:	6323      	str	r3, [r4, #48]	; 0x30
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	bf00      	nop
 8008b78:	08009891 	.word	0x08009891
 8008b7c:	080098b3 	.word	0x080098b3
 8008b80:	080098eb 	.word	0x080098eb
 8008b84:	0800990f 	.word	0x0800990f

08008b88 <_cleanup_r>:
 8008b88:	4901      	ldr	r1, [pc, #4]	; (8008b90 <_cleanup_r+0x8>)
 8008b8a:	f000 b8af 	b.w	8008cec <_fwalk_reent>
 8008b8e:	bf00      	nop
 8008b90:	08009c25 	.word	0x08009c25

08008b94 <__sfmoreglue>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	1e4a      	subs	r2, r1, #1
 8008b98:	2568      	movs	r5, #104	; 0x68
 8008b9a:	4355      	muls	r5, r2
 8008b9c:	460e      	mov	r6, r1
 8008b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ba2:	f000 fcb1 	bl	8009508 <_malloc_r>
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	b140      	cbz	r0, 8008bbc <__sfmoreglue+0x28>
 8008baa:	2100      	movs	r1, #0
 8008bac:	e9c0 1600 	strd	r1, r6, [r0]
 8008bb0:	300c      	adds	r0, #12
 8008bb2:	60a0      	str	r0, [r4, #8]
 8008bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bb8:	f7fe fcc0 	bl	800753c <memset>
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}

08008bc0 <__sfp_lock_acquire>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	; (8008bc8 <__sfp_lock_acquire+0x8>)
 8008bc2:	f000 b8b8 	b.w	8008d36 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20001cbc 	.word	0x20001cbc

08008bcc <__sfp_lock_release>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	; (8008bd4 <__sfp_lock_release+0x8>)
 8008bce:	f000 b8b3 	b.w	8008d38 <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	20001cbc 	.word	0x20001cbc

08008bd8 <__sinit_lock_acquire>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__sinit_lock_acquire+0x8>)
 8008bda:	f000 b8ac 	b.w	8008d36 <__retarget_lock_acquire_recursive>
 8008bde:	bf00      	nop
 8008be0:	20001cb7 	.word	0x20001cb7

08008be4 <__sinit_lock_release>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__sinit_lock_release+0x8>)
 8008be6:	f000 b8a7 	b.w	8008d38 <__retarget_lock_release_recursive>
 8008bea:	bf00      	nop
 8008bec:	20001cb7 	.word	0x20001cb7

08008bf0 <__sinit>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	f7ff fff0 	bl	8008bd8 <__sinit_lock_acquire>
 8008bf8:	69a3      	ldr	r3, [r4, #24]
 8008bfa:	b11b      	cbz	r3, 8008c04 <__sinit+0x14>
 8008bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c00:	f7ff bff0 	b.w	8008be4 <__sinit_lock_release>
 8008c04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c08:	6523      	str	r3, [r4, #80]	; 0x50
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <__sinit+0x68>)
 8008c0c:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <__sinit+0x6c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c12:	42a3      	cmp	r3, r4
 8008c14:	bf04      	itt	eq
 8008c16:	2301      	moveq	r3, #1
 8008c18:	61a3      	streq	r3, [r4, #24]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f820 	bl	8008c60 <__sfp>
 8008c20:	6060      	str	r0, [r4, #4]
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 f81c 	bl	8008c60 <__sfp>
 8008c28:	60a0      	str	r0, [r4, #8]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 f818 	bl	8008c60 <__sfp>
 8008c30:	2200      	movs	r2, #0
 8008c32:	60e0      	str	r0, [r4, #12]
 8008c34:	2104      	movs	r1, #4
 8008c36:	6860      	ldr	r0, [r4, #4]
 8008c38:	f7ff ff82 	bl	8008b40 <std>
 8008c3c:	68a0      	ldr	r0, [r4, #8]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	2109      	movs	r1, #9
 8008c42:	f7ff ff7d 	bl	8008b40 <std>
 8008c46:	68e0      	ldr	r0, [r4, #12]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	2112      	movs	r1, #18
 8008c4c:	f7ff ff78 	bl	8008b40 <std>
 8008c50:	2301      	movs	r3, #1
 8008c52:	61a3      	str	r3, [r4, #24]
 8008c54:	e7d2      	b.n	8008bfc <__sinit+0xc>
 8008c56:	bf00      	nop
 8008c58:	0800a028 	.word	0x0800a028
 8008c5c:	08008b89 	.word	0x08008b89

08008c60 <__sfp>:
 8008c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c62:	4607      	mov	r7, r0
 8008c64:	f7ff ffac 	bl	8008bc0 <__sfp_lock_acquire>
 8008c68:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <__sfp+0x84>)
 8008c6a:	681e      	ldr	r6, [r3, #0]
 8008c6c:	69b3      	ldr	r3, [r6, #24]
 8008c6e:	b913      	cbnz	r3, 8008c76 <__sfp+0x16>
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7ff ffbd 	bl	8008bf0 <__sinit>
 8008c76:	3648      	adds	r6, #72	; 0x48
 8008c78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	d503      	bpl.n	8008c88 <__sfp+0x28>
 8008c80:	6833      	ldr	r3, [r6, #0]
 8008c82:	b30b      	cbz	r3, 8008cc8 <__sfp+0x68>
 8008c84:	6836      	ldr	r6, [r6, #0]
 8008c86:	e7f7      	b.n	8008c78 <__sfp+0x18>
 8008c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c8c:	b9d5      	cbnz	r5, 8008cc4 <__sfp+0x64>
 8008c8e:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <__sfp+0x88>)
 8008c90:	60e3      	str	r3, [r4, #12]
 8008c92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c96:	6665      	str	r5, [r4, #100]	; 0x64
 8008c98:	f000 f84c 	bl	8008d34 <__retarget_lock_init_recursive>
 8008c9c:	f7ff ff96 	bl	8008bcc <__sfp_lock_release>
 8008ca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ca8:	6025      	str	r5, [r4, #0]
 8008caa:	61a5      	str	r5, [r4, #24]
 8008cac:	2208      	movs	r2, #8
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cb4:	f7fe fc42 	bl	800753c <memset>
 8008cb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc4:	3468      	adds	r4, #104	; 0x68
 8008cc6:	e7d9      	b.n	8008c7c <__sfp+0x1c>
 8008cc8:	2104      	movs	r1, #4
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f7ff ff62 	bl	8008b94 <__sfmoreglue>
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	6030      	str	r0, [r6, #0]
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1d5      	bne.n	8008c84 <__sfp+0x24>
 8008cd8:	f7ff ff78 	bl	8008bcc <__sfp_lock_release>
 8008cdc:	230c      	movs	r3, #12
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	e7ee      	b.n	8008cc0 <__sfp+0x60>
 8008ce2:	bf00      	nop
 8008ce4:	0800a028 	.word	0x0800a028
 8008ce8:	ffff0001 	.word	0xffff0001

08008cec <_fwalk_reent>:
 8008cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	4688      	mov	r8, r1
 8008cf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cf8:	2700      	movs	r7, #0
 8008cfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cfe:	f1b9 0901 	subs.w	r9, r9, #1
 8008d02:	d505      	bpl.n	8008d10 <_fwalk_reent+0x24>
 8008d04:	6824      	ldr	r4, [r4, #0]
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d1f7      	bne.n	8008cfa <_fwalk_reent+0xe>
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d10:	89ab      	ldrh	r3, [r5, #12]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d907      	bls.n	8008d26 <_fwalk_reent+0x3a>
 8008d16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	d003      	beq.n	8008d26 <_fwalk_reent+0x3a>
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4630      	mov	r0, r6
 8008d22:	47c0      	blx	r8
 8008d24:	4307      	orrs	r7, r0
 8008d26:	3568      	adds	r5, #104	; 0x68
 8008d28:	e7e9      	b.n	8008cfe <_fwalk_reent+0x12>
	...

08008d2c <_localeconv_r>:
 8008d2c:	4800      	ldr	r0, [pc, #0]	; (8008d30 <_localeconv_r+0x4>)
 8008d2e:	4770      	bx	lr
 8008d30:	20000164 	.word	0x20000164

08008d34 <__retarget_lock_init_recursive>:
 8008d34:	4770      	bx	lr

08008d36 <__retarget_lock_acquire_recursive>:
 8008d36:	4770      	bx	lr

08008d38 <__retarget_lock_release_recursive>:
 8008d38:	4770      	bx	lr
	...

08008d3c <malloc>:
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <malloc+0xc>)
 8008d3e:	4601      	mov	r1, r0
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f000 bbe1 	b.w	8009508 <_malloc_r>
 8008d46:	bf00      	nop
 8008d48:	20000010 	.word	0x20000010

08008d4c <_Balloc>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	b976      	cbnz	r6, 8008d74 <_Balloc+0x28>
 8008d56:	2010      	movs	r0, #16
 8008d58:	f7ff fff0 	bl	8008d3c <malloc>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d60:	b920      	cbnz	r0, 8008d6c <_Balloc+0x20>
 8008d62:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <_Balloc+0x78>)
 8008d64:	4818      	ldr	r0, [pc, #96]	; (8008dc8 <_Balloc+0x7c>)
 8008d66:	2166      	movs	r1, #102	; 0x66
 8008d68:	f000 fea8 	bl	8009abc <__assert_func>
 8008d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d70:	6006      	str	r6, [r0, #0]
 8008d72:	60c6      	str	r6, [r0, #12]
 8008d74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d76:	68f3      	ldr	r3, [r6, #12]
 8008d78:	b183      	cbz	r3, 8008d9c <_Balloc+0x50>
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d82:	b9b8      	cbnz	r0, 8008db4 <_Balloc+0x68>
 8008d84:	2101      	movs	r1, #1
 8008d86:	fa01 f605 	lsl.w	r6, r1, r5
 8008d8a:	1d72      	adds	r2, r6, #5
 8008d8c:	0092      	lsls	r2, r2, #2
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fb5a 	bl	8009448 <_calloc_r>
 8008d94:	b160      	cbz	r0, 8008db0 <_Balloc+0x64>
 8008d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d9a:	e00e      	b.n	8008dba <_Balloc+0x6e>
 8008d9c:	2221      	movs	r2, #33	; 0x21
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fb51 	bl	8009448 <_calloc_r>
 8008da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da8:	60f0      	str	r0, [r6, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e4      	bne.n	8008d7a <_Balloc+0x2e>
 8008db0:	2000      	movs	r0, #0
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dc0:	e7f7      	b.n	8008db2 <_Balloc+0x66>
 8008dc2:	bf00      	nop
 8008dc4:	0800a06d 	.word	0x0800a06d
 8008dc8:	0800a154 	.word	0x0800a154

08008dcc <_Bfree>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b976      	cbnz	r6, 8008df4 <_Bfree+0x28>
 8008dd6:	2010      	movs	r0, #16
 8008dd8:	f7ff ffb0 	bl	8008d3c <malloc>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	6268      	str	r0, [r5, #36]	; 0x24
 8008de0:	b920      	cbnz	r0, 8008dec <_Bfree+0x20>
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <_Bfree+0x3c>)
 8008de4:	4809      	ldr	r0, [pc, #36]	; (8008e0c <_Bfree+0x40>)
 8008de6:	218a      	movs	r1, #138	; 0x8a
 8008de8:	f000 fe68 	bl	8009abc <__assert_func>
 8008dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df0:	6006      	str	r6, [r0, #0]
 8008df2:	60c6      	str	r6, [r0, #12]
 8008df4:	b13c      	cbz	r4, 8008e06 <_Bfree+0x3a>
 8008df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008df8:	6862      	ldr	r2, [r4, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e00:	6021      	str	r1, [r4, #0]
 8008e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	0800a06d 	.word	0x0800a06d
 8008e0c:	0800a154 	.word	0x0800a154

08008e10 <__multadd>:
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	690e      	ldr	r6, [r1, #16]
 8008e16:	4607      	mov	r7, r0
 8008e18:	4698      	mov	r8, r3
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f101 0014 	add.w	r0, r1, #20
 8008e20:	2300      	movs	r3, #0
 8008e22:	6805      	ldr	r5, [r0, #0]
 8008e24:	b2a9      	uxth	r1, r5
 8008e26:	fb02 8101 	mla	r1, r2, r1, r8
 8008e2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e2e:	0c2d      	lsrs	r5, r5, #16
 8008e30:	fb02 c505 	mla	r5, r2, r5, ip
 8008e34:	b289      	uxth	r1, r1
 8008e36:	3301      	adds	r3, #1
 8008e38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e3c:	429e      	cmp	r6, r3
 8008e3e:	f840 1b04 	str.w	r1, [r0], #4
 8008e42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e46:	dcec      	bgt.n	8008e22 <__multadd+0x12>
 8008e48:	f1b8 0f00 	cmp.w	r8, #0
 8008e4c:	d022      	beq.n	8008e94 <__multadd+0x84>
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	dc19      	bgt.n	8008e88 <__multadd+0x78>
 8008e54:	6861      	ldr	r1, [r4, #4]
 8008e56:	4638      	mov	r0, r7
 8008e58:	3101      	adds	r1, #1
 8008e5a:	f7ff ff77 	bl	8008d4c <_Balloc>
 8008e5e:	4605      	mov	r5, r0
 8008e60:	b928      	cbnz	r0, 8008e6e <__multadd+0x5e>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <__multadd+0x8c>)
 8008e66:	480e      	ldr	r0, [pc, #56]	; (8008ea0 <__multadd+0x90>)
 8008e68:	21b5      	movs	r1, #181	; 0xb5
 8008e6a:	f000 fe27 	bl	8009abc <__assert_func>
 8008e6e:	6922      	ldr	r2, [r4, #16]
 8008e70:	3202      	adds	r2, #2
 8008e72:	f104 010c 	add.w	r1, r4, #12
 8008e76:	0092      	lsls	r2, r2, #2
 8008e78:	300c      	adds	r0, #12
 8008e7a:	f7fe fb51 	bl	8007520 <memcpy>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7ff ffa3 	bl	8008dcc <_Bfree>
 8008e86:	462c      	mov	r4, r5
 8008e88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e92:	6126      	str	r6, [r4, #16]
 8008e94:	4620      	mov	r0, r4
 8008e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9a:	bf00      	nop
 8008e9c:	0800a0e3 	.word	0x0800a0e3
 8008ea0:	0800a154 	.word	0x0800a154

08008ea4 <__hi0bits>:
 8008ea4:	0c03      	lsrs	r3, r0, #16
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	b9d3      	cbnz	r3, 8008ee0 <__hi0bits+0x3c>
 8008eaa:	0400      	lsls	r0, r0, #16
 8008eac:	2310      	movs	r3, #16
 8008eae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008eb2:	bf04      	itt	eq
 8008eb4:	0200      	lsleq	r0, r0, #8
 8008eb6:	3308      	addeq	r3, #8
 8008eb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ebc:	bf04      	itt	eq
 8008ebe:	0100      	lsleq	r0, r0, #4
 8008ec0:	3304      	addeq	r3, #4
 8008ec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ec6:	bf04      	itt	eq
 8008ec8:	0080      	lsleq	r0, r0, #2
 8008eca:	3302      	addeq	r3, #2
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	db05      	blt.n	8008edc <__hi0bits+0x38>
 8008ed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ed4:	f103 0301 	add.w	r3, r3, #1
 8008ed8:	bf08      	it	eq
 8008eda:	2320      	moveq	r3, #32
 8008edc:	4618      	mov	r0, r3
 8008ede:	4770      	bx	lr
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e7e4      	b.n	8008eae <__hi0bits+0xa>

08008ee4 <__lo0bits>:
 8008ee4:	6803      	ldr	r3, [r0, #0]
 8008ee6:	f013 0207 	ands.w	r2, r3, #7
 8008eea:	4601      	mov	r1, r0
 8008eec:	d00b      	beq.n	8008f06 <__lo0bits+0x22>
 8008eee:	07da      	lsls	r2, r3, #31
 8008ef0:	d424      	bmi.n	8008f3c <__lo0bits+0x58>
 8008ef2:	0798      	lsls	r0, r3, #30
 8008ef4:	bf49      	itett	mi
 8008ef6:	085b      	lsrmi	r3, r3, #1
 8008ef8:	089b      	lsrpl	r3, r3, #2
 8008efa:	2001      	movmi	r0, #1
 8008efc:	600b      	strmi	r3, [r1, #0]
 8008efe:	bf5c      	itt	pl
 8008f00:	600b      	strpl	r3, [r1, #0]
 8008f02:	2002      	movpl	r0, #2
 8008f04:	4770      	bx	lr
 8008f06:	b298      	uxth	r0, r3
 8008f08:	b9b0      	cbnz	r0, 8008f38 <__lo0bits+0x54>
 8008f0a:	0c1b      	lsrs	r3, r3, #16
 8008f0c:	2010      	movs	r0, #16
 8008f0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f12:	bf04      	itt	eq
 8008f14:	0a1b      	lsreq	r3, r3, #8
 8008f16:	3008      	addeq	r0, #8
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	bf04      	itt	eq
 8008f1c:	091b      	lsreq	r3, r3, #4
 8008f1e:	3004      	addeq	r0, #4
 8008f20:	079a      	lsls	r2, r3, #30
 8008f22:	bf04      	itt	eq
 8008f24:	089b      	lsreq	r3, r3, #2
 8008f26:	3002      	addeq	r0, #2
 8008f28:	07da      	lsls	r2, r3, #31
 8008f2a:	d403      	bmi.n	8008f34 <__lo0bits+0x50>
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	f100 0001 	add.w	r0, r0, #1
 8008f32:	d005      	beq.n	8008f40 <__lo0bits+0x5c>
 8008f34:	600b      	str	r3, [r1, #0]
 8008f36:	4770      	bx	lr
 8008f38:	4610      	mov	r0, r2
 8008f3a:	e7e8      	b.n	8008f0e <__lo0bits+0x2a>
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	4770      	bx	lr
 8008f40:	2020      	movs	r0, #32
 8008f42:	4770      	bx	lr

08008f44 <__i2b>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	460c      	mov	r4, r1
 8008f48:	2101      	movs	r1, #1
 8008f4a:	f7ff feff 	bl	8008d4c <_Balloc>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	b928      	cbnz	r0, 8008f5e <__i2b+0x1a>
 8008f52:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <__i2b+0x24>)
 8008f54:	4805      	ldr	r0, [pc, #20]	; (8008f6c <__i2b+0x28>)
 8008f56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f5a:	f000 fdaf 	bl	8009abc <__assert_func>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	6144      	str	r4, [r0, #20]
 8008f62:	6103      	str	r3, [r0, #16]
 8008f64:	bd10      	pop	{r4, pc}
 8008f66:	bf00      	nop
 8008f68:	0800a0e3 	.word	0x0800a0e3
 8008f6c:	0800a154 	.word	0x0800a154

08008f70 <__multiply>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	4614      	mov	r4, r2
 8008f76:	690a      	ldr	r2, [r1, #16]
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	bfb8      	it	lt
 8008f7e:	460b      	movlt	r3, r1
 8008f80:	460d      	mov	r5, r1
 8008f82:	bfbc      	itt	lt
 8008f84:	4625      	movlt	r5, r4
 8008f86:	461c      	movlt	r4, r3
 8008f88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f90:	68ab      	ldr	r3, [r5, #8]
 8008f92:	6869      	ldr	r1, [r5, #4]
 8008f94:	eb0a 0709 	add.w	r7, sl, r9
 8008f98:	42bb      	cmp	r3, r7
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	bfb8      	it	lt
 8008f9e:	3101      	addlt	r1, #1
 8008fa0:	f7ff fed4 	bl	8008d4c <_Balloc>
 8008fa4:	b930      	cbnz	r0, 8008fb4 <__multiply+0x44>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	4b42      	ldr	r3, [pc, #264]	; (80090b4 <__multiply+0x144>)
 8008faa:	4843      	ldr	r0, [pc, #268]	; (80090b8 <__multiply+0x148>)
 8008fac:	f240 115d 	movw	r1, #349	; 0x15d
 8008fb0:	f000 fd84 	bl	8009abc <__assert_func>
 8008fb4:	f100 0614 	add.w	r6, r0, #20
 8008fb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fbc:	4633      	mov	r3, r6
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4543      	cmp	r3, r8
 8008fc2:	d31e      	bcc.n	8009002 <__multiply+0x92>
 8008fc4:	f105 0c14 	add.w	ip, r5, #20
 8008fc8:	f104 0314 	add.w	r3, r4, #20
 8008fcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fd4:	9202      	str	r2, [sp, #8]
 8008fd6:	ebac 0205 	sub.w	r2, ip, r5
 8008fda:	3a15      	subs	r2, #21
 8008fdc:	f022 0203 	bic.w	r2, r2, #3
 8008fe0:	3204      	adds	r2, #4
 8008fe2:	f105 0115 	add.w	r1, r5, #21
 8008fe6:	458c      	cmp	ip, r1
 8008fe8:	bf38      	it	cc
 8008fea:	2204      	movcc	r2, #4
 8008fec:	9201      	str	r2, [sp, #4]
 8008fee:	9a02      	ldr	r2, [sp, #8]
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d808      	bhi.n	8009008 <__multiply+0x98>
 8008ff6:	2f00      	cmp	r7, #0
 8008ff8:	dc55      	bgt.n	80090a6 <__multiply+0x136>
 8008ffa:	6107      	str	r7, [r0, #16]
 8008ffc:	b005      	add	sp, #20
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	f843 2b04 	str.w	r2, [r3], #4
 8009006:	e7db      	b.n	8008fc0 <__multiply+0x50>
 8009008:	f8b3 a000 	ldrh.w	sl, [r3]
 800900c:	f1ba 0f00 	cmp.w	sl, #0
 8009010:	d020      	beq.n	8009054 <__multiply+0xe4>
 8009012:	f105 0e14 	add.w	lr, r5, #20
 8009016:	46b1      	mov	r9, r6
 8009018:	2200      	movs	r2, #0
 800901a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800901e:	f8d9 b000 	ldr.w	fp, [r9]
 8009022:	b2a1      	uxth	r1, r4
 8009024:	fa1f fb8b 	uxth.w	fp, fp
 8009028:	fb0a b101 	mla	r1, sl, r1, fp
 800902c:	4411      	add	r1, r2
 800902e:	f8d9 2000 	ldr.w	r2, [r9]
 8009032:	0c24      	lsrs	r4, r4, #16
 8009034:	0c12      	lsrs	r2, r2, #16
 8009036:	fb0a 2404 	mla	r4, sl, r4, r2
 800903a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800903e:	b289      	uxth	r1, r1
 8009040:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009044:	45f4      	cmp	ip, lr
 8009046:	f849 1b04 	str.w	r1, [r9], #4
 800904a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800904e:	d8e4      	bhi.n	800901a <__multiply+0xaa>
 8009050:	9901      	ldr	r1, [sp, #4]
 8009052:	5072      	str	r2, [r6, r1]
 8009054:	9a03      	ldr	r2, [sp, #12]
 8009056:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800905a:	3304      	adds	r3, #4
 800905c:	f1b9 0f00 	cmp.w	r9, #0
 8009060:	d01f      	beq.n	80090a2 <__multiply+0x132>
 8009062:	6834      	ldr	r4, [r6, #0]
 8009064:	f105 0114 	add.w	r1, r5, #20
 8009068:	46b6      	mov	lr, r6
 800906a:	f04f 0a00 	mov.w	sl, #0
 800906e:	880a      	ldrh	r2, [r1, #0]
 8009070:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009074:	fb09 b202 	mla	r2, r9, r2, fp
 8009078:	4492      	add	sl, r2
 800907a:	b2a4      	uxth	r4, r4
 800907c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009080:	f84e 4b04 	str.w	r4, [lr], #4
 8009084:	f851 4b04 	ldr.w	r4, [r1], #4
 8009088:	f8be 2000 	ldrh.w	r2, [lr]
 800908c:	0c24      	lsrs	r4, r4, #16
 800908e:	fb09 2404 	mla	r4, r9, r4, r2
 8009092:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009096:	458c      	cmp	ip, r1
 8009098:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800909c:	d8e7      	bhi.n	800906e <__multiply+0xfe>
 800909e:	9a01      	ldr	r2, [sp, #4]
 80090a0:	50b4      	str	r4, [r6, r2]
 80090a2:	3604      	adds	r6, #4
 80090a4:	e7a3      	b.n	8008fee <__multiply+0x7e>
 80090a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1a5      	bne.n	8008ffa <__multiply+0x8a>
 80090ae:	3f01      	subs	r7, #1
 80090b0:	e7a1      	b.n	8008ff6 <__multiply+0x86>
 80090b2:	bf00      	nop
 80090b4:	0800a0e3 	.word	0x0800a0e3
 80090b8:	0800a154 	.word	0x0800a154

080090bc <__pow5mult>:
 80090bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c0:	4615      	mov	r5, r2
 80090c2:	f012 0203 	ands.w	r2, r2, #3
 80090c6:	4606      	mov	r6, r0
 80090c8:	460f      	mov	r7, r1
 80090ca:	d007      	beq.n	80090dc <__pow5mult+0x20>
 80090cc:	4c25      	ldr	r4, [pc, #148]	; (8009164 <__pow5mult+0xa8>)
 80090ce:	3a01      	subs	r2, #1
 80090d0:	2300      	movs	r3, #0
 80090d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090d6:	f7ff fe9b 	bl	8008e10 <__multadd>
 80090da:	4607      	mov	r7, r0
 80090dc:	10ad      	asrs	r5, r5, #2
 80090de:	d03d      	beq.n	800915c <__pow5mult+0xa0>
 80090e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090e2:	b97c      	cbnz	r4, 8009104 <__pow5mult+0x48>
 80090e4:	2010      	movs	r0, #16
 80090e6:	f7ff fe29 	bl	8008d3c <malloc>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6270      	str	r0, [r6, #36]	; 0x24
 80090ee:	b928      	cbnz	r0, 80090fc <__pow5mult+0x40>
 80090f0:	4b1d      	ldr	r3, [pc, #116]	; (8009168 <__pow5mult+0xac>)
 80090f2:	481e      	ldr	r0, [pc, #120]	; (800916c <__pow5mult+0xb0>)
 80090f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090f8:	f000 fce0 	bl	8009abc <__assert_func>
 80090fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009100:	6004      	str	r4, [r0, #0]
 8009102:	60c4      	str	r4, [r0, #12]
 8009104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800910c:	b94c      	cbnz	r4, 8009122 <__pow5mult+0x66>
 800910e:	f240 2171 	movw	r1, #625	; 0x271
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ff16 	bl	8008f44 <__i2b>
 8009118:	2300      	movs	r3, #0
 800911a:	f8c8 0008 	str.w	r0, [r8, #8]
 800911e:	4604      	mov	r4, r0
 8009120:	6003      	str	r3, [r0, #0]
 8009122:	f04f 0900 	mov.w	r9, #0
 8009126:	07eb      	lsls	r3, r5, #31
 8009128:	d50a      	bpl.n	8009140 <__pow5mult+0x84>
 800912a:	4639      	mov	r1, r7
 800912c:	4622      	mov	r2, r4
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ff1e 	bl	8008f70 <__multiply>
 8009134:	4639      	mov	r1, r7
 8009136:	4680      	mov	r8, r0
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff fe47 	bl	8008dcc <_Bfree>
 800913e:	4647      	mov	r7, r8
 8009140:	106d      	asrs	r5, r5, #1
 8009142:	d00b      	beq.n	800915c <__pow5mult+0xa0>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	b938      	cbnz	r0, 8009158 <__pow5mult+0x9c>
 8009148:	4622      	mov	r2, r4
 800914a:	4621      	mov	r1, r4
 800914c:	4630      	mov	r0, r6
 800914e:	f7ff ff0f 	bl	8008f70 <__multiply>
 8009152:	6020      	str	r0, [r4, #0]
 8009154:	f8c0 9000 	str.w	r9, [r0]
 8009158:	4604      	mov	r4, r0
 800915a:	e7e4      	b.n	8009126 <__pow5mult+0x6a>
 800915c:	4638      	mov	r0, r7
 800915e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009162:	bf00      	nop
 8009164:	0800a2a8 	.word	0x0800a2a8
 8009168:	0800a06d 	.word	0x0800a06d
 800916c:	0800a154 	.word	0x0800a154

08009170 <__lshift>:
 8009170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009174:	460c      	mov	r4, r1
 8009176:	6849      	ldr	r1, [r1, #4]
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	4607      	mov	r7, r0
 8009182:	4691      	mov	r9, r2
 8009184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009188:	f108 0601 	add.w	r6, r8, #1
 800918c:	42b3      	cmp	r3, r6
 800918e:	db0b      	blt.n	80091a8 <__lshift+0x38>
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff fddb 	bl	8008d4c <_Balloc>
 8009196:	4605      	mov	r5, r0
 8009198:	b948      	cbnz	r0, 80091ae <__lshift+0x3e>
 800919a:	4602      	mov	r2, r0
 800919c:	4b28      	ldr	r3, [pc, #160]	; (8009240 <__lshift+0xd0>)
 800919e:	4829      	ldr	r0, [pc, #164]	; (8009244 <__lshift+0xd4>)
 80091a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091a4:	f000 fc8a 	bl	8009abc <__assert_func>
 80091a8:	3101      	adds	r1, #1
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	e7ee      	b.n	800918c <__lshift+0x1c>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f100 0114 	add.w	r1, r0, #20
 80091b4:	f100 0210 	add.w	r2, r0, #16
 80091b8:	4618      	mov	r0, r3
 80091ba:	4553      	cmp	r3, sl
 80091bc:	db33      	blt.n	8009226 <__lshift+0xb6>
 80091be:	6920      	ldr	r0, [r4, #16]
 80091c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091c4:	f104 0314 	add.w	r3, r4, #20
 80091c8:	f019 091f 	ands.w	r9, r9, #31
 80091cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091d4:	d02b      	beq.n	800922e <__lshift+0xbe>
 80091d6:	f1c9 0e20 	rsb	lr, r9, #32
 80091da:	468a      	mov	sl, r1
 80091dc:	2200      	movs	r2, #0
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	fa00 f009 	lsl.w	r0, r0, r9
 80091e4:	4302      	orrs	r2, r0
 80091e6:	f84a 2b04 	str.w	r2, [sl], #4
 80091ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ee:	459c      	cmp	ip, r3
 80091f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091f4:	d8f3      	bhi.n	80091de <__lshift+0x6e>
 80091f6:	ebac 0304 	sub.w	r3, ip, r4
 80091fa:	3b15      	subs	r3, #21
 80091fc:	f023 0303 	bic.w	r3, r3, #3
 8009200:	3304      	adds	r3, #4
 8009202:	f104 0015 	add.w	r0, r4, #21
 8009206:	4584      	cmp	ip, r0
 8009208:	bf38      	it	cc
 800920a:	2304      	movcc	r3, #4
 800920c:	50ca      	str	r2, [r1, r3]
 800920e:	b10a      	cbz	r2, 8009214 <__lshift+0xa4>
 8009210:	f108 0602 	add.w	r6, r8, #2
 8009214:	3e01      	subs	r6, #1
 8009216:	4638      	mov	r0, r7
 8009218:	612e      	str	r6, [r5, #16]
 800921a:	4621      	mov	r1, r4
 800921c:	f7ff fdd6 	bl	8008dcc <_Bfree>
 8009220:	4628      	mov	r0, r5
 8009222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009226:	f842 0f04 	str.w	r0, [r2, #4]!
 800922a:	3301      	adds	r3, #1
 800922c:	e7c5      	b.n	80091ba <__lshift+0x4a>
 800922e:	3904      	subs	r1, #4
 8009230:	f853 2b04 	ldr.w	r2, [r3], #4
 8009234:	f841 2f04 	str.w	r2, [r1, #4]!
 8009238:	459c      	cmp	ip, r3
 800923a:	d8f9      	bhi.n	8009230 <__lshift+0xc0>
 800923c:	e7ea      	b.n	8009214 <__lshift+0xa4>
 800923e:	bf00      	nop
 8009240:	0800a0e3 	.word	0x0800a0e3
 8009244:	0800a154 	.word	0x0800a154

08009248 <__mcmp>:
 8009248:	b530      	push	{r4, r5, lr}
 800924a:	6902      	ldr	r2, [r0, #16]
 800924c:	690c      	ldr	r4, [r1, #16]
 800924e:	1b12      	subs	r2, r2, r4
 8009250:	d10e      	bne.n	8009270 <__mcmp+0x28>
 8009252:	f100 0314 	add.w	r3, r0, #20
 8009256:	3114      	adds	r1, #20
 8009258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800925c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009268:	42a5      	cmp	r5, r4
 800926a:	d003      	beq.n	8009274 <__mcmp+0x2c>
 800926c:	d305      	bcc.n	800927a <__mcmp+0x32>
 800926e:	2201      	movs	r2, #1
 8009270:	4610      	mov	r0, r2
 8009272:	bd30      	pop	{r4, r5, pc}
 8009274:	4283      	cmp	r3, r0
 8009276:	d3f3      	bcc.n	8009260 <__mcmp+0x18>
 8009278:	e7fa      	b.n	8009270 <__mcmp+0x28>
 800927a:	f04f 32ff 	mov.w	r2, #4294967295
 800927e:	e7f7      	b.n	8009270 <__mcmp+0x28>

08009280 <__mdiff>:
 8009280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	4606      	mov	r6, r0
 8009288:	4611      	mov	r1, r2
 800928a:	4620      	mov	r0, r4
 800928c:	4617      	mov	r7, r2
 800928e:	f7ff ffdb 	bl	8009248 <__mcmp>
 8009292:	1e05      	subs	r5, r0, #0
 8009294:	d110      	bne.n	80092b8 <__mdiff+0x38>
 8009296:	4629      	mov	r1, r5
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff fd57 	bl	8008d4c <_Balloc>
 800929e:	b930      	cbnz	r0, 80092ae <__mdiff+0x2e>
 80092a0:	4b39      	ldr	r3, [pc, #228]	; (8009388 <__mdiff+0x108>)
 80092a2:	4602      	mov	r2, r0
 80092a4:	f240 2132 	movw	r1, #562	; 0x232
 80092a8:	4838      	ldr	r0, [pc, #224]	; (800938c <__mdiff+0x10c>)
 80092aa:	f000 fc07 	bl	8009abc <__assert_func>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	bfa4      	itt	ge
 80092ba:	463b      	movge	r3, r7
 80092bc:	4627      	movge	r7, r4
 80092be:	4630      	mov	r0, r6
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	bfa6      	itte	ge
 80092c4:	461c      	movge	r4, r3
 80092c6:	2500      	movge	r5, #0
 80092c8:	2501      	movlt	r5, #1
 80092ca:	f7ff fd3f 	bl	8008d4c <_Balloc>
 80092ce:	b920      	cbnz	r0, 80092da <__mdiff+0x5a>
 80092d0:	4b2d      	ldr	r3, [pc, #180]	; (8009388 <__mdiff+0x108>)
 80092d2:	4602      	mov	r2, r0
 80092d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092d8:	e7e6      	b.n	80092a8 <__mdiff+0x28>
 80092da:	693e      	ldr	r6, [r7, #16]
 80092dc:	60c5      	str	r5, [r0, #12]
 80092de:	6925      	ldr	r5, [r4, #16]
 80092e0:	f107 0114 	add.w	r1, r7, #20
 80092e4:	f104 0914 	add.w	r9, r4, #20
 80092e8:	f100 0e14 	add.w	lr, r0, #20
 80092ec:	f107 0210 	add.w	r2, r7, #16
 80092f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092f8:	46f2      	mov	sl, lr
 80092fa:	2700      	movs	r7, #0
 80092fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009304:	fa1f f883 	uxth.w	r8, r3
 8009308:	fa17 f78b 	uxtah	r7, r7, fp
 800930c:	0c1b      	lsrs	r3, r3, #16
 800930e:	eba7 0808 	sub.w	r8, r7, r8
 8009312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800931a:	fa1f f888 	uxth.w	r8, r8
 800931e:	141f      	asrs	r7, r3, #16
 8009320:	454d      	cmp	r5, r9
 8009322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009326:	f84a 3b04 	str.w	r3, [sl], #4
 800932a:	d8e7      	bhi.n	80092fc <__mdiff+0x7c>
 800932c:	1b2b      	subs	r3, r5, r4
 800932e:	3b15      	subs	r3, #21
 8009330:	f023 0303 	bic.w	r3, r3, #3
 8009334:	3304      	adds	r3, #4
 8009336:	3415      	adds	r4, #21
 8009338:	42a5      	cmp	r5, r4
 800933a:	bf38      	it	cc
 800933c:	2304      	movcc	r3, #4
 800933e:	4419      	add	r1, r3
 8009340:	4473      	add	r3, lr
 8009342:	469e      	mov	lr, r3
 8009344:	460d      	mov	r5, r1
 8009346:	4565      	cmp	r5, ip
 8009348:	d30e      	bcc.n	8009368 <__mdiff+0xe8>
 800934a:	f10c 0203 	add.w	r2, ip, #3
 800934e:	1a52      	subs	r2, r2, r1
 8009350:	f022 0203 	bic.w	r2, r2, #3
 8009354:	3903      	subs	r1, #3
 8009356:	458c      	cmp	ip, r1
 8009358:	bf38      	it	cc
 800935a:	2200      	movcc	r2, #0
 800935c:	441a      	add	r2, r3
 800935e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009362:	b17b      	cbz	r3, 8009384 <__mdiff+0x104>
 8009364:	6106      	str	r6, [r0, #16]
 8009366:	e7a5      	b.n	80092b4 <__mdiff+0x34>
 8009368:	f855 8b04 	ldr.w	r8, [r5], #4
 800936c:	fa17 f488 	uxtah	r4, r7, r8
 8009370:	1422      	asrs	r2, r4, #16
 8009372:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009376:	b2a4      	uxth	r4, r4
 8009378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800937c:	f84e 4b04 	str.w	r4, [lr], #4
 8009380:	1417      	asrs	r7, r2, #16
 8009382:	e7e0      	b.n	8009346 <__mdiff+0xc6>
 8009384:	3e01      	subs	r6, #1
 8009386:	e7ea      	b.n	800935e <__mdiff+0xde>
 8009388:	0800a0e3 	.word	0x0800a0e3
 800938c:	0800a154 	.word	0x0800a154

08009390 <__d2b>:
 8009390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009394:	4689      	mov	r9, r1
 8009396:	2101      	movs	r1, #1
 8009398:	ec57 6b10 	vmov	r6, r7, d0
 800939c:	4690      	mov	r8, r2
 800939e:	f7ff fcd5 	bl	8008d4c <_Balloc>
 80093a2:	4604      	mov	r4, r0
 80093a4:	b930      	cbnz	r0, 80093b4 <__d2b+0x24>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <__d2b+0xb0>)
 80093aa:	4826      	ldr	r0, [pc, #152]	; (8009444 <__d2b+0xb4>)
 80093ac:	f240 310a 	movw	r1, #778	; 0x30a
 80093b0:	f000 fb84 	bl	8009abc <__assert_func>
 80093b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093bc:	bb35      	cbnz	r5, 800940c <__d2b+0x7c>
 80093be:	2e00      	cmp	r6, #0
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	d028      	beq.n	8009416 <__d2b+0x86>
 80093c4:	4668      	mov	r0, sp
 80093c6:	9600      	str	r6, [sp, #0]
 80093c8:	f7ff fd8c 	bl	8008ee4 <__lo0bits>
 80093cc:	9900      	ldr	r1, [sp, #0]
 80093ce:	b300      	cbz	r0, 8009412 <__d2b+0x82>
 80093d0:	9a01      	ldr	r2, [sp, #4]
 80093d2:	f1c0 0320 	rsb	r3, r0, #32
 80093d6:	fa02 f303 	lsl.w	r3, r2, r3
 80093da:	430b      	orrs	r3, r1
 80093dc:	40c2      	lsrs	r2, r0
 80093de:	6163      	str	r3, [r4, #20]
 80093e0:	9201      	str	r2, [sp, #4]
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	61a3      	str	r3, [r4, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bf14      	ite	ne
 80093ea:	2202      	movne	r2, #2
 80093ec:	2201      	moveq	r2, #1
 80093ee:	6122      	str	r2, [r4, #16]
 80093f0:	b1d5      	cbz	r5, 8009428 <__d2b+0x98>
 80093f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093f6:	4405      	add	r5, r0
 80093f8:	f8c9 5000 	str.w	r5, [r9]
 80093fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009400:	f8c8 0000 	str.w	r0, [r8]
 8009404:	4620      	mov	r0, r4
 8009406:	b003      	add	sp, #12
 8009408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800940c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009410:	e7d5      	b.n	80093be <__d2b+0x2e>
 8009412:	6161      	str	r1, [r4, #20]
 8009414:	e7e5      	b.n	80093e2 <__d2b+0x52>
 8009416:	a801      	add	r0, sp, #4
 8009418:	f7ff fd64 	bl	8008ee4 <__lo0bits>
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	6163      	str	r3, [r4, #20]
 8009420:	2201      	movs	r2, #1
 8009422:	6122      	str	r2, [r4, #16]
 8009424:	3020      	adds	r0, #32
 8009426:	e7e3      	b.n	80093f0 <__d2b+0x60>
 8009428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800942c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009430:	f8c9 0000 	str.w	r0, [r9]
 8009434:	6918      	ldr	r0, [r3, #16]
 8009436:	f7ff fd35 	bl	8008ea4 <__hi0bits>
 800943a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800943e:	e7df      	b.n	8009400 <__d2b+0x70>
 8009440:	0800a0e3 	.word	0x0800a0e3
 8009444:	0800a154 	.word	0x0800a154

08009448 <_calloc_r>:
 8009448:	b513      	push	{r0, r1, r4, lr}
 800944a:	434a      	muls	r2, r1
 800944c:	4611      	mov	r1, r2
 800944e:	9201      	str	r2, [sp, #4]
 8009450:	f000 f85a 	bl	8009508 <_malloc_r>
 8009454:	4604      	mov	r4, r0
 8009456:	b118      	cbz	r0, 8009460 <_calloc_r+0x18>
 8009458:	9a01      	ldr	r2, [sp, #4]
 800945a:	2100      	movs	r1, #0
 800945c:	f7fe f86e 	bl	800753c <memset>
 8009460:	4620      	mov	r0, r4
 8009462:	b002      	add	sp, #8
 8009464:	bd10      	pop	{r4, pc}
	...

08009468 <_free_r>:
 8009468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800946a:	2900      	cmp	r1, #0
 800946c:	d048      	beq.n	8009500 <_free_r+0x98>
 800946e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009472:	9001      	str	r0, [sp, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f1a1 0404 	sub.w	r4, r1, #4
 800947a:	bfb8      	it	lt
 800947c:	18e4      	addlt	r4, r4, r3
 800947e:	f000 fca7 	bl	8009dd0 <__malloc_lock>
 8009482:	4a20      	ldr	r2, [pc, #128]	; (8009504 <_free_r+0x9c>)
 8009484:	9801      	ldr	r0, [sp, #4]
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	4615      	mov	r5, r2
 800948a:	b933      	cbnz	r3, 800949a <_free_r+0x32>
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	6014      	str	r4, [r2, #0]
 8009490:	b003      	add	sp, #12
 8009492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009496:	f000 bca1 	b.w	8009ddc <__malloc_unlock>
 800949a:	42a3      	cmp	r3, r4
 800949c:	d90b      	bls.n	80094b6 <_free_r+0x4e>
 800949e:	6821      	ldr	r1, [r4, #0]
 80094a0:	1862      	adds	r2, r4, r1
 80094a2:	4293      	cmp	r3, r2
 80094a4:	bf04      	itt	eq
 80094a6:	681a      	ldreq	r2, [r3, #0]
 80094a8:	685b      	ldreq	r3, [r3, #4]
 80094aa:	6063      	str	r3, [r4, #4]
 80094ac:	bf04      	itt	eq
 80094ae:	1852      	addeq	r2, r2, r1
 80094b0:	6022      	streq	r2, [r4, #0]
 80094b2:	602c      	str	r4, [r5, #0]
 80094b4:	e7ec      	b.n	8009490 <_free_r+0x28>
 80094b6:	461a      	mov	r2, r3
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	b10b      	cbz	r3, 80094c0 <_free_r+0x58>
 80094bc:	42a3      	cmp	r3, r4
 80094be:	d9fa      	bls.n	80094b6 <_free_r+0x4e>
 80094c0:	6811      	ldr	r1, [r2, #0]
 80094c2:	1855      	adds	r5, r2, r1
 80094c4:	42a5      	cmp	r5, r4
 80094c6:	d10b      	bne.n	80094e0 <_free_r+0x78>
 80094c8:	6824      	ldr	r4, [r4, #0]
 80094ca:	4421      	add	r1, r4
 80094cc:	1854      	adds	r4, r2, r1
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	6011      	str	r1, [r2, #0]
 80094d2:	d1dd      	bne.n	8009490 <_free_r+0x28>
 80094d4:	681c      	ldr	r4, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	6053      	str	r3, [r2, #4]
 80094da:	4421      	add	r1, r4
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	e7d7      	b.n	8009490 <_free_r+0x28>
 80094e0:	d902      	bls.n	80094e8 <_free_r+0x80>
 80094e2:	230c      	movs	r3, #12
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	e7d3      	b.n	8009490 <_free_r+0x28>
 80094e8:	6825      	ldr	r5, [r4, #0]
 80094ea:	1961      	adds	r1, r4, r5
 80094ec:	428b      	cmp	r3, r1
 80094ee:	bf04      	itt	eq
 80094f0:	6819      	ldreq	r1, [r3, #0]
 80094f2:	685b      	ldreq	r3, [r3, #4]
 80094f4:	6063      	str	r3, [r4, #4]
 80094f6:	bf04      	itt	eq
 80094f8:	1949      	addeq	r1, r1, r5
 80094fa:	6021      	streq	r1, [r4, #0]
 80094fc:	6054      	str	r4, [r2, #4]
 80094fe:	e7c7      	b.n	8009490 <_free_r+0x28>
 8009500:	b003      	add	sp, #12
 8009502:	bd30      	pop	{r4, r5, pc}
 8009504:	20001b14 	.word	0x20001b14

08009508 <_malloc_r>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	1ccd      	adds	r5, r1, #3
 800950c:	f025 0503 	bic.w	r5, r5, #3
 8009510:	3508      	adds	r5, #8
 8009512:	2d0c      	cmp	r5, #12
 8009514:	bf38      	it	cc
 8009516:	250c      	movcc	r5, #12
 8009518:	2d00      	cmp	r5, #0
 800951a:	4606      	mov	r6, r0
 800951c:	db01      	blt.n	8009522 <_malloc_r+0x1a>
 800951e:	42a9      	cmp	r1, r5
 8009520:	d903      	bls.n	800952a <_malloc_r+0x22>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	2000      	movs	r0, #0
 8009528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952a:	f000 fc51 	bl	8009dd0 <__malloc_lock>
 800952e:	4921      	ldr	r1, [pc, #132]	; (80095b4 <_malloc_r+0xac>)
 8009530:	680a      	ldr	r2, [r1, #0]
 8009532:	4614      	mov	r4, r2
 8009534:	b99c      	cbnz	r4, 800955e <_malloc_r+0x56>
 8009536:	4f20      	ldr	r7, [pc, #128]	; (80095b8 <_malloc_r+0xb0>)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	b923      	cbnz	r3, 8009546 <_malloc_r+0x3e>
 800953c:	4621      	mov	r1, r4
 800953e:	4630      	mov	r0, r6
 8009540:	f000 f996 	bl	8009870 <_sbrk_r>
 8009544:	6038      	str	r0, [r7, #0]
 8009546:	4629      	mov	r1, r5
 8009548:	4630      	mov	r0, r6
 800954a:	f000 f991 	bl	8009870 <_sbrk_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	d123      	bne.n	800959a <_malloc_r+0x92>
 8009552:	230c      	movs	r3, #12
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	4630      	mov	r0, r6
 8009558:	f000 fc40 	bl	8009ddc <__malloc_unlock>
 800955c:	e7e3      	b.n	8009526 <_malloc_r+0x1e>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	1b5b      	subs	r3, r3, r5
 8009562:	d417      	bmi.n	8009594 <_malloc_r+0x8c>
 8009564:	2b0b      	cmp	r3, #11
 8009566:	d903      	bls.n	8009570 <_malloc_r+0x68>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	441c      	add	r4, r3
 800956c:	6025      	str	r5, [r4, #0]
 800956e:	e004      	b.n	800957a <_malloc_r+0x72>
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	42a2      	cmp	r2, r4
 8009574:	bf0c      	ite	eq
 8009576:	600b      	streq	r3, [r1, #0]
 8009578:	6053      	strne	r3, [r2, #4]
 800957a:	4630      	mov	r0, r6
 800957c:	f000 fc2e 	bl	8009ddc <__malloc_unlock>
 8009580:	f104 000b 	add.w	r0, r4, #11
 8009584:	1d23      	adds	r3, r4, #4
 8009586:	f020 0007 	bic.w	r0, r0, #7
 800958a:	1ac2      	subs	r2, r0, r3
 800958c:	d0cc      	beq.n	8009528 <_malloc_r+0x20>
 800958e:	1a1b      	subs	r3, r3, r0
 8009590:	50a3      	str	r3, [r4, r2]
 8009592:	e7c9      	b.n	8009528 <_malloc_r+0x20>
 8009594:	4622      	mov	r2, r4
 8009596:	6864      	ldr	r4, [r4, #4]
 8009598:	e7cc      	b.n	8009534 <_malloc_r+0x2c>
 800959a:	1cc4      	adds	r4, r0, #3
 800959c:	f024 0403 	bic.w	r4, r4, #3
 80095a0:	42a0      	cmp	r0, r4
 80095a2:	d0e3      	beq.n	800956c <_malloc_r+0x64>
 80095a4:	1a21      	subs	r1, r4, r0
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f962 	bl	8009870 <_sbrk_r>
 80095ac:	3001      	adds	r0, #1
 80095ae:	d1dd      	bne.n	800956c <_malloc_r+0x64>
 80095b0:	e7cf      	b.n	8009552 <_malloc_r+0x4a>
 80095b2:	bf00      	nop
 80095b4:	20001b14 	.word	0x20001b14
 80095b8:	20001b18 	.word	0x20001b18

080095bc <__sfputc_r>:
 80095bc:	6893      	ldr	r3, [r2, #8]
 80095be:	3b01      	subs	r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	b410      	push	{r4}
 80095c4:	6093      	str	r3, [r2, #8]
 80095c6:	da08      	bge.n	80095da <__sfputc_r+0x1e>
 80095c8:	6994      	ldr	r4, [r2, #24]
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	db01      	blt.n	80095d2 <__sfputc_r+0x16>
 80095ce:	290a      	cmp	r1, #10
 80095d0:	d103      	bne.n	80095da <__sfputc_r+0x1e>
 80095d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095d6:	f000 b99f 	b.w	8009918 <__swbuf_r>
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	1c58      	adds	r0, r3, #1
 80095de:	6010      	str	r0, [r2, #0]
 80095e0:	7019      	strb	r1, [r3, #0]
 80095e2:	4608      	mov	r0, r1
 80095e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <__sfputs_r>:
 80095ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	4614      	mov	r4, r2
 80095f2:	18d5      	adds	r5, r2, r3
 80095f4:	42ac      	cmp	r4, r5
 80095f6:	d101      	bne.n	80095fc <__sfputs_r+0x12>
 80095f8:	2000      	movs	r0, #0
 80095fa:	e007      	b.n	800960c <__sfputs_r+0x22>
 80095fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009600:	463a      	mov	r2, r7
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ffda 	bl	80095bc <__sfputc_r>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d1f3      	bne.n	80095f4 <__sfputs_r+0xa>
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009610 <_vfiprintf_r>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	460d      	mov	r5, r1
 8009616:	b09d      	sub	sp, #116	; 0x74
 8009618:	4614      	mov	r4, r2
 800961a:	4698      	mov	r8, r3
 800961c:	4606      	mov	r6, r0
 800961e:	b118      	cbz	r0, 8009628 <_vfiprintf_r+0x18>
 8009620:	6983      	ldr	r3, [r0, #24]
 8009622:	b90b      	cbnz	r3, 8009628 <_vfiprintf_r+0x18>
 8009624:	f7ff fae4 	bl	8008bf0 <__sinit>
 8009628:	4b89      	ldr	r3, [pc, #548]	; (8009850 <_vfiprintf_r+0x240>)
 800962a:	429d      	cmp	r5, r3
 800962c:	d11b      	bne.n	8009666 <_vfiprintf_r+0x56>
 800962e:	6875      	ldr	r5, [r6, #4]
 8009630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	d405      	bmi.n	8009642 <_vfiprintf_r+0x32>
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	059a      	lsls	r2, r3, #22
 800963a:	d402      	bmi.n	8009642 <_vfiprintf_r+0x32>
 800963c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800963e:	f7ff fb7a 	bl	8008d36 <__retarget_lock_acquire_recursive>
 8009642:	89ab      	ldrh	r3, [r5, #12]
 8009644:	071b      	lsls	r3, r3, #28
 8009646:	d501      	bpl.n	800964c <_vfiprintf_r+0x3c>
 8009648:	692b      	ldr	r3, [r5, #16]
 800964a:	b9eb      	cbnz	r3, 8009688 <_vfiprintf_r+0x78>
 800964c:	4629      	mov	r1, r5
 800964e:	4630      	mov	r0, r6
 8009650:	f000 f9c6 	bl	80099e0 <__swsetup_r>
 8009654:	b1c0      	cbz	r0, 8009688 <_vfiprintf_r+0x78>
 8009656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009658:	07dc      	lsls	r4, r3, #31
 800965a:	d50e      	bpl.n	800967a <_vfiprintf_r+0x6a>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	b01d      	add	sp, #116	; 0x74
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	4b7b      	ldr	r3, [pc, #492]	; (8009854 <_vfiprintf_r+0x244>)
 8009668:	429d      	cmp	r5, r3
 800966a:	d101      	bne.n	8009670 <_vfiprintf_r+0x60>
 800966c:	68b5      	ldr	r5, [r6, #8]
 800966e:	e7df      	b.n	8009630 <_vfiprintf_r+0x20>
 8009670:	4b79      	ldr	r3, [pc, #484]	; (8009858 <_vfiprintf_r+0x248>)
 8009672:	429d      	cmp	r5, r3
 8009674:	bf08      	it	eq
 8009676:	68f5      	ldreq	r5, [r6, #12]
 8009678:	e7da      	b.n	8009630 <_vfiprintf_r+0x20>
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	0598      	lsls	r0, r3, #22
 800967e:	d4ed      	bmi.n	800965c <_vfiprintf_r+0x4c>
 8009680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009682:	f7ff fb59 	bl	8008d38 <__retarget_lock_release_recursive>
 8009686:	e7e9      	b.n	800965c <_vfiprintf_r+0x4c>
 8009688:	2300      	movs	r3, #0
 800968a:	9309      	str	r3, [sp, #36]	; 0x24
 800968c:	2320      	movs	r3, #32
 800968e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009692:	f8cd 800c 	str.w	r8, [sp, #12]
 8009696:	2330      	movs	r3, #48	; 0x30
 8009698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800985c <_vfiprintf_r+0x24c>
 800969c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096a0:	f04f 0901 	mov.w	r9, #1
 80096a4:	4623      	mov	r3, r4
 80096a6:	469a      	mov	sl, r3
 80096a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ac:	b10a      	cbz	r2, 80096b2 <_vfiprintf_r+0xa2>
 80096ae:	2a25      	cmp	r2, #37	; 0x25
 80096b0:	d1f9      	bne.n	80096a6 <_vfiprintf_r+0x96>
 80096b2:	ebba 0b04 	subs.w	fp, sl, r4
 80096b6:	d00b      	beq.n	80096d0 <_vfiprintf_r+0xc0>
 80096b8:	465b      	mov	r3, fp
 80096ba:	4622      	mov	r2, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ff93 	bl	80095ea <__sfputs_r>
 80096c4:	3001      	adds	r0, #1
 80096c6:	f000 80aa 	beq.w	800981e <_vfiprintf_r+0x20e>
 80096ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096cc:	445a      	add	r2, fp
 80096ce:	9209      	str	r2, [sp, #36]	; 0x24
 80096d0:	f89a 3000 	ldrb.w	r3, [sl]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 80a2 	beq.w	800981e <_vfiprintf_r+0x20e>
 80096da:	2300      	movs	r3, #0
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295
 80096e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e4:	f10a 0a01 	add.w	sl, sl, #1
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	9307      	str	r3, [sp, #28]
 80096ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096f0:	931a      	str	r3, [sp, #104]	; 0x68
 80096f2:	4654      	mov	r4, sl
 80096f4:	2205      	movs	r2, #5
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4858      	ldr	r0, [pc, #352]	; (800985c <_vfiprintf_r+0x24c>)
 80096fc:	f7f6 fd70 	bl	80001e0 <memchr>
 8009700:	9a04      	ldr	r2, [sp, #16]
 8009702:	b9d8      	cbnz	r0, 800973c <_vfiprintf_r+0x12c>
 8009704:	06d1      	lsls	r1, r2, #27
 8009706:	bf44      	itt	mi
 8009708:	2320      	movmi	r3, #32
 800970a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800970e:	0713      	lsls	r3, r2, #28
 8009710:	bf44      	itt	mi
 8009712:	232b      	movmi	r3, #43	; 0x2b
 8009714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009718:	f89a 3000 	ldrb.w	r3, [sl]
 800971c:	2b2a      	cmp	r3, #42	; 0x2a
 800971e:	d015      	beq.n	800974c <_vfiprintf_r+0x13c>
 8009720:	9a07      	ldr	r2, [sp, #28]
 8009722:	4654      	mov	r4, sl
 8009724:	2000      	movs	r0, #0
 8009726:	f04f 0c0a 	mov.w	ip, #10
 800972a:	4621      	mov	r1, r4
 800972c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009730:	3b30      	subs	r3, #48	; 0x30
 8009732:	2b09      	cmp	r3, #9
 8009734:	d94e      	bls.n	80097d4 <_vfiprintf_r+0x1c4>
 8009736:	b1b0      	cbz	r0, 8009766 <_vfiprintf_r+0x156>
 8009738:	9207      	str	r2, [sp, #28]
 800973a:	e014      	b.n	8009766 <_vfiprintf_r+0x156>
 800973c:	eba0 0308 	sub.w	r3, r0, r8
 8009740:	fa09 f303 	lsl.w	r3, r9, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	46a2      	mov	sl, r4
 800974a:	e7d2      	b.n	80096f2 <_vfiprintf_r+0xe2>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	1d19      	adds	r1, r3, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	9103      	str	r1, [sp, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	bfbb      	ittet	lt
 8009758:	425b      	neglt	r3, r3
 800975a:	f042 0202 	orrlt.w	r2, r2, #2
 800975e:	9307      	strge	r3, [sp, #28]
 8009760:	9307      	strlt	r3, [sp, #28]
 8009762:	bfb8      	it	lt
 8009764:	9204      	strlt	r2, [sp, #16]
 8009766:	7823      	ldrb	r3, [r4, #0]
 8009768:	2b2e      	cmp	r3, #46	; 0x2e
 800976a:	d10c      	bne.n	8009786 <_vfiprintf_r+0x176>
 800976c:	7863      	ldrb	r3, [r4, #1]
 800976e:	2b2a      	cmp	r3, #42	; 0x2a
 8009770:	d135      	bne.n	80097de <_vfiprintf_r+0x1ce>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	1d1a      	adds	r2, r3, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	9203      	str	r2, [sp, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfb8      	it	lt
 800977e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009782:	3402      	adds	r4, #2
 8009784:	9305      	str	r3, [sp, #20]
 8009786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800986c <_vfiprintf_r+0x25c>
 800978a:	7821      	ldrb	r1, [r4, #0]
 800978c:	2203      	movs	r2, #3
 800978e:	4650      	mov	r0, sl
 8009790:	f7f6 fd26 	bl	80001e0 <memchr>
 8009794:	b140      	cbz	r0, 80097a8 <_vfiprintf_r+0x198>
 8009796:	2340      	movs	r3, #64	; 0x40
 8009798:	eba0 000a 	sub.w	r0, r0, sl
 800979c:	fa03 f000 	lsl.w	r0, r3, r0
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	4303      	orrs	r3, r0
 80097a4:	3401      	adds	r4, #1
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ac:	482c      	ldr	r0, [pc, #176]	; (8009860 <_vfiprintf_r+0x250>)
 80097ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097b2:	2206      	movs	r2, #6
 80097b4:	f7f6 fd14 	bl	80001e0 <memchr>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d03f      	beq.n	800983c <_vfiprintf_r+0x22c>
 80097bc:	4b29      	ldr	r3, [pc, #164]	; (8009864 <_vfiprintf_r+0x254>)
 80097be:	bb1b      	cbnz	r3, 8009808 <_vfiprintf_r+0x1f8>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3307      	adds	r3, #7
 80097c4:	f023 0307 	bic.w	r3, r3, #7
 80097c8:	3308      	adds	r3, #8
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ce:	443b      	add	r3, r7
 80097d0:	9309      	str	r3, [sp, #36]	; 0x24
 80097d2:	e767      	b.n	80096a4 <_vfiprintf_r+0x94>
 80097d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d8:	460c      	mov	r4, r1
 80097da:	2001      	movs	r0, #1
 80097dc:	e7a5      	b.n	800972a <_vfiprintf_r+0x11a>
 80097de:	2300      	movs	r3, #0
 80097e0:	3401      	adds	r4, #1
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	4619      	mov	r1, r3
 80097e6:	f04f 0c0a 	mov.w	ip, #10
 80097ea:	4620      	mov	r0, r4
 80097ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f0:	3a30      	subs	r2, #48	; 0x30
 80097f2:	2a09      	cmp	r2, #9
 80097f4:	d903      	bls.n	80097fe <_vfiprintf_r+0x1ee>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0c5      	beq.n	8009786 <_vfiprintf_r+0x176>
 80097fa:	9105      	str	r1, [sp, #20]
 80097fc:	e7c3      	b.n	8009786 <_vfiprintf_r+0x176>
 80097fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009802:	4604      	mov	r4, r0
 8009804:	2301      	movs	r3, #1
 8009806:	e7f0      	b.n	80097ea <_vfiprintf_r+0x1da>
 8009808:	ab03      	add	r3, sp, #12
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	462a      	mov	r2, r5
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <_vfiprintf_r+0x258>)
 8009810:	a904      	add	r1, sp, #16
 8009812:	4630      	mov	r0, r6
 8009814:	f7fd ff3a 	bl	800768c <_printf_float>
 8009818:	4607      	mov	r7, r0
 800981a:	1c78      	adds	r0, r7, #1
 800981c:	d1d6      	bne.n	80097cc <_vfiprintf_r+0x1bc>
 800981e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009820:	07d9      	lsls	r1, r3, #31
 8009822:	d405      	bmi.n	8009830 <_vfiprintf_r+0x220>
 8009824:	89ab      	ldrh	r3, [r5, #12]
 8009826:	059a      	lsls	r2, r3, #22
 8009828:	d402      	bmi.n	8009830 <_vfiprintf_r+0x220>
 800982a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982c:	f7ff fa84 	bl	8008d38 <__retarget_lock_release_recursive>
 8009830:	89ab      	ldrh	r3, [r5, #12]
 8009832:	065b      	lsls	r3, r3, #25
 8009834:	f53f af12 	bmi.w	800965c <_vfiprintf_r+0x4c>
 8009838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800983a:	e711      	b.n	8009660 <_vfiprintf_r+0x50>
 800983c:	ab03      	add	r3, sp, #12
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	462a      	mov	r2, r5
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <_vfiprintf_r+0x258>)
 8009844:	a904      	add	r1, sp, #16
 8009846:	4630      	mov	r0, r6
 8009848:	f7fe f9c4 	bl	8007bd4 <_printf_i>
 800984c:	e7e4      	b.n	8009818 <_vfiprintf_r+0x208>
 800984e:	bf00      	nop
 8009850:	0800a114 	.word	0x0800a114
 8009854:	0800a134 	.word	0x0800a134
 8009858:	0800a0f4 	.word	0x0800a0f4
 800985c:	0800a2b4 	.word	0x0800a2b4
 8009860:	0800a2be 	.word	0x0800a2be
 8009864:	0800768d 	.word	0x0800768d
 8009868:	080095eb 	.word	0x080095eb
 800986c:	0800a2ba 	.word	0x0800a2ba

08009870 <_sbrk_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d06      	ldr	r5, [pc, #24]	; (800988c <_sbrk_r+0x1c>)
 8009874:	2300      	movs	r3, #0
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	602b      	str	r3, [r5, #0]
 800987c:	f7f7 fe10 	bl	80014a0 <_sbrk>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_sbrk_r+0x1a>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_sbrk_r+0x1a>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	20001cc0 	.word	0x20001cc0

08009890 <__sread>:
 8009890:	b510      	push	{r4, lr}
 8009892:	460c      	mov	r4, r1
 8009894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009898:	f000 faa6 	bl	8009de8 <_read_r>
 800989c:	2800      	cmp	r0, #0
 800989e:	bfab      	itete	ge
 80098a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098a2:	89a3      	ldrhlt	r3, [r4, #12]
 80098a4:	181b      	addge	r3, r3, r0
 80098a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098aa:	bfac      	ite	ge
 80098ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80098ae:	81a3      	strhlt	r3, [r4, #12]
 80098b0:	bd10      	pop	{r4, pc}

080098b2 <__swrite>:
 80098b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	461f      	mov	r7, r3
 80098b8:	898b      	ldrh	r3, [r1, #12]
 80098ba:	05db      	lsls	r3, r3, #23
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	4616      	mov	r6, r2
 80098c2:	d505      	bpl.n	80098d0 <__swrite+0x1e>
 80098c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c8:	2302      	movs	r3, #2
 80098ca:	2200      	movs	r2, #0
 80098cc:	f000 f9f8 	bl	8009cc0 <_lseek_r>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	4632      	mov	r2, r6
 80098de:	463b      	mov	r3, r7
 80098e0:	4628      	mov	r0, r5
 80098e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098e6:	f000 b869 	b.w	80099bc <_write_r>

080098ea <__sseek>:
 80098ea:	b510      	push	{r4, lr}
 80098ec:	460c      	mov	r4, r1
 80098ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f2:	f000 f9e5 	bl	8009cc0 <_lseek_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	bf15      	itete	ne
 80098fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009906:	81a3      	strheq	r3, [r4, #12]
 8009908:	bf18      	it	ne
 800990a:	81a3      	strhne	r3, [r4, #12]
 800990c:	bd10      	pop	{r4, pc}

0800990e <__sclose>:
 800990e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009912:	f000 b8f1 	b.w	8009af8 <_close_r>
	...

08009918 <__swbuf_r>:
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991a:	460e      	mov	r6, r1
 800991c:	4614      	mov	r4, r2
 800991e:	4605      	mov	r5, r0
 8009920:	b118      	cbz	r0, 800992a <__swbuf_r+0x12>
 8009922:	6983      	ldr	r3, [r0, #24]
 8009924:	b90b      	cbnz	r3, 800992a <__swbuf_r+0x12>
 8009926:	f7ff f963 	bl	8008bf0 <__sinit>
 800992a:	4b21      	ldr	r3, [pc, #132]	; (80099b0 <__swbuf_r+0x98>)
 800992c:	429c      	cmp	r4, r3
 800992e:	d12b      	bne.n	8009988 <__swbuf_r+0x70>
 8009930:	686c      	ldr	r4, [r5, #4]
 8009932:	69a3      	ldr	r3, [r4, #24]
 8009934:	60a3      	str	r3, [r4, #8]
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	071a      	lsls	r2, r3, #28
 800993a:	d52f      	bpl.n	800999c <__swbuf_r+0x84>
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	b36b      	cbz	r3, 800999c <__swbuf_r+0x84>
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	6820      	ldr	r0, [r4, #0]
 8009944:	1ac0      	subs	r0, r0, r3
 8009946:	6963      	ldr	r3, [r4, #20]
 8009948:	b2f6      	uxtb	r6, r6
 800994a:	4283      	cmp	r3, r0
 800994c:	4637      	mov	r7, r6
 800994e:	dc04      	bgt.n	800995a <__swbuf_r+0x42>
 8009950:	4621      	mov	r1, r4
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f966 	bl	8009c24 <_fflush_r>
 8009958:	bb30      	cbnz	r0, 80099a8 <__swbuf_r+0x90>
 800995a:	68a3      	ldr	r3, [r4, #8]
 800995c:	3b01      	subs	r3, #1
 800995e:	60a3      	str	r3, [r4, #8]
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	6022      	str	r2, [r4, #0]
 8009966:	701e      	strb	r6, [r3, #0]
 8009968:	6963      	ldr	r3, [r4, #20]
 800996a:	3001      	adds	r0, #1
 800996c:	4283      	cmp	r3, r0
 800996e:	d004      	beq.n	800997a <__swbuf_r+0x62>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	07db      	lsls	r3, r3, #31
 8009974:	d506      	bpl.n	8009984 <__swbuf_r+0x6c>
 8009976:	2e0a      	cmp	r6, #10
 8009978:	d104      	bne.n	8009984 <__swbuf_r+0x6c>
 800997a:	4621      	mov	r1, r4
 800997c:	4628      	mov	r0, r5
 800997e:	f000 f951 	bl	8009c24 <_fflush_r>
 8009982:	b988      	cbnz	r0, 80099a8 <__swbuf_r+0x90>
 8009984:	4638      	mov	r0, r7
 8009986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <__swbuf_r+0x9c>)
 800998a:	429c      	cmp	r4, r3
 800998c:	d101      	bne.n	8009992 <__swbuf_r+0x7a>
 800998e:	68ac      	ldr	r4, [r5, #8]
 8009990:	e7cf      	b.n	8009932 <__swbuf_r+0x1a>
 8009992:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <__swbuf_r+0xa0>)
 8009994:	429c      	cmp	r4, r3
 8009996:	bf08      	it	eq
 8009998:	68ec      	ldreq	r4, [r5, #12]
 800999a:	e7ca      	b.n	8009932 <__swbuf_r+0x1a>
 800999c:	4621      	mov	r1, r4
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f81e 	bl	80099e0 <__swsetup_r>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d0cb      	beq.n	8009940 <__swbuf_r+0x28>
 80099a8:	f04f 37ff 	mov.w	r7, #4294967295
 80099ac:	e7ea      	b.n	8009984 <__swbuf_r+0x6c>
 80099ae:	bf00      	nop
 80099b0:	0800a114 	.word	0x0800a114
 80099b4:	0800a134 	.word	0x0800a134
 80099b8:	0800a0f4 	.word	0x0800a0f4

080099bc <_write_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	; (80099dc <_write_r+0x20>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7f7 fa2c 	bl	8000e28 <_write>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_write_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_write_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	20001cc0 	.word	0x20001cc0

080099e0 <__swsetup_r>:
 80099e0:	4b32      	ldr	r3, [pc, #200]	; (8009aac <__swsetup_r+0xcc>)
 80099e2:	b570      	push	{r4, r5, r6, lr}
 80099e4:	681d      	ldr	r5, [r3, #0]
 80099e6:	4606      	mov	r6, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	b125      	cbz	r5, 80099f6 <__swsetup_r+0x16>
 80099ec:	69ab      	ldr	r3, [r5, #24]
 80099ee:	b913      	cbnz	r3, 80099f6 <__swsetup_r+0x16>
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff f8fd 	bl	8008bf0 <__sinit>
 80099f6:	4b2e      	ldr	r3, [pc, #184]	; (8009ab0 <__swsetup_r+0xd0>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	d10f      	bne.n	8009a1c <__swsetup_r+0x3c>
 80099fc:	686c      	ldr	r4, [r5, #4]
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a04:	0719      	lsls	r1, r3, #28
 8009a06:	d42c      	bmi.n	8009a62 <__swsetup_r+0x82>
 8009a08:	06dd      	lsls	r5, r3, #27
 8009a0a:	d411      	bmi.n	8009a30 <__swsetup_r+0x50>
 8009a0c:	2309      	movs	r3, #9
 8009a0e:	6033      	str	r3, [r6, #0]
 8009a10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1a:	e03e      	b.n	8009a9a <__swsetup_r+0xba>
 8009a1c:	4b25      	ldr	r3, [pc, #148]	; (8009ab4 <__swsetup_r+0xd4>)
 8009a1e:	429c      	cmp	r4, r3
 8009a20:	d101      	bne.n	8009a26 <__swsetup_r+0x46>
 8009a22:	68ac      	ldr	r4, [r5, #8]
 8009a24:	e7eb      	b.n	80099fe <__swsetup_r+0x1e>
 8009a26:	4b24      	ldr	r3, [pc, #144]	; (8009ab8 <__swsetup_r+0xd8>)
 8009a28:	429c      	cmp	r4, r3
 8009a2a:	bf08      	it	eq
 8009a2c:	68ec      	ldreq	r4, [r5, #12]
 8009a2e:	e7e6      	b.n	80099fe <__swsetup_r+0x1e>
 8009a30:	0758      	lsls	r0, r3, #29
 8009a32:	d512      	bpl.n	8009a5a <__swsetup_r+0x7a>
 8009a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a36:	b141      	cbz	r1, 8009a4a <__swsetup_r+0x6a>
 8009a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a3c:	4299      	cmp	r1, r3
 8009a3e:	d002      	beq.n	8009a46 <__swsetup_r+0x66>
 8009a40:	4630      	mov	r0, r6
 8009a42:	f7ff fd11 	bl	8009468 <_free_r>
 8009a46:	2300      	movs	r3, #0
 8009a48:	6363      	str	r3, [r4, #52]	; 0x34
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a50:	81a3      	strh	r3, [r4, #12]
 8009a52:	2300      	movs	r3, #0
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f043 0308 	orr.w	r3, r3, #8
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	b94b      	cbnz	r3, 8009a7a <__swsetup_r+0x9a>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a70:	d003      	beq.n	8009a7a <__swsetup_r+0x9a>
 8009a72:	4621      	mov	r1, r4
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f959 	bl	8009d2c <__smakebuf_r>
 8009a7a:	89a0      	ldrh	r0, [r4, #12]
 8009a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a80:	f010 0301 	ands.w	r3, r0, #1
 8009a84:	d00a      	beq.n	8009a9c <__swsetup_r+0xbc>
 8009a86:	2300      	movs	r3, #0
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	6963      	ldr	r3, [r4, #20]
 8009a8c:	425b      	negs	r3, r3
 8009a8e:	61a3      	str	r3, [r4, #24]
 8009a90:	6923      	ldr	r3, [r4, #16]
 8009a92:	b943      	cbnz	r3, 8009aa6 <__swsetup_r+0xc6>
 8009a94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a98:	d1ba      	bne.n	8009a10 <__swsetup_r+0x30>
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	0781      	lsls	r1, r0, #30
 8009a9e:	bf58      	it	pl
 8009aa0:	6963      	ldrpl	r3, [r4, #20]
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	e7f4      	b.n	8009a90 <__swsetup_r+0xb0>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	e7f7      	b.n	8009a9a <__swsetup_r+0xba>
 8009aaa:	bf00      	nop
 8009aac:	20000010 	.word	0x20000010
 8009ab0:	0800a114 	.word	0x0800a114
 8009ab4:	0800a134 	.word	0x0800a134
 8009ab8:	0800a0f4 	.word	0x0800a0f4

08009abc <__assert_func>:
 8009abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009abe:	4614      	mov	r4, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <__assert_func+0x2c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	68d8      	ldr	r0, [r3, #12]
 8009aca:	b14c      	cbz	r4, 8009ae0 <__assert_func+0x24>
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <__assert_func+0x30>)
 8009ace:	9100      	str	r1, [sp, #0]
 8009ad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ad4:	4906      	ldr	r1, [pc, #24]	; (8009af0 <__assert_func+0x34>)
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	f000 f8e0 	bl	8009c9c <fiprintf>
 8009adc:	f000 f9a3 	bl	8009e26 <abort>
 8009ae0:	4b04      	ldr	r3, [pc, #16]	; (8009af4 <__assert_func+0x38>)
 8009ae2:	461c      	mov	r4, r3
 8009ae4:	e7f3      	b.n	8009ace <__assert_func+0x12>
 8009ae6:	bf00      	nop
 8009ae8:	20000010 	.word	0x20000010
 8009aec:	0800a2c5 	.word	0x0800a2c5
 8009af0:	0800a2d2 	.word	0x0800a2d2
 8009af4:	0800a300 	.word	0x0800a300

08009af8 <_close_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d06      	ldr	r5, [pc, #24]	; (8009b14 <_close_r+0x1c>)
 8009afc:	2300      	movs	r3, #0
 8009afe:	4604      	mov	r4, r0
 8009b00:	4608      	mov	r0, r1
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	f7f7 fc98 	bl	8001438 <_close>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_close_r+0x1a>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_close_r+0x1a>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	20001cc0 	.word	0x20001cc0

08009b18 <__sflush_r>:
 8009b18:	898a      	ldrh	r2, [r1, #12]
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	4605      	mov	r5, r0
 8009b20:	0710      	lsls	r0, r2, #28
 8009b22:	460c      	mov	r4, r1
 8009b24:	d458      	bmi.n	8009bd8 <__sflush_r+0xc0>
 8009b26:	684b      	ldr	r3, [r1, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dc05      	bgt.n	8009b38 <__sflush_r+0x20>
 8009b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dc02      	bgt.n	8009b38 <__sflush_r+0x20>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	d0f9      	beq.n	8009b32 <__sflush_r+0x1a>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b44:	682f      	ldr	r7, [r5, #0]
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	d032      	beq.n	8009bb0 <__sflush_r+0x98>
 8009b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	075a      	lsls	r2, r3, #29
 8009b50:	d505      	bpl.n	8009b5e <__sflush_r+0x46>
 8009b52:	6863      	ldr	r3, [r4, #4]
 8009b54:	1ac0      	subs	r0, r0, r3
 8009b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b58:	b10b      	cbz	r3, 8009b5e <__sflush_r+0x46>
 8009b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b5c:	1ac0      	subs	r0, r0, r3
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4602      	mov	r2, r0
 8009b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b64:	6a21      	ldr	r1, [r4, #32]
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b0      	blx	r6
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	d106      	bne.n	8009b7e <__sflush_r+0x66>
 8009b70:	6829      	ldr	r1, [r5, #0]
 8009b72:	291d      	cmp	r1, #29
 8009b74:	d82c      	bhi.n	8009bd0 <__sflush_r+0xb8>
 8009b76:	4a2a      	ldr	r2, [pc, #168]	; (8009c20 <__sflush_r+0x108>)
 8009b78:	40ca      	lsrs	r2, r1
 8009b7a:	07d6      	lsls	r6, r2, #31
 8009b7c:	d528      	bpl.n	8009bd0 <__sflush_r+0xb8>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	6062      	str	r2, [r4, #4]
 8009b82:	04d9      	lsls	r1, r3, #19
 8009b84:	6922      	ldr	r2, [r4, #16]
 8009b86:	6022      	str	r2, [r4, #0]
 8009b88:	d504      	bpl.n	8009b94 <__sflush_r+0x7c>
 8009b8a:	1c42      	adds	r2, r0, #1
 8009b8c:	d101      	bne.n	8009b92 <__sflush_r+0x7a>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b903      	cbnz	r3, 8009b94 <__sflush_r+0x7c>
 8009b92:	6560      	str	r0, [r4, #84]	; 0x54
 8009b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b96:	602f      	str	r7, [r5, #0]
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	d0ca      	beq.n	8009b32 <__sflush_r+0x1a>
 8009b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	d002      	beq.n	8009baa <__sflush_r+0x92>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7ff fc5f 	bl	8009468 <_free_r>
 8009baa:	2000      	movs	r0, #0
 8009bac:	6360      	str	r0, [r4, #52]	; 0x34
 8009bae:	e7c1      	b.n	8009b34 <__sflush_r+0x1c>
 8009bb0:	6a21      	ldr	r1, [r4, #32]
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b0      	blx	r6
 8009bb8:	1c41      	adds	r1, r0, #1
 8009bba:	d1c7      	bne.n	8009b4c <__sflush_r+0x34>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0c4      	beq.n	8009b4c <__sflush_r+0x34>
 8009bc2:	2b1d      	cmp	r3, #29
 8009bc4:	d001      	beq.n	8009bca <__sflush_r+0xb2>
 8009bc6:	2b16      	cmp	r3, #22
 8009bc8:	d101      	bne.n	8009bce <__sflush_r+0xb6>
 8009bca:	602f      	str	r7, [r5, #0]
 8009bcc:	e7b1      	b.n	8009b32 <__sflush_r+0x1a>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	e7ad      	b.n	8009b34 <__sflush_r+0x1c>
 8009bd8:	690f      	ldr	r7, [r1, #16]
 8009bda:	2f00      	cmp	r7, #0
 8009bdc:	d0a9      	beq.n	8009b32 <__sflush_r+0x1a>
 8009bde:	0793      	lsls	r3, r2, #30
 8009be0:	680e      	ldr	r6, [r1, #0]
 8009be2:	bf08      	it	eq
 8009be4:	694b      	ldreq	r3, [r1, #20]
 8009be6:	600f      	str	r7, [r1, #0]
 8009be8:	bf18      	it	ne
 8009bea:	2300      	movne	r3, #0
 8009bec:	eba6 0807 	sub.w	r8, r6, r7
 8009bf0:	608b      	str	r3, [r1, #8]
 8009bf2:	f1b8 0f00 	cmp.w	r8, #0
 8009bf6:	dd9c      	ble.n	8009b32 <__sflush_r+0x1a>
 8009bf8:	6a21      	ldr	r1, [r4, #32]
 8009bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bfc:	4643      	mov	r3, r8
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b0      	blx	r6
 8009c04:	2800      	cmp	r0, #0
 8009c06:	dc06      	bgt.n	8009c16 <__sflush_r+0xfe>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e78e      	b.n	8009b34 <__sflush_r+0x1c>
 8009c16:	4407      	add	r7, r0
 8009c18:	eba8 0800 	sub.w	r8, r8, r0
 8009c1c:	e7e9      	b.n	8009bf2 <__sflush_r+0xda>
 8009c1e:	bf00      	nop
 8009c20:	20400001 	.word	0x20400001

08009c24 <_fflush_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	690b      	ldr	r3, [r1, #16]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b913      	cbnz	r3, 8009c34 <_fflush_r+0x10>
 8009c2e:	2500      	movs	r5, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	b118      	cbz	r0, 8009c3e <_fflush_r+0x1a>
 8009c36:	6983      	ldr	r3, [r0, #24]
 8009c38:	b90b      	cbnz	r3, 8009c3e <_fflush_r+0x1a>
 8009c3a:	f7fe ffd9 	bl	8008bf0 <__sinit>
 8009c3e:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <_fflush_r+0x6c>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d11b      	bne.n	8009c7c <_fflush_r+0x58>
 8009c44:	686c      	ldr	r4, [r5, #4]
 8009c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0ef      	beq.n	8009c2e <_fflush_r+0xa>
 8009c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c50:	07d0      	lsls	r0, r2, #31
 8009c52:	d404      	bmi.n	8009c5e <_fflush_r+0x3a>
 8009c54:	0599      	lsls	r1, r3, #22
 8009c56:	d402      	bmi.n	8009c5e <_fflush_r+0x3a>
 8009c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c5a:	f7ff f86c 	bl	8008d36 <__retarget_lock_acquire_recursive>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	4621      	mov	r1, r4
 8009c62:	f7ff ff59 	bl	8009b18 <__sflush_r>
 8009c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c68:	07da      	lsls	r2, r3, #31
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	d4e0      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	059b      	lsls	r3, r3, #22
 8009c72:	d4dd      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c76:	f7ff f85f 	bl	8008d38 <__retarget_lock_release_recursive>
 8009c7a:	e7d9      	b.n	8009c30 <_fflush_r+0xc>
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <_fflush_r+0x70>)
 8009c7e:	429c      	cmp	r4, r3
 8009c80:	d101      	bne.n	8009c86 <_fflush_r+0x62>
 8009c82:	68ac      	ldr	r4, [r5, #8]
 8009c84:	e7df      	b.n	8009c46 <_fflush_r+0x22>
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <_fflush_r+0x74>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	bf08      	it	eq
 8009c8c:	68ec      	ldreq	r4, [r5, #12]
 8009c8e:	e7da      	b.n	8009c46 <_fflush_r+0x22>
 8009c90:	0800a114 	.word	0x0800a114
 8009c94:	0800a134 	.word	0x0800a134
 8009c98:	0800a0f4 	.word	0x0800a0f4

08009c9c <fiprintf>:
 8009c9c:	b40e      	push	{r1, r2, r3}
 8009c9e:	b503      	push	{r0, r1, lr}
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	ab03      	add	r3, sp, #12
 8009ca4:	4805      	ldr	r0, [pc, #20]	; (8009cbc <fiprintf+0x20>)
 8009ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009caa:	6800      	ldr	r0, [r0, #0]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	f7ff fcaf 	bl	8009610 <_vfiprintf_r>
 8009cb2:	b002      	add	sp, #8
 8009cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cb8:	b003      	add	sp, #12
 8009cba:	4770      	bx	lr
 8009cbc:	20000010 	.word	0x20000010

08009cc0 <_lseek_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_lseek_r+0x20>)
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f7f7 fbd9 	bl	8001486 <_lseek>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_lseek_r+0x1e>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_lseek_r+0x1e>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20001cc0 	.word	0x20001cc0

08009ce4 <__swhatbuf_r>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	460e      	mov	r6, r1
 8009ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cec:	2900      	cmp	r1, #0
 8009cee:	b096      	sub	sp, #88	; 0x58
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	461d      	mov	r5, r3
 8009cf4:	da07      	bge.n	8009d06 <__swhatbuf_r+0x22>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	89b3      	ldrh	r3, [r6, #12]
 8009cfc:	061a      	lsls	r2, r3, #24
 8009cfe:	d410      	bmi.n	8009d22 <__swhatbuf_r+0x3e>
 8009d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d04:	e00e      	b.n	8009d24 <__swhatbuf_r+0x40>
 8009d06:	466a      	mov	r2, sp
 8009d08:	f000 f894 	bl	8009e34 <_fstat_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	dbf2      	blt.n	8009cf6 <__swhatbuf_r+0x12>
 8009d10:	9a01      	ldr	r2, [sp, #4]
 8009d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d1a:	425a      	negs	r2, r3
 8009d1c:	415a      	adcs	r2, r3
 8009d1e:	602a      	str	r2, [r5, #0]
 8009d20:	e7ee      	b.n	8009d00 <__swhatbuf_r+0x1c>
 8009d22:	2340      	movs	r3, #64	; 0x40
 8009d24:	2000      	movs	r0, #0
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	b016      	add	sp, #88	; 0x58
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}

08009d2c <__smakebuf_r>:
 8009d2c:	898b      	ldrh	r3, [r1, #12]
 8009d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d30:	079d      	lsls	r5, r3, #30
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	d507      	bpl.n	8009d48 <__smakebuf_r+0x1c>
 8009d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	2301      	movs	r3, #1
 8009d42:	6163      	str	r3, [r4, #20]
 8009d44:	b002      	add	sp, #8
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	ab01      	add	r3, sp, #4
 8009d4a:	466a      	mov	r2, sp
 8009d4c:	f7ff ffca 	bl	8009ce4 <__swhatbuf_r>
 8009d50:	9900      	ldr	r1, [sp, #0]
 8009d52:	4605      	mov	r5, r0
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff fbd7 	bl	8009508 <_malloc_r>
 8009d5a:	b948      	cbnz	r0, 8009d70 <__smakebuf_r+0x44>
 8009d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d4ef      	bmi.n	8009d44 <__smakebuf_r+0x18>
 8009d64:	f023 0303 	bic.w	r3, r3, #3
 8009d68:	f043 0302 	orr.w	r3, r3, #2
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7e3      	b.n	8009d38 <__smakebuf_r+0xc>
 8009d70:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <__smakebuf_r+0x7c>)
 8009d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	6020      	str	r0, [r4, #0]
 8009d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	9b00      	ldr	r3, [sp, #0]
 8009d80:	6163      	str	r3, [r4, #20]
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	6120      	str	r0, [r4, #16]
 8009d86:	b15b      	cbz	r3, 8009da0 <__smakebuf_r+0x74>
 8009d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f000 f863 	bl	8009e58 <_isatty_r>
 8009d92:	b128      	cbz	r0, 8009da0 <__smakebuf_r+0x74>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	89a0      	ldrh	r0, [r4, #12]
 8009da2:	4305      	orrs	r5, r0
 8009da4:	81a5      	strh	r5, [r4, #12]
 8009da6:	e7cd      	b.n	8009d44 <__smakebuf_r+0x18>
 8009da8:	08008b89 	.word	0x08008b89

08009dac <__ascii_mbtowc>:
 8009dac:	b082      	sub	sp, #8
 8009dae:	b901      	cbnz	r1, 8009db2 <__ascii_mbtowc+0x6>
 8009db0:	a901      	add	r1, sp, #4
 8009db2:	b142      	cbz	r2, 8009dc6 <__ascii_mbtowc+0x1a>
 8009db4:	b14b      	cbz	r3, 8009dca <__ascii_mbtowc+0x1e>
 8009db6:	7813      	ldrb	r3, [r2, #0]
 8009db8:	600b      	str	r3, [r1, #0]
 8009dba:	7812      	ldrb	r2, [r2, #0]
 8009dbc:	1e10      	subs	r0, r2, #0
 8009dbe:	bf18      	it	ne
 8009dc0:	2001      	movne	r0, #1
 8009dc2:	b002      	add	sp, #8
 8009dc4:	4770      	bx	lr
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	e7fb      	b.n	8009dc2 <__ascii_mbtowc+0x16>
 8009dca:	f06f 0001 	mvn.w	r0, #1
 8009dce:	e7f8      	b.n	8009dc2 <__ascii_mbtowc+0x16>

08009dd0 <__malloc_lock>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__malloc_lock+0x8>)
 8009dd2:	f7fe bfb0 	b.w	8008d36 <__retarget_lock_acquire_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	20001cb8 	.word	0x20001cb8

08009ddc <__malloc_unlock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__malloc_unlock+0x8>)
 8009dde:	f7fe bfab 	b.w	8008d38 <__retarget_lock_release_recursive>
 8009de2:	bf00      	nop
 8009de4:	20001cb8 	.word	0x20001cb8

08009de8 <_read_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	; (8009e08 <_read_r+0x20>)
 8009dec:	4604      	mov	r4, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	4611      	mov	r1, r2
 8009df2:	2200      	movs	r2, #0
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f7f7 fb01 	bl	80013fe <_read>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_read_r+0x1e>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_read_r+0x1e>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	20001cc0 	.word	0x20001cc0

08009e0c <__ascii_wctomb>:
 8009e0c:	b149      	cbz	r1, 8009e22 <__ascii_wctomb+0x16>
 8009e0e:	2aff      	cmp	r2, #255	; 0xff
 8009e10:	bf85      	ittet	hi
 8009e12:	238a      	movhi	r3, #138	; 0x8a
 8009e14:	6003      	strhi	r3, [r0, #0]
 8009e16:	700a      	strbls	r2, [r1, #0]
 8009e18:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e1c:	bf98      	it	ls
 8009e1e:	2001      	movls	r0, #1
 8009e20:	4770      	bx	lr
 8009e22:	4608      	mov	r0, r1
 8009e24:	4770      	bx	lr

08009e26 <abort>:
 8009e26:	b508      	push	{r3, lr}
 8009e28:	2006      	movs	r0, #6
 8009e2a:	f000 f84d 	bl	8009ec8 <raise>
 8009e2e:	2001      	movs	r0, #1
 8009e30:	f7f7 fadb 	bl	80013ea <_exit>

08009e34 <_fstat_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_fstat_r+0x20>)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	4611      	mov	r1, r2
 8009e40:	602b      	str	r3, [r5, #0]
 8009e42:	f7f7 fb05 	bl	8001450 <_fstat>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	d102      	bne.n	8009e50 <_fstat_r+0x1c>
 8009e4a:	682b      	ldr	r3, [r5, #0]
 8009e4c:	b103      	cbz	r3, 8009e50 <_fstat_r+0x1c>
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	bd38      	pop	{r3, r4, r5, pc}
 8009e52:	bf00      	nop
 8009e54:	20001cc0 	.word	0x20001cc0

08009e58 <_isatty_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_isatty_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f7 fb04 	bl	8001470 <_isatty>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_isatty_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_isatty_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20001cc0 	.word	0x20001cc0

08009e78 <_raise_r>:
 8009e78:	291f      	cmp	r1, #31
 8009e7a:	b538      	push	{r3, r4, r5, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	d904      	bls.n	8009e8c <_raise_r+0x14>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e8e:	b112      	cbz	r2, 8009e96 <_raise_r+0x1e>
 8009e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e94:	b94b      	cbnz	r3, 8009eaa <_raise_r+0x32>
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 f830 	bl	8009efc <_getpid_r>
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea6:	f000 b817 	b.w	8009ed8 <_kill_r>
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d00a      	beq.n	8009ec4 <_raise_r+0x4c>
 8009eae:	1c59      	adds	r1, r3, #1
 8009eb0:	d103      	bne.n	8009eba <_raise_r+0x42>
 8009eb2:	2316      	movs	r3, #22
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	e7e7      	b.n	8009e8a <_raise_r+0x12>
 8009eba:	2400      	movs	r4, #0
 8009ebc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	4798      	blx	r3
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e7e0      	b.n	8009e8a <_raise_r+0x12>

08009ec8 <raise>:
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <raise+0xc>)
 8009eca:	4601      	mov	r1, r0
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	f7ff bfd3 	b.w	8009e78 <_raise_r>
 8009ed2:	bf00      	nop
 8009ed4:	20000010 	.word	0x20000010

08009ed8 <_kill_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_kill_r+0x20>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f7f7 fa70 	bl	80013ca <_kill>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d102      	bne.n	8009ef4 <_kill_r+0x1c>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	b103      	cbz	r3, 8009ef4 <_kill_r+0x1c>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20001cc0 	.word	0x20001cc0

08009efc <_getpid_r>:
 8009efc:	f7f7 ba5d 	b.w	80013ba <_getpid>

08009f00 <_init>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	bf00      	nop
 8009f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f06:	bc08      	pop	{r3}
 8009f08:	469e      	mov	lr, r3
 8009f0a:	4770      	bx	lr

08009f0c <_fini>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr


Living_Bath_Bed_Rooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b008  0800b008  0001b008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b520  0800b520  0001b520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  200001e0  0800b704  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd0  0800b704  00021cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e43d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d00  00000000  00000000  0003e64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00042350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00043670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f434  00000000  00000000  00044808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ebf  00000000  00000000  00063c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0214  00000000  00000000  0007cafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cd0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dac  00000000  00000000  0012cd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aff0 	.word	0x0800aff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800aff0 	.word	0x0800aff0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_write>:
 *      Author: kus
 */

#include "LoRa.h"

int _write(int file , char *ptr , int len){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1 , ptr , len , 50);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2332      	movs	r3, #50	; 0x32
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <_write+0x24>)
 8000bbe:	f004 f99f 	bl	8004f00 <HAL_UART_Transmit>
  return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20001bf8 	.word	0x20001bf8

08000bd0 <SPI_CS_LOW>:

void SPI_CS_LOW(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f001 ffb6 	bl	8002b4c <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SPI_CS_HIGH>:

void SPI_CS_HIGH(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2104      	movs	r1, #4
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 ffac 	bl	8002b4c <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <Read_Reg>:

unsigned char Read_Reg(unsigned char addr){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = addr & 0x7F;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	SPI_CS_LOW();
 8000c0c:	f7ff ffe0 	bl	8000bd0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , HAL_MAX_DELAY);
 8000c10:	f107 010f 	add.w	r1, r7, #15
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <Read_Reg+0x48>)
 8000c1c:	f003 fab5 	bl	800418a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000c20:	f107 010e 	add.w	r1, r7, #14
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <Read_Reg+0x48>)
 8000c2c:	f003 fc1b 	bl	8004466 <HAL_SPI_Receive>
	SPI_CS_HIGH();
 8000c30:	f7ff ffd8 	bl	8000be4 <SPI_CS_HIGH>

	return data;
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20001b94 	.word	0x20001b94

08000c44 <Write_Reg>:

void Write_Reg(unsigned char addr , unsigned char value){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t Value = value;
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	73bb      	strb	r3, [r7, #14]

	SPI_CS_LOW();
 8000c62:	f7ff ffb5 	bl	8000bd0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg,	1 , HAL_MAX_DELAY);
 8000c66:	f107 010f 	add.w	r1, r7, #15
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4808      	ldr	r0, [pc, #32]	; (8000c94 <Write_Reg+0x50>)
 8000c72:	f003 fa8a 	bl	800418a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &Value,1 , HAL_MAX_DELAY);
 8000c76:	f107 010e 	add.w	r1, r7, #14
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <Write_Reg+0x50>)
 8000c82:	f003 fa82 	bl	800418a <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 8000c86:	f7ff ffad 	bl	8000be4 <SPI_CS_HIGH>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20001b94 	.word	0x20001b94

08000c98 <set_OPMODE>:

void set_OPMODE(uint8_t mode){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, Read_Reg(REG_OPMODE) & ~OPMODE_MASK | mode );
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff ffa8 	bl	8000bf8 <Read_Reg>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	f023 0307 	bic.w	r3, r3, #7
 8000cb0:	b25a      	sxtb	r2, r3
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ffc0 	bl	8000c44 <Write_Reg>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <set_LoRa_mode>:

void set_LoRa_mode(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ffe0 	bl	8000c98 <set_OPMODE>
	HAL_Delay(15);
 8000cd8:	200f      	movs	r0, #15
 8000cda:	f000 fec1 	bl	8001a60 <HAL_Delay>

	uint8_t data = OPMODE_LORA;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, data);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ffac 	bl	8000c44 <Write_Reg>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <set_Freq>:

void set_Freq(uint64_t freq){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	e9c7 0100 	strd	r0, r1, [r7]
	set_OPMODE(OPMODE_SLEEP);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ffca 	bl	8000c98 <set_OPMODE>
	HAL_Delay(15);
 8000d04:	200f      	movs	r0, #15
 8000d06:	f000 feab 	bl	8001a60 <HAL_Delay>

	uint64_t frf = (( uint64_t)freq <<14 );  // freq *  2^19 / 32
 8000d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	038b      	lsls	r3, r1, #14
 8000d18:	ea43 4390 	orr.w	r3, r3, r0, lsr #18
 8000d1c:	0382      	lsls	r2, r0, #14
 8000d1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Write_Reg(REG_FRF_MSB, (uint8_t)(frf>>16) );
 8000d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	0c02      	lsrs	r2, r0, #16
 8000d30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d34:	0c0b      	lsrs	r3, r1, #16
 8000d36:	b2d3      	uxtb	r3, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2006      	movs	r0, #6
 8000d3c:	f7ff ff82 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_FRF_MID, (uint8_t)(frf>>8) );
 8000d40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	0a02      	lsrs	r2, r0, #8
 8000d4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000d52:	0a0b      	lsrs	r3, r1, #8
 8000d54:	b2d3      	uxtb	r3, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	2007      	movs	r0, #7
 8000d5a:	f7ff ff73 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_FRF_LSB, (uint8_t)(frf>>0) );
 8000d5e:	7a3b      	ldrb	r3, [r7, #8]
 8000d60:	4619      	mov	r1, r3
 8000d62:	2008      	movs	r0, #8
 8000d64:	f7ff ff6e 	bl	8000c44 <Write_Reg>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <set_config>:

void set_config(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ff8e 	bl	8000c98 <set_OPMODE>
	HAL_Delay(15);
 8000d7c:	200f      	movs	r0, #15
 8000d7e:	f000 fe6f 	bl	8001a60 <HAL_Delay>

	set_LoRa_mode();
 8000d82:	f7ff ffa3 	bl	8000ccc <set_LoRa_mode>

	unsigned char version = Read_Reg(REG_VERSION);
 8000d86:	2042      	movs	r0, #66	; 0x42
 8000d88:	f7ff ff36 	bl	8000bf8 <Read_Reg>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]

	printf("%d version \n\r", version);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <set_config+0x8c>)
 8000d96:	f008 f8bb 	bl	8008f10 <iprintf>

	Write_Reg(REG_SYNC_WORD, 0x34);
 8000d9a:	2134      	movs	r1, #52	; 0x34
 8000d9c:	2039      	movs	r0, #57	; 0x39
 8000d9e:	f7ff ff51 	bl	8000c44 <Write_Reg>


	Write_Reg(REG_MODEM_CONFIG3,0x04);
 8000da2:	2104      	movs	r1, #4
 8000da4:	2026      	movs	r0, #38	; 0x26
 8000da6:	f7ff ff4d 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG,0x72);
 8000daa:	2172      	movs	r1, #114	; 0x72
 8000dac:	201d      	movs	r0, #29
 8000dae:	f7ff ff49 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG2, (0x07<<4) | 0x04);
 8000db2:	2174      	movs	r1, #116	; 0x74
 8000db4:	201e      	movs	r0, #30
 8000db6:	f7ff ff45 	bl	8000c44 <Write_Reg>

	Write_Reg(REG_SYMB_TIMEOUT_LSB,0x08);
 8000dba:	2108      	movs	r1, #8
 8000dbc:	201f      	movs	r0, #31
 8000dbe:	f7ff ff41 	bl	8000c44 <Write_Reg>

	Write_Reg(REG_MAX_PAYLOAD_LENGTH, 0x80);
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	2023      	movs	r0, #35	; 0x23
 8000dc6:	f7ff ff3d 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, PAYLOAD_LENGTH);
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	2022      	movs	r0, #34	; 0x22
 8000dce:	f7ff ff39 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_HOP_PERIOD, 0xFF);
 8000dd2:	21ff      	movs	r1, #255	; 0xff
 8000dd4:	2024      	movs	r0, #36	; 0x24
 8000dd6:	f7ff ff35 	bl	8000c44 <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, Read_Reg(REG_FIFO_TX_BASE_AD));
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f7ff ff0c 	bl	8000bf8 <Read_Reg>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4619      	mov	r1, r3
 8000de4:	200d      	movs	r0, #13
 8000de6:	f7ff ff2d 	bl	8000c44 <Write_Reg>

	Write_Reg(REG_LNA, LNA_MAX_GAIN);
 8000dea:	2123      	movs	r1, #35	; 0x23
 8000dec:	200c      	movs	r0, #12
 8000dee:	f7ff ff29 	bl	8000c44 <Write_Reg>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800b008 	.word	0x0800b008

08000e00 <LoRa_init>:

void LoRa_init(uint64_t freq){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f001 fe9a 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f000 fe21 	bl	8001a60 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f001 fe90 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f000 fe17 	bl	8001a60 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 fe86 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e40:	2064      	movs	r0, #100	; 0x64
 8000e42:	f000 fe0d 	bl	8001a60 <HAL_Delay>

	set_Freq(freq);
 8000e46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e4a:	f7ff ff53 	bl	8000cf4 <set_Freq>
	set_config();
 8000e4e:	f7ff ff8f 	bl	8000d70 <set_config>
	set_LoRa_mode();
 8000e52:	f7ff ff3b 	bl	8000ccc <set_LoRa_mode>

	set_OPMODE(OPMODE_STANDBY);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ff1e 	bl	8000c98 <set_OPMODE>
	Write_Reg(RegPaRamp, (Read_Reg(RegPaRamp)& 0xF0) | 0x80 );
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f7ff fecb 	bl	8000bf8 <Read_Reg>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fee4 	bl	8000c44 <Write_Reg>
	set_Power(23);
 8000e7c:	2017      	movs	r0, #23
 8000e7e:	f000 f804 	bl	8000e8a <set_Power>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <set_Power>:

	Write_Buf(REG_FIFO, frame, datalen);
	set_OPMODE(OPMODE_TX);
}

void set_Power(int8_t pw) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
	if(pw >= 17) {
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	dd02      	ble.n	8000ea2 <set_Power+0x18>
		pw = 15;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	e005      	b.n	8000eae <set_Power+0x24>
	} else if(pw < 2) {
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	dc01      	bgt.n	8000eae <set_Power+0x24>
		pw = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	71fb      	strb	r3, [r7, #7]
	}
	Write_Reg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2009      	movs	r0, #9
 8000ec2:	f7ff febf 	bl	8000c44 <Write_Reg>
	Write_Reg(RegPaDac, Read_Reg(RegPaDac)|0x4);
 8000ec6:	205a      	movs	r0, #90	; 0x5a
 8000ec8:	f7ff fe96 	bl	8000bf8 <Read_Reg>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	205a      	movs	r0, #90	; 0x5a
 8000ed8:	f7ff feb4 	bl	8000c44 <Write_Reg>

}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <MX_ADC2_Init+0xb8>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f08:	2210      	movs	r2, #16
 8000f0a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f54:	f000 fda8 	bl	8001aa8 <HAL_ADC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000f5e:	f000 faef 	bl	8001540 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_ADC2_Init+0xb4>)
 8000f80:	f000 ffe8 	bl	8001f54 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000f8a:	f000 fad9 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20001b1c 	.word	0x20001b1c
 8000f9c:	50000100 	.word	0x50000100

08000fa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a15      	ldr	r2, [pc, #84]	; (8001014 <HAL_ADC_MspInit+0x74>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d124      	bne.n	800100c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = HUMIDITY_Pin;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HUMIDITY_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 fc16 	bl	8002838 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	50000100 	.word	0x50000100
 8001018:	40021000 	.word	0x40021000

0800101c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <MX_FREERTOS_Init+0x18>)
 8001022:	2100      	movs	r1, #0
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_FREERTOS_Init+0x1c>)
 8001026:	f004 fb4d 	bl	80056c4 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <MX_FREERTOS_Init+0x20>)
 800102e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0800b0dc 	.word	0x0800b0dc
 8001038:	08001041 	.word	0x08001041
 800103c:	20001b6c 	.word	0x20001b6c

08001040 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f004 fbe5 	bl	8005818 <osDelay>
 800104e:	e7fb      	b.n	8001048 <StartDefaultTask+0x8>

08001050 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_GPIO_Init+0x108>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <MX_GPIO_Init+0x108>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_GPIO_Init+0x108>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_GPIO_Init+0x108>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a35      	ldr	r2, [pc, #212]	; (8001158 <MX_GPIO_Init+0x108>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_GPIO_Init+0x108>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_GPIO_Init+0x108>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <MX_GPIO_Init+0x108>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <MX_GPIO_Init+0x108>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|FAN_Pin|CS_Pin|FLOOD_ALARM_Pin
 80010ae:	2200      	movs	r2, #0
 80010b0:	f240 110f 	movw	r1, #271	; 0x10f
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f001 fd48 	bl	8002b4c <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT_BED_Pin|LIGHT_LIVING_Pin|LIGHT_BATH_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	21c1      	movs	r1, #193	; 0xc1
 80010c0:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_GPIO_Init+0x10c>)
 80010c2:	f001 fd43 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MOTION_BATH_Pin|MOTION_LIVING_Pin;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	4821      	ldr	r0, [pc, #132]	; (8001160 <MX_GPIO_Init+0x110>)
 80010da:	f001 fbad 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|FAN_Pin|CS_Pin|FLOOD_ALARM_Pin
 80010de:	f240 130f 	movw	r3, #271	; 0x10f
 80010e2:	60fb      	str	r3, [r7, #12]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f001 fb9d 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIGHT_BED_Pin|LIGHT_LIVING_Pin|LIGHT_BATH_Pin;
 80010fe:	23c1      	movs	r3, #193	; 0xc1
 8001100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4619      	mov	r1, r3
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_GPIO_Init+0x10c>)
 8001116:	f001 fb8f 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_BED_Pin;
 800111a:	2302      	movs	r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_BED_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <MX_GPIO_Init+0x10c>)
 800112e:	f001 fb83 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO0_Pin|BUZZER_OFF_Pin;
 8001132:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f001 fb75 	bl	8002838 <HAL_GPIO_Init>

}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400
 8001160:	48001400 	.word	0x48001400

08001164 <light_livingroom>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void light_livingroom   (void *pvParameters){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	while(1){

		isLivingroomEmpty = HAL_GPIO_ReadPin(MOTION_LIVING_GPIO_Port, MOTION_LIVING_Pin);
 800116c:	2102      	movs	r1, #2
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <light_livingroom+0x38>)
 8001170:	f001 fcd4 	bl	8002b1c <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <light_livingroom+0x3c>)
 800117a:	701a      	strb	r2, [r3, #0]

		if( !isLivingroomEmpty )
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <light_livingroom+0x3c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <light_livingroom+0x2c>
			HAL_GPIO_WritePin(LIGHT_LIVING_GPIO_Port, LIGHT_LIVING_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <light_livingroom+0x40>)
 800118a:	f001 fcdf 	bl	8002b4c <HAL_GPIO_WritePin>
 800118e:	e7ed      	b.n	800116c <light_livingroom+0x8>
		else
			HAL_GPIO_WritePin(LIGHT_LIVING_GPIO_Port, LIGHT_LIVING_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <light_livingroom+0x40>)
 8001196:	f001 fcd9 	bl	8002b4c <HAL_GPIO_WritePin>
		isLivingroomEmpty = HAL_GPIO_ReadPin(MOTION_LIVING_GPIO_Port, MOTION_LIVING_Pin);
 800119a:	e7e7      	b.n	800116c <light_livingroom+0x8>
 800119c:	48001400 	.word	0x48001400
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	48000400 	.word	0x48000400

080011a8 <light_bathroom>:

	}
	vTaskDelete(NULL);
}
int a=0;
void light_bathroom   	(void *pvParameters){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	while(1){

		isBathroomEmpty = HAL_GPIO_ReadPin(MOTION_BATH_GPIO_Port, MOTION_BATH_Pin);
 80011b0:	2101      	movs	r1, #1
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <light_bathroom+0x38>)
 80011b4:	f001 fcb2 	bl	8002b1c <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <light_bathroom+0x3c>)
 80011be:	701a      	strb	r2, [r3, #0]

		if( !isBathroomEmpty )
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <light_bathroom+0x3c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <light_bathroom+0x2c>
			HAL_GPIO_WritePin(LIGHT_BATH_GPIO_Port, LIGHT_BATH_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <light_bathroom+0x40>)
 80011ce:	f001 fcbd 	bl	8002b4c <HAL_GPIO_WritePin>
 80011d2:	e7ed      	b.n	80011b0 <light_bathroom+0x8>
		else
			HAL_GPIO_WritePin(LIGHT_BATH_GPIO_Port, LIGHT_BATH_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <light_bathroom+0x40>)
 80011da:	f001 fcb7 	bl	8002b4c <HAL_GPIO_WritePin>
		isBathroomEmpty = HAL_GPIO_ReadPin(MOTION_BATH_GPIO_Port, MOTION_BATH_Pin);
 80011de:	e7e7      	b.n	80011b0 <light_bathroom+0x8>
 80011e0:	48001400 	.word	0x48001400
 80011e4:	200001fd 	.word	0x200001fd
 80011e8:	48000400 	.word	0x48000400

080011ec <light_bedroom>:

	}
	vTaskDelete(NULL);
}

void light_bedroom   	(void *pvParameters){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	while(1){

		isBedroomEmpty = HAL_GPIO_ReadPin(MOTION_BED_GPIO_Port, MOTION_BED_Pin);
 80011f4:	2102      	movs	r1, #2
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <light_bedroom+0x38>)
 80011f8:	f001 fc90 	bl	8002b1c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <light_bedroom+0x3c>)
 8001202:	701a      	strb	r2, [r3, #0]

		if( !isBedroomEmpty )
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <light_bedroom+0x3c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <light_bedroom+0x2c>
			HAL_GPIO_WritePin(LIGHT_BED_GPIO_Port, LIGHT_BED_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <light_bedroom+0x38>)
 8001212:	f001 fc9b 	bl	8002b4c <HAL_GPIO_WritePin>
 8001216:	e7ed      	b.n	80011f4 <light_bedroom+0x8>
		else
			HAL_GPIO_WritePin(LIGHT_BED_GPIO_Port, LIGHT_BED_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2101      	movs	r1, #1
 800121c:	4801      	ldr	r0, [pc, #4]	; (8001224 <light_bedroom+0x38>)
 800121e:	f001 fc95 	bl	8002b4c <HAL_GPIO_WritePin>
		isBedroomEmpty = HAL_GPIO_ReadPin(MOTION_BED_GPIO_Port, MOTION_BED_Pin);
 8001222:	e7e7      	b.n	80011f4 <light_bedroom+0x8>
 8001224:	48000400 	.word	0x48000400
 8001228:	200001fe 	.word	0x200001fe

0800122c <ceiling_fan>:
	vTaskDelete(NULL);
}



void ceiling_fan 	 	(void *pvParameters){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	while(1){

		temperature = ( temperature_measure * 50) / 255;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <ceiling_fan+0x4c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	2332      	movs	r3, #50	; 0x32
 800123c:	fb03 f302 	mul.w	r3, r3, r2
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <ceiling_fan+0x50>)
 8001242:	fb82 1203 	smull	r1, r2, r2, r3
 8001246:	441a      	add	r2, r3
 8001248:	11d2      	asrs	r2, r2, #7
 800124a:	17db      	asrs	r3, r3, #31
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <ceiling_fan+0x54>)
 8001252:	701a      	strb	r2, [r3, #0]

		if( temperature > TEMP_THRESHOLD )
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <ceiling_fan+0x54>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b1b      	cmp	r3, #27
 800125a:	d906      	bls.n	800126a <ceiling_fan+0x3e>
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2102      	movs	r1, #2
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f001 fc72 	bl	8002b4c <HAL_GPIO_WritePin>
 8001268:	e7e4      	b.n	8001234 <ceiling_fan+0x8>
		else
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2102      	movs	r1, #2
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 fc6b 	bl	8002b4c <HAL_GPIO_WritePin>
		temperature = ( temperature_measure * 50) / 255;
 8001276:	e7dd      	b.n	8001234 <ceiling_fan+0x8>
 8001278:	200001ff 	.word	0x200001ff
 800127c:	80808081 	.word	0x80808081
 8001280:	20000200 	.word	0x20000200

08001284 <flood_protection>:
	}
	vTaskDelete(NULL);
}

void flood_protection 	(void *pvParameters){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	while(1){

		  humidity_measure = HAL_ADC_GetValue(&hadc2);
 800128c:	481b      	ldr	r0, [pc, #108]	; (80012fc <flood_protection+0x78>)
 800128e:	f000 fe53 	bl	8001f38 <HAL_ADC_GetValue>
 8001292:	4603      	mov	r3, r0
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <flood_protection+0x7c>)
 8001298:	701a      	strb	r2, [r3, #0]
		  humidity = (humidity_measure * 70)/127  + 20;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <flood_protection+0x7c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	2346      	movs	r3, #70	; 0x46
 80012a2:	fb03 f302 	mul.w	r3, r3, r2
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <flood_protection+0x80>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	441a      	add	r2, r3
 80012ae:	1192      	asrs	r2, r2, #6
 80012b0:	17db      	asrs	r3, r3, #31
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3314      	adds	r3, #20
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <flood_protection+0x84>)
 80012bc:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start(&hadc2);
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <flood_protection+0x78>)
 80012c0:	f000 fd84 	bl	8001dcc <HAL_ADC_Start>

		  printf(" Stan : %d \r\n", isBathroomEmpty );
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <flood_protection+0x88>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <flood_protection+0x8c>)
 80012cc:	f007 fe20 	bl	8008f10 <iprintf>

			vTaskDelay( 5 / portTICK_PERIOD_MS);
 80012d0:	2005      	movs	r0, #5
 80012d2:	f005 fbc9 	bl	8006a68 <vTaskDelay>

		  if( humidity >= 70)
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <flood_protection+0x84>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b45      	cmp	r3, #69	; 0x45
 80012dc:	d906      	bls.n	80012ec <flood_protection+0x68>
			HAL_GPIO_WritePin(FLOOD_ALARM_GPIO_Port, FLOOD_ALARM_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2108      	movs	r1, #8
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 fc31 	bl	8002b4c <HAL_GPIO_WritePin>
 80012ea:	e7cf      	b.n	800128c <flood_protection+0x8>
		  else
			HAL_GPIO_WritePin(FLOOD_ALARM_GPIO_Port, FLOOD_ALARM_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2108      	movs	r1, #8
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f001 fc2a 	bl	8002b4c <HAL_GPIO_WritePin>
		  humidity_measure = HAL_ADC_GetValue(&hadc2);
 80012f8:	e7c8      	b.n	800128c <flood_protection+0x8>
 80012fa:	bf00      	nop
 80012fc:	20001b1c 	.word	0x20001b1c
 8001300:	20000201 	.word	0x20000201
 8001304:	81020409 	.word	0x81020409
 8001308:	20000202 	.word	0x20000202
 800130c:	200001fd 	.word	0x200001fd
 8001310:	0800b034 	.word	0x0800b034

08001314 <alarm_clock>:

	}
	vTaskDelete(NULL);
}

void alarm_clock		(void *pvParameters){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	while(1){
		if( hours == 10 )
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <alarm_clock+0x3c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b0a      	cmp	r3, #10
 8001322:	d105      	bne.n	8001330 <alarm_clock+0x1c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2101      	movs	r1, #1
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f001 fc0e 	bl	8002b4c <HAL_GPIO_WritePin>

		if( HAL_GPIO_ReadPin(BUZZER_OFF_GPIO_Port, BUZZER_OFF_Pin) == GPIO_PIN_RESET )
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f001 fbf0 	bl	8002b1c <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ec      	bne.n	800131c <alarm_clock+0x8>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 fbff 	bl	8002b4c <HAL_GPIO_WritePin>
		if( hours == 10 )
 800134e:	e7e5      	b.n	800131c <alarm_clock+0x8>
 8001350:	20000203 	.word	0x20000203

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 fb1b 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f895 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f7ff fe75 	bl	8001050 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001366:	f000 f8f1 	bl	800154c <MX_SPI1_Init>
  MX_ADC2_Init();
 800136a:	f7ff fdbb 	bl	8000ee4 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800136e:	f000 fa73 	bl	8001858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc2);
 8001372:	4832      	ldr	r0, [pc, #200]	; (800143c <main+0xe8>)
 8001374:	f000 fd2a 	bl	8001dcc <HAL_ADC_Start>


  xTaskCreate( light_livingroom	, "LIGHT_LIVINGROOM_TASK"	, 100, NULL, 1, light_liv_handle );
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <main+0xec>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2301      	movs	r3, #1
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	2264      	movs	r2, #100	; 0x64
 8001386:	492f      	ldr	r1, [pc, #188]	; (8001444 <main+0xf0>)
 8001388:	482f      	ldr	r0, [pc, #188]	; (8001448 <main+0xf4>)
 800138a:	f005 fa31 	bl	80067f0 <xTaskCreate>
  xTaskCreate( light_bathroom	, "LIGHT_BATHROOM_TASK"		, 100, NULL, 1, light_bath_handle );
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <main+0xf8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	2301      	movs	r3, #1
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2300      	movs	r3, #0
 800139a:	2264      	movs	r2, #100	; 0x64
 800139c:	492c      	ldr	r1, [pc, #176]	; (8001450 <main+0xfc>)
 800139e:	482d      	ldr	r0, [pc, #180]	; (8001454 <main+0x100>)
 80013a0:	f005 fa26 	bl	80067f0 <xTaskCreate>
  xTaskCreate( light_bedroom	, "LIGHT_BEDROOM_TASK"		, 100, NULL, 1, light_bed_handle );
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <main+0x104>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	2264      	movs	r2, #100	; 0x64
 80013b2:	492a      	ldr	r1, [pc, #168]	; (800145c <main+0x108>)
 80013b4:	482a      	ldr	r0, [pc, #168]	; (8001460 <main+0x10c>)
 80013b6:	f005 fa1b 	bl	80067f0 <xTaskCreate>

  xTaskCreate( ceiling_fan		, "CEILING_FAN_TASK" 		, 100, NULL, 1, fan_handle );
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <main+0x110>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	2264      	movs	r2, #100	; 0x64
 80013c8:	4927      	ldr	r1, [pc, #156]	; (8001468 <main+0x114>)
 80013ca:	4828      	ldr	r0, [pc, #160]	; (800146c <main+0x118>)
 80013cc:	f005 fa10 	bl	80067f0 <xTaskCreate>
  xTaskCreate( flood_protection , "FLOOD_PROTECTION_TASK"	, 200, NULL, 2, light_fl_handle );
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <main+0x11c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2302      	movs	r3, #2
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	22c8      	movs	r2, #200	; 0xc8
 80013de:	4925      	ldr	r1, [pc, #148]	; (8001474 <main+0x120>)
 80013e0:	4825      	ldr	r0, [pc, #148]	; (8001478 <main+0x124>)
 80013e2:	f005 fa05 	bl	80067f0 <xTaskCreate>
  xTaskCreate( alarm_clock		, "ALARM_CLOCK_TASK"		, 100, NULL, 1, light_alarm_handle );
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <main+0x128>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	2264      	movs	r2, #100	; 0x64
 80013f4:	4922      	ldr	r1, [pc, #136]	; (8001480 <main+0x12c>)
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <main+0x130>)
 80013f8:	f005 f9fa 	bl	80067f0 <xTaskCreate>

  mutex = xSemaphoreCreateMutex();
 80013fc:	2001      	movs	r0, #1
 80013fe:	f004 fc7b 	bl	8005cf8 <xQueueCreateMutex>
 8001402:	4603      	mov	r3, r0
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <main+0x134>)
 8001406:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(mutex, portMAX_DELAY);
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <main+0x134>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	4618      	mov	r0, r3
 8001412:	f004 feff 	bl	8006214 <xQueueSemaphoreTake>
  vTaskStartScheduler();
 8001416:	f005 fb5b 	bl	8006ad0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800141a:	f004 f8eb 	bl	80055f4 <osKernelInitialize>
  MX_FREERTOS_Init();
 800141e:	f7ff fdfd 	bl	800101c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001422:	f004 f91b 	bl	800565c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LoRa_init(868);
 8001426:	f44f 7059 	mov.w	r0, #868	; 0x364
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	f7ff fce7 	bl	8000e00 <LoRa_init>


  while (1)
  {
	vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001432:	200a      	movs	r0, #10
 8001434:	f005 fb18 	bl	8006a68 <vTaskDelay>
 8001438:	e7fb      	b.n	8001432 <main+0xde>
 800143a:	bf00      	nop
 800143c:	20001b1c 	.word	0x20001b1c
 8001440:	20001b70 	.word	0x20001b70
 8001444:	0800b044 	.word	0x0800b044
 8001448:	08001165 	.word	0x08001165
 800144c:	20001b88 	.word	0x20001b88
 8001450:	0800b05c 	.word	0x0800b05c
 8001454:	080011a9 	.word	0x080011a9
 8001458:	20001b84 	.word	0x20001b84
 800145c:	0800b070 	.word	0x0800b070
 8001460:	080011ed 	.word	0x080011ed
 8001464:	20001b78 	.word	0x20001b78
 8001468:	0800b084 	.word	0x0800b084
 800146c:	0800122d 	.word	0x0800122d
 8001470:	20001b90 	.word	0x20001b90
 8001474:	0800b098 	.word	0x0800b098
 8001478:	08001285 	.word	0x08001285
 800147c:	20001b8c 	.word	0x20001b8c
 8001480:	0800b0b0 	.word	0x0800b0b0
 8001484:	08001315 	.word	0x08001315
 8001488:	20000204 	.word	0x20000204

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001496:	2228      	movs	r2, #40	; 0x28
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f007 f8c6 	bl	800862c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80014d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fb4c 	bl	8002b7c <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014ea:	f000 f829 	bl	8001540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fa3f 	bl	800398c <HAL_RCC_ClockConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001514:	f000 f814 	bl	8001540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8001518:	2381      	movs	r3, #129	; 0x81
 800151a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fc65 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001534:	f000 f804 	bl	8001540 <Error_Handler>
  }
}
 8001538:	bf00      	nop
 800153a:	3758      	adds	r7, #88	; 0x58
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <MX_SPI1_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001566:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800156a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_SPI1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_SPI1_Init+0x74>)
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001582:	2218      	movs	r2, #24
 8001584:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_SPI1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_SPI1_Init+0x74>)
 800159a:	2207      	movs	r2, #7
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_SPI1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_SPI1_Init+0x74>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_SPI1_Init+0x74>)
 80015ac:	f002 fd4a 	bl	8004044 <HAL_SPI_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f7ff ffc3 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20001b94 	.word	0x20001b94
 80015c4:	40013000 	.word	0x40013000

080015c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_SPI_MspInit+0x7c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d128      	bne.n	800163c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_SPI_MspInit+0x80>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_SPI_MspInit+0x80>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f4:	6193      	str	r3, [r2, #24]
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_SPI_MspInit+0x80>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_SPI_MspInit+0x80>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_SPI_MspInit+0x80>)
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_SPI_MspInit+0x80>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23e0      	movs	r3, #224	; 0xe0
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162a:	2305      	movs	r3, #5
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f001 f8fe 	bl	8002838 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013000 	.word	0x40013000
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_MspInit+0x4c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_MspInit+0x4c>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_MspInit+0x4c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_MspInit+0x4c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	210f      	movs	r1, #15
 8001686:	f06f 0001 	mvn.w	r0, #1
 800168a:	f001 f8ac 	bl	80027e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f9a8 	bl	8001a20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016d0:	f005 fe50 	bl	8007374 <xTaskGetSchedulerState>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016da:	f006 fd05 	bl	80080e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
	return 1;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_kill>:

int _kill(int pid, int sig)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016fc:	f006 ff5e 	bl	80085bc <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	2216      	movs	r2, #22
 8001704:	601a      	str	r2, [r3, #0]
	return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_exit>:

void _exit (int status)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800171a:	f04f 31ff 	mov.w	r1, #4294967295
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffe7 	bl	80016f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001724:	e7fe      	b.n	8001724 <_exit+0x12>

08001726 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e00a      	b.n	800174e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001738:	f3af 8000 	nop.w
 800173c:	4601      	mov	r1, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	60ba      	str	r2, [r7, #8]
 8001744:	b2ca      	uxtb	r2, r1
 8001746:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf0      	blt.n	8001738 <_read+0x12>
	}

return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001788:	605a      	str	r2, [r3, #4]
	return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_isatty>:

int _isatty(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
	return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f006 fee0 	bl	80085bc <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20003000 	.word	0x20003000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000208 	.word	0x20000208
 8001830:	20001cd0 	.word	0x20001cd0

08001834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_USART1_UART_Init+0x5c>)
 8001860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001864:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800189c:	f003 fae2 	bl	8004e64 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018a6:	f7ff fe4b 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001bf8 	.word	0x20001bf8
 80018b4:	40013800 	.word	0x40013800

080018b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a18      	ldr	r2, [pc, #96]	; (8001938 <HAL_UART_MspInit+0x80>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d129      	bne.n	800192e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_UART_MspInit+0x84>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_UART_MspInit+0x84>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_UART_MspInit+0x84>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_UART_MspInit+0x84>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_UART_MspInit+0x84>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_UART_MspInit+0x84>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800190a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800191c:	2307      	movs	r3, #7
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f000 ff85 	bl	8002838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40013800 	.word	0x40013800
 800193c:	40021000 	.word	0x40021000

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 800195c:	4c0b      	ldr	r4, [pc, #44]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196a:	f7ff ff63 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f006 fe2b 	bl	80085c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff fcef 	bl	8001354 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001978:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001984:	0800b524 	.word	0x0800b524
  ldr r2, =_sbss
 8001988:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800198c:	20001cd0 	.word	0x20001cd0

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>
	...

08001994 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x28>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 ff13 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fe4c 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 ff1d 	bl	800281e <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 fef3 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20001c7c 	.word	0x20001c7c

08001a48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20001c7c 	.word	0x20001c7c

08001a60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09a      	sub	sp, #104	; 0x68
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e172      	b.n	8001dae <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d176      	bne.n	8001bc8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d152      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fa4f 	bl	8000fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d13b      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fd45 	bl	80025a0 <ADC_Disable>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d12f      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
 8001b28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d12b      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b38:	f023 0302 	bic.w	r3, r3, #2
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b52:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b62:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b64:	4b94      	ldr	r3, [pc, #592]	; (8001db8 <HAL_ADC_Init+0x310>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a94      	ldr	r2, [pc, #592]	; (8001dbc <HAL_ADC_Init+0x314>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9a      	lsrs	r2, r3, #18
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba4:	d110      	bne.n	8001bc8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f023 0312 	bic.w	r3, r3, #18
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 80df 	bne.w	8001d94 <HAL_ADC_Init+0x2ec>
 8001bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80da 	bne.w	8001d94 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80d2 	bne.w	8001d94 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bf8:	f043 0202 	orr.w	r2, r3, #2
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c00:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <HAL_ADC_Init+0x318>)
 8001c02:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0c:	d102      	bne.n	8001c14 <HAL_ADC_Init+0x16c>
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_ADC_Init+0x31c>)
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_Init+0x172>
 8001c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c18:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_ADC_Init+0x192>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x192>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_ADC_Init+0x194>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d11c      	bne.n	8001c7a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_ADC_Init+0x1ba>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x1ba>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_ADC_Init+0x1bc>
 8001c62:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d108      	bne.n	8001c7a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c78:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7e5b      	ldrb	r3, [r3, #25]
 8001c7e:	035b      	lsls	r3, r3, #13
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c84:	2a01      	cmp	r2, #1
 8001c86:	d002      	beq.n	8001c8e <HAL_ADC_Init+0x1e6>
 8001c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c8c:	e000      	b.n	8001c90 <HAL_ADC_Init+0x1e8>
 8001c8e:	2200      	movs	r2, #0
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d11b      	bne.n	8001ce6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e5b      	ldrb	r3, [r3, #25]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	045a      	lsls	r2, r3, #17
 8001cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8001cc8:	e00d      	b.n	8001ce6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cd2:	f043 0220 	orr.w	r2, r3, #32
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d007      	beq.n	8001cfe <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d114      	bne.n	8001d36 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1a:	f023 0302 	bic.w	r3, r3, #2
 8001d1e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e1b      	ldrb	r3, [r3, #24]
 8001d24:	039a      	lsls	r2, r3, #14
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d32:	4313      	orrs	r3, r2
 8001d34:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_ADC_Init+0x320>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d46:	430b      	orrs	r3, r1
 8001d48:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10c      	bne.n	8001d6c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f023 010f 	bic.w	r1, r3, #15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6a:	e007      	b.n	8001d7c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020f 	bic.w	r2, r2, #15
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
 8001d92:	e00a      	b.n	8001daa <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f023 0312 	bic.w	r3, r3, #18
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001daa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3768      	adds	r7, #104	; 0x68
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	50000300 	.word	0x50000300
 8001dc4:	50000100 	.word	0x50000100
 8001dc8:	fff0c007 	.word	0xfff0c007

08001dcc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 809c 	bne.w	8001f20 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Start+0x2a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e097      	b.n	8001f26 <HAL_ADC_Start+0x15a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fb6a 	bl	80024d8 <ADC_Enable>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8083 	bne.w	8001f16 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_ADC_Start+0x164>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_ADC_Start+0x6e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e38:	d115      	bne.n	8001e66 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d027      	beq.n	8001ea4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e64:	e01e      	b.n	8001ea4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e7a:	d004      	beq.n	8001e86 <HAL_ADC_Start+0xba>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <HAL_ADC_Start+0x168>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10e      	bne.n	8001ea4 <HAL_ADC_Start+0xd8>
 8001e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f023 0206 	bic.w	r2, r3, #6
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ebe:	e002      	b.n	8001ec6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	221c      	movs	r2, #28
 8001ed4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_ADC_Start+0x164>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_ADC_Start+0x138>
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_ADC_Start+0x164>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d00a      	beq.n	8001f04 <HAL_ADC_Start+0x138>
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_ADC_Start+0x164>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2b09      	cmp	r3, #9
 8001ef8:	d004      	beq.n	8001f04 <HAL_ADC_Start+0x138>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f02:	d10f      	bne.n	8001f24 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0204 	orr.w	r2, r2, #4
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e006      	b.n	8001f24 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	50000300 	.word	0x50000300
 8001f34:	50000100 	.word	0x50000100

08001f38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b09b      	sub	sp, #108	; 0x6c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x22>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e2a5      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x56e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 8289 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d81c      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	461a      	mov	r2, r3
 8001faa:	231f      	movs	r3, #31
 8001fac:	4093      	lsls	r3, r2
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4019      	ands	r1, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fce:	e063      	b.n	8002098 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d81e      	bhi.n	8002016 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	3b1e      	subs	r3, #30
 8001fec:	221f      	movs	r2, #31
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4019      	ands	r1, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	3b1e      	subs	r3, #30
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
 8002014:	e040      	b.n	8002098 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b0e      	cmp	r3, #14
 800201c:	d81e      	bhi.n	800205c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	3b3c      	subs	r3, #60	; 0x3c
 8002032:	221f      	movs	r2, #31
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	4019      	ands	r1, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	3b3c      	subs	r3, #60	; 0x3c
 800204e:	fa00 f203 	lsl.w	r2, r0, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
 800205a:	e01d      	b.n	8002098 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	3b5a      	subs	r3, #90	; 0x5a
 8002070:	221f      	movs	r2, #31
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	4019      	ands	r1, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	3b5a      	subs	r3, #90	; 0x5a
 800208c:	fa00 f203 	lsl.w	r2, r0, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80e5 	bne.w	8002272 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d91c      	bls.n	80020ea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6999      	ldr	r1, [r3, #24]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4019      	ands	r1, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6898      	ldr	r0, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	3b1e      	subs	r3, #30
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	619a      	str	r2, [r3, #24]
 80020e8:	e019      	b.n	800211e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6959      	ldr	r1, [r3, #20]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	2207      	movs	r2, #7
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	4019      	ands	r1, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6898      	ldr	r0, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	3b01      	subs	r3, #1
 800213c:	2b03      	cmp	r3, #3
 800213e:	d84f      	bhi.n	80021e0 <HAL_ADC_ConfigChannel+0x28c>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <HAL_ADC_ConfigChannel+0x1f4>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002159 	.word	0x08002159
 800214c:	0800217b 	.word	0x0800217b
 8002150:	0800219d 	.word	0x0800219d
 8002154:	080021bf 	.word	0x080021bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215e:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <HAL_ADC_ConfigChannel+0x484>)
 8002160:	4013      	ands	r3, r2
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	0691      	lsls	r1, r2, #26
 8002168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800216a:	430a      	orrs	r2, r1
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002176:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002178:	e07e      	b.n	8002278 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002180:	4b95      	ldr	r3, [pc, #596]	; (80023d8 <HAL_ADC_ConfigChannel+0x484>)
 8002182:	4013      	ands	r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	0691      	lsls	r1, r2, #26
 800218a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800218c:	430a      	orrs	r2, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002198:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800219a:	e06d      	b.n	8002278 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <HAL_ADC_ConfigChannel+0x484>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	0691      	lsls	r1, r2, #26
 80021ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021ae:	430a      	orrs	r2, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021ba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021bc:	e05c      	b.n	8002278 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021c4:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <HAL_ADC_ConfigChannel+0x484>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	0691      	lsls	r1, r2, #26
 80021ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021d0:	430a      	orrs	r2, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021dc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021de:	e04b      	b.n	8002278 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	069b      	lsls	r3, r3, #26
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002202:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	069b      	lsls	r3, r3, #26
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002226:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	429a      	cmp	r2, r3
 800225e:	d10a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800226e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002270:	e001      	b.n	8002276 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002276:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x344>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x344>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_ADC_ConfigChannel+0x346>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 810b 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d00f      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022c6:	e049      	b.n	800235c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b09      	cmp	r3, #9
 80022e8:	d91c      	bls.n	8002324 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6999      	ldr	r1, [r3, #24]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	3b1b      	subs	r3, #27
 80022fc:	2207      	movs	r2, #7
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	4019      	ands	r1, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6898      	ldr	r0, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	3b1b      	subs	r3, #27
 8002316:	fa00 f203 	lsl.w	r2, r0, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	619a      	str	r2, [r3, #24]
 8002322:	e01b      	b.n	800235c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	4019      	ands	r1, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6898      	ldr	r0, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	fa00 f203 	lsl.w	r2, r0, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_ADC_ConfigChannel+0x488>)
 800235e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b10      	cmp	r3, #16
 8002366:	d105      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002378:	2b11      	cmp	r3, #17
 800237a:	d105      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800237c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800238c:	2b12      	cmp	r3, #18
 800238e:	f040 8092 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 808b 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a8:	d102      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x45c>
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_ADC_ConfigChannel+0x48c>)
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e002      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x462>
 80023b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10f      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x490>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x490>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e007      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x492>
 80023d6:	bf00      	nop
 80023d8:	83fff000 	.word	0x83fff000
 80023dc:	50000300 	.word	0x50000300
 80023e0:	50000100 	.word	0x50000100
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d150      	bne.n	800248c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d010      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_ADC_ConfigChannel+0x4b8>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x4b8>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_ADC_ConfigChannel+0x4ba>
 800240c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800240e:	2b00      	cmp	r3, #0
 8002410:	d13c      	bne.n	800248c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d11d      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x502>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002422:	d118      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800242c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_ADC_ConfigChannel+0x57c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_ADC_ConfigChannel+0x580>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9a      	lsrs	r2, r3, #18
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002446:	e002      	b.n	800244e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3b01      	subs	r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002454:	e02e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b11      	cmp	r3, #17
 800245c:	d10b      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x522>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002466:	d106      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002472:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002474:	e01e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b12      	cmp	r3, #18
 800247c:	d11a      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002488:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800248a:	e013      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800249e:	e00a      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024b2:	e000      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	376c      	adds	r7, #108	; 0x6c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <ADC_Enable+0x2c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <ADC_Enable+0x2c>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <ADC_Enable+0x2e>
 8002504:	2300      	movs	r3, #0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d143      	bne.n	8002592 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <ADC_Enable+0xc4>)
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e02f      	b.n	8002594 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002544:	f7ff fa80 	bl	8001a48 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800254a:	e01b      	b.n	8002584 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800254c:	f7ff fa7c 	bl	8001a48 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d914      	bls.n	8002584 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00d      	beq.n	8002584 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d1dc      	bne.n	800254c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	8000003f 	.word	0x8000003f

080025a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <ADC_Disable+0x2c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <ADC_Disable+0x2c>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <ADC_Disable+0x2e>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d047      	beq.n	8002662 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030d 	and.w	r3, r3, #13
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10f      	bne.n	8002600 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2203      	movs	r2, #3
 80025f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025f8:	f7ff fa26 	bl	8001a48 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025fe:	e029      	b.n	8002654 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f043 0210 	orr.w	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e023      	b.n	8002664 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800261c:	f7ff fa14 	bl	8001a48 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d914      	bls.n	8002654 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10d      	bne.n	8002654 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e007      	b.n	8002664 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d0dc      	beq.n	800261c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff47 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff5c 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffb0 	bl	800278c <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002846:	e14e      	b.n	8002ae6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8140 	beq.w	8002ae0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d005      	beq.n	8002878 <HAL_GPIO_Init+0x40>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d130      	bne.n	80028da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ae:	2201      	movs	r2, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0201 	and.w	r2, r3, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d017      	beq.n	8002916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d123      	bne.n	800296a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	220f      	movs	r2, #15
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	6939      	ldr	r1, [r7, #16]
 8002966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0203 	and.w	r2, r3, #3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 809a 	beq.w	8002ae0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2cc>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x2cc>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x2cc>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029c4:	4a50      	ldr	r2, [pc, #320]	; (8002b08 <HAL_GPIO_Init+0x2d0>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3302      	adds	r3, #2
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1e0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_GPIO_Init+0x2d4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <HAL_GPIO_Init+0x2d8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1d8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <HAL_GPIO_Init+0x2dc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1d4>
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2a:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f aea9 	bne.w	8002848 <HAL_GPIO_Init+0x10>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e001      	b.n	8002b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f000 bef4 	b.w	800397e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 816a 	beq.w	8002e7a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ba6:	4bb3      	ldr	r3, [pc, #716]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb2:	4bb0      	ldr	r3, [pc, #704]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d159      	bne.n	8002c72 <HAL_RCC_OscConfig+0xf6>
 8002bbe:	4bad      	ldr	r3, [pc, #692]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bca:	d152      	bne.n	8002c72 <HAL_RCC_OscConfig+0xf6>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCC_OscConfig+0x82>
 8002bf8:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0xae>
 8002bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c26:	4b93      	ldr	r3, [pc, #588]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 810c 	beq.w	8002e78 <HAL_RCC_OscConfig+0x2fc>
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8106 	bne.w	8002e78 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f000 be86 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x110>
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e030      	b.n	8002cee <HAL_RCC_OscConfig+0x172>
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x134>
 8002c96:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a76      	ldr	r2, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b74      	ldr	r3, [pc, #464]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a73      	ldr	r2, [pc, #460]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01e      	b.n	8002cee <HAL_RCC_OscConfig+0x172>
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x15a>
 8002cbc:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6c      	ldr	r2, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x172>
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cee:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	495d      	ldr	r1, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d059      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fe9c 	bl	8001a48 <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d16:	f7fe fe97 	bl	8001a48 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d902      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f000 be29 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 8002d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d40:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <HAL_RCC_OscConfig+0x1e2>
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x20e>
 8002d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d9e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f042 0220 	orr.w	r2, r2, #32
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f002 021f 	and.w	r2, r2, #31
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ab      	beq.n	8002d16 <HAL_RCC_OscConfig+0x19a>
 8002dbe:	e05c      	b.n	8002e7a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe42 	bl	8001a48 <HAL_GetTick>
 8002dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dca:	f7fe fe3d 	bl	8001a48 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d902      	bls.n	8002de0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	f000 bdcf 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 8002de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002df4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x296>
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x2c2>
 8002e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e4a:	fa92 f2a2 	rbit	r2, r2
 8002e4e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e52:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ab      	bne.n	8002dca <HAL_RCC_OscConfig+0x24e>
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_OscConfig+0x2fe>
 8002e74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 816f 	beq.w	8003168 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e8a:	4bd0      	ldr	r3, [pc, #832]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e96:	4bcd      	ldr	r3, [pc, #820]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d16c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x400>
 8002ea2:	4bca      	ldr	r3, [pc, #808]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d166      	bne.n	8002f7c <HAL_RCC_OscConfig+0x400>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ec0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_RCC_OscConfig+0x362>
 8002ed8:	4bbc      	ldr	r3, [pc, #752]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	e013      	b.n	8002f06 <HAL_RCC_OscConfig+0x38a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f02:	4bb2      	ldr	r3, [pc, #712]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2202      	movs	r2, #2
 8002f08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f18:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f002 021f 	and.w	r2, r2, #31
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f000 bd1b 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	21f8      	movs	r1, #248	; 0xf8
 8002f58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f60:	fa91 f1a1 	rbit	r1, r1
 8002f64:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f68:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f6c:	fab1 f181 	clz	r1, r1
 8002f70:	b2c9      	uxtb	r1, r1
 8002f72:	408b      	lsls	r3, r1
 8002f74:	4995      	ldr	r1, [pc, #596]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e0f5      	b.n	8003168 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8085 	beq.w	8003092 <HAL_RCC_OscConfig+0x516>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fd48 	bl	8001a48 <HAL_GetTick>
 8002fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fd43 	bl	8001a48 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f000 bcd5 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fe6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0x488>
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	e013      	b.n	800302c <HAL_RCC_OscConfig+0x4b0>
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800301c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003032:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003036:	fa92 f2a2 	rbit	r2, r2
 800303a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800303e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003042:	fab2 f282 	clz	r2, r2
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f002 021f 	and.w	r2, r2, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0af      	beq.n	8002fbe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	21f8      	movs	r1, #248	; 0xf8
 800306e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003076:	fa91 f1a1 	rbit	r1, r1
 800307a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800307e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003082:	fab1 f181 	clz	r1, r1
 8003086:	b2c9      	uxtb	r1, r1
 8003088:	408b      	lsls	r3, r1
 800308a:	4950      	ldr	r1, [pc, #320]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e06a      	b.n	8003168 <HAL_RCC_OscConfig+0x5ec>
 8003092:	2301      	movs	r3, #1
 8003094:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe fcc3 	bl	8001a48 <HAL_GetTick>
 80030c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fcbe 	bl	8001a48 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d902      	bls.n	80030de <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	f000 bc50 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_RCC_OscConfig+0x592>
 8003108:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	e013      	b.n	8003136 <HAL_RCC_OscConfig+0x5ba>
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003120:	2302      	movs	r3, #2
 8003122:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003126:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2202      	movs	r2, #2
 8003138:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800313c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003148:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f002 021f 	and.w	r2, r2, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1af      	bne.n	80030c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003168:	1d3b      	adds	r3, r7, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80da 	beq.w	800332c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d069      	beq.n	8003256 <HAL_RCC_OscConfig+0x6da>
 8003182:	2301      	movs	r3, #1
 8003184:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_OscConfig+0x654>)
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	2301      	movs	r3, #1
 80031aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fe fc4c 	bl	8001a48 <HAL_GetTick>
 80031b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b4:	e00e      	b.n	80031d4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fc47 	bl	8001a48 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d906      	bls.n	80031d4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e3d9      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	10908120 	.word	0x10908120
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031ea:	2202      	movs	r2, #2
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f2a3 	rbit	r2, r3
 80031f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003214:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	4ba5      	ldr	r3, [pc, #660]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800321e:	2102      	movs	r1, #2
 8003220:	6019      	str	r1, [r3, #0]
 8003222:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f1a3 	rbit	r1, r3
 800322c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003230:	6019      	str	r1, [r3, #0]
  return result;
 8003232:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0b0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x63a>
 8003254:	e06a      	b.n	800332c <HAL_RCC_OscConfig+0x7b0>
 8003256:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800326c:	601a      	str	r2, [r3, #0]
  return result;
 800326e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003272:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	4b8c      	ldr	r3, [pc, #560]	; (80034b0 <HAL_RCC_OscConfig+0x934>)
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f7fe fbde 	bl	8001a48 <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003292:	f7fe fbd9 	bl	8001a48 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e36b      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 80032a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032da:	2202      	movs	r2, #2
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ee:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032f6:	2102      	movs	r1, #2
 80032f8:	6019      	str	r1, [r3, #0]
 80032fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f1a3 	rbit	r1, r3
 8003304:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003308:	6019      	str	r1, [r3, #0]
  return result;
 800330a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1b2      	bne.n	8003292 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8158 	beq.w	80035ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b5a      	ldr	r3, [pc, #360]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b57      	ldr	r3, [pc, #348]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4a56      	ldr	r2, [pc, #344]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	61d3      	str	r3, [r2, #28]
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11a      	bne.n	80033b6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a4b      	ldr	r2, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338c:	f7fe fb5c 	bl	8001a48 <HAL_GetTick>
 8003390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e009      	b.n	80033aa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fe fb57 	bl	8001a48 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e2e9      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ef      	beq.n	8003396 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x852>
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	e02f      	b.n	800342e <HAL_RCC_OscConfig+0x8b2>
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x876>
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a33      	ldr	r2, [pc, #204]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a30      	ldr	r2, [pc, #192]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	e01d      	b.n	800342e <HAL_RCC_OscConfig+0x8b2>
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x89a>
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a27      	ldr	r2, [pc, #156]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x8b2>
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a24      	ldr	r2, [pc, #144]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d06b      	beq.n	8003510 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fe fb06 	bl	8001a48 <HAL_GetTick>
 800343c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00b      	b.n	800345a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fb01 	bl	8001a48 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e291      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 800345a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800345e:	2202      	movs	r2, #2
 8003460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003488:	601a      	str	r2, [r3, #0]
  return result;
 800348a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800348e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d109      	bne.n	80034b8 <HAL_RCC_OscConfig+0x93c>
 80034a4:	4b01      	ldr	r3, [pc, #4]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	e014      	b.n	80034d4 <HAL_RCC_OscConfig+0x958>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	10908120 	.word	0x10908120
 80034b4:	40007000 	.word	0x40007000
 80034b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034bc:	2202      	movs	r2, #2
 80034be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	4bbb      	ldr	r3, [pc, #748]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034d8:	2102      	movs	r1, #2
 80034da:	6011      	str	r1, [r2, #0]
 80034dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	fa92 f1a2 	rbit	r1, r2
 80034e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034ea:	6011      	str	r1, [r2, #0]
  return result;
 80034ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f002 021f 	and.w	r2, r2, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d099      	beq.n	8003442 <HAL_RCC_OscConfig+0x8c6>
 800350e:	e063      	b.n	80035d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fe fa9a 	bl	8001a48 <HAL_GetTick>
 8003514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fa95 	bl	8001a48 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e225      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 8003532:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003536:	2202      	movs	r2, #2
 8003538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003560:	601a      	str	r2, [r3, #0]
  return result;
 8003562:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0xa06>
 800357c:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	e00d      	b.n	800359e <HAL_RCC_OscConfig+0xa22>
 8003582:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035a2:	2102      	movs	r1, #2
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fa92 f1a2 	rbit	r1, r2
 80035b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035b4:	6011      	str	r1, [r2, #0]
  return result;
 80035b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1a0      	bne.n	800351a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b77      	ldr	r3, [pc, #476]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4a76      	ldr	r2, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 81c2 	beq.w	800397c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	f000 819c 	beq.w	800393e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b02      	cmp	r3, #2
 800360e:	f040 8114 	bne.w	800383a <HAL_RCC_OscConfig+0xcbe>
 8003612:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800362a:	601a      	str	r2, [r3, #0]
  return result;
 800362c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003630:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800363c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe f9fe 	bl	8001a48 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	e009      	b.n	8003666 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe f9f9 	bl	8001a48 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e18b      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 8003666:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800366a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800367e:	601a      	str	r2, [r3, #0]
  return result;
 8003680:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_OscConfig+0xb24>
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0xb5c>
 80036a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	fa93 f2a3 	rbit	r2, r3
 80036b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fa93 f2a3 	rbit	r2, r3
 80036ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036e0:	6011      	str	r1, [r2, #0]
 80036e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	fa92 f1a2 	rbit	r1, r2
 80036ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036f0:	6011      	str	r1, [r2, #0]
  return result;
 80036f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f042 0220 	orr.w	r2, r2, #32
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d19e      	bne.n	8003652 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	430b      	orrs	r3, r1
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
 8003730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003748:	601a      	str	r2, [r3, #0]
  return result;
 800374a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800374e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800375a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2301      	movs	r3, #1
 8003764:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe f96f 	bl	8001a48 <HAL_GetTick>
 800376a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376e:	e009      	b.n	8003784 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe f96a 	bl	8001a48 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0fc      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 8003784:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	fa93 f2a3 	rbit	r2, r3
 8003798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800379c:	601a      	str	r2, [r3, #0]
  return result;
 800379e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0xc48>
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e01e      	b.n	80037fc <HAL_RCC_OscConfig+0xc80>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f2a3 	rbit	r2, r3
 80037d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003800:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	fa92 f1a2 	rbit	r1, r2
 8003810:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003814:	6011      	str	r1, [r2, #0]
  return result;
 8003816:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0220 	orr.w	r2, r2, #32
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d09b      	beq.n	8003770 <HAL_RCC_OscConfig+0xbf4>
 8003838:	e0a0      	b.n	800397c <HAL_RCC_OscConfig+0xe00>
 800383a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800383e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003852:	601a      	str	r2, [r3, #0]
  return result;
 8003854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003858:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	461a      	mov	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe f8ea 	bl	8001a48 <HAL_GetTick>
 8003874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003878:	e009      	b.n	800388e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7fe f8e5 	bl	8001a48 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e077      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 800388e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a6:	601a      	str	r2, [r3, #0]
  return result;
 80038a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd4c>
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e01b      	b.n	8003900 <HAL_RCC_OscConfig+0xd84>
 80038c8:	f107 0320 	add.w	r3, r7, #32
 80038cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f107 0318 	add.w	r3, r7, #24
 80038e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f107 0318 	add.w	r3, r7, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f107 0210 	add.w	r2, r7, #16
 8003904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	f107 0210 	add.w	r2, r7, #16
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fa92 f1a2 	rbit	r1, r2
 8003914:	f107 020c 	add.w	r2, r7, #12
 8003918:	6011      	str	r1, [r2, #0]
  return result;
 800391a:	f107 020c 	add.w	r2, r7, #12
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	f042 0220 	orr.w	r2, r2, #32
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	f002 021f 	and.w	r2, r2, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f202 	lsl.w	r2, r1, r2
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d19e      	bne.n	800387a <HAL_RCC_OscConfig+0xcfe>
 800393c:	e01e      	b.n	800397c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e018      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003954:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	429a      	cmp	r2, r3
 8003964:	d108      	bne.n	8003978 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003966:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800396a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000

0800398c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b09e      	sub	sp, #120	; 0x78
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e162      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	498b      	ldr	r1, [pc, #556]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e14a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b82      	ldr	r3, [pc, #520]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	497f      	ldr	r1, [pc, #508]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80dc 	beq.w	8003bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d13c      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xf6>
 8003a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xa6>
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	e00f      	b.n	8003a52 <HAL_RCC_ClockConfig+0xc6>
 8003a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5a:	fa92 f2a2 	rbit	r2, r2
 8003a5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a62:	fab2 f282 	clz	r2, r2
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f002 021f 	and.w	r2, r2, #31
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d17b      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0f3      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d13c      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x178>
 8003a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x128>
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e00f      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
 8003ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f002 021f 	and.w	r2, r2, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13a      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b2      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
 8003b04:	2302      	movs	r3, #2
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	e00d      	b.n	8003b48 <HAL_RCC_ClockConfig+0x1bc>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	2302      	movs	r3, #2
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2202      	movs	r2, #2
 8003b4a:	61ba      	str	r2, [r7, #24]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	617a      	str	r2, [r7, #20]
  return result;
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e079      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	491a      	ldr	r1, [pc, #104]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fd ff5e 	bl	8001a48 <HAL_GetTick>
 8003b8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fd ff5a 	bl	8001a48 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e061      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d214      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4906      	ldr	r1, [pc, #24]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e040      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	491a      	ldr	r1, [pc, #104]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4912      	ldr	r1, [pc, #72]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c2e:	f000 f829 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c32:	4601      	mov	r1, r0
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3c:	22f0      	movs	r2, #240	; 0xf0
 8003c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	60fa      	str	r2, [r7, #12]
  return result;
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	40d3      	lsrs	r3, r2
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x2ec>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_RCC_ClockConfig+0x2f0>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_ClockConfig+0x2f4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd feac 	bl	80019c0 <HAL_InitTick>
  
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3778      	adds	r7, #120	; 0x78
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	0800b100 	.word	0x0800b100
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	20000004 	.word	0x20000004

08003c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b08b      	sub	sp, #44	; 0x2c
 8003c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x36>
 8003cb2:	e03c      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb6:	623b      	str	r3, [r7, #32]
      break;
 8003cb8:	e03c      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	fa92 f2a2 	rbit	r2, r2
 8003ccc:	607a      	str	r2, [r7, #4]
  return result;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	fab2 f282 	clz	r2, r2
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	40d3      	lsrs	r3, r2
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	fa92 f2a2 	rbit	r2, r2
 8003cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	fab2 f282 	clz	r2, r2
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	40d3      	lsrs	r3, r2
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d0c:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	e004      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	623b      	str	r3, [r7, #32]
      break;
 8003d2c:	e002      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d30:	623b      	str	r3, [r7, #32]
      break;
 8003d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d34:	6a3b      	ldr	r3, [r7, #32]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	372c      	adds	r7, #44	; 0x2c
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	0800b118 	.word	0x0800b118
 8003d50:	0800b128 	.word	0x0800b128
 8003d54:	003d0900 	.word	0x003d0900

08003d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000000 	.word	0x20000000

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d76:	f7ff ffef 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	fa92 f2a2 	rbit	r2, r2
 8003d90:	603a      	str	r2, [r7, #0]
  return result;
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	fab2 f282 	clz	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	40d3      	lsrs	r3, r2
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800b110 	.word	0x0800b110

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dba:	f7ff ffcd 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003dc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003dcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	fa92 f2a2 	rbit	r2, r2
 8003dd4:	603a      	str	r2, [r7, #0]
  return result;
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	fab2 f282 	clz	r2, r2
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	40d3      	lsrs	r3, r2
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003de2:	5cd3      	ldrb	r3, [r2, r3]
 8003de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	0800b110 	.word	0x0800b110

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b092      	sub	sp, #72	; 0x48
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80cd 	beq.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10e      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e28:	4b83      	ldr	r3, [pc, #524]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4a82      	ldr	r2, [pc, #520]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e32:	61d3      	str	r3, [r2, #28]
 8003e34:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b7d      	ldr	r3, [pc, #500]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b7a      	ldr	r3, [pc, #488]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a79      	ldr	r2, [pc, #484]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd fdf3 	bl	8001a48 <HAL_GetTick>
 8003e62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fd fdef 	bl	8001a48 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0db      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b70      	ldr	r3, [pc, #448]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e84:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d07d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d076      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b5e      	ldr	r3, [pc, #376]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ef4:	4a50      	ldr	r2, [pc, #320]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d045      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fd fda0 	bl	8001a48 <HAL_GetTick>
 8003f08:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fd fd9c 	bl	8001a48 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e086      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003f22:	2302      	movs	r3, #2
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	2302      	movs	r3, #2
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	61fb      	str	r3, [r7, #28]
  return result;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f043 0302 	orr.w	r3, r3, #2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	e007      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f56:	2302      	movs	r3, #2
 8003f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	4b35      	ldr	r3, [pc, #212]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2202      	movs	r2, #2
 8003f68:	613a      	str	r2, [r7, #16]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	fa92 f2a2 	rbit	r2, r2
 8003f70:	60fa      	str	r2, [r7, #12]
  return result;
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	fab2 f282 	clz	r2, r2
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	f002 021f 	and.w	r2, r2, #31
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0bd      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f90:	4b29      	ldr	r3, [pc, #164]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4926      	ldr	r1, [pc, #152]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	491a      	ldr	r1, [pc, #104]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe0:	4b15      	ldr	r3, [pc, #84]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f023 0210 	bic.w	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4912      	ldr	r1, [pc, #72]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	490b      	ldr	r1, [pc, #44]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800400c:	4313      	orrs	r3, r2
 800400e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800402a:	4313      	orrs	r3, r2
 800402c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3748      	adds	r7, #72	; 0x48
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
 8004040:	10908100 	.word	0x10908100

08004044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e095      	b.n	8004182 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004066:	d009      	beq.n	800407c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	61da      	str	r2, [r3, #28]
 800406e:	e005      	b.n	800407c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fa96 	bl	80015c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040bc:	d902      	bls.n	80040c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e002      	b.n	80040ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040d2:	d007      	beq.n	80040e4 <HAL_SPI_Init+0xa0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	ea42 0103 	orr.w	r1, r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	f003 0204 	and.w	r2, r3, #4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004160:	ea42 0103 	orr.w	r1, r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b088      	sub	sp, #32
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_SPI_Transmit+0x22>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e158      	b.n	800445e <HAL_SPI_Transmit+0x2d4>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b4:	f7fd fc48 	bl	8001a48 <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041ce:	e13d      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Transmit+0x52>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e0:	e134      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422c:	d10f      	bne.n	800424e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d007      	beq.n	800426c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004274:	d94b      	bls.n	800430e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Transmit+0xfa>
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d13e      	bne.n	8004302 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042a8:	e02b      	b.n	8004302 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d112      	bne.n	80042de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042dc:	e011      	b.n	8004302 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042de:	f7fd fbb3 	bl	8001a48 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d803      	bhi.n	80042f6 <HAL_SPI_Transmit+0x16c>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d102      	bne.n	80042fc <HAL_SPI_Transmit+0x172>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004300:	e0a4      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ce      	bne.n	80042aa <HAL_SPI_Transmit+0x120>
 800430c:	e07c      	b.n	8004408 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x192>
 8004316:	8afb      	ldrh	r3, [r7, #22]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d170      	bne.n	80043fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d912      	bls.n	800434c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	881a      	ldrh	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b02      	subs	r3, #2
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800434a:	e058      	b.n	80043fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004372:	e044      	b.n	80043fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d12b      	bne.n	80043da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d912      	bls.n	80043b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	881a      	ldrh	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	1c9a      	adds	r2, r3, #2
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b02      	subs	r3, #2
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b0:	e025      	b.n	80043fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e011      	b.n	80043fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043da:	f7fd fb35 	bl	8001a48 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d803      	bhi.n	80043f2 <HAL_SPI_Transmit+0x268>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d102      	bne.n	80043f8 <HAL_SPI_Transmit+0x26e>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043fc:	e026      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1b5      	bne.n	8004374 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	6839      	ldr	r1, [r7, #0]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fce3 	bl	8004dd8 <SPI_EndRxTxTransaction>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e000      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800444a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800445c:	7ffb      	ldrb	r3, [r7, #31]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b088      	sub	sp, #32
 800446a:	af02      	add	r7, sp, #8
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004482:	d112      	bne.n	80044aa <HAL_SPI_Receive+0x44>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10e      	bne.n	80044aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2204      	movs	r2, #4
 8004490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f910 	bl	80046c6 <HAL_SPI_TransmitReceive>
 80044a6:	4603      	mov	r3, r0
 80044a8:	e109      	b.n	80046be <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_SPI_Receive+0x52>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e102      	b.n	80046be <HAL_SPI_Receive+0x258>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c0:	f7fd fac2 	bl	8001a48 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044d6:	e0e9      	b.n	80046ac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Receive+0x7e>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044e8:	e0e0      	b.n	80046ac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2204      	movs	r2, #4
 80044ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004534:	d908      	bls.n	8004548 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e007      	b.n	8004558 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004556:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	d10f      	bne.n	8004582 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d007      	beq.n	80045a0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a8:	d867      	bhi.n	800467a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045aa:	e030      	b.n	800460e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d117      	bne.n	80045ea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f103 020c 	add.w	r2, r3, #12
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	7812      	ldrb	r2, [r2, #0]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80045e8:	e011      	b.n	800460e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ea:	f7fd fa2d 	bl	8001a48 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d803      	bhi.n	8004602 <HAL_SPI_Receive+0x19c>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Receive+0x1a2>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800460c:	e04e      	b.n	80046ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1c8      	bne.n	80045ac <HAL_SPI_Receive+0x146>
 800461a:	e034      	b.n	8004686 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d115      	bne.n	8004656 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	b292      	uxth	r2, r2
 8004636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004654:	e011      	b.n	800467a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004656:	f7fd f9f7 	bl	8001a48 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d803      	bhi.n	800466e <HAL_SPI_Receive+0x208>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d102      	bne.n	8004674 <HAL_SPI_Receive+0x20e>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004678:	e018      	b.n	80046ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ca      	bne.n	800461c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fb4c 	bl	8004d28 <SPI_EndRxTransaction>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	e000      	b.n	80046ac <HAL_SPI_Receive+0x246>
  }

error :
 80046aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b08a      	sub	sp, #40	; 0x28
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046d4:	2301      	movs	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x26>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e1fb      	b.n	8004ae4 <HAL_SPI_TransmitReceive+0x41e>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f4:	f7fd f9a8 	bl	8001a48 <HAL_GetTick>
 80046f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004700:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800470c:	887b      	ldrh	r3, [r7, #2]
 800470e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004710:	7efb      	ldrb	r3, [r7, #27]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d00e      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x6e>
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471c:	d106      	bne.n	800472c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <HAL_SPI_TransmitReceive+0x66>
 8004726:	7efb      	ldrb	r3, [r7, #27]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d003      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800472c:	2302      	movs	r3, #2
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004732:	e1cd      	b.n	8004ad0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x80>
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800474c:	e1c0      	b.n	8004ad0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b04      	cmp	r3, #4
 8004758:	d003      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2205      	movs	r2, #5
 800475e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	887a      	ldrh	r2, [r7, #2]
 8004772:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	887a      	ldrh	r2, [r7, #2]
 800477a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	887a      	ldrh	r2, [r7, #2]
 800478e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047a4:	d802      	bhi.n	80047ac <HAL_SPI_TransmitReceive+0xe6>
 80047a6:	8a3b      	ldrh	r3, [r7, #16]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d908      	bls.n	80047be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	e007      	b.n	80047ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d007      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f4:	d97c      	bls.n	80048f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x13e>
 80047fe:	8a7b      	ldrh	r3, [r7, #18]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d169      	bne.n	80048d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	881a      	ldrh	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	1c9a      	adds	r2, r3, #2
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004828:	e056      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d11b      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x1aa>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x1aa>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b01      	cmp	r3, #1
 8004846:	d113      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d11c      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x1f2>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	b292      	uxth	r2, r2
 8004896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b4:	2301      	movs	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048b8:	f7fd f8c6 	bl	8001a48 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d807      	bhi.n	80048d8 <HAL_SPI_TransmitReceive+0x212>
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d003      	beq.n	80048d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048d6:	e0fb      	b.n	8004ad0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1a3      	bne.n	800482a <HAL_SPI_TransmitReceive+0x164>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d19d      	bne.n	800482a <HAL_SPI_TransmitReceive+0x164>
 80048ee:	e0df      	b.n	8004ab0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x23a>
 80048f8:	8a7b      	ldrh	r3, [r7, #18]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	f040 80cb 	bne.w	8004a96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	d912      	bls.n	8004930 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	881a      	ldrh	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	1c9a      	adds	r2, r3, #2
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b02      	subs	r3, #2
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800492e:	e0b2      	b.n	8004a96 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004956:	e09e      	b.n	8004a96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d134      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x30a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02f      	beq.n	80049d0 <HAL_SPI_TransmitReceive+0x30a>
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2b01      	cmp	r3, #1
 8004974:	d12c      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d912      	bls.n	80049a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	881a      	ldrh	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b02      	subs	r3, #2
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049a4:	e012      	b.n	80049cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d148      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x3aa>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d042      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d923      	bls.n	8004a3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	b292      	uxth	r2, r2
 8004a02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b02      	subs	r3, #2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d81f      	bhi.n	8004a6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	e016      	b.n	8004a6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f103 020c 	add.w	r2, r3, #12
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a70:	f7fc ffea 	bl	8001a48 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d803      	bhi.n	8004a88 <HAL_SPI_TransmitReceive+0x3c2>
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d102      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x3c8>
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a94:	e01c      	b.n	8004ad0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f47f af5b 	bne.w	8004958 <HAL_SPI_TransmitReceive+0x292>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f47f af54 	bne.w	8004958 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f98f 	bl	8004dd8 <SPI_EndRxTxTransaction>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
 8004acc:	e000      	b.n	8004ad0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3728      	adds	r7, #40	; 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004afc:	f7fc ffa4 	bl	8001a48 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4413      	add	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b0c:	f7fc ff9c 	bl	8001a48 <HAL_GetTick>
 8004b10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b12:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	015b      	lsls	r3, r3, #5
 8004b18:	0d1b      	lsrs	r3, r3, #20
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b22:	e054      	b.n	8004bce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d050      	beq.n	8004bce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b2c:	f7fc ff8c 	bl	8001a48 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d902      	bls.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d13d      	bne.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5a:	d111      	bne.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b64:	d004      	beq.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6e:	d107      	bne.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b88:	d10f      	bne.n	8004baa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e017      	b.n	8004bee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d19b      	bne.n	8004b24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000000 	.word	0x20000000

08004bfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c0e:	f7fc ff1b 	bl	8001a48 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c1e:	f7fc ff13 	bl	8001a48 <HAL_GetTick>
 8004c22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c2c:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	00da      	lsls	r2, r3, #3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	0d1b      	lsrs	r3, r3, #20
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c44:	e060      	b.n	8004d08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c4c:	d107      	bne.n	8004c5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d050      	beq.n	8004d08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c66:	f7fc feef 	bl	8001a48 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d902      	bls.n	8004c7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d13d      	bne.n	8004cf8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c94:	d111      	bne.n	8004cba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9e:	d004      	beq.n	8004caa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca8:	d107      	bne.n	8004cba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc2:	d10f      	bne.n	8004ce4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e010      	b.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d196      	bne.n	8004c46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3728      	adds	r7, #40	; 0x28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000000 	.word	0x20000000

08004d28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3c:	d111      	bne.n	8004d62 <SPI_EndRxTransaction+0x3a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d46:	d004      	beq.n	8004d52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d50:	d107      	bne.n	8004d62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d60:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2180      	movs	r1, #128	; 0x80
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff febd 	bl	8004aec <SPI_WaitFlagStateUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7c:	f043 0220 	orr.w	r2, r3, #32
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e023      	b.n	8004dd0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d90:	d11d      	bne.n	8004dce <SPI_EndRxTransaction+0xa6>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9a:	d004      	beq.n	8004da6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da4:	d113      	bne.n	8004dce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff ff22 	bl	8004bfc <SPI_WaitFifoStateUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	f043 0220 	orr.w	r2, r3, #32
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e000      	b.n	8004dd0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff ff03 	bl	8004bfc <SPI_WaitFifoStateUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e027      	b.n	8004e5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff fe68 	bl	8004aec <SPI_WaitFlagStateUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e014      	b.n	8004e5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fedc 	bl	8004bfc <SPI_WaitFifoStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e000      	b.n	8004e5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e040      	b.n	8004ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fd16 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2224      	movs	r2, #36	; 0x24
 8004e90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8c0 	bl	8005028 <UART_SetConfig>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e022      	b.n	8004ef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f9ea 	bl	8005294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa71 	bl	80053d8 <UART_CheckIdleState>
 8004ef6:	4603      	mov	r3, r0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	f040 8082 	bne.w	800501e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_UART_Transmit+0x26>
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e07a      	b.n	8005020 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Transmit+0x38>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e073      	b.n	8005020 <HAL_UART_Transmit+0x120>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2221      	movs	r2, #33	; 0x21
 8004f4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc fd7b 	bl	8001a48 <HAL_GetTick>
 8004f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88fa      	ldrh	r2, [r7, #6]
 8004f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d108      	bne.n	8004f80 <HAL_UART_Transmit+0x80>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e003      	b.n	8004f88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f90:	e02d      	b.n	8004fee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fa64 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e039      	b.n	8005020 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e008      	b.n	8004fdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1cb      	bne.n	8004f92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	2140      	movs	r1, #64	; 0x40
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fa30 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e005      	b.n	8005020 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b8a      	ldr	r3, [pc, #552]	; (800527c <UART_SetConfig+0x254>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	430b      	orrs	r3, r1
 800505e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a78      	ldr	r2, [pc, #480]	; (8005280 <UART_SetConfig+0x258>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d120      	bne.n	80050e6 <UART_SetConfig+0xbe>
 80050a4:	4b77      	ldr	r3, [pc, #476]	; (8005284 <UART_SetConfig+0x25c>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d817      	bhi.n	80050e0 <UART_SetConfig+0xb8>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x90>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050d5 	.word	0x080050d5
 80050c0:	080050db 	.word	0x080050db
 80050c4:	080050cf 	.word	0x080050cf
 80050c8:	2300      	movs	r3, #0
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e01d      	b.n	800510a <UART_SetConfig+0xe2>
 80050ce:	2302      	movs	r3, #2
 80050d0:	77fb      	strb	r3, [r7, #31]
 80050d2:	e01a      	b.n	800510a <UART_SetConfig+0xe2>
 80050d4:	2304      	movs	r3, #4
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e017      	b.n	800510a <UART_SetConfig+0xe2>
 80050da:	2308      	movs	r3, #8
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e014      	b.n	800510a <UART_SetConfig+0xe2>
 80050e0:	2310      	movs	r3, #16
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e011      	b.n	800510a <UART_SetConfig+0xe2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a67      	ldr	r2, [pc, #412]	; (8005288 <UART_SetConfig+0x260>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d102      	bne.n	80050f6 <UART_SetConfig+0xce>
 80050f0:	2300      	movs	r3, #0
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e009      	b.n	800510a <UART_SetConfig+0xe2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a64      	ldr	r2, [pc, #400]	; (800528c <UART_SetConfig+0x264>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d102      	bne.n	8005106 <UART_SetConfig+0xde>
 8005100:	2300      	movs	r3, #0
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e001      	b.n	800510a <UART_SetConfig+0xe2>
 8005106:	2310      	movs	r3, #16
 8005108:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005112:	d15b      	bne.n	80051cc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005114:	7ffb      	ldrb	r3, [r7, #31]
 8005116:	2b08      	cmp	r3, #8
 8005118:	d827      	bhi.n	800516a <UART_SetConfig+0x142>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0xf8>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005145 	.word	0x08005145
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005155 	.word	0x08005155
 800512c:	0800516b 	.word	0x0800516b
 8005130:	0800515b 	.word	0x0800515b
 8005134:	0800516b 	.word	0x0800516b
 8005138:	0800516b 	.word	0x0800516b
 800513c:	0800516b 	.word	0x0800516b
 8005140:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005144:	f7fe fe14 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005148:	61b8      	str	r0, [r7, #24]
        break;
 800514a:	e013      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800514c:	f7fe fe32 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8005150:	61b8      	str	r0, [r7, #24]
        break;
 8005152:	e00f      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005154:	4b4e      	ldr	r3, [pc, #312]	; (8005290 <UART_SetConfig+0x268>)
 8005156:	61bb      	str	r3, [r7, #24]
        break;
 8005158:	e00c      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515a:	f7fe fd93 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 800515e:	61b8      	str	r0, [r7, #24]
        break;
 8005160:	e008      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e004      	b.n	8005174 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	77bb      	strb	r3, [r7, #30]
        break;
 8005172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d074      	beq.n	8005264 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	005a      	lsls	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	b29b      	uxth	r3, r3
 8005190:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b0f      	cmp	r3, #15
 8005196:	d916      	bls.n	80051c6 <UART_SetConfig+0x19e>
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519e:	d212      	bcs.n	80051c6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f023 030f 	bic.w	r3, r3, #15
 80051a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	89fb      	ldrh	r3, [r7, #14]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	89fa      	ldrh	r2, [r7, #14]
 80051c2:	60da      	str	r2, [r3, #12]
 80051c4:	e04e      	b.n	8005264 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	77bb      	strb	r3, [r7, #30]
 80051ca:	e04b      	b.n	8005264 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051cc:	7ffb      	ldrb	r3, [r7, #31]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d827      	bhi.n	8005222 <UART_SetConfig+0x1fa>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x1b0>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fdb8 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e013      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe fdd6 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <UART_SetConfig+0x268>)
 800520e:	61bb      	str	r3, [r7, #24]
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe fd37 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8005216:	61b8      	str	r0, [r7, #24]
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e004      	b.n	800522c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	77bb      	strb	r3, [r7, #30]
        break;
 800522a:	bf00      	nop
    }

    if (pclk != 0U)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085a      	lsrs	r2, r3, #1
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	441a      	add	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	b29b      	uxth	r3, r3
 8005246:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d908      	bls.n	8005260 <UART_SetConfig+0x238>
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d204      	bcs.n	8005260 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e001      	b.n	8005264 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005270:	7fbb      	ldrb	r3, [r7, #30]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	efff69f3 	.word	0xefff69f3
 8005280:	40013800 	.word	0x40013800
 8005284:	40021000 	.word	0x40021000
 8005288:	40004400 	.word	0x40004400
 800528c:	40004800 	.word	0x40004800
 8005290:	007a1200 	.word	0x007a1200

08005294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01a      	beq.n	80053aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005392:	d10a      	bne.n	80053aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af02      	add	r7, sp, #8
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e8:	f7fc fb2e 	bl	8001a48 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d10e      	bne.n	800541a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f82d 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e023      	b.n	8005462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b04      	cmp	r3, #4
 8005426:	d10e      	bne.n	8005446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f817 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e00d      	b.n	8005462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b09c      	sub	sp, #112	; 0x70
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547a:	e0a5      	b.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	f000 80a1 	beq.w	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fc fadf 	bl	8001a48 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x32>
 8005496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005498:	2b00      	cmp	r3, #0
 800549a:	d13e      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054b0:	667b      	str	r3, [r7, #100]	; 0x64
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	663b      	str	r3, [r7, #96]	; 0x60
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e067      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d04f      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005536:	d147      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005540:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
 8005562:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	613b      	str	r3, [r7, #16]
   return(result);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	66bb      	str	r3, [r7, #104]	; 0x68
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005594:	623a      	str	r2, [r7, #32]
 8005596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	69f9      	ldr	r1, [r7, #28]
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e010      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f43f af4a 	beq.w	800547c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3770      	adds	r7, #112	; 0x70
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fa:	f3ef 8305 	mrs	r3, IPSR
 80055fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005600:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005606:	f3ef 8310 	mrs	r3, PRIMASK
 800560a:	607b      	str	r3, [r7, #4]
  return(result);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <osKernelInitialize+0x32>
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <osKernelInitialize+0x64>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d109      	bne.n	800562e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800561a:	f3ef 8311 	mrs	r3, BASEPRI
 800561e:	603b      	str	r3, [r7, #0]
  return(result);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005626:	f06f 0305 	mvn.w	r3, #5
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e00c      	b.n	8005648 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <osKernelInitialize+0x64>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <osKernelInitialize+0x64>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e002      	b.n	8005648 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	2000020c 	.word	0x2000020c

0800565c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005662:	f3ef 8305 	mrs	r3, IPSR
 8005666:	60bb      	str	r3, [r7, #8]
  return(result);
 8005668:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10f      	bne.n	800568e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566e:	f3ef 8310 	mrs	r3, PRIMASK
 8005672:	607b      	str	r3, [r7, #4]
  return(result);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <osKernelStart+0x32>
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <osKernelStart+0x64>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d109      	bne.n	8005696 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005682:	f3ef 8311 	mrs	r3, BASEPRI
 8005686:	603b      	str	r3, [r7, #0]
  return(result);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <osKernelStart+0x3a>
    stat = osErrorISR;
 800568e:	f06f 0305 	mvn.w	r3, #5
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e00e      	b.n	80056b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <osKernelStart+0x64>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <osKernelStart+0x64>)
 80056a0:	2202      	movs	r2, #2
 80056a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80056a4:	f001 fa14 	bl	8006ad0 <vTaskStartScheduler>
      stat = osOK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e002      	b.n	80056b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056b4:	68fb      	ldr	r3, [r7, #12]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2000020c 	.word	0x2000020c

080056c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b092      	sub	sp, #72	; 0x48
 80056c8:	af04      	add	r7, sp, #16
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d4:	f3ef 8305 	mrs	r3, IPSR
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 8094 	bne.w	800580a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e2:	f3ef 8310 	mrs	r3, PRIMASK
 80056e6:	623b      	str	r3, [r7, #32]
  return(result);
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 808d 	bne.w	800580a <osThreadNew+0x146>
 80056f0:	4b48      	ldr	r3, [pc, #288]	; (8005814 <osThreadNew+0x150>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d106      	bne.n	8005706 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056f8:	f3ef 8311 	mrs	r3, BASEPRI
 80056fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f040 8082 	bne.w	800580a <osThreadNew+0x146>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d07e      	beq.n	800580a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005710:	2318      	movs	r3, #24
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005714:	2300      	movs	r3, #0
 8005716:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005718:	f107 031b 	add.w	r3, r7, #27
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d045      	beq.n	80057b6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <osThreadNew+0x74>
        name = attr->name;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <osThreadNew+0x9a>
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	2b38      	cmp	r3, #56	; 0x38
 8005750:	d805      	bhi.n	800575e <osThreadNew+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <osThreadNew+0x9e>
        return (NULL);
 800575e:	2300      	movs	r3, #0
 8005760:	e054      	b.n	800580c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00e      	beq.n	8005798 <osThreadNew+0xd4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b5b      	cmp	r3, #91	; 0x5b
 8005780:	d90a      	bls.n	8005798 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005786:	2b00      	cmp	r3, #0
 8005788:	d006      	beq.n	8005798 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <osThreadNew+0xd4>
        mem = 1;
 8005792:	2301      	movs	r3, #1
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	e010      	b.n	80057ba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10c      	bne.n	80057ba <osThreadNew+0xf6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d108      	bne.n	80057ba <osThreadNew+0xf6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <osThreadNew+0xf6>
          mem = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b4:	e001      	b.n	80057ba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d110      	bne.n	80057e2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057c8:	9202      	str	r2, [sp, #8]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 ffae 	bl	8006738 <xTaskCreateStatic>
 80057dc:	4603      	mov	r3, r0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e013      	b.n	800580a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d110      	bne.n	800580a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fff8 	bl	80067f0 <xTaskCreate>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d001      	beq.n	800580a <osThreadNew+0x146>
          hTask = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3738      	adds	r7, #56	; 0x38
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	2000020c 	.word	0x2000020c

08005818 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005820:	f3ef 8305 	mrs	r3, IPSR
 8005824:	613b      	str	r3, [r7, #16]
  return(result);
 8005826:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582c:	f3ef 8310 	mrs	r3, PRIMASK
 8005830:	60fb      	str	r3, [r7, #12]
  return(result);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <osDelay+0x34>
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <osDelay+0x58>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d109      	bne.n	8005854 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005840:	f3ef 8311 	mrs	r3, BASEPRI
 8005844:	60bb      	str	r3, [r7, #8]
  return(result);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <osDelay+0x3c>
    stat = osErrorISR;
 800584c:	f06f 0305 	mvn.w	r3, #5
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e007      	b.n	8005864 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <osDelay+0x4c>
      vTaskDelay(ticks);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 f902 	bl	8006a68 <vTaskDelay>
    }
  }

  return (stat);
 8005864:	697b      	ldr	r3, [r7, #20]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	2000020c 	.word	0x2000020c

08005874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a07      	ldr	r2, [pc, #28]	; (80058a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <vApplicationGetIdleTaskMemory+0x30>)
 800588a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000210 	.word	0x20000210
 80058a4:	2000026c 	.word	0x2000026c

080058a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4a07      	ldr	r2, [pc, #28]	; (80058d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80058b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4a06      	ldr	r2, [pc, #24]	; (80058d8 <vApplicationGetTimerTaskMemory+0x30>)
 80058be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c6:	601a      	str	r2, [r3, #0]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	2000046c 	.word	0x2000046c
 80058d8:	200004c8 	.word	0x200004c8

080058dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f103 0208 	add.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f103 0208 	add.w	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f103 0208 	add.w	r2, r3, #8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d103      	bne.n	800599e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e00c      	b.n	80059b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3308      	adds	r3, #8
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e002      	b.n	80059ac <vListInsert+0x2e>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d2f6      	bcs.n	80059a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6892      	ldr	r2, [r2, #8]
 8005a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6852      	ldr	r2, [r2, #4]
 8005a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d103      	bne.n	8005a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	1e5a      	subs	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a6e:	f002 faa9 	bl	8007fc4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	441a      	add	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	68f9      	ldr	r1, [r7, #12]
 8005aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	441a      	add	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d114      	bne.n	8005aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01a      	beq.n	8005b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3310      	adds	r3, #16
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fa8b 	bl	8006fec <xTaskRemoveFromEventList>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d012      	beq.n	8005b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <xQueueGenericReset+0xcc>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	e009      	b.n	8005b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3310      	adds	r3, #16
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fef2 	bl	80058dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3324      	adds	r3, #36	; 0x24
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff feed 	bl	80058dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b02:	f002 fa8f 	bl	8008024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b06:	2301      	movs	r3, #1
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <xQueueGenericCreateStatic+0x52>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <xQueueGenericCreateStatic+0x56>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <xQueueGenericCreateStatic+0x58>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	623b      	str	r3, [r7, #32]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <xQueueGenericCreateStatic+0x7e>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericCreateStatic+0x82>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericCreateStatic+0x84>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61fb      	str	r3, [r7, #28]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bb2:	2350      	movs	r3, #80	; 0x50
 8005bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d00a      	beq.n	8005bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	61bb      	str	r3, [r7, #24]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005be4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f843 	bl	8005c7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3730      	adds	r7, #48	; 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08a      	sub	sp, #40	; 0x28
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	613b      	str	r3, [r7, #16]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	e004      	b.n	8005c42 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3350      	adds	r3, #80	; 0x50
 8005c46:	4618      	mov	r0, r3
 8005c48:	f002 fade 	bl	8008208 <pvPortMalloc>
 8005c4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00f      	beq.n	8005c74 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	3350      	adds	r3, #80	; 0x50
 8005c58:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c62:	79fa      	ldrb	r2, [r7, #7]
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f805 	bl	8005c7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c74:	69bb      	ldr	r3, [r7, #24]
	}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e002      	b.n	8005ca0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cac:	2101      	movs	r1, #1
 8005cae:	69b8      	ldr	r0, [r7, #24]
 8005cb0:	f7ff fec8 	bl	8005a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00e      	beq.n	8005cf0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f81c 	bl	8005d28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d02:	2301      	movs	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6939      	ldr	r1, [r7, #16]
 8005d10:	6978      	ldr	r0, [r7, #20]
 8005d12:	f7ff ff76 	bl	8005c02 <xQueueGenericCreate>
 8005d16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ffd3 	bl	8005cc4 <prvInitialiseMutex>

		return pxNewQueue;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
	}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08e      	sub	sp, #56	; 0x38
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d36:	2300      	movs	r3, #0
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xQueueGenericSend+0x32>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <xQueueGenericSend+0x40>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <xQueueGenericSend+0x44>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <xQueueGenericSend+0x46>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <xQueueGenericSend+0x60>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSend+0x6e>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <xQueueGenericSend+0x72>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <xQueueGenericSend+0x74>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	623b      	str	r3, [r7, #32]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db6:	f001 fadd 	bl	8007374 <xTaskGetSchedulerState>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <xQueueGenericSend+0x9e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <xQueueGenericSend+0xa2>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <xQueueGenericSend+0xa4>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	61fb      	str	r3, [r7, #28]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de6:	f002 f8ed 	bl	8007fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <xQueueGenericSend+0xd4>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d129      	bne.n	8005e50 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e02:	f000 fb2b 	bl	800645c <prvCopyDataToQueue>
 8005e06:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d010      	beq.n	8005e32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	3324      	adds	r3, #36	; 0x24
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 f8e9 	bl	8006fec <xTaskRemoveFromEventList>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e20:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <xQueueGenericSend+0x1f8>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	e00a      	b.n	8005e48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e38:	4b39      	ldr	r3, [pc, #228]	; (8005f20 <xQueueGenericSend+0x1f8>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e48:	f002 f8ec 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e063      	b.n	8005f18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e56:	f002 f8e5 	bl	8008024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e05c      	b.n	8005f18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e64:	f107 0314 	add.w	r3, r7, #20
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 f923 	bl	80070b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e72:	f002 f8d7 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e76:	f000 fe91 	bl	8006b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e7a:	f002 f8a3 	bl	8007fc4 <vPortEnterCritical>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e84:	b25b      	sxtb	r3, r3
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d103      	bne.n	8005e94 <xQueueGenericSend+0x16c>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d103      	bne.n	8005eaa <xQueueGenericSend+0x182>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eaa:	f002 f8bb 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eae:	1d3a      	adds	r2, r7, #4
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 f912 	bl	80070e0 <xTaskCheckForTimeOut>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d124      	bne.n	8005f0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec4:	f000 fbc2 	bl	800664c <prvIsQueueFull>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d018      	beq.n	8005f00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f838 	bl	8006f4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ede:	f000 fb4d 	bl	800657c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ee2:	f000 fe69 	bl	8006bb8 <xTaskResumeAll>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f47f af7c 	bne.w	8005de6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <xQueueGenericSend+0x1f8>)
 8005ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	e772      	b.n	8005de6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f02:	f000 fb3b 	bl	800657c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f06:	f000 fe57 	bl	8006bb8 <xTaskResumeAll>
 8005f0a:	e76c      	b.n	8005de6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f0e:	f000 fb35 	bl	800657c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f12:	f000 fe51 	bl	8006bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f16:	2300      	movs	r3, #0
		}
	}
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3738      	adds	r7, #56	; 0x38
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08e      	sub	sp, #56	; 0x38
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <xQueueGenericSendFromISR+0x3c>
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <xQueueGenericSendFromISR+0x40>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <xQueueGenericSendFromISR+0x42>
 8005f64:	2300      	movs	r3, #0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	623b      	str	r3, [r7, #32]
}
 8005f7c:	bf00      	nop
 8005f7e:	e7fe      	b.n	8005f7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d103      	bne.n	8005f8e <xQueueGenericSendFromISR+0x6a>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <xQueueGenericSendFromISR+0x6e>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <xQueueGenericSendFromISR+0x70>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	61fb      	str	r3, [r7, #28]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fae:	f002 f8eb 	bl	8008188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fb2:	f3ef 8211 	mrs	r2, BASEPRI
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	61ba      	str	r2, [r7, #24]
 8005fc8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <xQueueGenericSendFromISR+0xbc>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d12c      	bne.n	800603a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff0:	f000 fa34 	bl	800645c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ff4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d112      	bne.n	8006024 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	3324      	adds	r3, #36	; 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f000 ffee 	bl	8006fec <xTaskRemoveFromEventList>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e007      	b.n	8006034 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006028:	3301      	adds	r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	b25a      	sxtb	r2, r3
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006038:	e001      	b.n	800603e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800604c:	4618      	mov	r0, r3
 800604e:	3738      	adds	r7, #56	; 0x38
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	; 0x30
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <xQueueReceive+0x30>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	623b      	str	r3, [r7, #32]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <xQueueReceive+0x3e>
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueReceive+0x42>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueReceive+0x44>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueReceive+0x5e>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61fb      	str	r3, [r7, #28]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060b2:	f001 f95f 	bl	8007374 <xTaskGetSchedulerState>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <xQueueReceive+0x6e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <xQueueReceive+0x72>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueReceive+0x74>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xQueueReceive+0x8e>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61bb      	str	r3, [r7, #24]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060e2:	f001 ff6f 	bl	8007fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01f      	beq.n	8006132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f6:	f000 fa1b 	bl	8006530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1e5a      	subs	r2, r3, #1
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00f      	beq.n	800612a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	3310      	adds	r3, #16
 800610e:	4618      	mov	r0, r3
 8006110:	f000 ff6c 	bl	8006fec <xTaskRemoveFromEventList>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800611a:	4b3d      	ldr	r3, [pc, #244]	; (8006210 <xQueueReceive+0x1bc>)
 800611c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800612a:	f001 ff7b 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 800612e:	2301      	movs	r3, #1
 8006130:	e069      	b.n	8006206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006138:	f001 ff74 	bl	8008024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800613c:	2300      	movs	r3, #0
 800613e:	e062      	b.n	8006206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006146:	f107 0310 	add.w	r3, r7, #16
 800614a:	4618      	mov	r0, r3
 800614c:	f000 ffb2 	bl	80070b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006154:	f001 ff66 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006158:	f000 fd20 	bl	8006b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800615c:	f001 ff32 	bl	8007fc4 <vPortEnterCritical>
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006166:	b25b      	sxtb	r3, r3
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d103      	bne.n	8006176 <xQueueReceive+0x122>
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800617c:	b25b      	sxtb	r3, r3
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d103      	bne.n	800618c <xQueueReceive+0x138>
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618c:	f001 ff4a 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006190:	1d3a      	adds	r2, r7, #4
 8006192:	f107 0310 	add.w	r3, r7, #16
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f000 ffa1 	bl	80070e0 <xTaskCheckForTimeOut>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d123      	bne.n	80061ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a6:	f000 fa3b 	bl	8006620 <prvIsQueueEmpty>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d017      	beq.n	80061e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	3324      	adds	r3, #36	; 0x24
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fec7 	bl	8006f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c0:	f000 f9dc 	bl	800657c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061c4:	f000 fcf8 	bl	8006bb8 <xTaskResumeAll>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d189      	bne.n	80060e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <xQueueReceive+0x1bc>)
 80061d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	e780      	b.n	80060e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e2:	f000 f9cb 	bl	800657c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061e6:	f000 fce7 	bl	8006bb8 <xTaskResumeAll>
 80061ea:	e77a      	b.n	80060e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ee:	f000 f9c5 	bl	800657c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061f2:	f000 fce1 	bl	8006bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f8:	f000 fa12 	bl	8006620 <prvIsQueueEmpty>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f43f af6f 	beq.w	80060e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006206:	4618      	mov	r0, r3
 8006208:	3730      	adds	r7, #48	; 0x30
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08e      	sub	sp, #56	; 0x38
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	623b      	str	r3, [r7, #32]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	61fb      	str	r3, [r7, #28]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006264:	f001 f886 	bl	8007374 <xTaskGetSchedulerState>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <xQueueSemaphoreTake+0x60>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <xQueueSemaphoreTake+0x64>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <xQueueSemaphoreTake+0x66>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	61bb      	str	r3, [r7, #24]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006294:	f001 fe96 	bl	8007fc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d024      	beq.n	80062ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	1e5a      	subs	r2, r3, #1
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80062b4:	f001 f9de 	bl	8007674 <pvTaskIncrementMutexHeldCount>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00f      	beq.n	80062e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	3310      	adds	r3, #16
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fe8e 	bl	8006fec <xTaskRemoveFromEventList>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062d6:	4b54      	ldr	r3, [pc, #336]	; (8006428 <xQueueSemaphoreTake+0x214>)
 80062d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062e6:	f001 fe9d 	bl	8008024 <vPortExitCritical>
				return pdPASS;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e097      	b.n	800641e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d111      	bne.n	8006318 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	617b      	str	r3, [r7, #20]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006310:	f001 fe88 	bl	8008024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006314:	2300      	movs	r3, #0
 8006316:	e082      	b.n	800641e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800631e:	f107 030c 	add.w	r3, r7, #12
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fec6 	bl	80070b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800632c:	f001 fe7a 	bl	8008024 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006330:	f000 fc34 	bl	8006b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006334:	f001 fe46 	bl	8007fc4 <vPortEnterCritical>
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800633e:	b25b      	sxtb	r3, r3
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d103      	bne.n	800634e <xQueueSemaphoreTake+0x13a>
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006354:	b25b      	sxtb	r3, r3
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	d103      	bne.n	8006364 <xQueueSemaphoreTake+0x150>
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006364:	f001 fe5e 	bl	8008024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006368:	463a      	mov	r2, r7
 800636a:	f107 030c 	add.w	r3, r7, #12
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f000 feb5 	bl	80070e0 <xTaskCheckForTimeOut>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d132      	bne.n	80063e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800637c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800637e:	f000 f94f 	bl	8006620 <prvIsQueueEmpty>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d026      	beq.n	80063d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006390:	f001 fe18 	bl	8007fc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f809 	bl	80073b0 <xTaskPriorityInherit>
 800639e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063a0:	f001 fe40 	bl	8008024 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fdcd 	bl	8006f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063b4:	f000 f8e2 	bl	800657c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063b8:	f000 fbfe 	bl	8006bb8 <xTaskResumeAll>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f47f af68 	bne.w	8006294 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063c4:	4b18      	ldr	r3, [pc, #96]	; (8006428 <xQueueSemaphoreTake+0x214>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	e75e      	b.n	8006294 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d8:	f000 f8d0 	bl	800657c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063dc:	f000 fbec 	bl	8006bb8 <xTaskResumeAll>
 80063e0:	e758      	b.n	8006294 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e4:	f000 f8ca 	bl	800657c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063e8:	f000 fbe6 	bl	8006bb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ee:	f000 f917 	bl	8006620 <prvIsQueueEmpty>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f43f af4d 	beq.w	8006294 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00d      	beq.n	800641c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006400:	f001 fde0 	bl	8007fc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006406:	f000 f811 	bl	800642c <prvGetDisinheritPriorityAfterTimeout>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f8a8 	bl	8007568 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006418:	f001 fe04 	bl	8008024 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800641c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800641e:	4618      	mov	r0, r3
 8006420:	3738      	adds	r7, #56	; 0x38
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	2b00      	cmp	r3, #0
 800643a:	d006      	beq.n	800644a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e001      	b.n	800644e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800644e:	68fb      	ldr	r3, [r7, #12]
	}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d14d      	bne.n	800651e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f800 	bl	800748c <xTaskPriorityDisinherit>
 800648c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	e043      	b.n	800651e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d119      	bne.n	80064d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6898      	ldr	r0, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	461a      	mov	r2, r3
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	f002 f8b2 	bl	8008610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	441a      	add	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d32b      	bcc.n	800651e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	609a      	str	r2, [r3, #8]
 80064ce:	e026      	b.n	800651e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68d8      	ldr	r0, [r3, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	461a      	mov	r2, r3
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	f002 f898 	bl	8008610 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	425b      	negs	r3, r3
 80064ea:	441a      	add	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d207      	bcs.n	800650c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	425b      	negs	r3, r3
 8006506:	441a      	add	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b02      	cmp	r3, #2
 8006510:	d105      	bne.n	800651e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	3b01      	subs	r3, #1
 800651c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006526:	697b      	ldr	r3, [r7, #20]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d018      	beq.n	8006574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	441a      	add	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d303      	bcc.n	8006564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68d9      	ldr	r1, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	461a      	mov	r2, r3
 800656e:	6838      	ldr	r0, [r7, #0]
 8006570:	f002 f84e 	bl	8008610 <memcpy>
	}
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006584:	f001 fd1e 	bl	8007fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800658e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006590:	e011      	b.n	80065b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d012      	beq.n	80065c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3324      	adds	r3, #36	; 0x24
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fd24 	bl	8006fec <xTaskRemoveFromEventList>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065aa:	f000 fdfb 	bl	80071a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dce9      	bgt.n	8006592 <prvUnlockQueue+0x16>
 80065be:	e000      	b.n	80065c2 <prvUnlockQueue+0x46>
					break;
 80065c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065ca:	f001 fd2b 	bl	8008024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065ce:	f001 fcf9 	bl	8007fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065da:	e011      	b.n	8006600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d012      	beq.n	800660a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3310      	adds	r3, #16
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fcff 	bl	8006fec <xTaskRemoveFromEventList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065f4:	f000 fdd6 	bl	80071a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dce9      	bgt.n	80065dc <prvUnlockQueue+0x60>
 8006608:	e000      	b.n	800660c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800660a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006614:	f001 fd06 	bl	8008024 <vPortExitCritical>
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006628:	f001 fccc 	bl	8007fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e001      	b.n	800663e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800663e:	f001 fcf1 	bl	8008024 <vPortExitCritical>

	return xReturn;
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006654:	f001 fcb6 	bl	8007fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	429a      	cmp	r2, r3
 8006662:	d102      	bne.n	800666a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e001      	b.n	800666e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800666e:	f001 fcd9 	bl	8008024 <vPortExitCritical>

	return xReturn;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	e014      	b.n	80066b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800668c:	4a0f      	ldr	r2, [pc, #60]	; (80066cc <vQueueAddToRegistry+0x50>)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006698:	490c      	ldr	r1, [pc, #48]	; (80066cc <vQueueAddToRegistry+0x50>)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066a2:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <vQueueAddToRegistry+0x50>)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4413      	add	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066ae:	e006      	b.n	80066be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	d9e7      	bls.n	800668c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20001c80 	.word	0x20001c80

080066d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066e0:	f001 fc70 	bl	8007fc4 <vPortEnterCritical>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d103      	bne.n	80066fa <vQueueWaitForMessageRestricted+0x2a>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d103      	bne.n	8006710 <vQueueWaitForMessageRestricted+0x40>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006710:	f001 fc88 	bl	8008024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fc35 	bl	8006f94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800672a:	6978      	ldr	r0, [r7, #20]
 800672c:	f7ff ff26 	bl	800657c <prvUnlockQueue>
	}
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	; 0x38
 800673c:	af04      	add	r7, sp, #16
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xTaskCreateStatic+0x2a>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	623b      	str	r3, [r7, #32]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xTaskCreateStatic+0x46>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	61fb      	str	r3, [r7, #28]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800677e:	235c      	movs	r3, #92	; 0x5c
 8006780:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b5c      	cmp	r3, #92	; 0x5c
 8006786:	d00a      	beq.n	800679e <xTaskCreateStatic+0x66>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61bb      	str	r3, [r7, #24]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01e      	beq.n	80067e2 <xTaskCreateStatic+0xaa>
 80067a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067bc:	2300      	movs	r3, #0
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f850 	bl	800687a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067dc:	f000 f8d4 	bl	8006988 <prvAddNewTaskToReadyList>
 80067e0:	e001      	b.n	80067e6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067e6:	697b      	ldr	r3, [r7, #20]
	}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3728      	adds	r7, #40	; 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	; 0x30
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fcff 	bl	8008208 <pvPortMalloc>
 800680a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006812:	205c      	movs	r0, #92	; 0x5c
 8006814:	f001 fcf8 	bl	8008208 <pvPortMalloc>
 8006818:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
 8006826:	e005      	b.n	8006834 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f001 fdb1 	bl	8008390 <vPortFree>
 800682e:	e001      	b.n	8006834 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d017      	beq.n	800686a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	2300      	movs	r3, #0
 8006846:	9303      	str	r3, [sp, #12]
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	9302      	str	r3, [sp, #8]
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f80e 	bl	800687a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800685e:	69f8      	ldr	r0, [r7, #28]
 8006860:	f000 f892 	bl	8006988 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006864:	2301      	movs	r3, #1
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	e002      	b.n	8006870 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800686a:	f04f 33ff 	mov.w	r3, #4294967295
 800686e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006870:	69bb      	ldr	r3, [r7, #24]
	}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b088      	sub	sp, #32
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	461a      	mov	r2, r3
 8006892:	21a5      	movs	r1, #165	; 0xa5
 8006894:	f001 feca 	bl	800862c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068a2:	3b01      	subs	r3, #1
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f023 0307 	bic.w	r3, r3, #7
 80068b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	617b      	str	r3, [r7, #20]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	e012      	b.n	80068fe <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	7819      	ldrb	r1, [r3, #0]
 80068e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	3334      	adds	r3, #52	; 0x34
 80068e8:	460a      	mov	r2, r1
 80068ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d006      	beq.n	8006906 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	3301      	adds	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b0f      	cmp	r3, #15
 8006902:	d9e9      	bls.n	80068d8 <prvInitialiseNewTask+0x5e>
 8006904:	e000      	b.n	8006908 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006906:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	2b37      	cmp	r3, #55	; 0x37
 8006914:	d901      	bls.n	800691a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006916:	2337      	movs	r3, #55	; 0x37
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800691e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006924:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	2200      	movs	r2, #0
 800692a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fff3 	bl	800591c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	3318      	adds	r3, #24
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe ffee 	bl	800591c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006944:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006954:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2200      	movs	r2, #0
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	69b8      	ldr	r0, [r7, #24]
 800696a:	f001 f9fd 	bl	8007d68 <pxPortInitialiseStack>
 800696e:	4602      	mov	r2, r0
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006980:	bf00      	nop
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006990:	f001 fb18 	bl	8007fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006994:	4b2d      	ldr	r3, [pc, #180]	; (8006a4c <prvAddNewTaskToReadyList+0xc4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	4a2c      	ldr	r2, [pc, #176]	; (8006a4c <prvAddNewTaskToReadyList+0xc4>)
 800699c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <prvAddNewTaskToReadyList+0xc8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069a6:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <prvAddNewTaskToReadyList+0xc8>)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069ac:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <prvAddNewTaskToReadyList+0xc4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d110      	bne.n	80069d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069b4:	f000 fc1a 	bl	80071ec <prvInitialiseTaskLists>
 80069b8:	e00d      	b.n	80069d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069ba:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <prvAddNewTaskToReadyList+0xcc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069c2:	4b23      	ldr	r3, [pc, #140]	; (8006a50 <prvAddNewTaskToReadyList+0xc8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d802      	bhi.n	80069d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069d0:	4a1f      	ldr	r2, [pc, #124]	; (8006a50 <prvAddNewTaskToReadyList+0xc8>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069d6:	4b20      	ldr	r3, [pc, #128]	; (8006a58 <prvAddNewTaskToReadyList+0xd0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3301      	adds	r3, #1
 80069dc:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <prvAddNewTaskToReadyList+0xd0>)
 80069de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069e0:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <prvAddNewTaskToReadyList+0xd0>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <prvAddNewTaskToReadyList+0xd4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <prvAddNewTaskToReadyList+0x74>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <prvAddNewTaskToReadyList+0xd4>)
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <prvAddNewTaskToReadyList+0xd8>)
 8006a0a:	441a      	add	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f7fe ff8f 	bl	8005936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a18:	f001 fb04 	bl	8008024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <prvAddNewTaskToReadyList+0xcc>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <prvAddNewTaskToReadyList+0xc8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d207      	bcs.n	8006a42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a32:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <prvAddNewTaskToReadyList+0xdc>)
 8006a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000d9c 	.word	0x20000d9c
 8006a50:	200008c8 	.word	0x200008c8
 8006a54:	20000da8 	.word	0x20000da8
 8006a58:	20000db8 	.word	0x20000db8
 8006a5c:	20000da4 	.word	0x20000da4
 8006a60:	200008cc 	.word	0x200008cc
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d017      	beq.n	8006aaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <vTaskDelay+0x60>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <vTaskDelay+0x30>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60bb      	str	r3, [r7, #8]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a98:	f000 f880 	bl	8006b9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fdfc 	bl	800769c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006aa4:	f000 f888 	bl	8006bb8 <xTaskResumeAll>
 8006aa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d107      	bne.n	8006ac0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <vTaskDelay+0x64>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000dc4 	.word	0x20000dc4
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	; 0x28
 8006ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ade:	463a      	mov	r2, r7
 8006ae0:	1d39      	adds	r1, r7, #4
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fec4 	bl	8005874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	9202      	str	r2, [sp, #8]
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	460a      	mov	r2, r1
 8006afe:	4921      	ldr	r1, [pc, #132]	; (8006b84 <vTaskStartScheduler+0xb4>)
 8006b00:	4821      	ldr	r0, [pc, #132]	; (8006b88 <vTaskStartScheduler+0xb8>)
 8006b02:	f7ff fe19 	bl	8006738 <xTaskCreateStatic>
 8006b06:	4603      	mov	r3, r0
 8006b08:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <vTaskStartScheduler+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <vTaskStartScheduler+0xbc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e001      	b.n	8006b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d102      	bne.n	8006b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b24:	f000 fe0e 	bl	8007744 <xTimerCreateTimerTask>
 8006b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d116      	bne.n	8006b5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b44:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <vTaskStartScheduler+0xc0>)
 8006b46:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b4c:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <vTaskStartScheduler+0xc4>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <vTaskStartScheduler+0xc8>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b58:	f001 f992 	bl	8007e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b5c:	e00e      	b.n	8006b7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d10a      	bne.n	8006b7c <vTaskStartScheduler+0xac>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60fb      	str	r3, [r7, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <vTaskStartScheduler+0xaa>
}
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	0800b0c4 	.word	0x0800b0c4
 8006b88:	080071bd 	.word	0x080071bd
 8006b8c:	20000dc0 	.word	0x20000dc0
 8006b90:	20000dbc 	.word	0x20000dbc
 8006b94:	20000da8 	.word	0x20000da8
 8006b98:	20000da0 	.word	0x20000da0

08006b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <vTaskSuspendAll+0x18>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a03      	ldr	r2, [pc, #12]	; (8006bb4 <vTaskSuspendAll+0x18>)
 8006ba8:	6013      	str	r3, [r2, #0]
}
 8006baa:	bf00      	nop
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000dc4 	.word	0x20000dc4

08006bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bc6:	4b42      	ldr	r3, [pc, #264]	; (8006cd0 <xTaskResumeAll+0x118>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006be4:	f001 f9ee 	bl	8007fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006be8:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <xTaskResumeAll+0x118>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	4a38      	ldr	r2, [pc, #224]	; (8006cd0 <xTaskResumeAll+0x118>)
 8006bf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bf2:	4b37      	ldr	r3, [pc, #220]	; (8006cd0 <xTaskResumeAll+0x118>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d162      	bne.n	8006cc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bfa:	4b36      	ldr	r3, [pc, #216]	; (8006cd4 <xTaskResumeAll+0x11c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d05e      	beq.n	8006cc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c02:	e02f      	b.n	8006c64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c04:	4b34      	ldr	r3, [pc, #208]	; (8006cd8 <xTaskResumeAll+0x120>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3318      	adds	r3, #24
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe feed 	bl	80059f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fee8 	bl	80059f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <xTaskResumeAll+0x124>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d903      	bls.n	8006c34 <xTaskResumeAll+0x7c>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <xTaskResumeAll+0x124>)
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4a27      	ldr	r2, [pc, #156]	; (8006ce0 <xTaskResumeAll+0x128>)
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f7fe fe73 	bl	8005936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	4b23      	ldr	r3, [pc, #140]	; (8006ce4 <xTaskResumeAll+0x12c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d302      	bcc.n	8006c64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c5e:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <xTaskResumeAll+0x130>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c64:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <xTaskResumeAll+0x120>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1cb      	bne.n	8006c04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c72:	f000 fb59 	bl	8007328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c76:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <xTaskResumeAll+0x134>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c82:	f000 f847 	bl	8006d14 <xTaskIncrementTick>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c8c:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <xTaskResumeAll+0x130>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f1      	bne.n	8006c82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <xTaskResumeAll+0x134>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ca4:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <xTaskResumeAll+0x130>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <xTaskResumeAll+0x138>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc0:	f001 f9b0 	bl	8008024 <vPortExitCritical>

	return xAlreadyYielded;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000dc4 	.word	0x20000dc4
 8006cd4:	20000d9c 	.word	0x20000d9c
 8006cd8:	20000d5c 	.word	0x20000d5c
 8006cdc:	20000da4 	.word	0x20000da4
 8006ce0:	200008cc 	.word	0x200008cc
 8006ce4:	200008c8 	.word	0x200008c8
 8006ce8:	20000db0 	.word	0x20000db0
 8006cec:	20000dac 	.word	0x20000dac
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <xTaskGetTickCount+0x1c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d00:	687b      	ldr	r3, [r7, #4]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000da0 	.word	0x20000da0

08006d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1e:	4b51      	ldr	r3, [pc, #324]	; (8006e64 <xTaskIncrementTick+0x150>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 808e 	bne.w	8006e44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d28:	4b4f      	ldr	r3, [pc, #316]	; (8006e68 <xTaskIncrementTick+0x154>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d30:	4a4d      	ldr	r2, [pc, #308]	; (8006e68 <xTaskIncrementTick+0x154>)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d120      	bne.n	8006d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d3c:	4b4b      	ldr	r3, [pc, #300]	; (8006e6c <xTaskIncrementTick+0x158>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	603b      	str	r3, [r7, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <xTaskIncrementTick+0x46>
 8006d5c:	4b43      	ldr	r3, [pc, #268]	; (8006e6c <xTaskIncrementTick+0x158>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	4b43      	ldr	r3, [pc, #268]	; (8006e70 <xTaskIncrementTick+0x15c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a41      	ldr	r2, [pc, #260]	; (8006e6c <xTaskIncrementTick+0x158>)
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4a41      	ldr	r2, [pc, #260]	; (8006e70 <xTaskIncrementTick+0x15c>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	4b40      	ldr	r3, [pc, #256]	; (8006e74 <xTaskIncrementTick+0x160>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	4a3f      	ldr	r2, [pc, #252]	; (8006e74 <xTaskIncrementTick+0x160>)
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	f000 fad5 	bl	8007328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d7e:	4b3e      	ldr	r3, [pc, #248]	; (8006e78 <xTaskIncrementTick+0x164>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d34e      	bcc.n	8006e26 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d88:	4b38      	ldr	r3, [pc, #224]	; (8006e6c <xTaskIncrementTick+0x158>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <xTaskIncrementTick+0x82>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xTaskIncrementTick+0x84>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9c:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <xTaskIncrementTick+0x164>)
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	601a      	str	r2, [r3, #0]
					break;
 8006da4:	e03f      	b.n	8006e26 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006da6:	4b31      	ldr	r3, [pc, #196]	; (8006e6c <xTaskIncrementTick+0x158>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d203      	bcs.n	8006dc6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dbe:	4a2e      	ldr	r2, [pc, #184]	; (8006e78 <xTaskIncrementTick+0x164>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6013      	str	r3, [r2, #0]
						break;
 8006dc4:	e02f      	b.n	8006e26 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fe10 	bl	80059f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	3318      	adds	r3, #24
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fe07 	bl	80059f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de6:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <xTaskIncrementTick+0x168>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d903      	bls.n	8006df6 <xTaskIncrementTick+0xe2>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <xTaskIncrementTick+0x168>)
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <xTaskIncrementTick+0x16c>)
 8006e04:	441a      	add	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fe fd92 	bl	8005936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <xTaskIncrementTick+0x170>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3b3      	bcc.n	8006d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e24:	e7b0      	b.n	8006d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e26:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <xTaskIncrementTick+0x170>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4914      	ldr	r1, [pc, #80]	; (8006e80 <xTaskIncrementTick+0x16c>)
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d907      	bls.n	8006e4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	e004      	b.n	8006e4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e44:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <xTaskIncrementTick+0x174>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a0f      	ldr	r2, [pc, #60]	; (8006e88 <xTaskIncrementTick+0x174>)
 8006e4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <xTaskIncrementTick+0x178>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e5a:	697b      	ldr	r3, [r7, #20]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000dc4 	.word	0x20000dc4
 8006e68:	20000da0 	.word	0x20000da0
 8006e6c:	20000d54 	.word	0x20000d54
 8006e70:	20000d58 	.word	0x20000d58
 8006e74:	20000db4 	.word	0x20000db4
 8006e78:	20000dbc 	.word	0x20000dbc
 8006e7c:	20000da4 	.word	0x20000da4
 8006e80:	200008cc 	.word	0x200008cc
 8006e84:	200008c8 	.word	0x200008c8
 8006e88:	20000dac 	.word	0x20000dac
 8006e8c:	20000db0 	.word	0x20000db0

08006e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e96:	4b28      	ldr	r3, [pc, #160]	; (8006f38 <vTaskSwitchContext+0xa8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e9e:	4b27      	ldr	r3, [pc, #156]	; (8006f3c <vTaskSwitchContext+0xac>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ea4:	e041      	b.n	8006f2a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006ea6:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <vTaskSwitchContext+0xac>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006eac:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <vTaskSwitchContext+0xb0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e010      	b.n	8006ed6 <vTaskSwitchContext+0x46>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <vTaskSwitchContext+0x40>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	607b      	str	r3, [r7, #4]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <vTaskSwitchContext+0x3e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	491b      	ldr	r1, [pc, #108]	; (8006f44 <vTaskSwitchContext+0xb4>)
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0e4      	beq.n	8006eb4 <vTaskSwitchContext+0x24>
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <vTaskSwitchContext+0xb4>)
 8006ef6:	4413      	add	r3, r2
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	605a      	str	r2, [r3, #4]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d104      	bne.n	8006f1a <vTaskSwitchContext+0x8a>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <vTaskSwitchContext+0xb8>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <vTaskSwitchContext+0xb0>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6013      	str	r3, [r2, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000dc4 	.word	0x20000dc4
 8006f3c:	20000db0 	.word	0x20000db0
 8006f40:	20000da4 	.word	0x20000da4
 8006f44:	200008cc 	.word	0x200008cc
 8006f48:	200008c8 	.word	0x200008c8

08006f4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	60fb      	str	r3, [r7, #12]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <vTaskPlaceOnEventList+0x44>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3318      	adds	r3, #24
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fe fcff 	bl	800597e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f80:	2101      	movs	r1, #1
 8006f82:	6838      	ldr	r0, [r7, #0]
 8006f84:	f000 fb8a 	bl	800769c <prvAddCurrentTaskToDelayedList>
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200008c8 	.word	0x200008c8

08006f94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	617b      	str	r3, [r7, #20]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3318      	adds	r3, #24
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7fe fcb6 	bl	8005936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	68b8      	ldr	r0, [r7, #8]
 8006fda:	f000 fb5f 	bl	800769c <prvAddCurrentTaskToDelayedList>
	}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200008c8 	.word	0x200008c8

08006fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60fb      	str	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	3318      	adds	r3, #24
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fce7 	bl	80059f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007022:	4b1e      	ldr	r3, [pc, #120]	; (800709c <xTaskRemoveFromEventList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d11d      	bne.n	8007066 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fcde 	bl	80059f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4b19      	ldr	r3, [pc, #100]	; (80070a0 <xTaskRemoveFromEventList+0xb4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d903      	bls.n	8007048 <xTaskRemoveFromEventList+0x5c>
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <xTaskRemoveFromEventList+0xb4>)
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <xTaskRemoveFromEventList+0xb8>)
 8007056:	441a      	add	r2, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe fc69 	bl	8005936 <vListInsertEnd>
 8007064:	e005      	b.n	8007072 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3318      	adds	r3, #24
 800706a:	4619      	mov	r1, r3
 800706c:	480e      	ldr	r0, [pc, #56]	; (80070a8 <xTaskRemoveFromEventList+0xbc>)
 800706e:	f7fe fc62 	bl	8005936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <xTaskRemoveFromEventList+0xc0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	429a      	cmp	r2, r3
 800707e:	d905      	bls.n	800708c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <xTaskRemoveFromEventList+0xc4>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e001      	b.n	8007090 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000dc4 	.word	0x20000dc4
 80070a0:	20000da4 	.word	0x20000da4
 80070a4:	200008cc 	.word	0x200008cc
 80070a8:	20000d5c 	.word	0x20000d5c
 80070ac:	200008c8 	.word	0x200008c8
 80070b0:	20000db0 	.word	0x20000db0

080070b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <vTaskInternalSetTimeOutState+0x24>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <vTaskInternalSetTimeOutState+0x28>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	605a      	str	r2, [r3, #4]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	20000db4 	.word	0x20000db4
 80070dc:	20000da0 	.word	0x20000da0

080070e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	613b      	str	r3, [r7, #16]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60fb      	str	r3, [r7, #12]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007122:	f000 ff4f 	bl	8007fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007126:	4b1d      	ldr	r3, [pc, #116]	; (800719c <xTaskCheckForTimeOut+0xbc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d102      	bne.n	8007146 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007140:	2300      	movs	r3, #0
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e023      	b.n	800718e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <xTaskCheckForTimeOut+0xc0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d007      	beq.n	8007162 <xTaskCheckForTimeOut+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	429a      	cmp	r2, r3
 800715a:	d302      	bcc.n	8007162 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	e015      	b.n	800718e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	429a      	cmp	r2, r3
 800716a:	d20b      	bcs.n	8007184 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff9b 	bl	80070b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800717e:	2300      	movs	r3, #0
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	e004      	b.n	800718e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800718a:	2301      	movs	r3, #1
 800718c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800718e:	f000 ff49 	bl	8008024 <vPortExitCritical>

	return xReturn;
 8007192:	69fb      	ldr	r3, [r7, #28]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3720      	adds	r7, #32
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000da0 	.word	0x20000da0
 80071a0:	20000db4 	.word	0x20000db4

080071a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071a8:	4b03      	ldr	r3, [pc, #12]	; (80071b8 <vTaskMissedYield+0x14>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	20000db0 	.word	0x20000db0

080071bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071c4:	f000 f852 	bl	800726c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071c8:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <prvIdleTask+0x28>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d9f9      	bls.n	80071c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <prvIdleTask+0x2c>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071e0:	e7f0      	b.n	80071c4 <prvIdleTask+0x8>
 80071e2:	bf00      	nop
 80071e4:	200008cc 	.word	0x200008cc
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f2:	2300      	movs	r3, #0
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	e00c      	b.n	8007212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4a12      	ldr	r2, [pc, #72]	; (800724c <prvInitialiseTaskLists+0x60>)
 8007204:	4413      	add	r3, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fb68 	bl	80058dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3301      	adds	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b37      	cmp	r3, #55	; 0x37
 8007216:	d9ef      	bls.n	80071f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007218:	480d      	ldr	r0, [pc, #52]	; (8007250 <prvInitialiseTaskLists+0x64>)
 800721a:	f7fe fb5f 	bl	80058dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800721e:	480d      	ldr	r0, [pc, #52]	; (8007254 <prvInitialiseTaskLists+0x68>)
 8007220:	f7fe fb5c 	bl	80058dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007224:	480c      	ldr	r0, [pc, #48]	; (8007258 <prvInitialiseTaskLists+0x6c>)
 8007226:	f7fe fb59 	bl	80058dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800722a:	480c      	ldr	r0, [pc, #48]	; (800725c <prvInitialiseTaskLists+0x70>)
 800722c:	f7fe fb56 	bl	80058dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007230:	480b      	ldr	r0, [pc, #44]	; (8007260 <prvInitialiseTaskLists+0x74>)
 8007232:	f7fe fb53 	bl	80058dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007236:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <prvInitialiseTaskLists+0x78>)
 8007238:	4a05      	ldr	r2, [pc, #20]	; (8007250 <prvInitialiseTaskLists+0x64>)
 800723a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800723c:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <prvInitialiseTaskLists+0x7c>)
 800723e:	4a05      	ldr	r2, [pc, #20]	; (8007254 <prvInitialiseTaskLists+0x68>)
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	200008cc 	.word	0x200008cc
 8007250:	20000d2c 	.word	0x20000d2c
 8007254:	20000d40 	.word	0x20000d40
 8007258:	20000d5c 	.word	0x20000d5c
 800725c:	20000d70 	.word	0x20000d70
 8007260:	20000d88 	.word	0x20000d88
 8007264:	20000d54 	.word	0x20000d54
 8007268:	20000d58 	.word	0x20000d58

0800726c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007272:	e019      	b.n	80072a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007274:	f000 fea6 	bl	8007fc4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007278:	4b10      	ldr	r3, [pc, #64]	; (80072bc <prvCheckTasksWaitingTermination+0x50>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fbb3 	bl	80059f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <prvCheckTasksWaitingTermination+0x54>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3b01      	subs	r3, #1
 8007290:	4a0b      	ldr	r2, [pc, #44]	; (80072c0 <prvCheckTasksWaitingTermination+0x54>)
 8007292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <prvCheckTasksWaitingTermination+0x58>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	4a0a      	ldr	r2, [pc, #40]	; (80072c4 <prvCheckTasksWaitingTermination+0x58>)
 800729c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800729e:	f000 fec1 	bl	8008024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f810 	bl	80072c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <prvCheckTasksWaitingTermination+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e1      	bne.n	8007274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000d70 	.word	0x20000d70
 80072c0:	20000d9c 	.word	0x20000d9c
 80072c4:	20000d84 	.word	0x20000d84

080072c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 f856 	bl	8008390 <vPortFree>
				vPortFree( pxTCB );
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f853 	bl	8008390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072ea:	e018      	b.n	800731e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d103      	bne.n	80072fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 f84a 	bl	8008390 <vPortFree>
	}
 80072fc:	e00f      	b.n	800731e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007304:	2b02      	cmp	r3, #2
 8007306:	d00a      	beq.n	800731e <prvDeleteTCB+0x56>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvDeleteTCB+0x54>
	}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <prvResetNextTaskUnblockTime+0x44>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <prvResetNextTaskUnblockTime+0x14>
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <prvResetNextTaskUnblockTime+0x16>
 800733c:	2300      	movs	r3, #0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <prvResetNextTaskUnblockTime+0x48>)
 8007344:	f04f 32ff 	mov.w	r2, #4294967295
 8007348:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800734a:	e008      	b.n	800735e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <prvResetNextTaskUnblockTime+0x44>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4a05      	ldr	r2, [pc, #20]	; (8007370 <prvResetNextTaskUnblockTime+0x48>)
 800735c:	6013      	str	r3, [r2, #0]
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20000d54 	.word	0x20000d54
 8007370:	20000dbc 	.word	0x20000dbc

08007374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <xTaskGetSchedulerState+0x34>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d102      	bne.n	8007388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007382:	2301      	movs	r3, #1
 8007384:	607b      	str	r3, [r7, #4]
 8007386:	e008      	b.n	800739a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <xTaskGetSchedulerState+0x38>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007390:	2302      	movs	r3, #2
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	e001      	b.n	800739a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007396:	2300      	movs	r3, #0
 8007398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800739a:	687b      	ldr	r3, [r7, #4]
	}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000da8 	.word	0x20000da8
 80073ac:	20000dc4 	.word	0x20000dc4

080073b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d056      	beq.n	8007474 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ca:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <xTaskPriorityInherit+0xd0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d246      	bcs.n	8007462 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	db06      	blt.n	80073ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073dc:	4b28      	ldr	r3, [pc, #160]	; (8007480 <xTaskPriorityInherit+0xd0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6959      	ldr	r1, [r3, #20]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a22      	ldr	r2, [pc, #136]	; (8007484 <xTaskPriorityInherit+0xd4>)
 80073fc:	4413      	add	r3, r2
 80073fe:	4299      	cmp	r1, r3
 8007400:	d101      	bne.n	8007406 <xTaskPriorityInherit+0x56>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <xTaskPriorityInherit+0x58>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d022      	beq.n	8007452 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe faed 	bl	80059f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <xTaskPriorityInherit+0xd0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	4b18      	ldr	r3, [pc, #96]	; (8007488 <xTaskPriorityInherit+0xd8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d903      	bls.n	8007434 <xTaskPriorityInherit+0x84>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4a15      	ldr	r2, [pc, #84]	; (8007488 <xTaskPriorityInherit+0xd8>)
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4a10      	ldr	r2, [pc, #64]	; (8007484 <xTaskPriorityInherit+0xd4>)
 8007442:	441a      	add	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	3304      	adds	r3, #4
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7fe fa73 	bl	8005936 <vListInsertEnd>
 8007450:	e004      	b.n	800745c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007452:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <xTaskPriorityInherit+0xd0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	e008      	b.n	8007474 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007466:	4b06      	ldr	r3, [pc, #24]	; (8007480 <xTaskPriorityInherit+0xd0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	429a      	cmp	r2, r3
 800746e:	d201      	bcs.n	8007474 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007470:	2301      	movs	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007474:	68fb      	ldr	r3, [r7, #12]
	}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200008c8 	.word	0x200008c8
 8007484:	200008cc 	.word	0x200008cc
 8007488:	20000da4 	.word	0x20000da4

0800748c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007498:	2300      	movs	r3, #0
 800749a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d056      	beq.n	8007550 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074a2:	4b2e      	ldr	r3, [pc, #184]	; (800755c <xTaskPriorityDisinherit+0xd0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d00a      	beq.n	80074c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	60fb      	str	r3, [r7, #12]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	60bb      	str	r3, [r7, #8]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	1e5a      	subs	r2, r3, #1
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d02c      	beq.n	8007550 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d128      	bne.n	8007550 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	3304      	adds	r3, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fa74 	bl	80059f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <xTaskPriorityDisinherit+0xd4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d903      	bls.n	8007530 <xTaskPriorityDisinherit+0xa4>
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <xTaskPriorityDisinherit+0xd4>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4a09      	ldr	r2, [pc, #36]	; (8007564 <xTaskPriorityDisinherit+0xd8>)
 800753e:	441a      	add	r2, r3
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f7fe f9f5 	bl	8005936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800754c:	2301      	movs	r3, #1
 800754e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007550:	697b      	ldr	r3, [r7, #20]
	}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200008c8 	.word	0x200008c8
 8007560:	20000da4 	.word	0x20000da4
 8007564:	200008cc 	.word	0x200008cc

08007568 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007576:	2301      	movs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d06f      	beq.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d902      	bls.n	80075ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e002      	b.n	80075b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d050      	beq.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d14b      	bne.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075c8:	4b27      	ldr	r3, [pc, #156]	; (8007668 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d10a      	bne.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60bb      	str	r3, [r7, #8]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	db04      	blt.n	8007606 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	6959      	ldr	r1, [r3, #20]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4a15      	ldr	r2, [pc, #84]	; (800766c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007616:	4413      	add	r3, r2
 8007618:	4299      	cmp	r1, r3
 800761a:	d101      	bne.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007620:	2300      	movs	r3, #0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01c      	beq.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3304      	adds	r3, #4
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe f9e0 	bl	80059f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d903      	bls.n	8007644 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	4a0b      	ldr	r2, [pc, #44]	; (8007670 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4a06      	ldr	r2, [pc, #24]	; (800766c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007652:	441a      	add	r2, r3
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	3304      	adds	r3, #4
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe f96b 	bl	8005936 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007660:	bf00      	nop
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	200008c8 	.word	0x200008c8
 800766c:	200008cc 	.word	0x200008cc
 8007670:	20000da4 	.word	0x20000da4

08007674 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <pvTaskIncrementMutexHeldCount+0x24>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <pvTaskIncrementMutexHeldCount+0x24>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007686:	3201      	adds	r2, #1
 8007688:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800768a:	4b03      	ldr	r3, [pc, #12]	; (8007698 <pvTaskIncrementMutexHeldCount+0x24>)
 800768c:	681b      	ldr	r3, [r3, #0]
	}
 800768e:	4618      	mov	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	200008c8 	.word	0x200008c8

0800769c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <prvAddCurrentTaskToDelayedList+0x90>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ac:	4b20      	ldr	r3, [pc, #128]	; (8007730 <prvAddCurrentTaskToDelayedList+0x94>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe f99c 	bl	80059f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d10a      	bne.n	80076d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c6:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4819      	ldr	r0, [pc, #100]	; (8007734 <prvAddCurrentTaskToDelayedList+0x98>)
 80076d0:	f7fe f931 	bl	8005936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076d4:	e026      	b.n	8007724 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076de:	4b14      	ldr	r3, [pc, #80]	; (8007730 <prvAddCurrentTaskToDelayedList+0x94>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d209      	bcs.n	8007702 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ee:	4b12      	ldr	r3, [pc, #72]	; (8007738 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7fe f93f 	bl	800597e <vListInsert>
}
 8007700:	e010      	b.n	8007724 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <prvAddCurrentTaskToDelayedList+0x94>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fe f935 	bl	800597e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	429a      	cmp	r2, r3
 800771c:	d202      	bcs.n	8007724 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800771e:	4a08      	ldr	r2, [pc, #32]	; (8007740 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	6013      	str	r3, [r2, #0]
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000da0 	.word	0x20000da0
 8007730:	200008c8 	.word	0x200008c8
 8007734:	20000d88 	.word	0x20000d88
 8007738:	20000d58 	.word	0x20000d58
 800773c:	20000d54 	.word	0x20000d54
 8007740:	20000dbc 	.word	0x20000dbc

08007744 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800774e:	f000 facb 	bl	8007ce8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007752:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <xTimerCreateTimerTask+0x80>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d021      	beq.n	800779e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007762:	1d3a      	adds	r2, r7, #4
 8007764:	f107 0108 	add.w	r1, r7, #8
 8007768:	f107 030c 	add.w	r3, r7, #12
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe f89b 	bl	80058a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	9202      	str	r2, [sp, #8]
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	2302      	movs	r3, #2
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	2300      	movs	r3, #0
 8007782:	460a      	mov	r2, r1
 8007784:	4910      	ldr	r1, [pc, #64]	; (80077c8 <xTimerCreateTimerTask+0x84>)
 8007786:	4811      	ldr	r0, [pc, #68]	; (80077cc <xTimerCreateTimerTask+0x88>)
 8007788:	f7fe ffd6 	bl	8006738 <xTaskCreateStatic>
 800778c:	4603      	mov	r3, r0
 800778e:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <xTimerCreateTimerTask+0x8c>)
 8007790:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007792:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <xTimerCreateTimerTask+0x8c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800779a:	2301      	movs	r3, #1
 800779c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	613b      	str	r3, [r7, #16]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077ba:	697b      	ldr	r3, [r7, #20]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000df8 	.word	0x20000df8
 80077c8:	0800b0cc 	.word	0x0800b0cc
 80077cc:	080078f1 	.word	0x080078f1
 80077d0:	20000dfc 	.word	0x20000dfc

080077d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007802:	4b1a      	ldr	r3, [pc, #104]	; (800786c <xTimerGenericCommand+0x98>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02a      	beq.n	8007860 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b05      	cmp	r3, #5
 800781a:	dc18      	bgt.n	800784e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800781c:	f7ff fdaa 	bl	8007374 <xTaskGetSchedulerState>
 8007820:	4603      	mov	r3, r0
 8007822:	2b02      	cmp	r3, #2
 8007824:	d109      	bne.n	800783a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007826:	4b11      	ldr	r3, [pc, #68]	; (800786c <xTimerGenericCommand+0x98>)
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f107 0110 	add.w	r1, r7, #16
 800782e:	2300      	movs	r3, #0
 8007830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007832:	f7fe fa79 	bl	8005d28 <xQueueGenericSend>
 8007836:	6278      	str	r0, [r7, #36]	; 0x24
 8007838:	e012      	b.n	8007860 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <xTimerGenericCommand+0x98>)
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	f107 0110 	add.w	r1, r7, #16
 8007842:	2300      	movs	r3, #0
 8007844:	2200      	movs	r2, #0
 8007846:	f7fe fa6f 	bl	8005d28 <xQueueGenericSend>
 800784a:	6278      	str	r0, [r7, #36]	; 0x24
 800784c:	e008      	b.n	8007860 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800784e:	4b07      	ldr	r3, [pc, #28]	; (800786c <xTimerGenericCommand+0x98>)
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	f107 0110 	add.w	r1, r7, #16
 8007856:	2300      	movs	r3, #0
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	f7fe fb63 	bl	8005f24 <xQueueGenericSendFromISR>
 800785e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007862:	4618      	mov	r0, r3
 8007864:	3728      	adds	r7, #40	; 0x28
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000df8 	.word	0x20000df8

08007870 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af02      	add	r7, sp, #8
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800787a:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <prvProcessExpiredTimer+0x7c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	3304      	adds	r3, #4
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe f8b1 	bl	80059f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d122      	bne.n	80078dc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	18d1      	adds	r1, r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	6978      	ldr	r0, [r7, #20]
 80078a4:	f000 f8c8 	bl	8007a38 <prvInsertTimerInActiveList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d016      	beq.n	80078dc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078ae:	2300      	movs	r3, #0
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	2300      	movs	r3, #0
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	2100      	movs	r1, #0
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f7ff ff8b 	bl	80077d4 <xTimerGenericCommand>
 80078be:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60fb      	str	r3, [r7, #12]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	6978      	ldr	r0, [r7, #20]
 80078e2:	4798      	blx	r3
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000df0 	.word	0x20000df0

080078f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f857 	bl	80079b0 <prvGetNextExpireTime>
 8007902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4619      	mov	r1, r3
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f803 	bl	8007914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800790e:	f000 f8d5 	bl	8007abc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007912:	e7f1      	b.n	80078f8 <prvTimerTask+0x8>

08007914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800791e:	f7ff f93d 	bl	8006b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007922:	f107 0308 	add.w	r3, r7, #8
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f866 	bl	80079f8 <prvSampleTimeNow>
 800792c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d130      	bne.n	8007996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <prvProcessTimerOrBlockTask+0x3c>
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	429a      	cmp	r2, r3
 8007940:	d806      	bhi.n	8007950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007942:	f7ff f939 	bl	8006bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ff91 	bl	8007870 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800794e:	e024      	b.n	800799a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <prvProcessTimerOrBlockTask+0x90>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <prvProcessTimerOrBlockTask+0x94>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	f7fe feab 	bl	80066d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800797a:	f7ff f91d 	bl	8006bb8 <xTaskResumeAll>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <prvProcessTimerOrBlockTask+0x98>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
}
 8007994:	e001      	b.n	800799a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007996:	f7ff f90f 	bl	8006bb8 <xTaskResumeAll>
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000df4 	.word	0x20000df4
 80079a8:	20000df8 	.word	0x20000df8
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079b8:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <prvGetNextExpireTime+0x44>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bf0c      	ite	eq
 80079c2:	2301      	moveq	r3, #1
 80079c4:	2300      	movne	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d105      	bne.n	80079e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <prvGetNextExpireTime+0x44>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e001      	b.n	80079e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	20000df0 	.word	0x20000df0

080079f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a00:	f7ff f978 	bl	8006cf4 <xTaskGetTickCount>
 8007a04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <prvSampleTimeNow+0x3c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d205      	bcs.n	8007a1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a10:	f000 f908 	bl	8007c24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a22:	4a04      	ldr	r2, [pc, #16]	; (8007a34 <prvSampleTimeNow+0x3c>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000e00 	.word	0x20000e00

08007a38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d812      	bhi.n	8007a84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d302      	bcc.n	8007a72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e01b      	b.n	8007aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a72:	4b10      	ldr	r3, [pc, #64]	; (8007ab4 <prvInsertTimerInActiveList+0x7c>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7fd ff7e 	bl	800597e <vListInsert>
 8007a82:	e012      	b.n	8007aaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d206      	bcs.n	8007a9a <prvInsertTimerInActiveList+0x62>
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e007      	b.n	8007aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <prvInsertTimerInActiveList+0x80>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fd ff6a 	bl	800597e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aaa:	697b      	ldr	r3, [r7, #20]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000df4 	.word	0x20000df4
 8007ab8:	20000df0 	.word	0x20000df0

08007abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08e      	sub	sp, #56	; 0x38
 8007ac0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ac2:	e09d      	b.n	8007c00 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da18      	bge.n	8007afc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007aca:	1d3b      	adds	r3, r7, #4
 8007acc:	3304      	adds	r3, #4
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	61fb      	str	r3, [r7, #28]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af2:	6850      	ldr	r0, [r2, #4]
 8007af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af6:	6892      	ldr	r2, [r2, #8]
 8007af8:	4611      	mov	r1, r2
 8007afa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	db7d      	blt.n	8007bfe <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d004      	beq.n	8007b18 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fd ff6c 	bl	80059f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b18:	463b      	mov	r3, r7
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff ff6c 	bl	80079f8 <prvSampleTimeNow>
 8007b20:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b09      	cmp	r3, #9
 8007b26:	d86b      	bhi.n	8007c00 <prvProcessReceivedCommands+0x144>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <prvProcessReceivedCommands+0x74>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b59 	.word	0x08007b59
 8007b34:	08007b59 	.word	0x08007b59
 8007b38:	08007b59 	.word	0x08007b59
 8007b3c:	08007c01 	.word	0x08007c01
 8007b40:	08007bb5 	.word	0x08007bb5
 8007b44:	08007bed 	.word	0x08007bed
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b59 	.word	0x08007b59
 8007b50:	08007c01 	.word	0x08007c01
 8007b54:	08007bb5 	.word	0x08007bb5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	18d1      	adds	r1, r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b66:	f7ff ff67 	bl	8007a38 <prvInsertTimerInActiveList>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d047      	beq.n	8007c00 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b76:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d13f      	bne.n	8007c00 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	441a      	add	r2, r3
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b92:	f7ff fe1f 	bl	80077d4 <xTimerGenericCommand>
 8007b96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d130      	bne.n	8007c00 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	61bb      	str	r3, [r7, #24]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617b      	str	r3, [r7, #20]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	699a      	ldr	r2, [r3, #24]
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	18d1      	adds	r1, r2, r3
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be6:	f7ff ff27 	bl	8007a38 <prvInsertTimerInActiveList>
					break;
 8007bea:	e009      	b.n	8007c00 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d104      	bne.n	8007c00 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf8:	f000 fbca 	bl	8008390 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bfc:	e000      	b.n	8007c00 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007bfe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <prvProcessReceivedCommands+0x164>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	1d39      	adds	r1, r7, #4
 8007c06:	2200      	movs	r2, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fa23 	bl	8006054 <xQueueReceive>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f47f af57 	bne.w	8007ac4 <prvProcessReceivedCommands+0x8>
	}
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	3730      	adds	r7, #48	; 0x30
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000df8 	.word	0x20000df8

08007c24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c2a:	e045      	b.n	8007cb8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ce0 <prvSwitchTimerLists+0xbc>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <prvSwitchTimerLists+0xbc>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fd fed3 	bl	80059f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d12e      	bne.n	8007cb8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4413      	add	r3, r2
 8007c62:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d90e      	bls.n	8007c8a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c78:	4b19      	ldr	r3, [pc, #100]	; (8007ce0 <prvSwitchTimerLists+0xbc>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7fd fe7b 	bl	800597e <vListInsert>
 8007c88:	e016      	b.n	8007cb8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	2100      	movs	r1, #0
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff fd9d 	bl	80077d4 <xTimerGenericCommand>
 8007c9a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	603b      	str	r3, [r7, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <prvSwitchTimerLists+0xbc>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1b4      	bne.n	8007c2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cc2:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <prvSwitchTimerLists+0xbc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cc8:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <prvSwitchTimerLists+0xc0>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a04      	ldr	r2, [pc, #16]	; (8007ce0 <prvSwitchTimerLists+0xbc>)
 8007cce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cd0:	4a04      	ldr	r2, [pc, #16]	; (8007ce4 <prvSwitchTimerLists+0xc0>)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6013      	str	r3, [r2, #0]
}
 8007cd6:	bf00      	nop
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000df0 	.word	0x20000df0
 8007ce4:	20000df4 	.word	0x20000df4

08007ce8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cee:	f000 f969 	bl	8007fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <prvCheckForValidListAndQueue+0x60>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d120      	bne.n	8007d3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cfa:	4814      	ldr	r0, [pc, #80]	; (8007d4c <prvCheckForValidListAndQueue+0x64>)
 8007cfc:	f7fd fdee 	bl	80058dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d00:	4813      	ldr	r0, [pc, #76]	; (8007d50 <prvCheckForValidListAndQueue+0x68>)
 8007d02:	f7fd fdeb 	bl	80058dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d06:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <prvCheckForValidListAndQueue+0x6c>)
 8007d08:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <prvCheckForValidListAndQueue+0x64>)
 8007d0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d0c:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <prvCheckForValidListAndQueue+0x70>)
 8007d0e:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <prvCheckForValidListAndQueue+0x68>)
 8007d10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d12:	2300      	movs	r3, #0
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <prvCheckForValidListAndQueue+0x74>)
 8007d18:	4a11      	ldr	r2, [pc, #68]	; (8007d60 <prvCheckForValidListAndQueue+0x78>)
 8007d1a:	2110      	movs	r1, #16
 8007d1c:	200a      	movs	r0, #10
 8007d1e:	f7fd fef9 	bl	8005b14 <xQueueGenericCreateStatic>
 8007d22:	4603      	mov	r3, r0
 8007d24:	4a08      	ldr	r2, [pc, #32]	; (8007d48 <prvCheckForValidListAndQueue+0x60>)
 8007d26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <prvCheckForValidListAndQueue+0x60>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <prvCheckForValidListAndQueue+0x60>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	490b      	ldr	r1, [pc, #44]	; (8007d64 <prvCheckForValidListAndQueue+0x7c>)
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fca0 	bl	800667c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d3c:	f000 f972 	bl	8008024 <vPortExitCritical>
}
 8007d40:	bf00      	nop
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000df8 	.word	0x20000df8
 8007d4c:	20000dc8 	.word	0x20000dc8
 8007d50:	20000ddc 	.word	0x20000ddc
 8007d54:	20000df0 	.word	0x20000df0
 8007d58:	20000df4 	.word	0x20000df4
 8007d5c:	20000ea4 	.word	0x20000ea4
 8007d60:	20000e04 	.word	0x20000e04
 8007d64:	0800b0d4 	.word	0x0800b0d4

08007d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3b04      	subs	r3, #4
 8007d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f023 0201 	bic.w	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3b04      	subs	r3, #4
 8007d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d98:	4a0c      	ldr	r2, [pc, #48]	; (8007dcc <pxPortInitialiseStack+0x64>)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3b14      	subs	r3, #20
 8007da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f06f 0202 	mvn.w	r2, #2
 8007db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3b20      	subs	r3, #32
 8007dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	08007dd1 	.word	0x08007dd1

08007dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <prvTaskExitError+0x54>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d00a      	beq.n	8007dfa <prvTaskExitError+0x2a>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60fb      	str	r3, [r7, #12]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <prvTaskExitError+0x28>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	60bb      	str	r3, [r7, #8]
}
 8007e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e0e:	bf00      	nop
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0fc      	beq.n	8007e10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	2000000c 	.word	0x2000000c
	...

08007e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <pxCurrentTCBConst2>)
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f380 8809 	msr	PSP, r0
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	4770      	bx	lr
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst2>:
 8007e50:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e58:	4808      	ldr	r0, [pc, #32]	; (8007e7c <prvPortStartFirstTask+0x24>)
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f380 8808 	msr	MSP, r0
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8814 	msr	CONTROL, r0
 8007e6a:	b662      	cpsie	i
 8007e6c:	b661      	cpsie	f
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	df00      	svc	0
 8007e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e7a:	bf00      	nop
 8007e7c:	e000ed08 	.word	0xe000ed08

08007e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e86:	4b46      	ldr	r3, [pc, #280]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a46      	ldr	r2, [pc, #280]	; (8007fa4 <xPortStartScheduler+0x124>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10a      	bne.n	8007ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3f      	ldr	r2, [pc, #252]	; (8007fa8 <xPortStartScheduler+0x128>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10a      	bne.n	8007ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	60fb      	str	r3, [r7, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ec6:	4b39      	ldr	r3, [pc, #228]	; (8007fac <xPortStartScheduler+0x12c>)
 8007ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	22ff      	movs	r2, #255	; 0xff
 8007ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eee:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ef4:	e009      	b.n	8007f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ef6:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	4a2d      	ldr	r2, [pc, #180]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d0ef      	beq.n	8007ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f16:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1c3 0307 	rsb	r3, r3, #7
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d00a      	beq.n	8007f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60bb      	str	r3, [r7, #8]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f38:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f4a:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f6e:	f000 f8dd 	bl	800812c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f72:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <xPortStartScheduler+0x13c>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f78:	f000 f8fc 	bl	8008174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <xPortStartScheduler+0x140>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <xPortStartScheduler+0x140>)
 8007f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f88:	f7ff ff66 	bl	8007e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f8c:	f7fe ff80 	bl	8006e90 <vTaskSwitchContext>
	prvTaskExitError();
 8007f90:	f7ff ff1e 	bl	8007dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	e000ed00 	.word	0xe000ed00
 8007fa4:	410fc271 	.word	0x410fc271
 8007fa8:	410fc270 	.word	0x410fc270
 8007fac:	e000e400 	.word	0xe000e400
 8007fb0:	20000ef4 	.word	0x20000ef4
 8007fb4:	20000ef8 	.word	0x20000ef8
 8007fb8:	e000ed20 	.word	0xe000ed20
 8007fbc:	2000000c 	.word	0x2000000c
 8007fc0:	e000ef34 	.word	0xe000ef34

08007fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	607b      	str	r3, [r7, #4]
}
 8007fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <vPortEnterCritical+0x58>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a0d      	ldr	r2, [pc, #52]	; (800801c <vPortEnterCritical+0x58>)
 8007fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <vPortEnterCritical+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d10f      	bne.n	8008010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <vPortEnterCritical+0x5c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	603b      	str	r3, [r7, #0]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <vPortEnterCritical+0x4a>
	}
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	2000000c 	.word	0x2000000c
 8008020:	e000ed04 	.word	0xe000ed04

08008024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <vPortExitCritical+0x50>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <vPortExitCritical+0x24>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	607b      	str	r3, [r7, #4]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <vPortExitCritical+0x50>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3b01      	subs	r3, #1
 800804e:	4a09      	ldr	r2, [pc, #36]	; (8008074 <vPortExitCritical+0x50>)
 8008050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <vPortExitCritical+0x50>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <vPortExitCritical+0x42>
 800805a:	2300      	movs	r3, #0
 800805c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	f383 8811 	msr	BASEPRI, r3
}
 8008064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	2000000c 	.word	0x2000000c
	...

08008080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008080:	f3ef 8009 	mrs	r0, PSP
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <pxCurrentTCBConst>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	f01e 0f10 	tst.w	lr, #16
 8008090:	bf08      	it	eq
 8008092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080a4:	f380 8811 	msr	BASEPRI, r0
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f7fe feee 	bl	8006e90 <vTaskSwitchContext>
 80080b4:	f04f 0000 	mov.w	r0, #0
 80080b8:	f380 8811 	msr	BASEPRI, r0
 80080bc:	bc09      	pop	{r0, r3}
 80080be:	6819      	ldr	r1, [r3, #0]
 80080c0:	6808      	ldr	r0, [r1, #0]
 80080c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c6:	f01e 0f10 	tst.w	lr, #16
 80080ca:	bf08      	it	eq
 80080cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080d0:	f380 8809 	msr	PSP, r0
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst>:
 80080e0:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop

080080e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	607b      	str	r3, [r7, #4]
}
 8008100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008102:	f7fe fe07 	bl	8006d14 <xTaskIncrementTick>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <xPortSysTickHandler+0x40>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f383 8811 	msr	BASEPRI, r3
}
 800811e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <vPortSetupTimerInterrupt+0x34>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <vPortSetupTimerInterrupt+0x38>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <vPortSetupTimerInterrupt+0x3c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <vPortSetupTimerInterrupt+0x40>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	099b      	lsrs	r3, r3, #6
 8008148:	4a09      	ldr	r2, [pc, #36]	; (8008170 <vPortSetupTimerInterrupt+0x44>)
 800814a:	3b01      	subs	r3, #1
 800814c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <vPortSetupTimerInterrupt+0x34>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	e000e010 	.word	0xe000e010
 8008164:	e000e018 	.word	0xe000e018
 8008168:	20000000 	.word	0x20000000
 800816c:	10624dd3 	.word	0x10624dd3
 8008170:	e000e014 	.word	0xe000e014

08008174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008184 <vPortEnableVFP+0x10>
 8008178:	6801      	ldr	r1, [r0, #0]
 800817a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800817e:	6001      	str	r1, [r0, #0]
 8008180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008182:	bf00      	nop
 8008184:	e000ed88 	.word	0xe000ed88

08008188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800818e:	f3ef 8305 	mrs	r3, IPSR
 8008192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b0f      	cmp	r3, #15
 8008198:	d914      	bls.n	80081c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <vPortValidateInterruptPriority+0x70>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <vPortValidateInterruptPriority+0x74>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	7afa      	ldrb	r2, [r7, #11]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d20a      	bcs.n	80081c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <vPortValidateInterruptPriority+0x78>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081cc:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <vPortValidateInterruptPriority+0x7c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d90a      	bls.n	80081ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	603b      	str	r3, [r7, #0]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <vPortValidateInterruptPriority+0x60>
	}
 80081ea:	bf00      	nop
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	e000e3f0 	.word	0xe000e3f0
 80081fc:	20000ef4 	.word	0x20000ef4
 8008200:	e000ed0c 	.word	0xe000ed0c
 8008204:	20000ef8 	.word	0x20000ef8

08008208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008214:	f7fe fcc2 	bl	8006b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008218:	4b58      	ldr	r3, [pc, #352]	; (800837c <pvPortMalloc+0x174>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008220:	f000 f910 	bl	8008444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008224:	4b56      	ldr	r3, [pc, #344]	; (8008380 <pvPortMalloc+0x178>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4013      	ands	r3, r2
 800822c:	2b00      	cmp	r3, #0
 800822e:	f040 808e 	bne.w	800834e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01d      	beq.n	8008274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008238:	2208      	movs	r2, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d014      	beq.n	8008274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f023 0307 	bic.w	r3, r3, #7
 8008250:	3308      	adds	r3, #8
 8008252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <pvPortMalloc+0x6c>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	617b      	str	r3, [r7, #20]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d069      	beq.n	800834e <pvPortMalloc+0x146>
 800827a:	4b42      	ldr	r3, [pc, #264]	; (8008384 <pvPortMalloc+0x17c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d864      	bhi.n	800834e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008284:	4b40      	ldr	r3, [pc, #256]	; (8008388 <pvPortMalloc+0x180>)
 8008286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008288:	4b3f      	ldr	r3, [pc, #252]	; (8008388 <pvPortMalloc+0x180>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800828e:	e004      	b.n	800829a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d903      	bls.n	80082ac <pvPortMalloc+0xa4>
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f1      	bne.n	8008290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082ac:	4b33      	ldr	r3, [pc, #204]	; (800837c <pvPortMalloc+0x174>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d04b      	beq.n	800834e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2208      	movs	r2, #8
 80082bc:	4413      	add	r3, r2
 80082be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	2308      	movs	r3, #8
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d91f      	bls.n	8008318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <pvPortMalloc+0xf8>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	613b      	str	r3, [r7, #16]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f000 f8f8 	bl	8008508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008318:	4b1a      	ldr	r3, [pc, #104]	; (8008384 <pvPortMalloc+0x17c>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	4a18      	ldr	r2, [pc, #96]	; (8008384 <pvPortMalloc+0x17c>)
 8008324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008326:	4b17      	ldr	r3, [pc, #92]	; (8008384 <pvPortMalloc+0x17c>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b18      	ldr	r3, [pc, #96]	; (800838c <pvPortMalloc+0x184>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d203      	bcs.n	800833a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008332:	4b14      	ldr	r3, [pc, #80]	; (8008384 <pvPortMalloc+0x17c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a15      	ldr	r2, [pc, #84]	; (800838c <pvPortMalloc+0x184>)
 8008338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	4b10      	ldr	r3, [pc, #64]	; (8008380 <pvPortMalloc+0x178>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	431a      	orrs	r2, r3
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800834e:	f7fe fc33 	bl	8006bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <pvPortMalloc+0x16a>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <pvPortMalloc+0x168>
	return pvReturn;
 8008372:	69fb      	ldr	r3, [r7, #28]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3728      	adds	r7, #40	; 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20001b04 	.word	0x20001b04
 8008380:	20001b10 	.word	0x20001b10
 8008384:	20001b08 	.word	0x20001b08
 8008388:	20001afc 	.word	0x20001afc
 800838c:	20001b0c 	.word	0x20001b0c

08008390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d048      	beq.n	8008434 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083a2:	2308      	movs	r3, #8
 80083a4:	425b      	negs	r3, r3
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4413      	add	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	4b21      	ldr	r3, [pc, #132]	; (800843c <vPortFree+0xac>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <vPortFree+0x44>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	60fb      	str	r3, [r7, #12]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <vPortFree+0x62>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60bb      	str	r3, [r7, #8]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	4b11      	ldr	r3, [pc, #68]	; (800843c <vPortFree+0xac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d019      	beq.n	8008434 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d115      	bne.n	8008434 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <vPortFree+0xac>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	43db      	mvns	r3, r3
 8008412:	401a      	ands	r2, r3
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008418:	f7fe fbc0 	bl	8006b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <vPortFree+0xb0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4413      	add	r3, r2
 8008426:	4a06      	ldr	r2, [pc, #24]	; (8008440 <vPortFree+0xb0>)
 8008428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800842a:	6938      	ldr	r0, [r7, #16]
 800842c:	f000 f86c 	bl	8008508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008430:	f7fe fbc2 	bl	8006bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008434:	bf00      	nop
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20001b10 	.word	0x20001b10
 8008440:	20001b08 	.word	0x20001b08

08008444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800844a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800844e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008450:	4b27      	ldr	r3, [pc, #156]	; (80084f0 <prvHeapInit+0xac>)
 8008452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00c      	beq.n	8008478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3307      	adds	r3, #7
 8008462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0307 	bic.w	r3, r3, #7
 800846a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <prvHeapInit+0xac>)
 8008474:	4413      	add	r3, r2
 8008476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800847c:	4a1d      	ldr	r2, [pc, #116]	; (80084f4 <prvHeapInit+0xb0>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008482:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <prvHeapInit+0xb0>)
 8008484:	2200      	movs	r2, #0
 8008486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4413      	add	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008490:	2208      	movs	r2, #8
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	1a9b      	subs	r3, r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0307 	bic.w	r3, r3, #7
 800849e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <prvHeapInit+0xb4>)
 80084a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <prvHeapInit+0xb4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2200      	movs	r2, #0
 80084ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ae:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <prvHeapInit+0xb4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084c4:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <prvHeapInit+0xb4>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <prvHeapInit+0xb8>)
 80084d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <prvHeapInit+0xbc>)
 80084da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <prvHeapInit+0xc0>)
 80084de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20000efc 	.word	0x20000efc
 80084f4:	20001afc 	.word	0x20001afc
 80084f8:	20001b04 	.word	0x20001b04
 80084fc:	20001b0c 	.word	0x20001b0c
 8008500:	20001b08 	.word	0x20001b08
 8008504:	20001b10 	.word	0x20001b10

08008508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008510:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <prvInsertBlockIntoFreeList+0xac>)
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	e002      	b.n	800851c <prvInsertBlockIntoFreeList+0x14>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	429a      	cmp	r2, r3
 8008524:	d8f7      	bhi.n	8008516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d108      	bne.n	800854a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	441a      	add	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d118      	bne.n	8008590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d00d      	beq.n	8008586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	441a      	add	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e008      	b.n	8008598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	e003      	b.n	8008598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	429a      	cmp	r2, r3
 800859e:	d002      	beq.n	80085a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a6:	bf00      	nop
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20001afc 	.word	0x20001afc
 80085b8:	20001b04 	.word	0x20001b04

080085bc <__errno>:
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <__errno+0x8>)
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20000010 	.word	0x20000010

080085c8 <__libc_init_array>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4d0d      	ldr	r5, [pc, #52]	; (8008600 <__libc_init_array+0x38>)
 80085cc:	4c0d      	ldr	r4, [pc, #52]	; (8008604 <__libc_init_array+0x3c>)
 80085ce:	1b64      	subs	r4, r4, r5
 80085d0:	10a4      	asrs	r4, r4, #2
 80085d2:	2600      	movs	r6, #0
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	d109      	bne.n	80085ec <__libc_init_array+0x24>
 80085d8:	4d0b      	ldr	r5, [pc, #44]	; (8008608 <__libc_init_array+0x40>)
 80085da:	4c0c      	ldr	r4, [pc, #48]	; (800860c <__libc_init_array+0x44>)
 80085dc:	f002 fd08 	bl	800aff0 <_init>
 80085e0:	1b64      	subs	r4, r4, r5
 80085e2:	10a4      	asrs	r4, r4, #2
 80085e4:	2600      	movs	r6, #0
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	d105      	bne.n	80085f6 <__libc_init_array+0x2e>
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f0:	4798      	blx	r3
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7ee      	b.n	80085d4 <__libc_init_array+0xc>
 80085f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fa:	4798      	blx	r3
 80085fc:	3601      	adds	r6, #1
 80085fe:	e7f2      	b.n	80085e6 <__libc_init_array+0x1e>
 8008600:	0800b51c 	.word	0x0800b51c
 8008604:	0800b51c 	.word	0x0800b51c
 8008608:	0800b51c 	.word	0x0800b51c
 800860c:	0800b520 	.word	0x0800b520

08008610 <memcpy>:
 8008610:	440a      	add	r2, r1
 8008612:	4291      	cmp	r1, r2
 8008614:	f100 33ff 	add.w	r3, r0, #4294967295
 8008618:	d100      	bne.n	800861c <memcpy+0xc>
 800861a:	4770      	bx	lr
 800861c:	b510      	push	{r4, lr}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008626:	4291      	cmp	r1, r2
 8008628:	d1f9      	bne.n	800861e <memcpy+0xe>
 800862a:	bd10      	pop	{r4, pc}

0800862c <memset>:
 800862c:	4402      	add	r2, r0
 800862e:	4603      	mov	r3, r0
 8008630:	4293      	cmp	r3, r2
 8008632:	d100      	bne.n	8008636 <memset+0xa>
 8008634:	4770      	bx	lr
 8008636:	f803 1b01 	strb.w	r1, [r3], #1
 800863a:	e7f9      	b.n	8008630 <memset+0x4>

0800863c <__cvt>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	ec55 4b10 	vmov	r4, r5, d0
 8008644:	2d00      	cmp	r5, #0
 8008646:	460e      	mov	r6, r1
 8008648:	4619      	mov	r1, r3
 800864a:	462b      	mov	r3, r5
 800864c:	bfbb      	ittet	lt
 800864e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008652:	461d      	movlt	r5, r3
 8008654:	2300      	movge	r3, #0
 8008656:	232d      	movlt	r3, #45	; 0x2d
 8008658:	700b      	strb	r3, [r1, #0]
 800865a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800865c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008660:	4691      	mov	r9, r2
 8008662:	f023 0820 	bic.w	r8, r3, #32
 8008666:	bfbc      	itt	lt
 8008668:	4622      	movlt	r2, r4
 800866a:	4614      	movlt	r4, r2
 800866c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008670:	d005      	beq.n	800867e <__cvt+0x42>
 8008672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008676:	d100      	bne.n	800867a <__cvt+0x3e>
 8008678:	3601      	adds	r6, #1
 800867a:	2102      	movs	r1, #2
 800867c:	e000      	b.n	8008680 <__cvt+0x44>
 800867e:	2103      	movs	r1, #3
 8008680:	ab03      	add	r3, sp, #12
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	ab02      	add	r3, sp, #8
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	ec45 4b10 	vmov	d0, r4, r5
 800868c:	4653      	mov	r3, sl
 800868e:	4632      	mov	r2, r6
 8008690:	f000 fce2 	bl	8009058 <_dtoa_r>
 8008694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008698:	4607      	mov	r7, r0
 800869a:	d102      	bne.n	80086a2 <__cvt+0x66>
 800869c:	f019 0f01 	tst.w	r9, #1
 80086a0:	d022      	beq.n	80086e8 <__cvt+0xac>
 80086a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086a6:	eb07 0906 	add.w	r9, r7, r6
 80086aa:	d110      	bne.n	80086ce <__cvt+0x92>
 80086ac:	783b      	ldrb	r3, [r7, #0]
 80086ae:	2b30      	cmp	r3, #48	; 0x30
 80086b0:	d10a      	bne.n	80086c8 <__cvt+0x8c>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f8 fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80086be:	b918      	cbnz	r0, 80086c8 <__cvt+0x8c>
 80086c0:	f1c6 0601 	rsb	r6, r6, #1
 80086c4:	f8ca 6000 	str.w	r6, [sl]
 80086c8:	f8da 3000 	ldr.w	r3, [sl]
 80086cc:	4499      	add	r9, r3
 80086ce:	2200      	movs	r2, #0
 80086d0:	2300      	movs	r3, #0
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f8 f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80086da:	b108      	cbz	r0, 80086e0 <__cvt+0xa4>
 80086dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80086e0:	2230      	movs	r2, #48	; 0x30
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	454b      	cmp	r3, r9
 80086e6:	d307      	bcc.n	80086f8 <__cvt+0xbc>
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ec:	1bdb      	subs	r3, r3, r7
 80086ee:	4638      	mov	r0, r7
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	b004      	add	sp, #16
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	9103      	str	r1, [sp, #12]
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e7f0      	b.n	80086e2 <__cvt+0xa6>

08008700 <__exponent>:
 8008700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008702:	4603      	mov	r3, r0
 8008704:	2900      	cmp	r1, #0
 8008706:	bfb8      	it	lt
 8008708:	4249      	neglt	r1, r1
 800870a:	f803 2b02 	strb.w	r2, [r3], #2
 800870e:	bfb4      	ite	lt
 8008710:	222d      	movlt	r2, #45	; 0x2d
 8008712:	222b      	movge	r2, #43	; 0x2b
 8008714:	2909      	cmp	r1, #9
 8008716:	7042      	strb	r2, [r0, #1]
 8008718:	dd2a      	ble.n	8008770 <__exponent+0x70>
 800871a:	f10d 0407 	add.w	r4, sp, #7
 800871e:	46a4      	mov	ip, r4
 8008720:	270a      	movs	r7, #10
 8008722:	46a6      	mov	lr, r4
 8008724:	460a      	mov	r2, r1
 8008726:	fb91 f6f7 	sdiv	r6, r1, r7
 800872a:	fb07 1516 	mls	r5, r7, r6, r1
 800872e:	3530      	adds	r5, #48	; 0x30
 8008730:	2a63      	cmp	r2, #99	; 0x63
 8008732:	f104 34ff 	add.w	r4, r4, #4294967295
 8008736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800873a:	4631      	mov	r1, r6
 800873c:	dcf1      	bgt.n	8008722 <__exponent+0x22>
 800873e:	3130      	adds	r1, #48	; 0x30
 8008740:	f1ae 0502 	sub.w	r5, lr, #2
 8008744:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008748:	1c44      	adds	r4, r0, #1
 800874a:	4629      	mov	r1, r5
 800874c:	4561      	cmp	r1, ip
 800874e:	d30a      	bcc.n	8008766 <__exponent+0x66>
 8008750:	f10d 0209 	add.w	r2, sp, #9
 8008754:	eba2 020e 	sub.w	r2, r2, lr
 8008758:	4565      	cmp	r5, ip
 800875a:	bf88      	it	hi
 800875c:	2200      	movhi	r2, #0
 800875e:	4413      	add	r3, r2
 8008760:	1a18      	subs	r0, r3, r0
 8008762:	b003      	add	sp, #12
 8008764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800876e:	e7ed      	b.n	800874c <__exponent+0x4c>
 8008770:	2330      	movs	r3, #48	; 0x30
 8008772:	3130      	adds	r1, #48	; 0x30
 8008774:	7083      	strb	r3, [r0, #2]
 8008776:	70c1      	strb	r1, [r0, #3]
 8008778:	1d03      	adds	r3, r0, #4
 800877a:	e7f1      	b.n	8008760 <__exponent+0x60>

0800877c <_printf_float>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	ed2d 8b02 	vpush	{d8}
 8008784:	b08d      	sub	sp, #52	; 0x34
 8008786:	460c      	mov	r4, r1
 8008788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800878c:	4616      	mov	r6, r2
 800878e:	461f      	mov	r7, r3
 8008790:	4605      	mov	r5, r0
 8008792:	f001 fb43 	bl	8009e1c <_localeconv_r>
 8008796:	f8d0 a000 	ldr.w	sl, [r0]
 800879a:	4650      	mov	r0, sl
 800879c:	f7f7 fd18 	bl	80001d0 <strlen>
 80087a0:	2300      	movs	r3, #0
 80087a2:	930a      	str	r3, [sp, #40]	; 0x28
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087b0:	3307      	adds	r3, #7
 80087b2:	f023 0307 	bic.w	r3, r3, #7
 80087b6:	f103 0208 	add.w	r2, r3, #8
 80087ba:	f8c8 2000 	str.w	r2, [r8]
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087ce:	9307      	str	r3, [sp, #28]
 80087d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087d4:	ee08 0a10 	vmov	s16, r0
 80087d8:	4b9f      	ldr	r3, [pc, #636]	; (8008a58 <_printf_float+0x2dc>)
 80087da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	f7f8 f9a3 	bl	8000b2c <__aeabi_dcmpun>
 80087e6:	bb88      	cbnz	r0, 800884c <_printf_float+0xd0>
 80087e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ec:	4b9a      	ldr	r3, [pc, #616]	; (8008a58 <_printf_float+0x2dc>)
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	f7f8 f97d 	bl	8000af0 <__aeabi_dcmple>
 80087f6:	bb48      	cbnz	r0, 800884c <_printf_float+0xd0>
 80087f8:	2200      	movs	r2, #0
 80087fa:	2300      	movs	r3, #0
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	b110      	cbz	r0, 800880c <_printf_float+0x90>
 8008806:	232d      	movs	r3, #45	; 0x2d
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	4b93      	ldr	r3, [pc, #588]	; (8008a5c <_printf_float+0x2e0>)
 800880e:	4894      	ldr	r0, [pc, #592]	; (8008a60 <_printf_float+0x2e4>)
 8008810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008814:	bf94      	ite	ls
 8008816:	4698      	movls	r8, r3
 8008818:	4680      	movhi	r8, r0
 800881a:	2303      	movs	r3, #3
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	f023 0204 	bic.w	r2, r3, #4
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	9700      	str	r7, [sp, #0]
 800882c:	4633      	mov	r3, r6
 800882e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f9d8 	bl	8008be8 <_printf_common>
 8008838:	3001      	adds	r0, #1
 800883a:	f040 8090 	bne.w	800895e <_printf_float+0x1e2>
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	b00d      	add	sp, #52	; 0x34
 8008844:	ecbd 8b02 	vpop	{d8}
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	4640      	mov	r0, r8
 8008852:	4649      	mov	r1, r9
 8008854:	f7f8 f96a 	bl	8000b2c <__aeabi_dcmpun>
 8008858:	b140      	cbz	r0, 800886c <_printf_float+0xf0>
 800885a:	464b      	mov	r3, r9
 800885c:	2b00      	cmp	r3, #0
 800885e:	bfbc      	itt	lt
 8008860:	232d      	movlt	r3, #45	; 0x2d
 8008862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008866:	487f      	ldr	r0, [pc, #508]	; (8008a64 <_printf_float+0x2e8>)
 8008868:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <_printf_float+0x2ec>)
 800886a:	e7d1      	b.n	8008810 <_printf_float+0x94>
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008872:	9206      	str	r2, [sp, #24]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	d13f      	bne.n	80088f8 <_printf_float+0x17c>
 8008878:	2306      	movs	r3, #6
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	9b05      	ldr	r3, [sp, #20]
 800887e:	6861      	ldr	r1, [r4, #4]
 8008880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008884:	2300      	movs	r3, #0
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	ab0a      	add	r3, sp, #40	; 0x28
 800888a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800888e:	ab09      	add	r3, sp, #36	; 0x24
 8008890:	ec49 8b10 	vmov	d0, r8, r9
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	6022      	str	r2, [r4, #0]
 8008898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff fecd 	bl	800863c <__cvt>
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a6:	2b47      	cmp	r3, #71	; 0x47
 80088a8:	4680      	mov	r8, r0
 80088aa:	d108      	bne.n	80088be <_printf_float+0x142>
 80088ac:	1cc8      	adds	r0, r1, #3
 80088ae:	db02      	blt.n	80088b6 <_printf_float+0x13a>
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	dd41      	ble.n	800893a <_printf_float+0x1be>
 80088b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ba:	fa5f fb8b 	uxtb.w	fp, fp
 80088be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088c2:	d820      	bhi.n	8008906 <_printf_float+0x18a>
 80088c4:	3901      	subs	r1, #1
 80088c6:	465a      	mov	r2, fp
 80088c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088cc:	9109      	str	r1, [sp, #36]	; 0x24
 80088ce:	f7ff ff17 	bl	8008700 <__exponent>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d4:	1813      	adds	r3, r2, r0
 80088d6:	2a01      	cmp	r2, #1
 80088d8:	4681      	mov	r9, r0
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	dc02      	bgt.n	80088e4 <_printf_float+0x168>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	07d2      	lsls	r2, r2, #31
 80088e2:	d501      	bpl.n	80088e8 <_printf_float+0x16c>
 80088e4:	3301      	adds	r3, #1
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d09c      	beq.n	800882a <_printf_float+0xae>
 80088f0:	232d      	movs	r3, #45	; 0x2d
 80088f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f6:	e798      	b.n	800882a <_printf_float+0xae>
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	2a47      	cmp	r2, #71	; 0x47
 80088fc:	d1be      	bne.n	800887c <_printf_float+0x100>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1bc      	bne.n	800887c <_printf_float+0x100>
 8008902:	2301      	movs	r3, #1
 8008904:	e7b9      	b.n	800887a <_printf_float+0xfe>
 8008906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800890a:	d118      	bne.n	800893e <_printf_float+0x1c2>
 800890c:	2900      	cmp	r1, #0
 800890e:	6863      	ldr	r3, [r4, #4]
 8008910:	dd0b      	ble.n	800892a <_printf_float+0x1ae>
 8008912:	6121      	str	r1, [r4, #16]
 8008914:	b913      	cbnz	r3, 800891c <_printf_float+0x1a0>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d0      	lsls	r0, r2, #31
 800891a:	d502      	bpl.n	8008922 <_printf_float+0x1a6>
 800891c:	3301      	adds	r3, #1
 800891e:	440b      	add	r3, r1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	65a1      	str	r1, [r4, #88]	; 0x58
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	e7de      	b.n	80088e8 <_printf_float+0x16c>
 800892a:	b913      	cbnz	r3, 8008932 <_printf_float+0x1b6>
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	07d2      	lsls	r2, r2, #31
 8008930:	d501      	bpl.n	8008936 <_printf_float+0x1ba>
 8008932:	3302      	adds	r3, #2
 8008934:	e7f4      	b.n	8008920 <_printf_float+0x1a4>
 8008936:	2301      	movs	r3, #1
 8008938:	e7f2      	b.n	8008920 <_printf_float+0x1a4>
 800893a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800893e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008940:	4299      	cmp	r1, r3
 8008942:	db05      	blt.n	8008950 <_printf_float+0x1d4>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	6121      	str	r1, [r4, #16]
 8008948:	07d8      	lsls	r0, r3, #31
 800894a:	d5ea      	bpl.n	8008922 <_printf_float+0x1a6>
 800894c:	1c4b      	adds	r3, r1, #1
 800894e:	e7e7      	b.n	8008920 <_printf_float+0x1a4>
 8008950:	2900      	cmp	r1, #0
 8008952:	bfd4      	ite	le
 8008954:	f1c1 0202 	rsble	r2, r1, #2
 8008958:	2201      	movgt	r2, #1
 800895a:	4413      	add	r3, r2
 800895c:	e7e0      	b.n	8008920 <_printf_float+0x1a4>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	055a      	lsls	r2, r3, #21
 8008962:	d407      	bmi.n	8008974 <_printf_float+0x1f8>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	4642      	mov	r2, r8
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	d12c      	bne.n	80089cc <_printf_float+0x250>
 8008972:	e764      	b.n	800883e <_printf_float+0xc2>
 8008974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008978:	f240 80e0 	bls.w	8008b3c <_printf_float+0x3c0>
 800897c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	f7f8 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008988:	2800      	cmp	r0, #0
 800898a:	d034      	beq.n	80089f6 <_printf_float+0x27a>
 800898c:	4a37      	ldr	r2, [pc, #220]	; (8008a6c <_printf_float+0x2f0>)
 800898e:	2301      	movs	r3, #1
 8008990:	4631      	mov	r1, r6
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	f43f af51 	beq.w	800883e <_printf_float+0xc2>
 800899c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089a0:	429a      	cmp	r2, r3
 80089a2:	db02      	blt.n	80089aa <_printf_float+0x22e>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	07d8      	lsls	r0, r3, #31
 80089a8:	d510      	bpl.n	80089cc <_printf_float+0x250>
 80089aa:	ee18 3a10 	vmov	r3, s16
 80089ae:	4652      	mov	r2, sl
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f af41 	beq.w	800883e <_printf_float+0xc2>
 80089bc:	f04f 0800 	mov.w	r8, #0
 80089c0:	f104 091a 	add.w	r9, r4, #26
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	3b01      	subs	r3, #1
 80089c8:	4543      	cmp	r3, r8
 80089ca:	dc09      	bgt.n	80089e0 <_printf_float+0x264>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	079b      	lsls	r3, r3, #30
 80089d0:	f100 8105 	bmi.w	8008bde <_printf_float+0x462>
 80089d4:	68e0      	ldr	r0, [r4, #12]
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	4298      	cmp	r0, r3
 80089da:	bfb8      	it	lt
 80089dc:	4618      	movlt	r0, r3
 80089de:	e730      	b.n	8008842 <_printf_float+0xc6>
 80089e0:	2301      	movs	r3, #1
 80089e2:	464a      	mov	r2, r9
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f af27 	beq.w	800883e <_printf_float+0xc2>
 80089f0:	f108 0801 	add.w	r8, r8, #1
 80089f4:	e7e6      	b.n	80089c4 <_printf_float+0x248>
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dc39      	bgt.n	8008a70 <_printf_float+0x2f4>
 80089fc:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <_printf_float+0x2f0>)
 80089fe:	2301      	movs	r3, #1
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	f43f af19 	beq.w	800883e <_printf_float+0xc2>
 8008a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a10:	4313      	orrs	r3, r2
 8008a12:	d102      	bne.n	8008a1a <_printf_float+0x29e>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d5d8      	bpl.n	80089cc <_printf_float+0x250>
 8008a1a:	ee18 3a10 	vmov	r3, s16
 8008a1e:	4652      	mov	r2, sl
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af09 	beq.w	800883e <_printf_float+0xc2>
 8008a2c:	f04f 0900 	mov.w	r9, #0
 8008a30:	f104 0a1a 	add.w	sl, r4, #26
 8008a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a36:	425b      	negs	r3, r3
 8008a38:	454b      	cmp	r3, r9
 8008a3a:	dc01      	bgt.n	8008a40 <_printf_float+0x2c4>
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	e792      	b.n	8008966 <_printf_float+0x1ea>
 8008a40:	2301      	movs	r3, #1
 8008a42:	4652      	mov	r2, sl
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	f43f aef7 	beq.w	800883e <_printf_float+0xc2>
 8008a50:	f109 0901 	add.w	r9, r9, #1
 8008a54:	e7ee      	b.n	8008a34 <_printf_float+0x2b8>
 8008a56:	bf00      	nop
 8008a58:	7fefffff 	.word	0x7fefffff
 8008a5c:	0800b13c 	.word	0x0800b13c
 8008a60:	0800b140 	.word	0x0800b140
 8008a64:	0800b148 	.word	0x0800b148
 8008a68:	0800b144 	.word	0x0800b144
 8008a6c:	0800b14c 	.word	0x0800b14c
 8008a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bfa8      	it	ge
 8008a78:	461a      	movge	r2, r3
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	4691      	mov	r9, r2
 8008a7e:	dc37      	bgt.n	8008af0 <_printf_float+0x374>
 8008a80:	f04f 0b00 	mov.w	fp, #0
 8008a84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a88:	f104 021a 	add.w	r2, r4, #26
 8008a8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a8e:	9305      	str	r3, [sp, #20]
 8008a90:	eba3 0309 	sub.w	r3, r3, r9
 8008a94:	455b      	cmp	r3, fp
 8008a96:	dc33      	bgt.n	8008b00 <_printf_float+0x384>
 8008a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	db3b      	blt.n	8008b18 <_printf_float+0x39c>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	07da      	lsls	r2, r3, #31
 8008aa4:	d438      	bmi.n	8008b18 <_printf_float+0x39c>
 8008aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	eba2 0901 	sub.w	r9, r2, r1
 8008ab2:	4599      	cmp	r9, r3
 8008ab4:	bfa8      	it	ge
 8008ab6:	4699      	movge	r9, r3
 8008ab8:	f1b9 0f00 	cmp.w	r9, #0
 8008abc:	dc35      	bgt.n	8008b2a <_printf_float+0x3ae>
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac6:	f104 0a1a 	add.w	sl, r4, #26
 8008aca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	eba3 0309 	sub.w	r3, r3, r9
 8008ad4:	4543      	cmp	r3, r8
 8008ad6:	f77f af79 	ble.w	80089cc <_printf_float+0x250>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4652      	mov	r2, sl
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f aeaa 	beq.w	800883e <_printf_float+0xc2>
 8008aea:	f108 0801 	add.w	r8, r8, #1
 8008aee:	e7ec      	b.n	8008aca <_printf_float+0x34e>
 8008af0:	4613      	mov	r3, r2
 8008af2:	4631      	mov	r1, r6
 8008af4:	4642      	mov	r2, r8
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	d1c0      	bne.n	8008a80 <_printf_float+0x304>
 8008afe:	e69e      	b.n	800883e <_printf_float+0xc2>
 8008b00:	2301      	movs	r3, #1
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	9205      	str	r2, [sp, #20]
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f ae97 	beq.w	800883e <_printf_float+0xc2>
 8008b10:	9a05      	ldr	r2, [sp, #20]
 8008b12:	f10b 0b01 	add.w	fp, fp, #1
 8008b16:	e7b9      	b.n	8008a8c <_printf_float+0x310>
 8008b18:	ee18 3a10 	vmov	r3, s16
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1be      	bne.n	8008aa6 <_printf_float+0x32a>
 8008b28:	e689      	b.n	800883e <_printf_float+0xc2>
 8008b2a:	9a05      	ldr	r2, [sp, #20]
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	4442      	add	r2, r8
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d1c1      	bne.n	8008abe <_printf_float+0x342>
 8008b3a:	e680      	b.n	800883e <_printf_float+0xc2>
 8008b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b3e:	2a01      	cmp	r2, #1
 8008b40:	dc01      	bgt.n	8008b46 <_printf_float+0x3ca>
 8008b42:	07db      	lsls	r3, r3, #31
 8008b44:	d538      	bpl.n	8008bb8 <_printf_float+0x43c>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4642      	mov	r2, r8
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f ae74 	beq.w	800883e <_printf_float+0xc2>
 8008b56:	ee18 3a10 	vmov	r3, s16
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f ae6b 	beq.w	800883e <_printf_float+0xc2>
 8008b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f7f7 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b74:	b9d8      	cbnz	r0, 8008bae <_printf_float+0x432>
 8008b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b78:	f108 0201 	add.w	r2, r8, #1
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	d10e      	bne.n	8008ba6 <_printf_float+0x42a>
 8008b88:	e659      	b.n	800883e <_printf_float+0xc2>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	f43f ae52 	beq.w	800883e <_printf_float+0xc2>
 8008b9a:	f108 0801 	add.w	r8, r8, #1
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4543      	cmp	r3, r8
 8008ba4:	dcf1      	bgt.n	8008b8a <_printf_float+0x40e>
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bac:	e6dc      	b.n	8008968 <_printf_float+0x1ec>
 8008bae:	f04f 0800 	mov.w	r8, #0
 8008bb2:	f104 0a1a 	add.w	sl, r4, #26
 8008bb6:	e7f2      	b.n	8008b9e <_printf_float+0x422>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4642      	mov	r2, r8
 8008bbc:	e7df      	b.n	8008b7e <_printf_float+0x402>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	464a      	mov	r2, r9
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f ae38 	beq.w	800883e <_printf_float+0xc2>
 8008bce:	f108 0801 	add.w	r8, r8, #1
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd6:	1a5b      	subs	r3, r3, r1
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	dcf0      	bgt.n	8008bbe <_printf_float+0x442>
 8008bdc:	e6fa      	b.n	80089d4 <_printf_float+0x258>
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	f104 0919 	add.w	r9, r4, #25
 8008be6:	e7f4      	b.n	8008bd2 <_printf_float+0x456>

08008be8 <_printf_common>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	4616      	mov	r6, r2
 8008bee:	4699      	mov	r9, r3
 8008bf0:	688a      	ldr	r2, [r1, #8]
 8008bf2:	690b      	ldr	r3, [r1, #16]
 8008bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bfb8      	it	lt
 8008bfc:	4613      	movlt	r3, r2
 8008bfe:	6033      	str	r3, [r6, #0]
 8008c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c04:	4607      	mov	r7, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b10a      	cbz	r2, 8008c0e <_printf_common+0x26>
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	0699      	lsls	r1, r3, #26
 8008c12:	bf42      	ittt	mi
 8008c14:	6833      	ldrmi	r3, [r6, #0]
 8008c16:	3302      	addmi	r3, #2
 8008c18:	6033      	strmi	r3, [r6, #0]
 8008c1a:	6825      	ldr	r5, [r4, #0]
 8008c1c:	f015 0506 	ands.w	r5, r5, #6
 8008c20:	d106      	bne.n	8008c30 <_printf_common+0x48>
 8008c22:	f104 0a19 	add.w	sl, r4, #25
 8008c26:	68e3      	ldr	r3, [r4, #12]
 8008c28:	6832      	ldr	r2, [r6, #0]
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dc26      	bgt.n	8008c7e <_printf_common+0x96>
 8008c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c34:	1e13      	subs	r3, r2, #0
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	bf18      	it	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	0692      	lsls	r2, r2, #26
 8008c3e:	d42b      	bmi.n	8008c98 <_printf_common+0xb0>
 8008c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c44:	4649      	mov	r1, r9
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d01e      	beq.n	8008c8c <_printf_common+0xa4>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	68e5      	ldr	r5, [r4, #12]
 8008c52:	6832      	ldr	r2, [r6, #0]
 8008c54:	f003 0306 	and.w	r3, r3, #6
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	bf08      	it	eq
 8008c5c:	1aad      	subeq	r5, r5, r2
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	bf0c      	ite	eq
 8008c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c68:	2500      	movne	r5, #0
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bfc4      	itt	gt
 8008c6e:	1a9b      	subgt	r3, r3, r2
 8008c70:	18ed      	addgt	r5, r5, r3
 8008c72:	2600      	movs	r6, #0
 8008c74:	341a      	adds	r4, #26
 8008c76:	42b5      	cmp	r5, r6
 8008c78:	d11a      	bne.n	8008cb0 <_printf_common+0xc8>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e008      	b.n	8008c90 <_printf_common+0xa8>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4652      	mov	r2, sl
 8008c82:	4649      	mov	r1, r9
 8008c84:	4638      	mov	r0, r7
 8008c86:	47c0      	blx	r8
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d103      	bne.n	8008c94 <_printf_common+0xac>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	3501      	adds	r5, #1
 8008c96:	e7c6      	b.n	8008c26 <_printf_common+0x3e>
 8008c98:	18e1      	adds	r1, r4, r3
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	2030      	movs	r0, #48	; 0x30
 8008c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ca2:	4422      	add	r2, r4
 8008ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cac:	3302      	adds	r3, #2
 8008cae:	e7c7      	b.n	8008c40 <_printf_common+0x58>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	47c0      	blx	r8
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d0e6      	beq.n	8008c8c <_printf_common+0xa4>
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	e7d9      	b.n	8008c76 <_printf_common+0x8e>
	...

08008cc4 <_printf_i>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4691      	mov	r9, r2
 8008ccc:	7e27      	ldrb	r7, [r4, #24]
 8008cce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cd0:	2f78      	cmp	r7, #120	; 0x78
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	469a      	mov	sl, r3
 8008cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cda:	d807      	bhi.n	8008cec <_printf_i+0x28>
 8008cdc:	2f62      	cmp	r7, #98	; 0x62
 8008cde:	d80a      	bhi.n	8008cf6 <_printf_i+0x32>
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	f000 80d8 	beq.w	8008e96 <_printf_i+0x1d2>
 8008ce6:	2f58      	cmp	r7, #88	; 0x58
 8008ce8:	f000 80a3 	beq.w	8008e32 <_printf_i+0x16e>
 8008cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf4:	e03a      	b.n	8008d6c <_printf_i+0xa8>
 8008cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cfa:	2b15      	cmp	r3, #21
 8008cfc:	d8f6      	bhi.n	8008cec <_printf_i+0x28>
 8008cfe:	a001      	add	r0, pc, #4	; (adr r0, 8008d04 <_printf_i+0x40>)
 8008d00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d71 	.word	0x08008d71
 8008d0c:	08008ced 	.word	0x08008ced
 8008d10:	08008ced 	.word	0x08008ced
 8008d14:	08008ced 	.word	0x08008ced
 8008d18:	08008ced 	.word	0x08008ced
 8008d1c:	08008d71 	.word	0x08008d71
 8008d20:	08008ced 	.word	0x08008ced
 8008d24:	08008ced 	.word	0x08008ced
 8008d28:	08008ced 	.word	0x08008ced
 8008d2c:	08008ced 	.word	0x08008ced
 8008d30:	08008e7d 	.word	0x08008e7d
 8008d34:	08008da1 	.word	0x08008da1
 8008d38:	08008e5f 	.word	0x08008e5f
 8008d3c:	08008ced 	.word	0x08008ced
 8008d40:	08008ced 	.word	0x08008ced
 8008d44:	08008e9f 	.word	0x08008e9f
 8008d48:	08008ced 	.word	0x08008ced
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008ced 	.word	0x08008ced
 8008d54:	08008ced 	.word	0x08008ced
 8008d58:	08008e67 	.word	0x08008e67
 8008d5c:	680b      	ldr	r3, [r1, #0]
 8008d5e:	1d1a      	adds	r2, r3, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	600a      	str	r2, [r1, #0]
 8008d64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0a3      	b.n	8008eb8 <_printf_i+0x1f4>
 8008d70:	6825      	ldr	r5, [r4, #0]
 8008d72:	6808      	ldr	r0, [r1, #0]
 8008d74:	062e      	lsls	r6, r5, #24
 8008d76:	f100 0304 	add.w	r3, r0, #4
 8008d7a:	d50a      	bpl.n	8008d92 <_printf_i+0xce>
 8008d7c:	6805      	ldr	r5, [r0, #0]
 8008d7e:	600b      	str	r3, [r1, #0]
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	da03      	bge.n	8008d8c <_printf_i+0xc8>
 8008d84:	232d      	movs	r3, #45	; 0x2d
 8008d86:	426d      	negs	r5, r5
 8008d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8c:	485e      	ldr	r0, [pc, #376]	; (8008f08 <_printf_i+0x244>)
 8008d8e:	230a      	movs	r3, #10
 8008d90:	e019      	b.n	8008dc6 <_printf_i+0x102>
 8008d92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d96:	6805      	ldr	r5, [r0, #0]
 8008d98:	600b      	str	r3, [r1, #0]
 8008d9a:	bf18      	it	ne
 8008d9c:	b22d      	sxthne	r5, r5
 8008d9e:	e7ef      	b.n	8008d80 <_printf_i+0xbc>
 8008da0:	680b      	ldr	r3, [r1, #0]
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	1d18      	adds	r0, r3, #4
 8008da6:	6008      	str	r0, [r1, #0]
 8008da8:	0628      	lsls	r0, r5, #24
 8008daa:	d501      	bpl.n	8008db0 <_printf_i+0xec>
 8008dac:	681d      	ldr	r5, [r3, #0]
 8008dae:	e002      	b.n	8008db6 <_printf_i+0xf2>
 8008db0:	0669      	lsls	r1, r5, #25
 8008db2:	d5fb      	bpl.n	8008dac <_printf_i+0xe8>
 8008db4:	881d      	ldrh	r5, [r3, #0]
 8008db6:	4854      	ldr	r0, [pc, #336]	; (8008f08 <_printf_i+0x244>)
 8008db8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dba:	bf0c      	ite	eq
 8008dbc:	2308      	moveq	r3, #8
 8008dbe:	230a      	movne	r3, #10
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dc6:	6866      	ldr	r6, [r4, #4]
 8008dc8:	60a6      	str	r6, [r4, #8]
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	bfa2      	ittt	ge
 8008dce:	6821      	ldrge	r1, [r4, #0]
 8008dd0:	f021 0104 	bicge.w	r1, r1, #4
 8008dd4:	6021      	strge	r1, [r4, #0]
 8008dd6:	b90d      	cbnz	r5, 8008ddc <_printf_i+0x118>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	d04d      	beq.n	8008e78 <_printf_i+0x1b4>
 8008ddc:	4616      	mov	r6, r2
 8008dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8008de2:	fb03 5711 	mls	r7, r3, r1, r5
 8008de6:	5dc7      	ldrb	r7, [r0, r7]
 8008de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dec:	462f      	mov	r7, r5
 8008dee:	42bb      	cmp	r3, r7
 8008df0:	460d      	mov	r5, r1
 8008df2:	d9f4      	bls.n	8008dde <_printf_i+0x11a>
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d10b      	bne.n	8008e10 <_printf_i+0x14c>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	07df      	lsls	r7, r3, #31
 8008dfc:	d508      	bpl.n	8008e10 <_printf_i+0x14c>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	6861      	ldr	r1, [r4, #4]
 8008e02:	4299      	cmp	r1, r3
 8008e04:	bfde      	ittt	le
 8008e06:	2330      	movle	r3, #48	; 0x30
 8008e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e10:	1b92      	subs	r2, r2, r6
 8008e12:	6122      	str	r2, [r4, #16]
 8008e14:	f8cd a000 	str.w	sl, [sp]
 8008e18:	464b      	mov	r3, r9
 8008e1a:	aa03      	add	r2, sp, #12
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f7ff fee2 	bl	8008be8 <_printf_common>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d14c      	bne.n	8008ec2 <_printf_i+0x1fe>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	b004      	add	sp, #16
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e32:	4835      	ldr	r0, [pc, #212]	; (8008f08 <_printf_i+0x244>)
 8008e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	680e      	ldr	r6, [r1, #0]
 8008e3c:	061f      	lsls	r7, r3, #24
 8008e3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e42:	600e      	str	r6, [r1, #0]
 8008e44:	d514      	bpl.n	8008e70 <_printf_i+0x1ac>
 8008e46:	07d9      	lsls	r1, r3, #31
 8008e48:	bf44      	itt	mi
 8008e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e4e:	6023      	strmi	r3, [r4, #0]
 8008e50:	b91d      	cbnz	r5, 8008e5a <_printf_i+0x196>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f023 0320 	bic.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	e7b0      	b.n	8008dc0 <_printf_i+0xfc>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	f043 0320 	orr.w	r3, r3, #32
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	2378      	movs	r3, #120	; 0x78
 8008e68:	4828      	ldr	r0, [pc, #160]	; (8008f0c <_printf_i+0x248>)
 8008e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e6e:	e7e3      	b.n	8008e38 <_printf_i+0x174>
 8008e70:	065e      	lsls	r6, r3, #25
 8008e72:	bf48      	it	mi
 8008e74:	b2ad      	uxthmi	r5, r5
 8008e76:	e7e6      	b.n	8008e46 <_printf_i+0x182>
 8008e78:	4616      	mov	r6, r2
 8008e7a:	e7bb      	b.n	8008df4 <_printf_i+0x130>
 8008e7c:	680b      	ldr	r3, [r1, #0]
 8008e7e:	6826      	ldr	r6, [r4, #0]
 8008e80:	6960      	ldr	r0, [r4, #20]
 8008e82:	1d1d      	adds	r5, r3, #4
 8008e84:	600d      	str	r5, [r1, #0]
 8008e86:	0635      	lsls	r5, r6, #24
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0x1cc>
 8008e8c:	6018      	str	r0, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <_printf_i+0x1d2>
 8008e90:	0671      	lsls	r1, r6, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0x1c8>
 8008e94:	8018      	strh	r0, [r3, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	4616      	mov	r6, r2
 8008e9c:	e7ba      	b.n	8008e14 <_printf_i+0x150>
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	1d1a      	adds	r2, r3, #4
 8008ea2:	600a      	str	r2, [r1, #0]
 8008ea4:	681e      	ldr	r6, [r3, #0]
 8008ea6:	6862      	ldr	r2, [r4, #4]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7f7 f998 	bl	80001e0 <memchr>
 8008eb0:	b108      	cbz	r0, 8008eb6 <_printf_i+0x1f2>
 8008eb2:	1b80      	subs	r0, r0, r6
 8008eb4:	6060      	str	r0, [r4, #4]
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec0:	e7a8      	b.n	8008e14 <_printf_i+0x150>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	47d0      	blx	sl
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d0ab      	beq.n	8008e28 <_printf_i+0x164>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	079b      	lsls	r3, r3, #30
 8008ed4:	d413      	bmi.n	8008efe <_printf_i+0x23a>
 8008ed6:	68e0      	ldr	r0, [r4, #12]
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	4298      	cmp	r0, r3
 8008edc:	bfb8      	it	lt
 8008ede:	4618      	movlt	r0, r3
 8008ee0:	e7a4      	b.n	8008e2c <_printf_i+0x168>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4640      	mov	r0, r8
 8008eea:	47d0      	blx	sl
 8008eec:	3001      	adds	r0, #1
 8008eee:	d09b      	beq.n	8008e28 <_printf_i+0x164>
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	9903      	ldr	r1, [sp, #12]
 8008ef6:	1a5b      	subs	r3, r3, r1
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dcf2      	bgt.n	8008ee2 <_printf_i+0x21e>
 8008efc:	e7eb      	b.n	8008ed6 <_printf_i+0x212>
 8008efe:	2500      	movs	r5, #0
 8008f00:	f104 0619 	add.w	r6, r4, #25
 8008f04:	e7f5      	b.n	8008ef2 <_printf_i+0x22e>
 8008f06:	bf00      	nop
 8008f08:	0800b14e 	.word	0x0800b14e
 8008f0c:	0800b15f 	.word	0x0800b15f

08008f10 <iprintf>:
 8008f10:	b40f      	push	{r0, r1, r2, r3}
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <iprintf+0x2c>)
 8008f14:	b513      	push	{r0, r1, r4, lr}
 8008f16:	681c      	ldr	r4, [r3, #0]
 8008f18:	b124      	cbz	r4, 8008f24 <iprintf+0x14>
 8008f1a:	69a3      	ldr	r3, [r4, #24]
 8008f1c:	b913      	cbnz	r3, 8008f24 <iprintf+0x14>
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fede 	bl	8009ce0 <__sinit>
 8008f24:	ab05      	add	r3, sp, #20
 8008f26:	9a04      	ldr	r2, [sp, #16]
 8008f28:	68a1      	ldr	r1, [r4, #8]
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f001 fbe7 	bl	800a700 <_vfiprintf_r>
 8008f32:	b002      	add	sp, #8
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	b004      	add	sp, #16
 8008f3a:	4770      	bx	lr
 8008f3c:	20000010 	.word	0x20000010

08008f40 <quorem>:
 8008f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	6903      	ldr	r3, [r0, #16]
 8008f46:	690c      	ldr	r4, [r1, #16]
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	4607      	mov	r7, r0
 8008f4c:	f2c0 8081 	blt.w	8009052 <quorem+0x112>
 8008f50:	3c01      	subs	r4, #1
 8008f52:	f101 0814 	add.w	r8, r1, #20
 8008f56:	f100 0514 	add.w	r5, r0, #20
 8008f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f78:	d331      	bcc.n	8008fde <quorem+0x9e>
 8008f7a:	f04f 0e00 	mov.w	lr, #0
 8008f7e:	4640      	mov	r0, r8
 8008f80:	46ac      	mov	ip, r5
 8008f82:	46f2      	mov	sl, lr
 8008f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f88:	b293      	uxth	r3, r2
 8008f8a:	fb06 e303 	mla	r3, r6, r3, lr
 8008f8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	ebaa 0303 	sub.w	r3, sl, r3
 8008f98:	0c12      	lsrs	r2, r2, #16
 8008f9a:	f8dc a000 	ldr.w	sl, [ip]
 8008f9e:	fb06 e202 	mla	r2, r6, r2, lr
 8008fa2:	fa13 f38a 	uxtah	r3, r3, sl
 8008fa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008faa:	fa1f fa82 	uxth.w	sl, r2
 8008fae:	f8dc 2000 	ldr.w	r2, [ip]
 8008fb2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008fb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fc0:	4581      	cmp	r9, r0
 8008fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8008fc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fca:	d2db      	bcs.n	8008f84 <quorem+0x44>
 8008fcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fd0:	b92b      	cbnz	r3, 8008fde <quorem+0x9e>
 8008fd2:	9b01      	ldr	r3, [sp, #4]
 8008fd4:	3b04      	subs	r3, #4
 8008fd6:	429d      	cmp	r5, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	d32e      	bcc.n	800903a <quorem+0xfa>
 8008fdc:	613c      	str	r4, [r7, #16]
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f001 f9aa 	bl	800a338 <__mcmp>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	db24      	blt.n	8009032 <quorem+0xf2>
 8008fe8:	3601      	adds	r6, #1
 8008fea:	4628      	mov	r0, r5
 8008fec:	f04f 0c00 	mov.w	ip, #0
 8008ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ff4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ff8:	b293      	uxth	r3, r2
 8008ffa:	ebac 0303 	sub.w	r3, ip, r3
 8008ffe:	0c12      	lsrs	r2, r2, #16
 8009000:	fa13 f38e 	uxtah	r3, r3, lr
 8009004:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800900c:	b29b      	uxth	r3, r3
 800900e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009012:	45c1      	cmp	r9, r8
 8009014:	f840 3b04 	str.w	r3, [r0], #4
 8009018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800901c:	d2e8      	bcs.n	8008ff0 <quorem+0xb0>
 800901e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009026:	b922      	cbnz	r2, 8009032 <quorem+0xf2>
 8009028:	3b04      	subs	r3, #4
 800902a:	429d      	cmp	r5, r3
 800902c:	461a      	mov	r2, r3
 800902e:	d30a      	bcc.n	8009046 <quorem+0x106>
 8009030:	613c      	str	r4, [r7, #16]
 8009032:	4630      	mov	r0, r6
 8009034:	b003      	add	sp, #12
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	6812      	ldr	r2, [r2, #0]
 800903c:	3b04      	subs	r3, #4
 800903e:	2a00      	cmp	r2, #0
 8009040:	d1cc      	bne.n	8008fdc <quorem+0x9c>
 8009042:	3c01      	subs	r4, #1
 8009044:	e7c7      	b.n	8008fd6 <quorem+0x96>
 8009046:	6812      	ldr	r2, [r2, #0]
 8009048:	3b04      	subs	r3, #4
 800904a:	2a00      	cmp	r2, #0
 800904c:	d1f0      	bne.n	8009030 <quorem+0xf0>
 800904e:	3c01      	subs	r4, #1
 8009050:	e7eb      	b.n	800902a <quorem+0xea>
 8009052:	2000      	movs	r0, #0
 8009054:	e7ee      	b.n	8009034 <quorem+0xf4>
	...

08009058 <_dtoa_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	ed2d 8b02 	vpush	{d8}
 8009060:	ec57 6b10 	vmov	r6, r7, d0
 8009064:	b095      	sub	sp, #84	; 0x54
 8009066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009072:	4604      	mov	r4, r0
 8009074:	9209      	str	r2, [sp, #36]	; 0x24
 8009076:	930f      	str	r3, [sp, #60]	; 0x3c
 8009078:	b975      	cbnz	r5, 8009098 <_dtoa_r+0x40>
 800907a:	2010      	movs	r0, #16
 800907c:	f000 fed6 	bl	8009e2c <malloc>
 8009080:	4602      	mov	r2, r0
 8009082:	6260      	str	r0, [r4, #36]	; 0x24
 8009084:	b920      	cbnz	r0, 8009090 <_dtoa_r+0x38>
 8009086:	4bb2      	ldr	r3, [pc, #712]	; (8009350 <_dtoa_r+0x2f8>)
 8009088:	21ea      	movs	r1, #234	; 0xea
 800908a:	48b2      	ldr	r0, [pc, #712]	; (8009354 <_dtoa_r+0x2fc>)
 800908c:	f001 fd8e 	bl	800abac <__assert_func>
 8009090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009094:	6005      	str	r5, [r0, #0]
 8009096:	60c5      	str	r5, [r0, #12]
 8009098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800909a:	6819      	ldr	r1, [r3, #0]
 800909c:	b151      	cbz	r1, 80090b4 <_dtoa_r+0x5c>
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	604a      	str	r2, [r1, #4]
 80090a2:	2301      	movs	r3, #1
 80090a4:	4093      	lsls	r3, r2
 80090a6:	608b      	str	r3, [r1, #8]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 ff07 	bl	8009ebc <_Bfree>
 80090ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	1e3b      	subs	r3, r7, #0
 80090b6:	bfb9      	ittee	lt
 80090b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090bc:	9303      	strlt	r3, [sp, #12]
 80090be:	2300      	movge	r3, #0
 80090c0:	f8c8 3000 	strge.w	r3, [r8]
 80090c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80090c8:	4ba3      	ldr	r3, [pc, #652]	; (8009358 <_dtoa_r+0x300>)
 80090ca:	bfbc      	itt	lt
 80090cc:	2201      	movlt	r2, #1
 80090ce:	f8c8 2000 	strlt.w	r2, [r8]
 80090d2:	ea33 0309 	bics.w	r3, r3, r9
 80090d6:	d11b      	bne.n	8009110 <_dtoa_r+0xb8>
 80090d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090da:	f242 730f 	movw	r3, #9999	; 0x270f
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090e4:	4333      	orrs	r3, r6
 80090e6:	f000 857a 	beq.w	8009bde <_dtoa_r+0xb86>
 80090ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ec:	b963      	cbnz	r3, 8009108 <_dtoa_r+0xb0>
 80090ee:	4b9b      	ldr	r3, [pc, #620]	; (800935c <_dtoa_r+0x304>)
 80090f0:	e024      	b.n	800913c <_dtoa_r+0xe4>
 80090f2:	4b9b      	ldr	r3, [pc, #620]	; (8009360 <_dtoa_r+0x308>)
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	3308      	adds	r3, #8
 80090f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	9800      	ldr	r0, [sp, #0]
 80090fe:	b015      	add	sp, #84	; 0x54
 8009100:	ecbd 8b02 	vpop	{d8}
 8009104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	4b94      	ldr	r3, [pc, #592]	; (800935c <_dtoa_r+0x304>)
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	3303      	adds	r3, #3
 800910e:	e7f3      	b.n	80090f8 <_dtoa_r+0xa0>
 8009110:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009114:	2200      	movs	r2, #0
 8009116:	ec51 0b17 	vmov	r0, r1, d7
 800911a:	2300      	movs	r3, #0
 800911c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009120:	f7f7 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009124:	4680      	mov	r8, r0
 8009126:	b158      	cbz	r0, 8009140 <_dtoa_r+0xe8>
 8009128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800912a:	2301      	movs	r3, #1
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8551 	beq.w	8009bd8 <_dtoa_r+0xb80>
 8009136:	488b      	ldr	r0, [pc, #556]	; (8009364 <_dtoa_r+0x30c>)
 8009138:	6018      	str	r0, [r3, #0]
 800913a:	1e43      	subs	r3, r0, #1
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	e7dd      	b.n	80090fc <_dtoa_r+0xa4>
 8009140:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009144:	aa12      	add	r2, sp, #72	; 0x48
 8009146:	a913      	add	r1, sp, #76	; 0x4c
 8009148:	4620      	mov	r0, r4
 800914a:	f001 f999 	bl	800a480 <__d2b>
 800914e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009152:	4683      	mov	fp, r0
 8009154:	2d00      	cmp	r5, #0
 8009156:	d07c      	beq.n	8009252 <_dtoa_r+0x1fa>
 8009158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800915a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800915e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009162:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009166:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800916a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800916e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009172:	4b7d      	ldr	r3, [pc, #500]	; (8009368 <_dtoa_r+0x310>)
 8009174:	2200      	movs	r2, #0
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 f885 	bl	8000288 <__aeabi_dsub>
 800917e:	a36e      	add	r3, pc, #440	; (adr r3, 8009338 <_dtoa_r+0x2e0>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	a36d      	add	r3, pc, #436	; (adr r3, 8009340 <_dtoa_r+0x2e8>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 f87d 	bl	800028c <__adddf3>
 8009192:	4606      	mov	r6, r0
 8009194:	4628      	mov	r0, r5
 8009196:	460f      	mov	r7, r1
 8009198:	f7f7 f9c4 	bl	8000524 <__aeabi_i2d>
 800919c:	a36a      	add	r3, pc, #424	; (adr r3, 8009348 <_dtoa_r+0x2f0>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4630      	mov	r0, r6
 80091ac:	4639      	mov	r1, r7
 80091ae:	f7f7 f86d 	bl	800028c <__adddf3>
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	f7f7 fccf 	bl	8000b58 <__aeabi_d2iz>
 80091ba:	2200      	movs	r2, #0
 80091bc:	4682      	mov	sl, r0
 80091be:	2300      	movs	r3, #0
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80091c8:	b148      	cbz	r0, 80091de <_dtoa_r+0x186>
 80091ca:	4650      	mov	r0, sl
 80091cc:	f7f7 f9aa 	bl	8000524 <__aeabi_i2d>
 80091d0:	4632      	mov	r2, r6
 80091d2:	463b      	mov	r3, r7
 80091d4:	f7f7 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d8:	b908      	cbnz	r0, 80091de <_dtoa_r+0x186>
 80091da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091de:	f1ba 0f16 	cmp.w	sl, #22
 80091e2:	d854      	bhi.n	800928e <_dtoa_r+0x236>
 80091e4:	4b61      	ldr	r3, [pc, #388]	; (800936c <_dtoa_r+0x314>)
 80091e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091f2:	f7f7 fc73 	bl	8000adc <__aeabi_dcmplt>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d04b      	beq.n	8009292 <_dtoa_r+0x23a>
 80091fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091fe:	2300      	movs	r3, #0
 8009200:	930e      	str	r3, [sp, #56]	; 0x38
 8009202:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009204:	1b5d      	subs	r5, r3, r5
 8009206:	1e6b      	subs	r3, r5, #1
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	bf43      	ittte	mi
 800920c:	2300      	movmi	r3, #0
 800920e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009212:	9304      	strmi	r3, [sp, #16]
 8009214:	f04f 0800 	movpl.w	r8, #0
 8009218:	f1ba 0f00 	cmp.w	sl, #0
 800921c:	db3b      	blt.n	8009296 <_dtoa_r+0x23e>
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009224:	4453      	add	r3, sl
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	2300      	movs	r3, #0
 800922a:	9306      	str	r3, [sp, #24]
 800922c:	9b05      	ldr	r3, [sp, #20]
 800922e:	2b09      	cmp	r3, #9
 8009230:	d869      	bhi.n	8009306 <_dtoa_r+0x2ae>
 8009232:	2b05      	cmp	r3, #5
 8009234:	bfc4      	itt	gt
 8009236:	3b04      	subgt	r3, #4
 8009238:	9305      	strgt	r3, [sp, #20]
 800923a:	9b05      	ldr	r3, [sp, #20]
 800923c:	f1a3 0302 	sub.w	r3, r3, #2
 8009240:	bfcc      	ite	gt
 8009242:	2500      	movgt	r5, #0
 8009244:	2501      	movle	r5, #1
 8009246:	2b03      	cmp	r3, #3
 8009248:	d869      	bhi.n	800931e <_dtoa_r+0x2c6>
 800924a:	e8df f003 	tbb	[pc, r3]
 800924e:	4e2c      	.short	0x4e2c
 8009250:	5a4c      	.short	0x5a4c
 8009252:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009256:	441d      	add	r5, r3
 8009258:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800925c:	2b20      	cmp	r3, #32
 800925e:	bfc1      	itttt	gt
 8009260:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009264:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009268:	fa09 f303 	lslgt.w	r3, r9, r3
 800926c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009270:	bfda      	itte	le
 8009272:	f1c3 0320 	rsble	r3, r3, #32
 8009276:	fa06 f003 	lslle.w	r0, r6, r3
 800927a:	4318      	orrgt	r0, r3
 800927c:	f7f7 f942 	bl	8000504 <__aeabi_ui2d>
 8009280:	2301      	movs	r3, #1
 8009282:	4606      	mov	r6, r0
 8009284:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009288:	3d01      	subs	r5, #1
 800928a:	9310      	str	r3, [sp, #64]	; 0x40
 800928c:	e771      	b.n	8009172 <_dtoa_r+0x11a>
 800928e:	2301      	movs	r3, #1
 8009290:	e7b6      	b.n	8009200 <_dtoa_r+0x1a8>
 8009292:	900e      	str	r0, [sp, #56]	; 0x38
 8009294:	e7b5      	b.n	8009202 <_dtoa_r+0x1aa>
 8009296:	f1ca 0300 	rsb	r3, sl, #0
 800929a:	9306      	str	r3, [sp, #24]
 800929c:	2300      	movs	r3, #0
 800929e:	eba8 080a 	sub.w	r8, r8, sl
 80092a2:	930d      	str	r3, [sp, #52]	; 0x34
 80092a4:	e7c2      	b.n	800922c <_dtoa_r+0x1d4>
 80092a6:	2300      	movs	r3, #0
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	dc39      	bgt.n	8009324 <_dtoa_r+0x2cc>
 80092b0:	f04f 0901 	mov.w	r9, #1
 80092b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80092b8:	464b      	mov	r3, r9
 80092ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80092be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092c0:	2200      	movs	r2, #0
 80092c2:	6042      	str	r2, [r0, #4]
 80092c4:	2204      	movs	r2, #4
 80092c6:	f102 0614 	add.w	r6, r2, #20
 80092ca:	429e      	cmp	r6, r3
 80092cc:	6841      	ldr	r1, [r0, #4]
 80092ce:	d92f      	bls.n	8009330 <_dtoa_r+0x2d8>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 fdb3 	bl	8009e3c <_Balloc>
 80092d6:	9000      	str	r0, [sp, #0]
 80092d8:	2800      	cmp	r0, #0
 80092da:	d14b      	bne.n	8009374 <_dtoa_r+0x31c>
 80092dc:	4b24      	ldr	r3, [pc, #144]	; (8009370 <_dtoa_r+0x318>)
 80092de:	4602      	mov	r2, r0
 80092e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092e4:	e6d1      	b.n	800908a <_dtoa_r+0x32>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e7de      	b.n	80092a8 <_dtoa_r+0x250>
 80092ea:	2300      	movs	r3, #0
 80092ec:	9308      	str	r3, [sp, #32]
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	eb0a 0903 	add.w	r9, sl, r3
 80092f4:	f109 0301 	add.w	r3, r9, #1
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	bfb8      	it	lt
 80092fe:	2301      	movlt	r3, #1
 8009300:	e7dd      	b.n	80092be <_dtoa_r+0x266>
 8009302:	2301      	movs	r3, #1
 8009304:	e7f2      	b.n	80092ec <_dtoa_r+0x294>
 8009306:	2501      	movs	r5, #1
 8009308:	2300      	movs	r3, #0
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	9508      	str	r5, [sp, #32]
 800930e:	f04f 39ff 	mov.w	r9, #4294967295
 8009312:	2200      	movs	r2, #0
 8009314:	f8cd 9004 	str.w	r9, [sp, #4]
 8009318:	2312      	movs	r3, #18
 800931a:	9209      	str	r2, [sp, #36]	; 0x24
 800931c:	e7cf      	b.n	80092be <_dtoa_r+0x266>
 800931e:	2301      	movs	r3, #1
 8009320:	9308      	str	r3, [sp, #32]
 8009322:	e7f4      	b.n	800930e <_dtoa_r+0x2b6>
 8009324:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009328:	f8cd 9004 	str.w	r9, [sp, #4]
 800932c:	464b      	mov	r3, r9
 800932e:	e7c6      	b.n	80092be <_dtoa_r+0x266>
 8009330:	3101      	adds	r1, #1
 8009332:	6041      	str	r1, [r0, #4]
 8009334:	0052      	lsls	r2, r2, #1
 8009336:	e7c6      	b.n	80092c6 <_dtoa_r+0x26e>
 8009338:	636f4361 	.word	0x636f4361
 800933c:	3fd287a7 	.word	0x3fd287a7
 8009340:	8b60c8b3 	.word	0x8b60c8b3
 8009344:	3fc68a28 	.word	0x3fc68a28
 8009348:	509f79fb 	.word	0x509f79fb
 800934c:	3fd34413 	.word	0x3fd34413
 8009350:	0800b17d 	.word	0x0800b17d
 8009354:	0800b194 	.word	0x0800b194
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	0800b179 	.word	0x0800b179
 8009360:	0800b170 	.word	0x0800b170
 8009364:	0800b14d 	.word	0x0800b14d
 8009368:	3ff80000 	.word	0x3ff80000
 800936c:	0800b2f0 	.word	0x0800b2f0
 8009370:	0800b1f3 	.word	0x0800b1f3
 8009374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009376:	9a00      	ldr	r2, [sp, #0]
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	2b0e      	cmp	r3, #14
 800937e:	f200 80ad 	bhi.w	80094dc <_dtoa_r+0x484>
 8009382:	2d00      	cmp	r5, #0
 8009384:	f000 80aa 	beq.w	80094dc <_dtoa_r+0x484>
 8009388:	f1ba 0f00 	cmp.w	sl, #0
 800938c:	dd36      	ble.n	80093fc <_dtoa_r+0x3a4>
 800938e:	4ac3      	ldr	r2, [pc, #780]	; (800969c <_dtoa_r+0x644>)
 8009390:	f00a 030f 	and.w	r3, sl, #15
 8009394:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009398:	ed93 7b00 	vldr	d7, [r3]
 800939c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80093a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80093a4:	eeb0 8a47 	vmov.f32	s16, s14
 80093a8:	eef0 8a67 	vmov.f32	s17, s15
 80093ac:	d016      	beq.n	80093dc <_dtoa_r+0x384>
 80093ae:	4bbc      	ldr	r3, [pc, #752]	; (80096a0 <_dtoa_r+0x648>)
 80093b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093b8:	f7f7 fa48 	bl	800084c <__aeabi_ddiv>
 80093bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093c0:	f007 070f 	and.w	r7, r7, #15
 80093c4:	2503      	movs	r5, #3
 80093c6:	4eb6      	ldr	r6, [pc, #728]	; (80096a0 <_dtoa_r+0x648>)
 80093c8:	b957      	cbnz	r7, 80093e0 <_dtoa_r+0x388>
 80093ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ce:	ec53 2b18 	vmov	r2, r3, d8
 80093d2:	f7f7 fa3b 	bl	800084c <__aeabi_ddiv>
 80093d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093da:	e029      	b.n	8009430 <_dtoa_r+0x3d8>
 80093dc:	2502      	movs	r5, #2
 80093de:	e7f2      	b.n	80093c6 <_dtoa_r+0x36e>
 80093e0:	07f9      	lsls	r1, r7, #31
 80093e2:	d508      	bpl.n	80093f6 <_dtoa_r+0x39e>
 80093e4:	ec51 0b18 	vmov	r0, r1, d8
 80093e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093ec:	f7f7 f904 	bl	80005f8 <__aeabi_dmul>
 80093f0:	ec41 0b18 	vmov	d8, r0, r1
 80093f4:	3501      	adds	r5, #1
 80093f6:	107f      	asrs	r7, r7, #1
 80093f8:	3608      	adds	r6, #8
 80093fa:	e7e5      	b.n	80093c8 <_dtoa_r+0x370>
 80093fc:	f000 80a6 	beq.w	800954c <_dtoa_r+0x4f4>
 8009400:	f1ca 0600 	rsb	r6, sl, #0
 8009404:	4ba5      	ldr	r3, [pc, #660]	; (800969c <_dtoa_r+0x644>)
 8009406:	4fa6      	ldr	r7, [pc, #664]	; (80096a0 <_dtoa_r+0x648>)
 8009408:	f006 020f 	and.w	r2, r6, #15
 800940c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009418:	f7f7 f8ee 	bl	80005f8 <__aeabi_dmul>
 800941c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009420:	1136      	asrs	r6, r6, #4
 8009422:	2300      	movs	r3, #0
 8009424:	2502      	movs	r5, #2
 8009426:	2e00      	cmp	r6, #0
 8009428:	f040 8085 	bne.w	8009536 <_dtoa_r+0x4de>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1d2      	bne.n	80093d6 <_dtoa_r+0x37e>
 8009430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 808c 	beq.w	8009550 <_dtoa_r+0x4f8>
 8009438:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800943c:	4b99      	ldr	r3, [pc, #612]	; (80096a4 <_dtoa_r+0x64c>)
 800943e:	2200      	movs	r2, #0
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	f7f7 fb4a 	bl	8000adc <__aeabi_dcmplt>
 8009448:	2800      	cmp	r0, #0
 800944a:	f000 8081 	beq.w	8009550 <_dtoa_r+0x4f8>
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d07d      	beq.n	8009550 <_dtoa_r+0x4f8>
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	dd3c      	ble.n	80094d4 <_dtoa_r+0x47c>
 800945a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	2200      	movs	r2, #0
 8009462:	4b91      	ldr	r3, [pc, #580]	; (80096a8 <_dtoa_r+0x650>)
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f7f7 f8c6 	bl	80005f8 <__aeabi_dmul>
 800946c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009470:	3501      	adds	r5, #1
 8009472:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009476:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800947a:	4628      	mov	r0, r5
 800947c:	f7f7 f852 	bl	8000524 <__aeabi_i2d>
 8009480:	4632      	mov	r2, r6
 8009482:	463b      	mov	r3, r7
 8009484:	f7f7 f8b8 	bl	80005f8 <__aeabi_dmul>
 8009488:	4b88      	ldr	r3, [pc, #544]	; (80096ac <_dtoa_r+0x654>)
 800948a:	2200      	movs	r2, #0
 800948c:	f7f6 fefe 	bl	800028c <__adddf3>
 8009490:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800949c:	2b00      	cmp	r3, #0
 800949e:	d15c      	bne.n	800955a <_dtoa_r+0x502>
 80094a0:	4b83      	ldr	r3, [pc, #524]	; (80096b0 <_dtoa_r+0x658>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f6 feee 	bl	8000288 <__aeabi_dsub>
 80094ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094b0:	4606      	mov	r6, r0
 80094b2:	460f      	mov	r7, r1
 80094b4:	f7f7 fb30 	bl	8000b18 <__aeabi_dcmpgt>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	f040 8296 	bne.w	80099ea <_dtoa_r+0x992>
 80094be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80094c2:	4630      	mov	r0, r6
 80094c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f7 fb07 	bl	8000adc <__aeabi_dcmplt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f040 8288 	bne.w	80099e4 <_dtoa_r+0x98c>
 80094d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f2c0 8158 	blt.w	8009794 <_dtoa_r+0x73c>
 80094e4:	f1ba 0f0e 	cmp.w	sl, #14
 80094e8:	f300 8154 	bgt.w	8009794 <_dtoa_r+0x73c>
 80094ec:	4b6b      	ldr	r3, [pc, #428]	; (800969c <_dtoa_r+0x644>)
 80094ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f280 80e3 	bge.w	80096c4 <_dtoa_r+0x66c>
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f300 80df 	bgt.w	80096c4 <_dtoa_r+0x66c>
 8009506:	f040 826d 	bne.w	80099e4 <_dtoa_r+0x98c>
 800950a:	4b69      	ldr	r3, [pc, #420]	; (80096b0 <_dtoa_r+0x658>)
 800950c:	2200      	movs	r2, #0
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f7 f871 	bl	80005f8 <__aeabi_dmul>
 8009516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800951a:	f7f7 faf3 	bl	8000b04 <__aeabi_dcmpge>
 800951e:	9e01      	ldr	r6, [sp, #4]
 8009520:	4637      	mov	r7, r6
 8009522:	2800      	cmp	r0, #0
 8009524:	f040 8243 	bne.w	80099ae <_dtoa_r+0x956>
 8009528:	9d00      	ldr	r5, [sp, #0]
 800952a:	2331      	movs	r3, #49	; 0x31
 800952c:	f805 3b01 	strb.w	r3, [r5], #1
 8009530:	f10a 0a01 	add.w	sl, sl, #1
 8009534:	e23f      	b.n	80099b6 <_dtoa_r+0x95e>
 8009536:	07f2      	lsls	r2, r6, #31
 8009538:	d505      	bpl.n	8009546 <_dtoa_r+0x4ee>
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	3501      	adds	r5, #1
 8009544:	2301      	movs	r3, #1
 8009546:	1076      	asrs	r6, r6, #1
 8009548:	3708      	adds	r7, #8
 800954a:	e76c      	b.n	8009426 <_dtoa_r+0x3ce>
 800954c:	2502      	movs	r5, #2
 800954e:	e76f      	b.n	8009430 <_dtoa_r+0x3d8>
 8009550:	9b01      	ldr	r3, [sp, #4]
 8009552:	f8cd a01c 	str.w	sl, [sp, #28]
 8009556:	930c      	str	r3, [sp, #48]	; 0x30
 8009558:	e78d      	b.n	8009476 <_dtoa_r+0x41e>
 800955a:	9900      	ldr	r1, [sp, #0]
 800955c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800955e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009560:	4b4e      	ldr	r3, [pc, #312]	; (800969c <_dtoa_r+0x644>)
 8009562:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009566:	4401      	add	r1, r0
 8009568:	9102      	str	r1, [sp, #8]
 800956a:	9908      	ldr	r1, [sp, #32]
 800956c:	eeb0 8a47 	vmov.f32	s16, s14
 8009570:	eef0 8a67 	vmov.f32	s17, s15
 8009574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009578:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800957c:	2900      	cmp	r1, #0
 800957e:	d045      	beq.n	800960c <_dtoa_r+0x5b4>
 8009580:	494c      	ldr	r1, [pc, #304]	; (80096b4 <_dtoa_r+0x65c>)
 8009582:	2000      	movs	r0, #0
 8009584:	f7f7 f962 	bl	800084c <__aeabi_ddiv>
 8009588:	ec53 2b18 	vmov	r2, r3, d8
 800958c:	f7f6 fe7c 	bl	8000288 <__aeabi_dsub>
 8009590:	9d00      	ldr	r5, [sp, #0]
 8009592:	ec41 0b18 	vmov	d8, r0, r1
 8009596:	4639      	mov	r1, r7
 8009598:	4630      	mov	r0, r6
 800959a:	f7f7 fadd 	bl	8000b58 <__aeabi_d2iz>
 800959e:	900c      	str	r0, [sp, #48]	; 0x30
 80095a0:	f7f6 ffc0 	bl	8000524 <__aeabi_i2d>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f7f6 fe6c 	bl	8000288 <__aeabi_dsub>
 80095b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b2:	3330      	adds	r3, #48	; 0x30
 80095b4:	f805 3b01 	strb.w	r3, [r5], #1
 80095b8:	ec53 2b18 	vmov	r2, r3, d8
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	f7f7 fa8c 	bl	8000adc <__aeabi_dcmplt>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d165      	bne.n	8009694 <_dtoa_r+0x63c>
 80095c8:	4632      	mov	r2, r6
 80095ca:	463b      	mov	r3, r7
 80095cc:	4935      	ldr	r1, [pc, #212]	; (80096a4 <_dtoa_r+0x64c>)
 80095ce:	2000      	movs	r0, #0
 80095d0:	f7f6 fe5a 	bl	8000288 <__aeabi_dsub>
 80095d4:	ec53 2b18 	vmov	r2, r3, d8
 80095d8:	f7f7 fa80 	bl	8000adc <__aeabi_dcmplt>
 80095dc:	2800      	cmp	r0, #0
 80095de:	f040 80b9 	bne.w	8009754 <_dtoa_r+0x6fc>
 80095e2:	9b02      	ldr	r3, [sp, #8]
 80095e4:	429d      	cmp	r5, r3
 80095e6:	f43f af75 	beq.w	80094d4 <_dtoa_r+0x47c>
 80095ea:	4b2f      	ldr	r3, [pc, #188]	; (80096a8 <_dtoa_r+0x650>)
 80095ec:	ec51 0b18 	vmov	r0, r1, d8
 80095f0:	2200      	movs	r2, #0
 80095f2:	f7f7 f801 	bl	80005f8 <__aeabi_dmul>
 80095f6:	4b2c      	ldr	r3, [pc, #176]	; (80096a8 <_dtoa_r+0x650>)
 80095f8:	ec41 0b18 	vmov	d8, r0, r1
 80095fc:	2200      	movs	r2, #0
 80095fe:	4630      	mov	r0, r6
 8009600:	4639      	mov	r1, r7
 8009602:	f7f6 fff9 	bl	80005f8 <__aeabi_dmul>
 8009606:	4606      	mov	r6, r0
 8009608:	460f      	mov	r7, r1
 800960a:	e7c4      	b.n	8009596 <_dtoa_r+0x53e>
 800960c:	ec51 0b17 	vmov	r0, r1, d7
 8009610:	f7f6 fff2 	bl	80005f8 <__aeabi_dmul>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	9d00      	ldr	r5, [sp, #0]
 8009618:	930c      	str	r3, [sp, #48]	; 0x30
 800961a:	ec41 0b18 	vmov	d8, r0, r1
 800961e:	4639      	mov	r1, r7
 8009620:	4630      	mov	r0, r6
 8009622:	f7f7 fa99 	bl	8000b58 <__aeabi_d2iz>
 8009626:	9011      	str	r0, [sp, #68]	; 0x44
 8009628:	f7f6 ff7c 	bl	8000524 <__aeabi_i2d>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f6 fe28 	bl	8000288 <__aeabi_dsub>
 8009638:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800963a:	3330      	adds	r3, #48	; 0x30
 800963c:	f805 3b01 	strb.w	r3, [r5], #1
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	429d      	cmp	r5, r3
 8009644:	4606      	mov	r6, r0
 8009646:	460f      	mov	r7, r1
 8009648:	f04f 0200 	mov.w	r2, #0
 800964c:	d134      	bne.n	80096b8 <_dtoa_r+0x660>
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <_dtoa_r+0x65c>)
 8009650:	ec51 0b18 	vmov	r0, r1, d8
 8009654:	f7f6 fe1a 	bl	800028c <__adddf3>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f7 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8009664:	2800      	cmp	r0, #0
 8009666:	d175      	bne.n	8009754 <_dtoa_r+0x6fc>
 8009668:	ec53 2b18 	vmov	r2, r3, d8
 800966c:	4911      	ldr	r1, [pc, #68]	; (80096b4 <_dtoa_r+0x65c>)
 800966e:	2000      	movs	r0, #0
 8009670:	f7f6 fe0a 	bl	8000288 <__aeabi_dsub>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	f43f af27 	beq.w	80094d4 <_dtoa_r+0x47c>
 8009686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009688:	1e6b      	subs	r3, r5, #1
 800968a:	930c      	str	r3, [sp, #48]	; 0x30
 800968c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009690:	2b30      	cmp	r3, #48	; 0x30
 8009692:	d0f8      	beq.n	8009686 <_dtoa_r+0x62e>
 8009694:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009698:	e04a      	b.n	8009730 <_dtoa_r+0x6d8>
 800969a:	bf00      	nop
 800969c:	0800b2f0 	.word	0x0800b2f0
 80096a0:	0800b2c8 	.word	0x0800b2c8
 80096a4:	3ff00000 	.word	0x3ff00000
 80096a8:	40240000 	.word	0x40240000
 80096ac:	401c0000 	.word	0x401c0000
 80096b0:	40140000 	.word	0x40140000
 80096b4:	3fe00000 	.word	0x3fe00000
 80096b8:	4baf      	ldr	r3, [pc, #700]	; (8009978 <_dtoa_r+0x920>)
 80096ba:	f7f6 ff9d 	bl	80005f8 <__aeabi_dmul>
 80096be:	4606      	mov	r6, r0
 80096c0:	460f      	mov	r7, r1
 80096c2:	e7ac      	b.n	800961e <_dtoa_r+0x5c6>
 80096c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096c8:	9d00      	ldr	r5, [sp, #0]
 80096ca:	4642      	mov	r2, r8
 80096cc:	464b      	mov	r3, r9
 80096ce:	4630      	mov	r0, r6
 80096d0:	4639      	mov	r1, r7
 80096d2:	f7f7 f8bb 	bl	800084c <__aeabi_ddiv>
 80096d6:	f7f7 fa3f 	bl	8000b58 <__aeabi_d2iz>
 80096da:	9002      	str	r0, [sp, #8]
 80096dc:	f7f6 ff22 	bl	8000524 <__aeabi_i2d>
 80096e0:	4642      	mov	r2, r8
 80096e2:	464b      	mov	r3, r9
 80096e4:	f7f6 ff88 	bl	80005f8 <__aeabi_dmul>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f6 fdca 	bl	8000288 <__aeabi_dsub>
 80096f4:	9e02      	ldr	r6, [sp, #8]
 80096f6:	9f01      	ldr	r7, [sp, #4]
 80096f8:	3630      	adds	r6, #48	; 0x30
 80096fa:	f805 6b01 	strb.w	r6, [r5], #1
 80096fe:	9e00      	ldr	r6, [sp, #0]
 8009700:	1bae      	subs	r6, r5, r6
 8009702:	42b7      	cmp	r7, r6
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	d137      	bne.n	800977a <_dtoa_r+0x722>
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4642      	mov	r2, r8
 8009710:	464b      	mov	r3, r9
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	f7f7 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800971a:	b9c8      	cbnz	r0, 8009750 <_dtoa_r+0x6f8>
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f7 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009728:	b110      	cbz	r0, 8009730 <_dtoa_r+0x6d8>
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	07d9      	lsls	r1, r3, #31
 800972e:	d40f      	bmi.n	8009750 <_dtoa_r+0x6f8>
 8009730:	4620      	mov	r0, r4
 8009732:	4659      	mov	r1, fp
 8009734:	f000 fbc2 	bl	8009ebc <_Bfree>
 8009738:	2300      	movs	r3, #0
 800973a:	702b      	strb	r3, [r5, #0]
 800973c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800973e:	f10a 0001 	add.w	r0, sl, #1
 8009742:	6018      	str	r0, [r3, #0]
 8009744:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009746:	2b00      	cmp	r3, #0
 8009748:	f43f acd8 	beq.w	80090fc <_dtoa_r+0xa4>
 800974c:	601d      	str	r5, [r3, #0]
 800974e:	e4d5      	b.n	80090fc <_dtoa_r+0xa4>
 8009750:	f8cd a01c 	str.w	sl, [sp, #28]
 8009754:	462b      	mov	r3, r5
 8009756:	461d      	mov	r5, r3
 8009758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800975c:	2a39      	cmp	r2, #57	; 0x39
 800975e:	d108      	bne.n	8009772 <_dtoa_r+0x71a>
 8009760:	9a00      	ldr	r2, [sp, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d1f7      	bne.n	8009756 <_dtoa_r+0x6fe>
 8009766:	9a07      	ldr	r2, [sp, #28]
 8009768:	9900      	ldr	r1, [sp, #0]
 800976a:	3201      	adds	r2, #1
 800976c:	9207      	str	r2, [sp, #28]
 800976e:	2230      	movs	r2, #48	; 0x30
 8009770:	700a      	strb	r2, [r1, #0]
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	3201      	adds	r2, #1
 8009776:	701a      	strb	r2, [r3, #0]
 8009778:	e78c      	b.n	8009694 <_dtoa_r+0x63c>
 800977a:	4b7f      	ldr	r3, [pc, #508]	; (8009978 <_dtoa_r+0x920>)
 800977c:	2200      	movs	r2, #0
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	2200      	movs	r2, #0
 8009784:	2300      	movs	r3, #0
 8009786:	4606      	mov	r6, r0
 8009788:	460f      	mov	r7, r1
 800978a:	f7f7 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800978e:	2800      	cmp	r0, #0
 8009790:	d09b      	beq.n	80096ca <_dtoa_r+0x672>
 8009792:	e7cd      	b.n	8009730 <_dtoa_r+0x6d8>
 8009794:	9a08      	ldr	r2, [sp, #32]
 8009796:	2a00      	cmp	r2, #0
 8009798:	f000 80c4 	beq.w	8009924 <_dtoa_r+0x8cc>
 800979c:	9a05      	ldr	r2, [sp, #20]
 800979e:	2a01      	cmp	r2, #1
 80097a0:	f300 80a8 	bgt.w	80098f4 <_dtoa_r+0x89c>
 80097a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	f000 80a0 	beq.w	80098ec <_dtoa_r+0x894>
 80097ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097b0:	9e06      	ldr	r6, [sp, #24]
 80097b2:	4645      	mov	r5, r8
 80097b4:	9a04      	ldr	r2, [sp, #16]
 80097b6:	2101      	movs	r1, #1
 80097b8:	441a      	add	r2, r3
 80097ba:	4620      	mov	r0, r4
 80097bc:	4498      	add	r8, r3
 80097be:	9204      	str	r2, [sp, #16]
 80097c0:	f000 fc38 	bl	800a034 <__i2b>
 80097c4:	4607      	mov	r7, r0
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	dd0b      	ble.n	80097e2 <_dtoa_r+0x78a>
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dd08      	ble.n	80097e2 <_dtoa_r+0x78a>
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	bfa8      	it	ge
 80097d6:	462b      	movge	r3, r5
 80097d8:	eba8 0803 	sub.w	r8, r8, r3
 80097dc:	1aed      	subs	r5, r5, r3
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	9b06      	ldr	r3, [sp, #24]
 80097e4:	b1fb      	cbz	r3, 8009826 <_dtoa_r+0x7ce>
 80097e6:	9b08      	ldr	r3, [sp, #32]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 809f 	beq.w	800992c <_dtoa_r+0x8d4>
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	dd11      	ble.n	8009816 <_dtoa_r+0x7be>
 80097f2:	4639      	mov	r1, r7
 80097f4:	4632      	mov	r2, r6
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 fcd8 	bl	800a1ac <__pow5mult>
 80097fc:	465a      	mov	r2, fp
 80097fe:	4601      	mov	r1, r0
 8009800:	4607      	mov	r7, r0
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fc2c 	bl	800a060 <__multiply>
 8009808:	4659      	mov	r1, fp
 800980a:	9007      	str	r0, [sp, #28]
 800980c:	4620      	mov	r0, r4
 800980e:	f000 fb55 	bl	8009ebc <_Bfree>
 8009812:	9b07      	ldr	r3, [sp, #28]
 8009814:	469b      	mov	fp, r3
 8009816:	9b06      	ldr	r3, [sp, #24]
 8009818:	1b9a      	subs	r2, r3, r6
 800981a:	d004      	beq.n	8009826 <_dtoa_r+0x7ce>
 800981c:	4659      	mov	r1, fp
 800981e:	4620      	mov	r0, r4
 8009820:	f000 fcc4 	bl	800a1ac <__pow5mult>
 8009824:	4683      	mov	fp, r0
 8009826:	2101      	movs	r1, #1
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fc03 	bl	800a034 <__i2b>
 800982e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009830:	2b00      	cmp	r3, #0
 8009832:	4606      	mov	r6, r0
 8009834:	dd7c      	ble.n	8009930 <_dtoa_r+0x8d8>
 8009836:	461a      	mov	r2, r3
 8009838:	4601      	mov	r1, r0
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fcb6 	bl	800a1ac <__pow5mult>
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	2b01      	cmp	r3, #1
 8009844:	4606      	mov	r6, r0
 8009846:	dd76      	ble.n	8009936 <_dtoa_r+0x8de>
 8009848:	2300      	movs	r3, #0
 800984a:	9306      	str	r3, [sp, #24]
 800984c:	6933      	ldr	r3, [r6, #16]
 800984e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009852:	6918      	ldr	r0, [r3, #16]
 8009854:	f000 fb9e 	bl	8009f94 <__hi0bits>
 8009858:	f1c0 0020 	rsb	r0, r0, #32
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	4418      	add	r0, r3
 8009860:	f010 001f 	ands.w	r0, r0, #31
 8009864:	f000 8086 	beq.w	8009974 <_dtoa_r+0x91c>
 8009868:	f1c0 0320 	rsb	r3, r0, #32
 800986c:	2b04      	cmp	r3, #4
 800986e:	dd7f      	ble.n	8009970 <_dtoa_r+0x918>
 8009870:	f1c0 001c 	rsb	r0, r0, #28
 8009874:	9b04      	ldr	r3, [sp, #16]
 8009876:	4403      	add	r3, r0
 8009878:	4480      	add	r8, r0
 800987a:	4405      	add	r5, r0
 800987c:	9304      	str	r3, [sp, #16]
 800987e:	f1b8 0f00 	cmp.w	r8, #0
 8009882:	dd05      	ble.n	8009890 <_dtoa_r+0x838>
 8009884:	4659      	mov	r1, fp
 8009886:	4642      	mov	r2, r8
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fce9 	bl	800a260 <__lshift>
 800988e:	4683      	mov	fp, r0
 8009890:	9b04      	ldr	r3, [sp, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	dd05      	ble.n	80098a2 <_dtoa_r+0x84a>
 8009896:	4631      	mov	r1, r6
 8009898:	461a      	mov	r2, r3
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fce0 	bl	800a260 <__lshift>
 80098a0:	4606      	mov	r6, r0
 80098a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d069      	beq.n	800997c <_dtoa_r+0x924>
 80098a8:	4631      	mov	r1, r6
 80098aa:	4658      	mov	r0, fp
 80098ac:	f000 fd44 	bl	800a338 <__mcmp>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	da63      	bge.n	800997c <_dtoa_r+0x924>
 80098b4:	2300      	movs	r3, #0
 80098b6:	4659      	mov	r1, fp
 80098b8:	220a      	movs	r2, #10
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 fb20 	bl	8009f00 <__multadd>
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098c6:	4683      	mov	fp, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 818f 	beq.w	8009bec <_dtoa_r+0xb94>
 80098ce:	4639      	mov	r1, r7
 80098d0:	2300      	movs	r3, #0
 80098d2:	220a      	movs	r2, #10
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 fb13 	bl	8009f00 <__multadd>
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	4607      	mov	r7, r0
 80098e0:	f300 808e 	bgt.w	8009a00 <_dtoa_r+0x9a8>
 80098e4:	9b05      	ldr	r3, [sp, #20]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	dc50      	bgt.n	800998c <_dtoa_r+0x934>
 80098ea:	e089      	b.n	8009a00 <_dtoa_r+0x9a8>
 80098ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098f2:	e75d      	b.n	80097b0 <_dtoa_r+0x758>
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	1e5e      	subs	r6, r3, #1
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	42b3      	cmp	r3, r6
 80098fc:	bfbf      	itttt	lt
 80098fe:	9b06      	ldrlt	r3, [sp, #24]
 8009900:	9606      	strlt	r6, [sp, #24]
 8009902:	1af2      	sublt	r2, r6, r3
 8009904:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009906:	bfb6      	itet	lt
 8009908:	189b      	addlt	r3, r3, r2
 800990a:	1b9e      	subge	r6, r3, r6
 800990c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	bfb8      	it	lt
 8009912:	2600      	movlt	r6, #0
 8009914:	2b00      	cmp	r3, #0
 8009916:	bfb5      	itete	lt
 8009918:	eba8 0503 	sublt.w	r5, r8, r3
 800991c:	9b01      	ldrge	r3, [sp, #4]
 800991e:	2300      	movlt	r3, #0
 8009920:	4645      	movge	r5, r8
 8009922:	e747      	b.n	80097b4 <_dtoa_r+0x75c>
 8009924:	9e06      	ldr	r6, [sp, #24]
 8009926:	9f08      	ldr	r7, [sp, #32]
 8009928:	4645      	mov	r5, r8
 800992a:	e74c      	b.n	80097c6 <_dtoa_r+0x76e>
 800992c:	9a06      	ldr	r2, [sp, #24]
 800992e:	e775      	b.n	800981c <_dtoa_r+0x7c4>
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	2b01      	cmp	r3, #1
 8009934:	dc18      	bgt.n	8009968 <_dtoa_r+0x910>
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	b9b3      	cbnz	r3, 8009968 <_dtoa_r+0x910>
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009940:	b9a3      	cbnz	r3, 800996c <_dtoa_r+0x914>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009948:	0d1b      	lsrs	r3, r3, #20
 800994a:	051b      	lsls	r3, r3, #20
 800994c:	b12b      	cbz	r3, 800995a <_dtoa_r+0x902>
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	3301      	adds	r3, #1
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	f108 0801 	add.w	r8, r8, #1
 8009958:	2301      	movs	r3, #1
 800995a:	9306      	str	r3, [sp, #24]
 800995c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800995e:	2b00      	cmp	r3, #0
 8009960:	f47f af74 	bne.w	800984c <_dtoa_r+0x7f4>
 8009964:	2001      	movs	r0, #1
 8009966:	e779      	b.n	800985c <_dtoa_r+0x804>
 8009968:	2300      	movs	r3, #0
 800996a:	e7f6      	b.n	800995a <_dtoa_r+0x902>
 800996c:	9b02      	ldr	r3, [sp, #8]
 800996e:	e7f4      	b.n	800995a <_dtoa_r+0x902>
 8009970:	d085      	beq.n	800987e <_dtoa_r+0x826>
 8009972:	4618      	mov	r0, r3
 8009974:	301c      	adds	r0, #28
 8009976:	e77d      	b.n	8009874 <_dtoa_r+0x81c>
 8009978:	40240000 	.word	0x40240000
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	dc38      	bgt.n	80099f4 <_dtoa_r+0x99c>
 8009982:	9b05      	ldr	r3, [sp, #20]
 8009984:	2b02      	cmp	r3, #2
 8009986:	dd35      	ble.n	80099f4 <_dtoa_r+0x99c>
 8009988:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800998c:	f1b9 0f00 	cmp.w	r9, #0
 8009990:	d10d      	bne.n	80099ae <_dtoa_r+0x956>
 8009992:	4631      	mov	r1, r6
 8009994:	464b      	mov	r3, r9
 8009996:	2205      	movs	r2, #5
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fab1 	bl	8009f00 <__multadd>
 800999e:	4601      	mov	r1, r0
 80099a0:	4606      	mov	r6, r0
 80099a2:	4658      	mov	r0, fp
 80099a4:	f000 fcc8 	bl	800a338 <__mcmp>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f73f adbd 	bgt.w	8009528 <_dtoa_r+0x4d0>
 80099ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b0:	9d00      	ldr	r5, [sp, #0]
 80099b2:	ea6f 0a03 	mvn.w	sl, r3
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	4631      	mov	r1, r6
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fa7d 	bl	8009ebc <_Bfree>
 80099c2:	2f00      	cmp	r7, #0
 80099c4:	f43f aeb4 	beq.w	8009730 <_dtoa_r+0x6d8>
 80099c8:	f1b8 0f00 	cmp.w	r8, #0
 80099cc:	d005      	beq.n	80099da <_dtoa_r+0x982>
 80099ce:	45b8      	cmp	r8, r7
 80099d0:	d003      	beq.n	80099da <_dtoa_r+0x982>
 80099d2:	4641      	mov	r1, r8
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 fa71 	bl	8009ebc <_Bfree>
 80099da:	4639      	mov	r1, r7
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fa6d 	bl	8009ebc <_Bfree>
 80099e2:	e6a5      	b.n	8009730 <_dtoa_r+0x6d8>
 80099e4:	2600      	movs	r6, #0
 80099e6:	4637      	mov	r7, r6
 80099e8:	e7e1      	b.n	80099ae <_dtoa_r+0x956>
 80099ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80099ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80099f0:	4637      	mov	r7, r6
 80099f2:	e599      	b.n	8009528 <_dtoa_r+0x4d0>
 80099f4:	9b08      	ldr	r3, [sp, #32]
 80099f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 80fd 	beq.w	8009bfa <_dtoa_r+0xba2>
 8009a00:	2d00      	cmp	r5, #0
 8009a02:	dd05      	ble.n	8009a10 <_dtoa_r+0x9b8>
 8009a04:	4639      	mov	r1, r7
 8009a06:	462a      	mov	r2, r5
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fc29 	bl	800a260 <__lshift>
 8009a0e:	4607      	mov	r7, r0
 8009a10:	9b06      	ldr	r3, [sp, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d05c      	beq.n	8009ad0 <_dtoa_r+0xa78>
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fa0f 	bl	8009e3c <_Balloc>
 8009a1e:	4605      	mov	r5, r0
 8009a20:	b928      	cbnz	r0, 8009a2e <_dtoa_r+0x9d6>
 8009a22:	4b80      	ldr	r3, [pc, #512]	; (8009c24 <_dtoa_r+0xbcc>)
 8009a24:	4602      	mov	r2, r0
 8009a26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a2a:	f7ff bb2e 	b.w	800908a <_dtoa_r+0x32>
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	3202      	adds	r2, #2
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	f107 010c 	add.w	r1, r7, #12
 8009a38:	300c      	adds	r0, #12
 8009a3a:	f7fe fde9 	bl	8008610 <memcpy>
 8009a3e:	2201      	movs	r2, #1
 8009a40:	4629      	mov	r1, r5
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 fc0c 	bl	800a260 <__lshift>
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	9b00      	ldr	r3, [sp, #0]
 8009a50:	444b      	add	r3, r9
 8009a52:	9307      	str	r3, [sp, #28]
 8009a54:	9b02      	ldr	r3, [sp, #8]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	46b8      	mov	r8, r7
 8009a5c:	9306      	str	r3, [sp, #24]
 8009a5e:	4607      	mov	r7, r0
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	4631      	mov	r1, r6
 8009a64:	3b01      	subs	r3, #1
 8009a66:	4658      	mov	r0, fp
 8009a68:	9302      	str	r3, [sp, #8]
 8009a6a:	f7ff fa69 	bl	8008f40 <quorem>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	3330      	adds	r3, #48	; 0x30
 8009a72:	9004      	str	r0, [sp, #16]
 8009a74:	4641      	mov	r1, r8
 8009a76:	4658      	mov	r0, fp
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	f000 fc5d 	bl	800a338 <__mcmp>
 8009a7e:	463a      	mov	r2, r7
 8009a80:	4681      	mov	r9, r0
 8009a82:	4631      	mov	r1, r6
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fc73 	bl	800a370 <__mdiff>
 8009a8a:	68c2      	ldr	r2, [r0, #12]
 8009a8c:	9b08      	ldr	r3, [sp, #32]
 8009a8e:	4605      	mov	r5, r0
 8009a90:	bb02      	cbnz	r2, 8009ad4 <_dtoa_r+0xa7c>
 8009a92:	4601      	mov	r1, r0
 8009a94:	4658      	mov	r0, fp
 8009a96:	f000 fc4f 	bl	800a338 <__mcmp>
 8009a9a:	9b08      	ldr	r3, [sp, #32]
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009aa6:	f000 fa09 	bl	8009ebc <_Bfree>
 8009aaa:	9b05      	ldr	r3, [sp, #20]
 8009aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aae:	9d01      	ldr	r5, [sp, #4]
 8009ab0:	ea43 0102 	orr.w	r1, r3, r2
 8009ab4:	9b06      	ldr	r3, [sp, #24]
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	9b08      	ldr	r3, [sp, #32]
 8009aba:	d10d      	bne.n	8009ad8 <_dtoa_r+0xa80>
 8009abc:	2b39      	cmp	r3, #57	; 0x39
 8009abe:	d029      	beq.n	8009b14 <_dtoa_r+0xabc>
 8009ac0:	f1b9 0f00 	cmp.w	r9, #0
 8009ac4:	dd01      	ble.n	8009aca <_dtoa_r+0xa72>
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	3331      	adds	r3, #49	; 0x31
 8009aca:	9a02      	ldr	r2, [sp, #8]
 8009acc:	7013      	strb	r3, [r2, #0]
 8009ace:	e774      	b.n	80099ba <_dtoa_r+0x962>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	e7b9      	b.n	8009a48 <_dtoa_r+0x9f0>
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	e7e2      	b.n	8009a9e <_dtoa_r+0xa46>
 8009ad8:	f1b9 0f00 	cmp.w	r9, #0
 8009adc:	db06      	blt.n	8009aec <_dtoa_r+0xa94>
 8009ade:	9905      	ldr	r1, [sp, #20]
 8009ae0:	ea41 0909 	orr.w	r9, r1, r9
 8009ae4:	9906      	ldr	r1, [sp, #24]
 8009ae6:	ea59 0101 	orrs.w	r1, r9, r1
 8009aea:	d120      	bne.n	8009b2e <_dtoa_r+0xad6>
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	ddec      	ble.n	8009aca <_dtoa_r+0xa72>
 8009af0:	4659      	mov	r1, fp
 8009af2:	2201      	movs	r2, #1
 8009af4:	4620      	mov	r0, r4
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	f000 fbb2 	bl	800a260 <__lshift>
 8009afc:	4631      	mov	r1, r6
 8009afe:	4683      	mov	fp, r0
 8009b00:	f000 fc1a 	bl	800a338 <__mcmp>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	dc02      	bgt.n	8009b10 <_dtoa_r+0xab8>
 8009b0a:	d1de      	bne.n	8009aca <_dtoa_r+0xa72>
 8009b0c:	07da      	lsls	r2, r3, #31
 8009b0e:	d5dc      	bpl.n	8009aca <_dtoa_r+0xa72>
 8009b10:	2b39      	cmp	r3, #57	; 0x39
 8009b12:	d1d8      	bne.n	8009ac6 <_dtoa_r+0xa6e>
 8009b14:	9a02      	ldr	r2, [sp, #8]
 8009b16:	2339      	movs	r3, #57	; 0x39
 8009b18:	7013      	strb	r3, [r2, #0]
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	461d      	mov	r5, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b24:	2a39      	cmp	r2, #57	; 0x39
 8009b26:	d050      	beq.n	8009bca <_dtoa_r+0xb72>
 8009b28:	3201      	adds	r2, #1
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	e745      	b.n	80099ba <_dtoa_r+0x962>
 8009b2e:	2a00      	cmp	r2, #0
 8009b30:	dd03      	ble.n	8009b3a <_dtoa_r+0xae2>
 8009b32:	2b39      	cmp	r3, #57	; 0x39
 8009b34:	d0ee      	beq.n	8009b14 <_dtoa_r+0xabc>
 8009b36:	3301      	adds	r3, #1
 8009b38:	e7c7      	b.n	8009aca <_dtoa_r+0xa72>
 8009b3a:	9a01      	ldr	r2, [sp, #4]
 8009b3c:	9907      	ldr	r1, [sp, #28]
 8009b3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b42:	428a      	cmp	r2, r1
 8009b44:	d02a      	beq.n	8009b9c <_dtoa_r+0xb44>
 8009b46:	4659      	mov	r1, fp
 8009b48:	2300      	movs	r3, #0
 8009b4a:	220a      	movs	r2, #10
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 f9d7 	bl	8009f00 <__multadd>
 8009b52:	45b8      	cmp	r8, r7
 8009b54:	4683      	mov	fp, r0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	f04f 020a 	mov.w	r2, #10
 8009b5e:	4641      	mov	r1, r8
 8009b60:	4620      	mov	r0, r4
 8009b62:	d107      	bne.n	8009b74 <_dtoa_r+0xb1c>
 8009b64:	f000 f9cc 	bl	8009f00 <__multadd>
 8009b68:	4680      	mov	r8, r0
 8009b6a:	4607      	mov	r7, r0
 8009b6c:	9b01      	ldr	r3, [sp, #4]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	e775      	b.n	8009a60 <_dtoa_r+0xa08>
 8009b74:	f000 f9c4 	bl	8009f00 <__multadd>
 8009b78:	4639      	mov	r1, r7
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	220a      	movs	r2, #10
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 f9bd 	bl	8009f00 <__multadd>
 8009b86:	4607      	mov	r7, r0
 8009b88:	e7f0      	b.n	8009b6c <_dtoa_r+0xb14>
 8009b8a:	f1b9 0f00 	cmp.w	r9, #0
 8009b8e:	9a00      	ldr	r2, [sp, #0]
 8009b90:	bfcc      	ite	gt
 8009b92:	464d      	movgt	r5, r9
 8009b94:	2501      	movle	r5, #1
 8009b96:	4415      	add	r5, r2
 8009b98:	f04f 0800 	mov.w	r8, #0
 8009b9c:	4659      	mov	r1, fp
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	f000 fb5c 	bl	800a260 <__lshift>
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4683      	mov	fp, r0
 8009bac:	f000 fbc4 	bl	800a338 <__mcmp>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	dcb2      	bgt.n	8009b1a <_dtoa_r+0xac2>
 8009bb4:	d102      	bne.n	8009bbc <_dtoa_r+0xb64>
 8009bb6:	9b01      	ldr	r3, [sp, #4]
 8009bb8:	07db      	lsls	r3, r3, #31
 8009bba:	d4ae      	bmi.n	8009b1a <_dtoa_r+0xac2>
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bc4:	2a30      	cmp	r2, #48	; 0x30
 8009bc6:	d0fa      	beq.n	8009bbe <_dtoa_r+0xb66>
 8009bc8:	e6f7      	b.n	80099ba <_dtoa_r+0x962>
 8009bca:	9a00      	ldr	r2, [sp, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d1a5      	bne.n	8009b1c <_dtoa_r+0xac4>
 8009bd0:	f10a 0a01 	add.w	sl, sl, #1
 8009bd4:	2331      	movs	r3, #49	; 0x31
 8009bd6:	e779      	b.n	8009acc <_dtoa_r+0xa74>
 8009bd8:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <_dtoa_r+0xbd0>)
 8009bda:	f7ff baaf 	b.w	800913c <_dtoa_r+0xe4>
 8009bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f47f aa86 	bne.w	80090f2 <_dtoa_r+0x9a>
 8009be6:	4b11      	ldr	r3, [pc, #68]	; (8009c2c <_dtoa_r+0xbd4>)
 8009be8:	f7ff baa8 	b.w	800913c <_dtoa_r+0xe4>
 8009bec:	f1b9 0f00 	cmp.w	r9, #0
 8009bf0:	dc03      	bgt.n	8009bfa <_dtoa_r+0xba2>
 8009bf2:	9b05      	ldr	r3, [sp, #20]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	f73f aec9 	bgt.w	800998c <_dtoa_r+0x934>
 8009bfa:	9d00      	ldr	r5, [sp, #0]
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4658      	mov	r0, fp
 8009c00:	f7ff f99e 	bl	8008f40 <quorem>
 8009c04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c08:	f805 3b01 	strb.w	r3, [r5], #1
 8009c0c:	9a00      	ldr	r2, [sp, #0]
 8009c0e:	1aaa      	subs	r2, r5, r2
 8009c10:	4591      	cmp	r9, r2
 8009c12:	ddba      	ble.n	8009b8a <_dtoa_r+0xb32>
 8009c14:	4659      	mov	r1, fp
 8009c16:	2300      	movs	r3, #0
 8009c18:	220a      	movs	r2, #10
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 f970 	bl	8009f00 <__multadd>
 8009c20:	4683      	mov	fp, r0
 8009c22:	e7eb      	b.n	8009bfc <_dtoa_r+0xba4>
 8009c24:	0800b1f3 	.word	0x0800b1f3
 8009c28:	0800b14c 	.word	0x0800b14c
 8009c2c:	0800b170 	.word	0x0800b170

08009c30 <std>:
 8009c30:	2300      	movs	r3, #0
 8009c32:	b510      	push	{r4, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3e:	6083      	str	r3, [r0, #8]
 8009c40:	8181      	strh	r1, [r0, #12]
 8009c42:	6643      	str	r3, [r0, #100]	; 0x64
 8009c44:	81c2      	strh	r2, [r0, #14]
 8009c46:	6183      	str	r3, [r0, #24]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	305c      	adds	r0, #92	; 0x5c
 8009c4e:	f7fe fced 	bl	800862c <memset>
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <std+0x38>)
 8009c54:	6263      	str	r3, [r4, #36]	; 0x24
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <std+0x3c>)
 8009c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c5a:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <std+0x40>)
 8009c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <std+0x44>)
 8009c60:	6224      	str	r4, [r4, #32]
 8009c62:	6323      	str	r3, [r4, #48]	; 0x30
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	bf00      	nop
 8009c68:	0800a981 	.word	0x0800a981
 8009c6c:	0800a9a3 	.word	0x0800a9a3
 8009c70:	0800a9db 	.word	0x0800a9db
 8009c74:	0800a9ff 	.word	0x0800a9ff

08009c78 <_cleanup_r>:
 8009c78:	4901      	ldr	r1, [pc, #4]	; (8009c80 <_cleanup_r+0x8>)
 8009c7a:	f000 b8af 	b.w	8009ddc <_fwalk_reent>
 8009c7e:	bf00      	nop
 8009c80:	0800ad15 	.word	0x0800ad15

08009c84 <__sfmoreglue>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	1e4a      	subs	r2, r1, #1
 8009c88:	2568      	movs	r5, #104	; 0x68
 8009c8a:	4355      	muls	r5, r2
 8009c8c:	460e      	mov	r6, r1
 8009c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c92:	f000 fcb1 	bl	800a5f8 <_malloc_r>
 8009c96:	4604      	mov	r4, r0
 8009c98:	b140      	cbz	r0, 8009cac <__sfmoreglue+0x28>
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	60a0      	str	r0, [r4, #8]
 8009ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ca8:	f7fe fcc0 	bl	800862c <memset>
 8009cac:	4620      	mov	r0, r4
 8009cae:	bd70      	pop	{r4, r5, r6, pc}

08009cb0 <__sfp_lock_acquire>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__sfp_lock_acquire+0x8>)
 8009cb2:	f000 b8b8 	b.w	8009e26 <__retarget_lock_acquire_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	20001cc8 	.word	0x20001cc8

08009cbc <__sfp_lock_release>:
 8009cbc:	4801      	ldr	r0, [pc, #4]	; (8009cc4 <__sfp_lock_release+0x8>)
 8009cbe:	f000 b8b3 	b.w	8009e28 <__retarget_lock_release_recursive>
 8009cc2:	bf00      	nop
 8009cc4:	20001cc8 	.word	0x20001cc8

08009cc8 <__sinit_lock_acquire>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	; (8009cd0 <__sinit_lock_acquire+0x8>)
 8009cca:	f000 b8ac 	b.w	8009e26 <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	20001cc3 	.word	0x20001cc3

08009cd4 <__sinit_lock_release>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__sinit_lock_release+0x8>)
 8009cd6:	f000 b8a7 	b.w	8009e28 <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20001cc3 	.word	0x20001cc3

08009ce0 <__sinit>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f7ff fff0 	bl	8009cc8 <__sinit_lock_acquire>
 8009ce8:	69a3      	ldr	r3, [r4, #24]
 8009cea:	b11b      	cbz	r3, 8009cf4 <__sinit+0x14>
 8009cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf0:	f7ff bff0 	b.w	8009cd4 <__sinit_lock_release>
 8009cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <__sinit+0x68>)
 8009cfc:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <__sinit+0x6c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	bf04      	itt	eq
 8009d06:	2301      	moveq	r3, #1
 8009d08:	61a3      	streq	r3, [r4, #24]
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f820 	bl	8009d50 <__sfp>
 8009d10:	6060      	str	r0, [r4, #4]
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 f81c 	bl	8009d50 <__sfp>
 8009d18:	60a0      	str	r0, [r4, #8]
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 f818 	bl	8009d50 <__sfp>
 8009d20:	2200      	movs	r2, #0
 8009d22:	60e0      	str	r0, [r4, #12]
 8009d24:	2104      	movs	r1, #4
 8009d26:	6860      	ldr	r0, [r4, #4]
 8009d28:	f7ff ff82 	bl	8009c30 <std>
 8009d2c:	68a0      	ldr	r0, [r4, #8]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	2109      	movs	r1, #9
 8009d32:	f7ff ff7d 	bl	8009c30 <std>
 8009d36:	68e0      	ldr	r0, [r4, #12]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	2112      	movs	r1, #18
 8009d3c:	f7ff ff78 	bl	8009c30 <std>
 8009d40:	2301      	movs	r3, #1
 8009d42:	61a3      	str	r3, [r4, #24]
 8009d44:	e7d2      	b.n	8009cec <__sinit+0xc>
 8009d46:	bf00      	nop
 8009d48:	0800b138 	.word	0x0800b138
 8009d4c:	08009c79 	.word	0x08009c79

08009d50 <__sfp>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	4607      	mov	r7, r0
 8009d54:	f7ff ffac 	bl	8009cb0 <__sfp_lock_acquire>
 8009d58:	4b1e      	ldr	r3, [pc, #120]	; (8009dd4 <__sfp+0x84>)
 8009d5a:	681e      	ldr	r6, [r3, #0]
 8009d5c:	69b3      	ldr	r3, [r6, #24]
 8009d5e:	b913      	cbnz	r3, 8009d66 <__sfp+0x16>
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff ffbd 	bl	8009ce0 <__sinit>
 8009d66:	3648      	adds	r6, #72	; 0x48
 8009d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	d503      	bpl.n	8009d78 <__sfp+0x28>
 8009d70:	6833      	ldr	r3, [r6, #0]
 8009d72:	b30b      	cbz	r3, 8009db8 <__sfp+0x68>
 8009d74:	6836      	ldr	r6, [r6, #0]
 8009d76:	e7f7      	b.n	8009d68 <__sfp+0x18>
 8009d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d7c:	b9d5      	cbnz	r5, 8009db4 <__sfp+0x64>
 8009d7e:	4b16      	ldr	r3, [pc, #88]	; (8009dd8 <__sfp+0x88>)
 8009d80:	60e3      	str	r3, [r4, #12]
 8009d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d86:	6665      	str	r5, [r4, #100]	; 0x64
 8009d88:	f000 f84c 	bl	8009e24 <__retarget_lock_init_recursive>
 8009d8c:	f7ff ff96 	bl	8009cbc <__sfp_lock_release>
 8009d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d98:	6025      	str	r5, [r4, #0]
 8009d9a:	61a5      	str	r5, [r4, #24]
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009da4:	f7fe fc42 	bl	800862c <memset>
 8009da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009db0:	4620      	mov	r0, r4
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	3468      	adds	r4, #104	; 0x68
 8009db6:	e7d9      	b.n	8009d6c <__sfp+0x1c>
 8009db8:	2104      	movs	r1, #4
 8009dba:	4638      	mov	r0, r7
 8009dbc:	f7ff ff62 	bl	8009c84 <__sfmoreglue>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	6030      	str	r0, [r6, #0]
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d1d5      	bne.n	8009d74 <__sfp+0x24>
 8009dc8:	f7ff ff78 	bl	8009cbc <__sfp_lock_release>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	e7ee      	b.n	8009db0 <__sfp+0x60>
 8009dd2:	bf00      	nop
 8009dd4:	0800b138 	.word	0x0800b138
 8009dd8:	ffff0001 	.word	0xffff0001

08009ddc <_fwalk_reent>:
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4606      	mov	r6, r0
 8009de2:	4688      	mov	r8, r1
 8009de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009de8:	2700      	movs	r7, #0
 8009dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dee:	f1b9 0901 	subs.w	r9, r9, #1
 8009df2:	d505      	bpl.n	8009e00 <_fwalk_reent+0x24>
 8009df4:	6824      	ldr	r4, [r4, #0]
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	d1f7      	bne.n	8009dea <_fwalk_reent+0xe>
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d907      	bls.n	8009e16 <_fwalk_reent+0x3a>
 8009e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	d003      	beq.n	8009e16 <_fwalk_reent+0x3a>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4630      	mov	r0, r6
 8009e12:	47c0      	blx	r8
 8009e14:	4307      	orrs	r7, r0
 8009e16:	3568      	adds	r5, #104	; 0x68
 8009e18:	e7e9      	b.n	8009dee <_fwalk_reent+0x12>
	...

08009e1c <_localeconv_r>:
 8009e1c:	4800      	ldr	r0, [pc, #0]	; (8009e20 <_localeconv_r+0x4>)
 8009e1e:	4770      	bx	lr
 8009e20:	20000164 	.word	0x20000164

08009e24 <__retarget_lock_init_recursive>:
 8009e24:	4770      	bx	lr

08009e26 <__retarget_lock_acquire_recursive>:
 8009e26:	4770      	bx	lr

08009e28 <__retarget_lock_release_recursive>:
 8009e28:	4770      	bx	lr
	...

08009e2c <malloc>:
 8009e2c:	4b02      	ldr	r3, [pc, #8]	; (8009e38 <malloc+0xc>)
 8009e2e:	4601      	mov	r1, r0
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	f000 bbe1 	b.w	800a5f8 <_malloc_r>
 8009e36:	bf00      	nop
 8009e38:	20000010 	.word	0x20000010

08009e3c <_Balloc>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	b976      	cbnz	r6, 8009e64 <_Balloc+0x28>
 8009e46:	2010      	movs	r0, #16
 8009e48:	f7ff fff0 	bl	8009e2c <malloc>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e50:	b920      	cbnz	r0, 8009e5c <_Balloc+0x20>
 8009e52:	4b18      	ldr	r3, [pc, #96]	; (8009eb4 <_Balloc+0x78>)
 8009e54:	4818      	ldr	r0, [pc, #96]	; (8009eb8 <_Balloc+0x7c>)
 8009e56:	2166      	movs	r1, #102	; 0x66
 8009e58:	f000 fea8 	bl	800abac <__assert_func>
 8009e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e60:	6006      	str	r6, [r0, #0]
 8009e62:	60c6      	str	r6, [r0, #12]
 8009e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e66:	68f3      	ldr	r3, [r6, #12]
 8009e68:	b183      	cbz	r3, 8009e8c <_Balloc+0x50>
 8009e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e72:	b9b8      	cbnz	r0, 8009ea4 <_Balloc+0x68>
 8009e74:	2101      	movs	r1, #1
 8009e76:	fa01 f605 	lsl.w	r6, r1, r5
 8009e7a:	1d72      	adds	r2, r6, #5
 8009e7c:	0092      	lsls	r2, r2, #2
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fb5a 	bl	800a538 <_calloc_r>
 8009e84:	b160      	cbz	r0, 8009ea0 <_Balloc+0x64>
 8009e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e8a:	e00e      	b.n	8009eaa <_Balloc+0x6e>
 8009e8c:	2221      	movs	r2, #33	; 0x21
 8009e8e:	2104      	movs	r1, #4
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fb51 	bl	800a538 <_calloc_r>
 8009e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e98:	60f0      	str	r0, [r6, #12]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e4      	bne.n	8009e6a <_Balloc+0x2e>
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	6802      	ldr	r2, [r0, #0]
 8009ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009eb0:	e7f7      	b.n	8009ea2 <_Balloc+0x66>
 8009eb2:	bf00      	nop
 8009eb4:	0800b17d 	.word	0x0800b17d
 8009eb8:	0800b264 	.word	0x0800b264

08009ebc <_Bfree>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	b976      	cbnz	r6, 8009ee4 <_Bfree+0x28>
 8009ec6:	2010      	movs	r0, #16
 8009ec8:	f7ff ffb0 	bl	8009e2c <malloc>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6268      	str	r0, [r5, #36]	; 0x24
 8009ed0:	b920      	cbnz	r0, 8009edc <_Bfree+0x20>
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <_Bfree+0x3c>)
 8009ed4:	4809      	ldr	r0, [pc, #36]	; (8009efc <_Bfree+0x40>)
 8009ed6:	218a      	movs	r1, #138	; 0x8a
 8009ed8:	f000 fe68 	bl	800abac <__assert_func>
 8009edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee0:	6006      	str	r6, [r0, #0]
 8009ee2:	60c6      	str	r6, [r0, #12]
 8009ee4:	b13c      	cbz	r4, 8009ef6 <_Bfree+0x3a>
 8009ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ee8:	6862      	ldr	r2, [r4, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ef0:	6021      	str	r1, [r4, #0]
 8009ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	0800b17d 	.word	0x0800b17d
 8009efc:	0800b264 	.word	0x0800b264

08009f00 <__multadd>:
 8009f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	690e      	ldr	r6, [r1, #16]
 8009f06:	4607      	mov	r7, r0
 8009f08:	4698      	mov	r8, r3
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f101 0014 	add.w	r0, r1, #20
 8009f10:	2300      	movs	r3, #0
 8009f12:	6805      	ldr	r5, [r0, #0]
 8009f14:	b2a9      	uxth	r1, r5
 8009f16:	fb02 8101 	mla	r1, r2, r1, r8
 8009f1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009f1e:	0c2d      	lsrs	r5, r5, #16
 8009f20:	fb02 c505 	mla	r5, r2, r5, ip
 8009f24:	b289      	uxth	r1, r1
 8009f26:	3301      	adds	r3, #1
 8009f28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009f2c:	429e      	cmp	r6, r3
 8009f2e:	f840 1b04 	str.w	r1, [r0], #4
 8009f32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009f36:	dcec      	bgt.n	8009f12 <__multadd+0x12>
 8009f38:	f1b8 0f00 	cmp.w	r8, #0
 8009f3c:	d022      	beq.n	8009f84 <__multadd+0x84>
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	42b3      	cmp	r3, r6
 8009f42:	dc19      	bgt.n	8009f78 <__multadd+0x78>
 8009f44:	6861      	ldr	r1, [r4, #4]
 8009f46:	4638      	mov	r0, r7
 8009f48:	3101      	adds	r1, #1
 8009f4a:	f7ff ff77 	bl	8009e3c <_Balloc>
 8009f4e:	4605      	mov	r5, r0
 8009f50:	b928      	cbnz	r0, 8009f5e <__multadd+0x5e>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <__multadd+0x8c>)
 8009f56:	480e      	ldr	r0, [pc, #56]	; (8009f90 <__multadd+0x90>)
 8009f58:	21b5      	movs	r1, #181	; 0xb5
 8009f5a:	f000 fe27 	bl	800abac <__assert_func>
 8009f5e:	6922      	ldr	r2, [r4, #16]
 8009f60:	3202      	adds	r2, #2
 8009f62:	f104 010c 	add.w	r1, r4, #12
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	300c      	adds	r0, #12
 8009f6a:	f7fe fb51 	bl	8008610 <memcpy>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4638      	mov	r0, r7
 8009f72:	f7ff ffa3 	bl	8009ebc <_Bfree>
 8009f76:	462c      	mov	r4, r5
 8009f78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f7c:	3601      	adds	r6, #1
 8009f7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f82:	6126      	str	r6, [r4, #16]
 8009f84:	4620      	mov	r0, r4
 8009f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800b1f3 	.word	0x0800b1f3
 8009f90:	0800b264 	.word	0x0800b264

08009f94 <__hi0bits>:
 8009f94:	0c03      	lsrs	r3, r0, #16
 8009f96:	041b      	lsls	r3, r3, #16
 8009f98:	b9d3      	cbnz	r3, 8009fd0 <__hi0bits+0x3c>
 8009f9a:	0400      	lsls	r0, r0, #16
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fa2:	bf04      	itt	eq
 8009fa4:	0200      	lsleq	r0, r0, #8
 8009fa6:	3308      	addeq	r3, #8
 8009fa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009fac:	bf04      	itt	eq
 8009fae:	0100      	lsleq	r0, r0, #4
 8009fb0:	3304      	addeq	r3, #4
 8009fb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009fb6:	bf04      	itt	eq
 8009fb8:	0080      	lsleq	r0, r0, #2
 8009fba:	3302      	addeq	r3, #2
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	db05      	blt.n	8009fcc <__hi0bits+0x38>
 8009fc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009fc4:	f103 0301 	add.w	r3, r3, #1
 8009fc8:	bf08      	it	eq
 8009fca:	2320      	moveq	r3, #32
 8009fcc:	4618      	mov	r0, r3
 8009fce:	4770      	bx	lr
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e7e4      	b.n	8009f9e <__hi0bits+0xa>

08009fd4 <__lo0bits>:
 8009fd4:	6803      	ldr	r3, [r0, #0]
 8009fd6:	f013 0207 	ands.w	r2, r3, #7
 8009fda:	4601      	mov	r1, r0
 8009fdc:	d00b      	beq.n	8009ff6 <__lo0bits+0x22>
 8009fde:	07da      	lsls	r2, r3, #31
 8009fe0:	d424      	bmi.n	800a02c <__lo0bits+0x58>
 8009fe2:	0798      	lsls	r0, r3, #30
 8009fe4:	bf49      	itett	mi
 8009fe6:	085b      	lsrmi	r3, r3, #1
 8009fe8:	089b      	lsrpl	r3, r3, #2
 8009fea:	2001      	movmi	r0, #1
 8009fec:	600b      	strmi	r3, [r1, #0]
 8009fee:	bf5c      	itt	pl
 8009ff0:	600b      	strpl	r3, [r1, #0]
 8009ff2:	2002      	movpl	r0, #2
 8009ff4:	4770      	bx	lr
 8009ff6:	b298      	uxth	r0, r3
 8009ff8:	b9b0      	cbnz	r0, 800a028 <__lo0bits+0x54>
 8009ffa:	0c1b      	lsrs	r3, r3, #16
 8009ffc:	2010      	movs	r0, #16
 8009ffe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a002:	bf04      	itt	eq
 800a004:	0a1b      	lsreq	r3, r3, #8
 800a006:	3008      	addeq	r0, #8
 800a008:	071a      	lsls	r2, r3, #28
 800a00a:	bf04      	itt	eq
 800a00c:	091b      	lsreq	r3, r3, #4
 800a00e:	3004      	addeq	r0, #4
 800a010:	079a      	lsls	r2, r3, #30
 800a012:	bf04      	itt	eq
 800a014:	089b      	lsreq	r3, r3, #2
 800a016:	3002      	addeq	r0, #2
 800a018:	07da      	lsls	r2, r3, #31
 800a01a:	d403      	bmi.n	800a024 <__lo0bits+0x50>
 800a01c:	085b      	lsrs	r3, r3, #1
 800a01e:	f100 0001 	add.w	r0, r0, #1
 800a022:	d005      	beq.n	800a030 <__lo0bits+0x5c>
 800a024:	600b      	str	r3, [r1, #0]
 800a026:	4770      	bx	lr
 800a028:	4610      	mov	r0, r2
 800a02a:	e7e8      	b.n	8009ffe <__lo0bits+0x2a>
 800a02c:	2000      	movs	r0, #0
 800a02e:	4770      	bx	lr
 800a030:	2020      	movs	r0, #32
 800a032:	4770      	bx	lr

0800a034 <__i2b>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	2101      	movs	r1, #1
 800a03a:	f7ff feff 	bl	8009e3c <_Balloc>
 800a03e:	4602      	mov	r2, r0
 800a040:	b928      	cbnz	r0, 800a04e <__i2b+0x1a>
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <__i2b+0x24>)
 800a044:	4805      	ldr	r0, [pc, #20]	; (800a05c <__i2b+0x28>)
 800a046:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a04a:	f000 fdaf 	bl	800abac <__assert_func>
 800a04e:	2301      	movs	r3, #1
 800a050:	6144      	str	r4, [r0, #20]
 800a052:	6103      	str	r3, [r0, #16]
 800a054:	bd10      	pop	{r4, pc}
 800a056:	bf00      	nop
 800a058:	0800b1f3 	.word	0x0800b1f3
 800a05c:	0800b264 	.word	0x0800b264

0800a060 <__multiply>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4614      	mov	r4, r2
 800a066:	690a      	ldr	r2, [r1, #16]
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	bfb8      	it	lt
 800a06e:	460b      	movlt	r3, r1
 800a070:	460d      	mov	r5, r1
 800a072:	bfbc      	itt	lt
 800a074:	4625      	movlt	r5, r4
 800a076:	461c      	movlt	r4, r3
 800a078:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a07c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a080:	68ab      	ldr	r3, [r5, #8]
 800a082:	6869      	ldr	r1, [r5, #4]
 800a084:	eb0a 0709 	add.w	r7, sl, r9
 800a088:	42bb      	cmp	r3, r7
 800a08a:	b085      	sub	sp, #20
 800a08c:	bfb8      	it	lt
 800a08e:	3101      	addlt	r1, #1
 800a090:	f7ff fed4 	bl	8009e3c <_Balloc>
 800a094:	b930      	cbnz	r0, 800a0a4 <__multiply+0x44>
 800a096:	4602      	mov	r2, r0
 800a098:	4b42      	ldr	r3, [pc, #264]	; (800a1a4 <__multiply+0x144>)
 800a09a:	4843      	ldr	r0, [pc, #268]	; (800a1a8 <__multiply+0x148>)
 800a09c:	f240 115d 	movw	r1, #349	; 0x15d
 800a0a0:	f000 fd84 	bl	800abac <__assert_func>
 800a0a4:	f100 0614 	add.w	r6, r0, #20
 800a0a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a0ac:	4633      	mov	r3, r6
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4543      	cmp	r3, r8
 800a0b2:	d31e      	bcc.n	800a0f2 <__multiply+0x92>
 800a0b4:	f105 0c14 	add.w	ip, r5, #20
 800a0b8:	f104 0314 	add.w	r3, r4, #20
 800a0bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a0c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a0c4:	9202      	str	r2, [sp, #8]
 800a0c6:	ebac 0205 	sub.w	r2, ip, r5
 800a0ca:	3a15      	subs	r2, #21
 800a0cc:	f022 0203 	bic.w	r2, r2, #3
 800a0d0:	3204      	adds	r2, #4
 800a0d2:	f105 0115 	add.w	r1, r5, #21
 800a0d6:	458c      	cmp	ip, r1
 800a0d8:	bf38      	it	cc
 800a0da:	2204      	movcc	r2, #4
 800a0dc:	9201      	str	r2, [sp, #4]
 800a0de:	9a02      	ldr	r2, [sp, #8]
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d808      	bhi.n	800a0f8 <__multiply+0x98>
 800a0e6:	2f00      	cmp	r7, #0
 800a0e8:	dc55      	bgt.n	800a196 <__multiply+0x136>
 800a0ea:	6107      	str	r7, [r0, #16]
 800a0ec:	b005      	add	sp, #20
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	f843 2b04 	str.w	r2, [r3], #4
 800a0f6:	e7db      	b.n	800a0b0 <__multiply+0x50>
 800a0f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0fc:	f1ba 0f00 	cmp.w	sl, #0
 800a100:	d020      	beq.n	800a144 <__multiply+0xe4>
 800a102:	f105 0e14 	add.w	lr, r5, #20
 800a106:	46b1      	mov	r9, r6
 800a108:	2200      	movs	r2, #0
 800a10a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a10e:	f8d9 b000 	ldr.w	fp, [r9]
 800a112:	b2a1      	uxth	r1, r4
 800a114:	fa1f fb8b 	uxth.w	fp, fp
 800a118:	fb0a b101 	mla	r1, sl, r1, fp
 800a11c:	4411      	add	r1, r2
 800a11e:	f8d9 2000 	ldr.w	r2, [r9]
 800a122:	0c24      	lsrs	r4, r4, #16
 800a124:	0c12      	lsrs	r2, r2, #16
 800a126:	fb0a 2404 	mla	r4, sl, r4, r2
 800a12a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a12e:	b289      	uxth	r1, r1
 800a130:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a134:	45f4      	cmp	ip, lr
 800a136:	f849 1b04 	str.w	r1, [r9], #4
 800a13a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a13e:	d8e4      	bhi.n	800a10a <__multiply+0xaa>
 800a140:	9901      	ldr	r1, [sp, #4]
 800a142:	5072      	str	r2, [r6, r1]
 800a144:	9a03      	ldr	r2, [sp, #12]
 800a146:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a14a:	3304      	adds	r3, #4
 800a14c:	f1b9 0f00 	cmp.w	r9, #0
 800a150:	d01f      	beq.n	800a192 <__multiply+0x132>
 800a152:	6834      	ldr	r4, [r6, #0]
 800a154:	f105 0114 	add.w	r1, r5, #20
 800a158:	46b6      	mov	lr, r6
 800a15a:	f04f 0a00 	mov.w	sl, #0
 800a15e:	880a      	ldrh	r2, [r1, #0]
 800a160:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a164:	fb09 b202 	mla	r2, r9, r2, fp
 800a168:	4492      	add	sl, r2
 800a16a:	b2a4      	uxth	r4, r4
 800a16c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a170:	f84e 4b04 	str.w	r4, [lr], #4
 800a174:	f851 4b04 	ldr.w	r4, [r1], #4
 800a178:	f8be 2000 	ldrh.w	r2, [lr]
 800a17c:	0c24      	lsrs	r4, r4, #16
 800a17e:	fb09 2404 	mla	r4, r9, r4, r2
 800a182:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a186:	458c      	cmp	ip, r1
 800a188:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a18c:	d8e7      	bhi.n	800a15e <__multiply+0xfe>
 800a18e:	9a01      	ldr	r2, [sp, #4]
 800a190:	50b4      	str	r4, [r6, r2]
 800a192:	3604      	adds	r6, #4
 800a194:	e7a3      	b.n	800a0de <__multiply+0x7e>
 800a196:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1a5      	bne.n	800a0ea <__multiply+0x8a>
 800a19e:	3f01      	subs	r7, #1
 800a1a0:	e7a1      	b.n	800a0e6 <__multiply+0x86>
 800a1a2:	bf00      	nop
 800a1a4:	0800b1f3 	.word	0x0800b1f3
 800a1a8:	0800b264 	.word	0x0800b264

0800a1ac <__pow5mult>:
 800a1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b0:	4615      	mov	r5, r2
 800a1b2:	f012 0203 	ands.w	r2, r2, #3
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	d007      	beq.n	800a1cc <__pow5mult+0x20>
 800a1bc:	4c25      	ldr	r4, [pc, #148]	; (800a254 <__pow5mult+0xa8>)
 800a1be:	3a01      	subs	r2, #1
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1c6:	f7ff fe9b 	bl	8009f00 <__multadd>
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	10ad      	asrs	r5, r5, #2
 800a1ce:	d03d      	beq.n	800a24c <__pow5mult+0xa0>
 800a1d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1d2:	b97c      	cbnz	r4, 800a1f4 <__pow5mult+0x48>
 800a1d4:	2010      	movs	r0, #16
 800a1d6:	f7ff fe29 	bl	8009e2c <malloc>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	6270      	str	r0, [r6, #36]	; 0x24
 800a1de:	b928      	cbnz	r0, 800a1ec <__pow5mult+0x40>
 800a1e0:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <__pow5mult+0xac>)
 800a1e2:	481e      	ldr	r0, [pc, #120]	; (800a25c <__pow5mult+0xb0>)
 800a1e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1e8:	f000 fce0 	bl	800abac <__assert_func>
 800a1ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1f0:	6004      	str	r4, [r0, #0]
 800a1f2:	60c4      	str	r4, [r0, #12]
 800a1f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1fc:	b94c      	cbnz	r4, 800a212 <__pow5mult+0x66>
 800a1fe:	f240 2171 	movw	r1, #625	; 0x271
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ff16 	bl	800a034 <__i2b>
 800a208:	2300      	movs	r3, #0
 800a20a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a20e:	4604      	mov	r4, r0
 800a210:	6003      	str	r3, [r0, #0]
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	07eb      	lsls	r3, r5, #31
 800a218:	d50a      	bpl.n	800a230 <__pow5mult+0x84>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4622      	mov	r2, r4
 800a21e:	4630      	mov	r0, r6
 800a220:	f7ff ff1e 	bl	800a060 <__multiply>
 800a224:	4639      	mov	r1, r7
 800a226:	4680      	mov	r8, r0
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff fe47 	bl	8009ebc <_Bfree>
 800a22e:	4647      	mov	r7, r8
 800a230:	106d      	asrs	r5, r5, #1
 800a232:	d00b      	beq.n	800a24c <__pow5mult+0xa0>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	b938      	cbnz	r0, 800a248 <__pow5mult+0x9c>
 800a238:	4622      	mov	r2, r4
 800a23a:	4621      	mov	r1, r4
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff ff0f 	bl	800a060 <__multiply>
 800a242:	6020      	str	r0, [r4, #0]
 800a244:	f8c0 9000 	str.w	r9, [r0]
 800a248:	4604      	mov	r4, r0
 800a24a:	e7e4      	b.n	800a216 <__pow5mult+0x6a>
 800a24c:	4638      	mov	r0, r7
 800a24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a252:	bf00      	nop
 800a254:	0800b3b8 	.word	0x0800b3b8
 800a258:	0800b17d 	.word	0x0800b17d
 800a25c:	0800b264 	.word	0x0800b264

0800a260 <__lshift>:
 800a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	460c      	mov	r4, r1
 800a266:	6849      	ldr	r1, [r1, #4]
 800a268:	6923      	ldr	r3, [r4, #16]
 800a26a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	4607      	mov	r7, r0
 800a272:	4691      	mov	r9, r2
 800a274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a278:	f108 0601 	add.w	r6, r8, #1
 800a27c:	42b3      	cmp	r3, r6
 800a27e:	db0b      	blt.n	800a298 <__lshift+0x38>
 800a280:	4638      	mov	r0, r7
 800a282:	f7ff fddb 	bl	8009e3c <_Balloc>
 800a286:	4605      	mov	r5, r0
 800a288:	b948      	cbnz	r0, 800a29e <__lshift+0x3e>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b28      	ldr	r3, [pc, #160]	; (800a330 <__lshift+0xd0>)
 800a28e:	4829      	ldr	r0, [pc, #164]	; (800a334 <__lshift+0xd4>)
 800a290:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a294:	f000 fc8a 	bl	800abac <__assert_func>
 800a298:	3101      	adds	r1, #1
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	e7ee      	b.n	800a27c <__lshift+0x1c>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f100 0114 	add.w	r1, r0, #20
 800a2a4:	f100 0210 	add.w	r2, r0, #16
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	4553      	cmp	r3, sl
 800a2ac:	db33      	blt.n	800a316 <__lshift+0xb6>
 800a2ae:	6920      	ldr	r0, [r4, #16]
 800a2b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2b4:	f104 0314 	add.w	r3, r4, #20
 800a2b8:	f019 091f 	ands.w	r9, r9, #31
 800a2bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2c4:	d02b      	beq.n	800a31e <__lshift+0xbe>
 800a2c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a2ca:	468a      	mov	sl, r1
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a2d4:	4302      	orrs	r2, r0
 800a2d6:	f84a 2b04 	str.w	r2, [sl], #4
 800a2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2de:	459c      	cmp	ip, r3
 800a2e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2e4:	d8f3      	bhi.n	800a2ce <__lshift+0x6e>
 800a2e6:	ebac 0304 	sub.w	r3, ip, r4
 800a2ea:	3b15      	subs	r3, #21
 800a2ec:	f023 0303 	bic.w	r3, r3, #3
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	f104 0015 	add.w	r0, r4, #21
 800a2f6:	4584      	cmp	ip, r0
 800a2f8:	bf38      	it	cc
 800a2fa:	2304      	movcc	r3, #4
 800a2fc:	50ca      	str	r2, [r1, r3]
 800a2fe:	b10a      	cbz	r2, 800a304 <__lshift+0xa4>
 800a300:	f108 0602 	add.w	r6, r8, #2
 800a304:	3e01      	subs	r6, #1
 800a306:	4638      	mov	r0, r7
 800a308:	612e      	str	r6, [r5, #16]
 800a30a:	4621      	mov	r1, r4
 800a30c:	f7ff fdd6 	bl	8009ebc <_Bfree>
 800a310:	4628      	mov	r0, r5
 800a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a316:	f842 0f04 	str.w	r0, [r2, #4]!
 800a31a:	3301      	adds	r3, #1
 800a31c:	e7c5      	b.n	800a2aa <__lshift+0x4a>
 800a31e:	3904      	subs	r1, #4
 800a320:	f853 2b04 	ldr.w	r2, [r3], #4
 800a324:	f841 2f04 	str.w	r2, [r1, #4]!
 800a328:	459c      	cmp	ip, r3
 800a32a:	d8f9      	bhi.n	800a320 <__lshift+0xc0>
 800a32c:	e7ea      	b.n	800a304 <__lshift+0xa4>
 800a32e:	bf00      	nop
 800a330:	0800b1f3 	.word	0x0800b1f3
 800a334:	0800b264 	.word	0x0800b264

0800a338 <__mcmp>:
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	6902      	ldr	r2, [r0, #16]
 800a33c:	690c      	ldr	r4, [r1, #16]
 800a33e:	1b12      	subs	r2, r2, r4
 800a340:	d10e      	bne.n	800a360 <__mcmp+0x28>
 800a342:	f100 0314 	add.w	r3, r0, #20
 800a346:	3114      	adds	r1, #20
 800a348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a34c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a358:	42a5      	cmp	r5, r4
 800a35a:	d003      	beq.n	800a364 <__mcmp+0x2c>
 800a35c:	d305      	bcc.n	800a36a <__mcmp+0x32>
 800a35e:	2201      	movs	r2, #1
 800a360:	4610      	mov	r0, r2
 800a362:	bd30      	pop	{r4, r5, pc}
 800a364:	4283      	cmp	r3, r0
 800a366:	d3f3      	bcc.n	800a350 <__mcmp+0x18>
 800a368:	e7fa      	b.n	800a360 <__mcmp+0x28>
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	e7f7      	b.n	800a360 <__mcmp+0x28>

0800a370 <__mdiff>:
 800a370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	460c      	mov	r4, r1
 800a376:	4606      	mov	r6, r0
 800a378:	4611      	mov	r1, r2
 800a37a:	4620      	mov	r0, r4
 800a37c:	4617      	mov	r7, r2
 800a37e:	f7ff ffdb 	bl	800a338 <__mcmp>
 800a382:	1e05      	subs	r5, r0, #0
 800a384:	d110      	bne.n	800a3a8 <__mdiff+0x38>
 800a386:	4629      	mov	r1, r5
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff fd57 	bl	8009e3c <_Balloc>
 800a38e:	b930      	cbnz	r0, 800a39e <__mdiff+0x2e>
 800a390:	4b39      	ldr	r3, [pc, #228]	; (800a478 <__mdiff+0x108>)
 800a392:	4602      	mov	r2, r0
 800a394:	f240 2132 	movw	r1, #562	; 0x232
 800a398:	4838      	ldr	r0, [pc, #224]	; (800a47c <__mdiff+0x10c>)
 800a39a:	f000 fc07 	bl	800abac <__assert_func>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a8:	bfa4      	itt	ge
 800a3aa:	463b      	movge	r3, r7
 800a3ac:	4627      	movge	r7, r4
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	bfa6      	itte	ge
 800a3b4:	461c      	movge	r4, r3
 800a3b6:	2500      	movge	r5, #0
 800a3b8:	2501      	movlt	r5, #1
 800a3ba:	f7ff fd3f 	bl	8009e3c <_Balloc>
 800a3be:	b920      	cbnz	r0, 800a3ca <__mdiff+0x5a>
 800a3c0:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <__mdiff+0x108>)
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3c8:	e7e6      	b.n	800a398 <__mdiff+0x28>
 800a3ca:	693e      	ldr	r6, [r7, #16]
 800a3cc:	60c5      	str	r5, [r0, #12]
 800a3ce:	6925      	ldr	r5, [r4, #16]
 800a3d0:	f107 0114 	add.w	r1, r7, #20
 800a3d4:	f104 0914 	add.w	r9, r4, #20
 800a3d8:	f100 0e14 	add.w	lr, r0, #20
 800a3dc:	f107 0210 	add.w	r2, r7, #16
 800a3e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a3e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a3e8:	46f2      	mov	sl, lr
 800a3ea:	2700      	movs	r7, #0
 800a3ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3f4:	fa1f f883 	uxth.w	r8, r3
 800a3f8:	fa17 f78b 	uxtah	r7, r7, fp
 800a3fc:	0c1b      	lsrs	r3, r3, #16
 800a3fe:	eba7 0808 	sub.w	r8, r7, r8
 800a402:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a406:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a40a:	fa1f f888 	uxth.w	r8, r8
 800a40e:	141f      	asrs	r7, r3, #16
 800a410:	454d      	cmp	r5, r9
 800a412:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a416:	f84a 3b04 	str.w	r3, [sl], #4
 800a41a:	d8e7      	bhi.n	800a3ec <__mdiff+0x7c>
 800a41c:	1b2b      	subs	r3, r5, r4
 800a41e:	3b15      	subs	r3, #21
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	3415      	adds	r4, #21
 800a428:	42a5      	cmp	r5, r4
 800a42a:	bf38      	it	cc
 800a42c:	2304      	movcc	r3, #4
 800a42e:	4419      	add	r1, r3
 800a430:	4473      	add	r3, lr
 800a432:	469e      	mov	lr, r3
 800a434:	460d      	mov	r5, r1
 800a436:	4565      	cmp	r5, ip
 800a438:	d30e      	bcc.n	800a458 <__mdiff+0xe8>
 800a43a:	f10c 0203 	add.w	r2, ip, #3
 800a43e:	1a52      	subs	r2, r2, r1
 800a440:	f022 0203 	bic.w	r2, r2, #3
 800a444:	3903      	subs	r1, #3
 800a446:	458c      	cmp	ip, r1
 800a448:	bf38      	it	cc
 800a44a:	2200      	movcc	r2, #0
 800a44c:	441a      	add	r2, r3
 800a44e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a452:	b17b      	cbz	r3, 800a474 <__mdiff+0x104>
 800a454:	6106      	str	r6, [r0, #16]
 800a456:	e7a5      	b.n	800a3a4 <__mdiff+0x34>
 800a458:	f855 8b04 	ldr.w	r8, [r5], #4
 800a45c:	fa17 f488 	uxtah	r4, r7, r8
 800a460:	1422      	asrs	r2, r4, #16
 800a462:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a466:	b2a4      	uxth	r4, r4
 800a468:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a46c:	f84e 4b04 	str.w	r4, [lr], #4
 800a470:	1417      	asrs	r7, r2, #16
 800a472:	e7e0      	b.n	800a436 <__mdiff+0xc6>
 800a474:	3e01      	subs	r6, #1
 800a476:	e7ea      	b.n	800a44e <__mdiff+0xde>
 800a478:	0800b1f3 	.word	0x0800b1f3
 800a47c:	0800b264 	.word	0x0800b264

0800a480 <__d2b>:
 800a480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a484:	4689      	mov	r9, r1
 800a486:	2101      	movs	r1, #1
 800a488:	ec57 6b10 	vmov	r6, r7, d0
 800a48c:	4690      	mov	r8, r2
 800a48e:	f7ff fcd5 	bl	8009e3c <_Balloc>
 800a492:	4604      	mov	r4, r0
 800a494:	b930      	cbnz	r0, 800a4a4 <__d2b+0x24>
 800a496:	4602      	mov	r2, r0
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <__d2b+0xb0>)
 800a49a:	4826      	ldr	r0, [pc, #152]	; (800a534 <__d2b+0xb4>)
 800a49c:	f240 310a 	movw	r1, #778	; 0x30a
 800a4a0:	f000 fb84 	bl	800abac <__assert_func>
 800a4a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a4a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4ac:	bb35      	cbnz	r5, 800a4fc <__d2b+0x7c>
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	d028      	beq.n	800a506 <__d2b+0x86>
 800a4b4:	4668      	mov	r0, sp
 800a4b6:	9600      	str	r6, [sp, #0]
 800a4b8:	f7ff fd8c 	bl	8009fd4 <__lo0bits>
 800a4bc:	9900      	ldr	r1, [sp, #0]
 800a4be:	b300      	cbz	r0, 800a502 <__d2b+0x82>
 800a4c0:	9a01      	ldr	r2, [sp, #4]
 800a4c2:	f1c0 0320 	rsb	r3, r0, #32
 800a4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ca:	430b      	orrs	r3, r1
 800a4cc:	40c2      	lsrs	r2, r0
 800a4ce:	6163      	str	r3, [r4, #20]
 800a4d0:	9201      	str	r2, [sp, #4]
 800a4d2:	9b01      	ldr	r3, [sp, #4]
 800a4d4:	61a3      	str	r3, [r4, #24]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bf14      	ite	ne
 800a4da:	2202      	movne	r2, #2
 800a4dc:	2201      	moveq	r2, #1
 800a4de:	6122      	str	r2, [r4, #16]
 800a4e0:	b1d5      	cbz	r5, 800a518 <__d2b+0x98>
 800a4e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4e6:	4405      	add	r5, r0
 800a4e8:	f8c9 5000 	str.w	r5, [r9]
 800a4ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4f0:	f8c8 0000 	str.w	r0, [r8]
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	b003      	add	sp, #12
 800a4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a500:	e7d5      	b.n	800a4ae <__d2b+0x2e>
 800a502:	6161      	str	r1, [r4, #20]
 800a504:	e7e5      	b.n	800a4d2 <__d2b+0x52>
 800a506:	a801      	add	r0, sp, #4
 800a508:	f7ff fd64 	bl	8009fd4 <__lo0bits>
 800a50c:	9b01      	ldr	r3, [sp, #4]
 800a50e:	6163      	str	r3, [r4, #20]
 800a510:	2201      	movs	r2, #1
 800a512:	6122      	str	r2, [r4, #16]
 800a514:	3020      	adds	r0, #32
 800a516:	e7e3      	b.n	800a4e0 <__d2b+0x60>
 800a518:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a51c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a520:	f8c9 0000 	str.w	r0, [r9]
 800a524:	6918      	ldr	r0, [r3, #16]
 800a526:	f7ff fd35 	bl	8009f94 <__hi0bits>
 800a52a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a52e:	e7df      	b.n	800a4f0 <__d2b+0x70>
 800a530:	0800b1f3 	.word	0x0800b1f3
 800a534:	0800b264 	.word	0x0800b264

0800a538 <_calloc_r>:
 800a538:	b513      	push	{r0, r1, r4, lr}
 800a53a:	434a      	muls	r2, r1
 800a53c:	4611      	mov	r1, r2
 800a53e:	9201      	str	r2, [sp, #4]
 800a540:	f000 f85a 	bl	800a5f8 <_malloc_r>
 800a544:	4604      	mov	r4, r0
 800a546:	b118      	cbz	r0, 800a550 <_calloc_r+0x18>
 800a548:	9a01      	ldr	r2, [sp, #4]
 800a54a:	2100      	movs	r1, #0
 800a54c:	f7fe f86e 	bl	800862c <memset>
 800a550:	4620      	mov	r0, r4
 800a552:	b002      	add	sp, #8
 800a554:	bd10      	pop	{r4, pc}
	...

0800a558 <_free_r>:
 800a558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a55a:	2900      	cmp	r1, #0
 800a55c:	d048      	beq.n	800a5f0 <_free_r+0x98>
 800a55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a562:	9001      	str	r0, [sp, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f1a1 0404 	sub.w	r4, r1, #4
 800a56a:	bfb8      	it	lt
 800a56c:	18e4      	addlt	r4, r4, r3
 800a56e:	f000 fca7 	bl	800aec0 <__malloc_lock>
 800a572:	4a20      	ldr	r2, [pc, #128]	; (800a5f4 <_free_r+0x9c>)
 800a574:	9801      	ldr	r0, [sp, #4]
 800a576:	6813      	ldr	r3, [r2, #0]
 800a578:	4615      	mov	r5, r2
 800a57a:	b933      	cbnz	r3, 800a58a <_free_r+0x32>
 800a57c:	6063      	str	r3, [r4, #4]
 800a57e:	6014      	str	r4, [r2, #0]
 800a580:	b003      	add	sp, #12
 800a582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a586:	f000 bca1 	b.w	800aecc <__malloc_unlock>
 800a58a:	42a3      	cmp	r3, r4
 800a58c:	d90b      	bls.n	800a5a6 <_free_r+0x4e>
 800a58e:	6821      	ldr	r1, [r4, #0]
 800a590:	1862      	adds	r2, r4, r1
 800a592:	4293      	cmp	r3, r2
 800a594:	bf04      	itt	eq
 800a596:	681a      	ldreq	r2, [r3, #0]
 800a598:	685b      	ldreq	r3, [r3, #4]
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	bf04      	itt	eq
 800a59e:	1852      	addeq	r2, r2, r1
 800a5a0:	6022      	streq	r2, [r4, #0]
 800a5a2:	602c      	str	r4, [r5, #0]
 800a5a4:	e7ec      	b.n	800a580 <_free_r+0x28>
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	b10b      	cbz	r3, 800a5b0 <_free_r+0x58>
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	d9fa      	bls.n	800a5a6 <_free_r+0x4e>
 800a5b0:	6811      	ldr	r1, [r2, #0]
 800a5b2:	1855      	adds	r5, r2, r1
 800a5b4:	42a5      	cmp	r5, r4
 800a5b6:	d10b      	bne.n	800a5d0 <_free_r+0x78>
 800a5b8:	6824      	ldr	r4, [r4, #0]
 800a5ba:	4421      	add	r1, r4
 800a5bc:	1854      	adds	r4, r2, r1
 800a5be:	42a3      	cmp	r3, r4
 800a5c0:	6011      	str	r1, [r2, #0]
 800a5c2:	d1dd      	bne.n	800a580 <_free_r+0x28>
 800a5c4:	681c      	ldr	r4, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	6053      	str	r3, [r2, #4]
 800a5ca:	4421      	add	r1, r4
 800a5cc:	6011      	str	r1, [r2, #0]
 800a5ce:	e7d7      	b.n	800a580 <_free_r+0x28>
 800a5d0:	d902      	bls.n	800a5d8 <_free_r+0x80>
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	e7d3      	b.n	800a580 <_free_r+0x28>
 800a5d8:	6825      	ldr	r5, [r4, #0]
 800a5da:	1961      	adds	r1, r4, r5
 800a5dc:	428b      	cmp	r3, r1
 800a5de:	bf04      	itt	eq
 800a5e0:	6819      	ldreq	r1, [r3, #0]
 800a5e2:	685b      	ldreq	r3, [r3, #4]
 800a5e4:	6063      	str	r3, [r4, #4]
 800a5e6:	bf04      	itt	eq
 800a5e8:	1949      	addeq	r1, r1, r5
 800a5ea:	6021      	streq	r1, [r4, #0]
 800a5ec:	6054      	str	r4, [r2, #4]
 800a5ee:	e7c7      	b.n	800a580 <_free_r+0x28>
 800a5f0:	b003      	add	sp, #12
 800a5f2:	bd30      	pop	{r4, r5, pc}
 800a5f4:	20001b14 	.word	0x20001b14

0800a5f8 <_malloc_r>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	1ccd      	adds	r5, r1, #3
 800a5fc:	f025 0503 	bic.w	r5, r5, #3
 800a600:	3508      	adds	r5, #8
 800a602:	2d0c      	cmp	r5, #12
 800a604:	bf38      	it	cc
 800a606:	250c      	movcc	r5, #12
 800a608:	2d00      	cmp	r5, #0
 800a60a:	4606      	mov	r6, r0
 800a60c:	db01      	blt.n	800a612 <_malloc_r+0x1a>
 800a60e:	42a9      	cmp	r1, r5
 800a610:	d903      	bls.n	800a61a <_malloc_r+0x22>
 800a612:	230c      	movs	r3, #12
 800a614:	6033      	str	r3, [r6, #0]
 800a616:	2000      	movs	r0, #0
 800a618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a61a:	f000 fc51 	bl	800aec0 <__malloc_lock>
 800a61e:	4921      	ldr	r1, [pc, #132]	; (800a6a4 <_malloc_r+0xac>)
 800a620:	680a      	ldr	r2, [r1, #0]
 800a622:	4614      	mov	r4, r2
 800a624:	b99c      	cbnz	r4, 800a64e <_malloc_r+0x56>
 800a626:	4f20      	ldr	r7, [pc, #128]	; (800a6a8 <_malloc_r+0xb0>)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	b923      	cbnz	r3, 800a636 <_malloc_r+0x3e>
 800a62c:	4621      	mov	r1, r4
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f996 	bl	800a960 <_sbrk_r>
 800a634:	6038      	str	r0, [r7, #0]
 800a636:	4629      	mov	r1, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	f000 f991 	bl	800a960 <_sbrk_r>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	d123      	bne.n	800a68a <_malloc_r+0x92>
 800a642:	230c      	movs	r3, #12
 800a644:	6033      	str	r3, [r6, #0]
 800a646:	4630      	mov	r0, r6
 800a648:	f000 fc40 	bl	800aecc <__malloc_unlock>
 800a64c:	e7e3      	b.n	800a616 <_malloc_r+0x1e>
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	1b5b      	subs	r3, r3, r5
 800a652:	d417      	bmi.n	800a684 <_malloc_r+0x8c>
 800a654:	2b0b      	cmp	r3, #11
 800a656:	d903      	bls.n	800a660 <_malloc_r+0x68>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	441c      	add	r4, r3
 800a65c:	6025      	str	r5, [r4, #0]
 800a65e:	e004      	b.n	800a66a <_malloc_r+0x72>
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	42a2      	cmp	r2, r4
 800a664:	bf0c      	ite	eq
 800a666:	600b      	streq	r3, [r1, #0]
 800a668:	6053      	strne	r3, [r2, #4]
 800a66a:	4630      	mov	r0, r6
 800a66c:	f000 fc2e 	bl	800aecc <__malloc_unlock>
 800a670:	f104 000b 	add.w	r0, r4, #11
 800a674:	1d23      	adds	r3, r4, #4
 800a676:	f020 0007 	bic.w	r0, r0, #7
 800a67a:	1ac2      	subs	r2, r0, r3
 800a67c:	d0cc      	beq.n	800a618 <_malloc_r+0x20>
 800a67e:	1a1b      	subs	r3, r3, r0
 800a680:	50a3      	str	r3, [r4, r2]
 800a682:	e7c9      	b.n	800a618 <_malloc_r+0x20>
 800a684:	4622      	mov	r2, r4
 800a686:	6864      	ldr	r4, [r4, #4]
 800a688:	e7cc      	b.n	800a624 <_malloc_r+0x2c>
 800a68a:	1cc4      	adds	r4, r0, #3
 800a68c:	f024 0403 	bic.w	r4, r4, #3
 800a690:	42a0      	cmp	r0, r4
 800a692:	d0e3      	beq.n	800a65c <_malloc_r+0x64>
 800a694:	1a21      	subs	r1, r4, r0
 800a696:	4630      	mov	r0, r6
 800a698:	f000 f962 	bl	800a960 <_sbrk_r>
 800a69c:	3001      	adds	r0, #1
 800a69e:	d1dd      	bne.n	800a65c <_malloc_r+0x64>
 800a6a0:	e7cf      	b.n	800a642 <_malloc_r+0x4a>
 800a6a2:	bf00      	nop
 800a6a4:	20001b14 	.word	0x20001b14
 800a6a8:	20001b18 	.word	0x20001b18

0800a6ac <__sfputc_r>:
 800a6ac:	6893      	ldr	r3, [r2, #8]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	b410      	push	{r4}
 800a6b4:	6093      	str	r3, [r2, #8]
 800a6b6:	da08      	bge.n	800a6ca <__sfputc_r+0x1e>
 800a6b8:	6994      	ldr	r4, [r2, #24]
 800a6ba:	42a3      	cmp	r3, r4
 800a6bc:	db01      	blt.n	800a6c2 <__sfputc_r+0x16>
 800a6be:	290a      	cmp	r1, #10
 800a6c0:	d103      	bne.n	800a6ca <__sfputc_r+0x1e>
 800a6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6c6:	f000 b99f 	b.w	800aa08 <__swbuf_r>
 800a6ca:	6813      	ldr	r3, [r2, #0]
 800a6cc:	1c58      	adds	r0, r3, #1
 800a6ce:	6010      	str	r0, [r2, #0]
 800a6d0:	7019      	strb	r1, [r3, #0]
 800a6d2:	4608      	mov	r0, r1
 800a6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <__sfputs_r>:
 800a6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6dc:	4606      	mov	r6, r0
 800a6de:	460f      	mov	r7, r1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	18d5      	adds	r5, r2, r3
 800a6e4:	42ac      	cmp	r4, r5
 800a6e6:	d101      	bne.n	800a6ec <__sfputs_r+0x12>
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	e007      	b.n	800a6fc <__sfputs_r+0x22>
 800a6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f0:	463a      	mov	r2, r7
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7ff ffda 	bl	800a6ac <__sfputc_r>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d1f3      	bne.n	800a6e4 <__sfputs_r+0xa>
 800a6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a700 <_vfiprintf_r>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	460d      	mov	r5, r1
 800a706:	b09d      	sub	sp, #116	; 0x74
 800a708:	4614      	mov	r4, r2
 800a70a:	4698      	mov	r8, r3
 800a70c:	4606      	mov	r6, r0
 800a70e:	b118      	cbz	r0, 800a718 <_vfiprintf_r+0x18>
 800a710:	6983      	ldr	r3, [r0, #24]
 800a712:	b90b      	cbnz	r3, 800a718 <_vfiprintf_r+0x18>
 800a714:	f7ff fae4 	bl	8009ce0 <__sinit>
 800a718:	4b89      	ldr	r3, [pc, #548]	; (800a940 <_vfiprintf_r+0x240>)
 800a71a:	429d      	cmp	r5, r3
 800a71c:	d11b      	bne.n	800a756 <_vfiprintf_r+0x56>
 800a71e:	6875      	ldr	r5, [r6, #4]
 800a720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a722:	07d9      	lsls	r1, r3, #31
 800a724:	d405      	bmi.n	800a732 <_vfiprintf_r+0x32>
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	059a      	lsls	r2, r3, #22
 800a72a:	d402      	bmi.n	800a732 <_vfiprintf_r+0x32>
 800a72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72e:	f7ff fb7a 	bl	8009e26 <__retarget_lock_acquire_recursive>
 800a732:	89ab      	ldrh	r3, [r5, #12]
 800a734:	071b      	lsls	r3, r3, #28
 800a736:	d501      	bpl.n	800a73c <_vfiprintf_r+0x3c>
 800a738:	692b      	ldr	r3, [r5, #16]
 800a73a:	b9eb      	cbnz	r3, 800a778 <_vfiprintf_r+0x78>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4630      	mov	r0, r6
 800a740:	f000 f9c6 	bl	800aad0 <__swsetup_r>
 800a744:	b1c0      	cbz	r0, 800a778 <_vfiprintf_r+0x78>
 800a746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a748:	07dc      	lsls	r4, r3, #31
 800a74a:	d50e      	bpl.n	800a76a <_vfiprintf_r+0x6a>
 800a74c:	f04f 30ff 	mov.w	r0, #4294967295
 800a750:	b01d      	add	sp, #116	; 0x74
 800a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a756:	4b7b      	ldr	r3, [pc, #492]	; (800a944 <_vfiprintf_r+0x244>)
 800a758:	429d      	cmp	r5, r3
 800a75a:	d101      	bne.n	800a760 <_vfiprintf_r+0x60>
 800a75c:	68b5      	ldr	r5, [r6, #8]
 800a75e:	e7df      	b.n	800a720 <_vfiprintf_r+0x20>
 800a760:	4b79      	ldr	r3, [pc, #484]	; (800a948 <_vfiprintf_r+0x248>)
 800a762:	429d      	cmp	r5, r3
 800a764:	bf08      	it	eq
 800a766:	68f5      	ldreq	r5, [r6, #12]
 800a768:	e7da      	b.n	800a720 <_vfiprintf_r+0x20>
 800a76a:	89ab      	ldrh	r3, [r5, #12]
 800a76c:	0598      	lsls	r0, r3, #22
 800a76e:	d4ed      	bmi.n	800a74c <_vfiprintf_r+0x4c>
 800a770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a772:	f7ff fb59 	bl	8009e28 <__retarget_lock_release_recursive>
 800a776:	e7e9      	b.n	800a74c <_vfiprintf_r+0x4c>
 800a778:	2300      	movs	r3, #0
 800a77a:	9309      	str	r3, [sp, #36]	; 0x24
 800a77c:	2320      	movs	r3, #32
 800a77e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a782:	f8cd 800c 	str.w	r8, [sp, #12]
 800a786:	2330      	movs	r3, #48	; 0x30
 800a788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a94c <_vfiprintf_r+0x24c>
 800a78c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a790:	f04f 0901 	mov.w	r9, #1
 800a794:	4623      	mov	r3, r4
 800a796:	469a      	mov	sl, r3
 800a798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a79c:	b10a      	cbz	r2, 800a7a2 <_vfiprintf_r+0xa2>
 800a79e:	2a25      	cmp	r2, #37	; 0x25
 800a7a0:	d1f9      	bne.n	800a796 <_vfiprintf_r+0x96>
 800a7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a7a6:	d00b      	beq.n	800a7c0 <_vfiprintf_r+0xc0>
 800a7a8:	465b      	mov	r3, fp
 800a7aa:	4622      	mov	r2, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ff93 	bl	800a6da <__sfputs_r>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	f000 80aa 	beq.w	800a90e <_vfiprintf_r+0x20e>
 800a7ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7bc:	445a      	add	r2, fp
 800a7be:	9209      	str	r2, [sp, #36]	; 0x24
 800a7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 80a2 	beq.w	800a90e <_vfiprintf_r+0x20e>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7d4:	f10a 0a01 	add.w	sl, sl, #1
 800a7d8:	9304      	str	r3, [sp, #16]
 800a7da:	9307      	str	r3, [sp, #28]
 800a7dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7e2:	4654      	mov	r4, sl
 800a7e4:	2205      	movs	r2, #5
 800a7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ea:	4858      	ldr	r0, [pc, #352]	; (800a94c <_vfiprintf_r+0x24c>)
 800a7ec:	f7f5 fcf8 	bl	80001e0 <memchr>
 800a7f0:	9a04      	ldr	r2, [sp, #16]
 800a7f2:	b9d8      	cbnz	r0, 800a82c <_vfiprintf_r+0x12c>
 800a7f4:	06d1      	lsls	r1, r2, #27
 800a7f6:	bf44      	itt	mi
 800a7f8:	2320      	movmi	r3, #32
 800a7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7fe:	0713      	lsls	r3, r2, #28
 800a800:	bf44      	itt	mi
 800a802:	232b      	movmi	r3, #43	; 0x2b
 800a804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a808:	f89a 3000 	ldrb.w	r3, [sl]
 800a80c:	2b2a      	cmp	r3, #42	; 0x2a
 800a80e:	d015      	beq.n	800a83c <_vfiprintf_r+0x13c>
 800a810:	9a07      	ldr	r2, [sp, #28]
 800a812:	4654      	mov	r4, sl
 800a814:	2000      	movs	r0, #0
 800a816:	f04f 0c0a 	mov.w	ip, #10
 800a81a:	4621      	mov	r1, r4
 800a81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a820:	3b30      	subs	r3, #48	; 0x30
 800a822:	2b09      	cmp	r3, #9
 800a824:	d94e      	bls.n	800a8c4 <_vfiprintf_r+0x1c4>
 800a826:	b1b0      	cbz	r0, 800a856 <_vfiprintf_r+0x156>
 800a828:	9207      	str	r2, [sp, #28]
 800a82a:	e014      	b.n	800a856 <_vfiprintf_r+0x156>
 800a82c:	eba0 0308 	sub.w	r3, r0, r8
 800a830:	fa09 f303 	lsl.w	r3, r9, r3
 800a834:	4313      	orrs	r3, r2
 800a836:	9304      	str	r3, [sp, #16]
 800a838:	46a2      	mov	sl, r4
 800a83a:	e7d2      	b.n	800a7e2 <_vfiprintf_r+0xe2>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	1d19      	adds	r1, r3, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	9103      	str	r1, [sp, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	bfbb      	ittet	lt
 800a848:	425b      	neglt	r3, r3
 800a84a:	f042 0202 	orrlt.w	r2, r2, #2
 800a84e:	9307      	strge	r3, [sp, #28]
 800a850:	9307      	strlt	r3, [sp, #28]
 800a852:	bfb8      	it	lt
 800a854:	9204      	strlt	r2, [sp, #16]
 800a856:	7823      	ldrb	r3, [r4, #0]
 800a858:	2b2e      	cmp	r3, #46	; 0x2e
 800a85a:	d10c      	bne.n	800a876 <_vfiprintf_r+0x176>
 800a85c:	7863      	ldrb	r3, [r4, #1]
 800a85e:	2b2a      	cmp	r3, #42	; 0x2a
 800a860:	d135      	bne.n	800a8ce <_vfiprintf_r+0x1ce>
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	1d1a      	adds	r2, r3, #4
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	9203      	str	r2, [sp, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	bfb8      	it	lt
 800a86e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a872:	3402      	adds	r4, #2
 800a874:	9305      	str	r3, [sp, #20]
 800a876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a95c <_vfiprintf_r+0x25c>
 800a87a:	7821      	ldrb	r1, [r4, #0]
 800a87c:	2203      	movs	r2, #3
 800a87e:	4650      	mov	r0, sl
 800a880:	f7f5 fcae 	bl	80001e0 <memchr>
 800a884:	b140      	cbz	r0, 800a898 <_vfiprintf_r+0x198>
 800a886:	2340      	movs	r3, #64	; 0x40
 800a888:	eba0 000a 	sub.w	r0, r0, sl
 800a88c:	fa03 f000 	lsl.w	r0, r3, r0
 800a890:	9b04      	ldr	r3, [sp, #16]
 800a892:	4303      	orrs	r3, r0
 800a894:	3401      	adds	r4, #1
 800a896:	9304      	str	r3, [sp, #16]
 800a898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89c:	482c      	ldr	r0, [pc, #176]	; (800a950 <_vfiprintf_r+0x250>)
 800a89e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8a2:	2206      	movs	r2, #6
 800a8a4:	f7f5 fc9c 	bl	80001e0 <memchr>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d03f      	beq.n	800a92c <_vfiprintf_r+0x22c>
 800a8ac:	4b29      	ldr	r3, [pc, #164]	; (800a954 <_vfiprintf_r+0x254>)
 800a8ae:	bb1b      	cbnz	r3, 800a8f8 <_vfiprintf_r+0x1f8>
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	3307      	adds	r3, #7
 800a8b4:	f023 0307 	bic.w	r3, r3, #7
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8be:	443b      	add	r3, r7
 800a8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c2:	e767      	b.n	800a794 <_vfiprintf_r+0x94>
 800a8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	e7a5      	b.n	800a81a <_vfiprintf_r+0x11a>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	3401      	adds	r4, #1
 800a8d2:	9305      	str	r3, [sp, #20]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f04f 0c0a 	mov.w	ip, #10
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e0:	3a30      	subs	r2, #48	; 0x30
 800a8e2:	2a09      	cmp	r2, #9
 800a8e4:	d903      	bls.n	800a8ee <_vfiprintf_r+0x1ee>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0c5      	beq.n	800a876 <_vfiprintf_r+0x176>
 800a8ea:	9105      	str	r1, [sp, #20]
 800a8ec:	e7c3      	b.n	800a876 <_vfiprintf_r+0x176>
 800a8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e7f0      	b.n	800a8da <_vfiprintf_r+0x1da>
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4b16      	ldr	r3, [pc, #88]	; (800a958 <_vfiprintf_r+0x258>)
 800a900:	a904      	add	r1, sp, #16
 800a902:	4630      	mov	r0, r6
 800a904:	f7fd ff3a 	bl	800877c <_printf_float>
 800a908:	4607      	mov	r7, r0
 800a90a:	1c78      	adds	r0, r7, #1
 800a90c:	d1d6      	bne.n	800a8bc <_vfiprintf_r+0x1bc>
 800a90e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a910:	07d9      	lsls	r1, r3, #31
 800a912:	d405      	bmi.n	800a920 <_vfiprintf_r+0x220>
 800a914:	89ab      	ldrh	r3, [r5, #12]
 800a916:	059a      	lsls	r2, r3, #22
 800a918:	d402      	bmi.n	800a920 <_vfiprintf_r+0x220>
 800a91a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91c:	f7ff fa84 	bl	8009e28 <__retarget_lock_release_recursive>
 800a920:	89ab      	ldrh	r3, [r5, #12]
 800a922:	065b      	lsls	r3, r3, #25
 800a924:	f53f af12 	bmi.w	800a74c <_vfiprintf_r+0x4c>
 800a928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92a:	e711      	b.n	800a750 <_vfiprintf_r+0x50>
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	4b09      	ldr	r3, [pc, #36]	; (800a958 <_vfiprintf_r+0x258>)
 800a934:	a904      	add	r1, sp, #16
 800a936:	4630      	mov	r0, r6
 800a938:	f7fe f9c4 	bl	8008cc4 <_printf_i>
 800a93c:	e7e4      	b.n	800a908 <_vfiprintf_r+0x208>
 800a93e:	bf00      	nop
 800a940:	0800b224 	.word	0x0800b224
 800a944:	0800b244 	.word	0x0800b244
 800a948:	0800b204 	.word	0x0800b204
 800a94c:	0800b3c4 	.word	0x0800b3c4
 800a950:	0800b3ce 	.word	0x0800b3ce
 800a954:	0800877d 	.word	0x0800877d
 800a958:	0800a6db 	.word	0x0800a6db
 800a95c:	0800b3ca 	.word	0x0800b3ca

0800a960 <_sbrk_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d06      	ldr	r5, [pc, #24]	; (800a97c <_sbrk_r+0x1c>)
 800a964:	2300      	movs	r3, #0
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f6 ff2c 	bl	80017c8 <_sbrk>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_sbrk_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_sbrk_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20001ccc 	.word	0x20001ccc

0800a980 <__sread>:
 800a980:	b510      	push	{r4, lr}
 800a982:	460c      	mov	r4, r1
 800a984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a988:	f000 faa6 	bl	800aed8 <_read_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	bfab      	itete	ge
 800a990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a992:	89a3      	ldrhlt	r3, [r4, #12]
 800a994:	181b      	addge	r3, r3, r0
 800a996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a99a:	bfac      	ite	ge
 800a99c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a99e:	81a3      	strhlt	r3, [r4, #12]
 800a9a0:	bd10      	pop	{r4, pc}

0800a9a2 <__swrite>:
 800a9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a6:	461f      	mov	r7, r3
 800a9a8:	898b      	ldrh	r3, [r1, #12]
 800a9aa:	05db      	lsls	r3, r3, #23
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	d505      	bpl.n	800a9c0 <__swrite+0x1e>
 800a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f000 f9f8 	bl	800adb0 <_lseek_r>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	463b      	mov	r3, r7
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d6:	f000 b869 	b.w	800aaac <_write_r>

0800a9da <__sseek>:
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	460c      	mov	r4, r1
 800a9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e2:	f000 f9e5 	bl	800adb0 <_lseek_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	bf15      	itete	ne
 800a9ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9f6:	81a3      	strheq	r3, [r4, #12]
 800a9f8:	bf18      	it	ne
 800a9fa:	81a3      	strhne	r3, [r4, #12]
 800a9fc:	bd10      	pop	{r4, pc}

0800a9fe <__sclose>:
 800a9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa02:	f000 b8f1 	b.w	800abe8 <_close_r>
	...

0800aa08 <__swbuf_r>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	460e      	mov	r6, r1
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	4605      	mov	r5, r0
 800aa10:	b118      	cbz	r0, 800aa1a <__swbuf_r+0x12>
 800aa12:	6983      	ldr	r3, [r0, #24]
 800aa14:	b90b      	cbnz	r3, 800aa1a <__swbuf_r+0x12>
 800aa16:	f7ff f963 	bl	8009ce0 <__sinit>
 800aa1a:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <__swbuf_r+0x98>)
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	d12b      	bne.n	800aa78 <__swbuf_r+0x70>
 800aa20:	686c      	ldr	r4, [r5, #4]
 800aa22:	69a3      	ldr	r3, [r4, #24]
 800aa24:	60a3      	str	r3, [r4, #8]
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	071a      	lsls	r2, r3, #28
 800aa2a:	d52f      	bpl.n	800aa8c <__swbuf_r+0x84>
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	b36b      	cbz	r3, 800aa8c <__swbuf_r+0x84>
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	6820      	ldr	r0, [r4, #0]
 800aa34:	1ac0      	subs	r0, r0, r3
 800aa36:	6963      	ldr	r3, [r4, #20]
 800aa38:	b2f6      	uxtb	r6, r6
 800aa3a:	4283      	cmp	r3, r0
 800aa3c:	4637      	mov	r7, r6
 800aa3e:	dc04      	bgt.n	800aa4a <__swbuf_r+0x42>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f966 	bl	800ad14 <_fflush_r>
 800aa48:	bb30      	cbnz	r0, 800aa98 <__swbuf_r+0x90>
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	60a3      	str	r3, [r4, #8]
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	6022      	str	r2, [r4, #0]
 800aa56:	701e      	strb	r6, [r3, #0]
 800aa58:	6963      	ldr	r3, [r4, #20]
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	4283      	cmp	r3, r0
 800aa5e:	d004      	beq.n	800aa6a <__swbuf_r+0x62>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	07db      	lsls	r3, r3, #31
 800aa64:	d506      	bpl.n	800aa74 <__swbuf_r+0x6c>
 800aa66:	2e0a      	cmp	r6, #10
 800aa68:	d104      	bne.n	800aa74 <__swbuf_r+0x6c>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f000 f951 	bl	800ad14 <_fflush_r>
 800aa72:	b988      	cbnz	r0, 800aa98 <__swbuf_r+0x90>
 800aa74:	4638      	mov	r0, r7
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <__swbuf_r+0x9c>)
 800aa7a:	429c      	cmp	r4, r3
 800aa7c:	d101      	bne.n	800aa82 <__swbuf_r+0x7a>
 800aa7e:	68ac      	ldr	r4, [r5, #8]
 800aa80:	e7cf      	b.n	800aa22 <__swbuf_r+0x1a>
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <__swbuf_r+0xa0>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	bf08      	it	eq
 800aa88:	68ec      	ldreq	r4, [r5, #12]
 800aa8a:	e7ca      	b.n	800aa22 <__swbuf_r+0x1a>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f81e 	bl	800aad0 <__swsetup_r>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0cb      	beq.n	800aa30 <__swbuf_r+0x28>
 800aa98:	f04f 37ff 	mov.w	r7, #4294967295
 800aa9c:	e7ea      	b.n	800aa74 <__swbuf_r+0x6c>
 800aa9e:	bf00      	nop
 800aaa0:	0800b224 	.word	0x0800b224
 800aaa4:	0800b244 	.word	0x0800b244
 800aaa8:	0800b204 	.word	0x0800b204

0800aaac <_write_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d07      	ldr	r5, [pc, #28]	; (800aacc <_write_r+0x20>)
 800aab0:	4604      	mov	r4, r0
 800aab2:	4608      	mov	r0, r1
 800aab4:	4611      	mov	r1, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	602a      	str	r2, [r5, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7f6 f874 	bl	8000ba8 <_write>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_write_r+0x1e>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_write_r+0x1e>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20001ccc 	.word	0x20001ccc

0800aad0 <__swsetup_r>:
 800aad0:	4b32      	ldr	r3, [pc, #200]	; (800ab9c <__swsetup_r+0xcc>)
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	681d      	ldr	r5, [r3, #0]
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	b125      	cbz	r5, 800aae6 <__swsetup_r+0x16>
 800aadc:	69ab      	ldr	r3, [r5, #24]
 800aade:	b913      	cbnz	r3, 800aae6 <__swsetup_r+0x16>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f7ff f8fd 	bl	8009ce0 <__sinit>
 800aae6:	4b2e      	ldr	r3, [pc, #184]	; (800aba0 <__swsetup_r+0xd0>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d10f      	bne.n	800ab0c <__swsetup_r+0x3c>
 800aaec:	686c      	ldr	r4, [r5, #4]
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf4:	0719      	lsls	r1, r3, #28
 800aaf6:	d42c      	bmi.n	800ab52 <__swsetup_r+0x82>
 800aaf8:	06dd      	lsls	r5, r3, #27
 800aafa:	d411      	bmi.n	800ab20 <__swsetup_r+0x50>
 800aafc:	2309      	movs	r3, #9
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0a:	e03e      	b.n	800ab8a <__swsetup_r+0xba>
 800ab0c:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <__swsetup_r+0xd4>)
 800ab0e:	429c      	cmp	r4, r3
 800ab10:	d101      	bne.n	800ab16 <__swsetup_r+0x46>
 800ab12:	68ac      	ldr	r4, [r5, #8]
 800ab14:	e7eb      	b.n	800aaee <__swsetup_r+0x1e>
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <__swsetup_r+0xd8>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	bf08      	it	eq
 800ab1c:	68ec      	ldreq	r4, [r5, #12]
 800ab1e:	e7e6      	b.n	800aaee <__swsetup_r+0x1e>
 800ab20:	0758      	lsls	r0, r3, #29
 800ab22:	d512      	bpl.n	800ab4a <__swsetup_r+0x7a>
 800ab24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab26:	b141      	cbz	r1, 800ab3a <__swsetup_r+0x6a>
 800ab28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d002      	beq.n	800ab36 <__swsetup_r+0x66>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff fd11 	bl	800a558 <_free_r>
 800ab36:	2300      	movs	r3, #0
 800ab38:	6363      	str	r3, [r4, #52]	; 0x34
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	2300      	movs	r3, #0
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f043 0308 	orr.w	r3, r3, #8
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	b94b      	cbnz	r3, 800ab6a <__swsetup_r+0x9a>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab60:	d003      	beq.n	800ab6a <__swsetup_r+0x9a>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 f959 	bl	800ae1c <__smakebuf_r>
 800ab6a:	89a0      	ldrh	r0, [r4, #12]
 800ab6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab70:	f010 0301 	ands.w	r3, r0, #1
 800ab74:	d00a      	beq.n	800ab8c <__swsetup_r+0xbc>
 800ab76:	2300      	movs	r3, #0
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6963      	ldr	r3, [r4, #20]
 800ab7c:	425b      	negs	r3, r3
 800ab7e:	61a3      	str	r3, [r4, #24]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b943      	cbnz	r3, 800ab96 <__swsetup_r+0xc6>
 800ab84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab88:	d1ba      	bne.n	800ab00 <__swsetup_r+0x30>
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	0781      	lsls	r1, r0, #30
 800ab8e:	bf58      	it	pl
 800ab90:	6963      	ldrpl	r3, [r4, #20]
 800ab92:	60a3      	str	r3, [r4, #8]
 800ab94:	e7f4      	b.n	800ab80 <__swsetup_r+0xb0>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7f7      	b.n	800ab8a <__swsetup_r+0xba>
 800ab9a:	bf00      	nop
 800ab9c:	20000010 	.word	0x20000010
 800aba0:	0800b224 	.word	0x0800b224
 800aba4:	0800b244 	.word	0x0800b244
 800aba8:	0800b204 	.word	0x0800b204

0800abac <__assert_func>:
 800abac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abae:	4614      	mov	r4, r2
 800abb0:	461a      	mov	r2, r3
 800abb2:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <__assert_func+0x2c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4605      	mov	r5, r0
 800abb8:	68d8      	ldr	r0, [r3, #12]
 800abba:	b14c      	cbz	r4, 800abd0 <__assert_func+0x24>
 800abbc:	4b07      	ldr	r3, [pc, #28]	; (800abdc <__assert_func+0x30>)
 800abbe:	9100      	str	r1, [sp, #0]
 800abc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abc4:	4906      	ldr	r1, [pc, #24]	; (800abe0 <__assert_func+0x34>)
 800abc6:	462b      	mov	r3, r5
 800abc8:	f000 f8e0 	bl	800ad8c <fiprintf>
 800abcc:	f000 f9a3 	bl	800af16 <abort>
 800abd0:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <__assert_func+0x38>)
 800abd2:	461c      	mov	r4, r3
 800abd4:	e7f3      	b.n	800abbe <__assert_func+0x12>
 800abd6:	bf00      	nop
 800abd8:	20000010 	.word	0x20000010
 800abdc:	0800b3d5 	.word	0x0800b3d5
 800abe0:	0800b3e2 	.word	0x0800b3e2
 800abe4:	0800b410 	.word	0x0800b410

0800abe8 <_close_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d06      	ldr	r5, [pc, #24]	; (800ac04 <_close_r+0x1c>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f7f6 fdb4 	bl	8001760 <_close>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_close_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_close_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	20001ccc 	.word	0x20001ccc

0800ac08 <__sflush_r>:
 800ac08:	898a      	ldrh	r2, [r1, #12]
 800ac0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0e:	4605      	mov	r5, r0
 800ac10:	0710      	lsls	r0, r2, #28
 800ac12:	460c      	mov	r4, r1
 800ac14:	d458      	bmi.n	800acc8 <__sflush_r+0xc0>
 800ac16:	684b      	ldr	r3, [r1, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc05      	bgt.n	800ac28 <__sflush_r+0x20>
 800ac1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	dc02      	bgt.n	800ac28 <__sflush_r+0x20>
 800ac22:	2000      	movs	r0, #0
 800ac24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d0f9      	beq.n	800ac22 <__sflush_r+0x1a>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac34:	682f      	ldr	r7, [r5, #0]
 800ac36:	602b      	str	r3, [r5, #0]
 800ac38:	d032      	beq.n	800aca0 <__sflush_r+0x98>
 800ac3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	075a      	lsls	r2, r3, #29
 800ac40:	d505      	bpl.n	800ac4e <__sflush_r+0x46>
 800ac42:	6863      	ldr	r3, [r4, #4]
 800ac44:	1ac0      	subs	r0, r0, r3
 800ac46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac48:	b10b      	cbz	r3, 800ac4e <__sflush_r+0x46>
 800ac4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac4c:	1ac0      	subs	r0, r0, r3
 800ac4e:	2300      	movs	r3, #0
 800ac50:	4602      	mov	r2, r0
 800ac52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac54:	6a21      	ldr	r1, [r4, #32]
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b0      	blx	r6
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	d106      	bne.n	800ac6e <__sflush_r+0x66>
 800ac60:	6829      	ldr	r1, [r5, #0]
 800ac62:	291d      	cmp	r1, #29
 800ac64:	d82c      	bhi.n	800acc0 <__sflush_r+0xb8>
 800ac66:	4a2a      	ldr	r2, [pc, #168]	; (800ad10 <__sflush_r+0x108>)
 800ac68:	40ca      	lsrs	r2, r1
 800ac6a:	07d6      	lsls	r6, r2, #31
 800ac6c:	d528      	bpl.n	800acc0 <__sflush_r+0xb8>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	6062      	str	r2, [r4, #4]
 800ac72:	04d9      	lsls	r1, r3, #19
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	6022      	str	r2, [r4, #0]
 800ac78:	d504      	bpl.n	800ac84 <__sflush_r+0x7c>
 800ac7a:	1c42      	adds	r2, r0, #1
 800ac7c:	d101      	bne.n	800ac82 <__sflush_r+0x7a>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	b903      	cbnz	r3, 800ac84 <__sflush_r+0x7c>
 800ac82:	6560      	str	r0, [r4, #84]	; 0x54
 800ac84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac86:	602f      	str	r7, [r5, #0]
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	d0ca      	beq.n	800ac22 <__sflush_r+0x1a>
 800ac8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac90:	4299      	cmp	r1, r3
 800ac92:	d002      	beq.n	800ac9a <__sflush_r+0x92>
 800ac94:	4628      	mov	r0, r5
 800ac96:	f7ff fc5f 	bl	800a558 <_free_r>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac9e:	e7c1      	b.n	800ac24 <__sflush_r+0x1c>
 800aca0:	6a21      	ldr	r1, [r4, #32]
 800aca2:	2301      	movs	r3, #1
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b0      	blx	r6
 800aca8:	1c41      	adds	r1, r0, #1
 800acaa:	d1c7      	bne.n	800ac3c <__sflush_r+0x34>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0c4      	beq.n	800ac3c <__sflush_r+0x34>
 800acb2:	2b1d      	cmp	r3, #29
 800acb4:	d001      	beq.n	800acba <__sflush_r+0xb2>
 800acb6:	2b16      	cmp	r3, #22
 800acb8:	d101      	bne.n	800acbe <__sflush_r+0xb6>
 800acba:	602f      	str	r7, [r5, #0]
 800acbc:	e7b1      	b.n	800ac22 <__sflush_r+0x1a>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	e7ad      	b.n	800ac24 <__sflush_r+0x1c>
 800acc8:	690f      	ldr	r7, [r1, #16]
 800acca:	2f00      	cmp	r7, #0
 800accc:	d0a9      	beq.n	800ac22 <__sflush_r+0x1a>
 800acce:	0793      	lsls	r3, r2, #30
 800acd0:	680e      	ldr	r6, [r1, #0]
 800acd2:	bf08      	it	eq
 800acd4:	694b      	ldreq	r3, [r1, #20]
 800acd6:	600f      	str	r7, [r1, #0]
 800acd8:	bf18      	it	ne
 800acda:	2300      	movne	r3, #0
 800acdc:	eba6 0807 	sub.w	r8, r6, r7
 800ace0:	608b      	str	r3, [r1, #8]
 800ace2:	f1b8 0f00 	cmp.w	r8, #0
 800ace6:	dd9c      	ble.n	800ac22 <__sflush_r+0x1a>
 800ace8:	6a21      	ldr	r1, [r4, #32]
 800acea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acec:	4643      	mov	r3, r8
 800acee:	463a      	mov	r2, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b0      	blx	r6
 800acf4:	2800      	cmp	r0, #0
 800acf6:	dc06      	bgt.n	800ad06 <__sflush_r+0xfe>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	e78e      	b.n	800ac24 <__sflush_r+0x1c>
 800ad06:	4407      	add	r7, r0
 800ad08:	eba8 0800 	sub.w	r8, r8, r0
 800ad0c:	e7e9      	b.n	800ace2 <__sflush_r+0xda>
 800ad0e:	bf00      	nop
 800ad10:	20400001 	.word	0x20400001

0800ad14 <_fflush_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	690b      	ldr	r3, [r1, #16]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	b913      	cbnz	r3, 800ad24 <_fflush_r+0x10>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	4628      	mov	r0, r5
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	b118      	cbz	r0, 800ad2e <_fflush_r+0x1a>
 800ad26:	6983      	ldr	r3, [r0, #24]
 800ad28:	b90b      	cbnz	r3, 800ad2e <_fflush_r+0x1a>
 800ad2a:	f7fe ffd9 	bl	8009ce0 <__sinit>
 800ad2e:	4b14      	ldr	r3, [pc, #80]	; (800ad80 <_fflush_r+0x6c>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d11b      	bne.n	800ad6c <_fflush_r+0x58>
 800ad34:	686c      	ldr	r4, [r5, #4]
 800ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0ef      	beq.n	800ad1e <_fflush_r+0xa>
 800ad3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad40:	07d0      	lsls	r0, r2, #31
 800ad42:	d404      	bmi.n	800ad4e <_fflush_r+0x3a>
 800ad44:	0599      	lsls	r1, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_fflush_r+0x3a>
 800ad48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4a:	f7ff f86c 	bl	8009e26 <__retarget_lock_acquire_recursive>
 800ad4e:	4628      	mov	r0, r5
 800ad50:	4621      	mov	r1, r4
 800ad52:	f7ff ff59 	bl	800ac08 <__sflush_r>
 800ad56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad58:	07da      	lsls	r2, r3, #31
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	d4e0      	bmi.n	800ad20 <_fflush_r+0xc>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	059b      	lsls	r3, r3, #22
 800ad62:	d4dd      	bmi.n	800ad20 <_fflush_r+0xc>
 800ad64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad66:	f7ff f85f 	bl	8009e28 <__retarget_lock_release_recursive>
 800ad6a:	e7d9      	b.n	800ad20 <_fflush_r+0xc>
 800ad6c:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <_fflush_r+0x70>)
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	d101      	bne.n	800ad76 <_fflush_r+0x62>
 800ad72:	68ac      	ldr	r4, [r5, #8]
 800ad74:	e7df      	b.n	800ad36 <_fflush_r+0x22>
 800ad76:	4b04      	ldr	r3, [pc, #16]	; (800ad88 <_fflush_r+0x74>)
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	bf08      	it	eq
 800ad7c:	68ec      	ldreq	r4, [r5, #12]
 800ad7e:	e7da      	b.n	800ad36 <_fflush_r+0x22>
 800ad80:	0800b224 	.word	0x0800b224
 800ad84:	0800b244 	.word	0x0800b244
 800ad88:	0800b204 	.word	0x0800b204

0800ad8c <fiprintf>:
 800ad8c:	b40e      	push	{r1, r2, r3}
 800ad8e:	b503      	push	{r0, r1, lr}
 800ad90:	4601      	mov	r1, r0
 800ad92:	ab03      	add	r3, sp, #12
 800ad94:	4805      	ldr	r0, [pc, #20]	; (800adac <fiprintf+0x20>)
 800ad96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f7ff fcaf 	bl	800a700 <_vfiprintf_r>
 800ada2:	b002      	add	sp, #8
 800ada4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada8:	b003      	add	sp, #12
 800adaa:	4770      	bx	lr
 800adac:	20000010 	.word	0x20000010

0800adb0 <_lseek_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	; (800add0 <_lseek_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f6 fcf5 	bl	80017ae <_lseek>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_lseek_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_lseek_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20001ccc 	.word	0x20001ccc

0800add4 <__swhatbuf_r>:
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	460e      	mov	r6, r1
 800add8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800addc:	2900      	cmp	r1, #0
 800adde:	b096      	sub	sp, #88	; 0x58
 800ade0:	4614      	mov	r4, r2
 800ade2:	461d      	mov	r5, r3
 800ade4:	da07      	bge.n	800adf6 <__swhatbuf_r+0x22>
 800ade6:	2300      	movs	r3, #0
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	89b3      	ldrh	r3, [r6, #12]
 800adec:	061a      	lsls	r2, r3, #24
 800adee:	d410      	bmi.n	800ae12 <__swhatbuf_r+0x3e>
 800adf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf4:	e00e      	b.n	800ae14 <__swhatbuf_r+0x40>
 800adf6:	466a      	mov	r2, sp
 800adf8:	f000 f894 	bl	800af24 <_fstat_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	dbf2      	blt.n	800ade6 <__swhatbuf_r+0x12>
 800ae00:	9a01      	ldr	r2, [sp, #4]
 800ae02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae0a:	425a      	negs	r2, r3
 800ae0c:	415a      	adcs	r2, r3
 800ae0e:	602a      	str	r2, [r5, #0]
 800ae10:	e7ee      	b.n	800adf0 <__swhatbuf_r+0x1c>
 800ae12:	2340      	movs	r3, #64	; 0x40
 800ae14:	2000      	movs	r0, #0
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	b016      	add	sp, #88	; 0x58
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}

0800ae1c <__smakebuf_r>:
 800ae1c:	898b      	ldrh	r3, [r1, #12]
 800ae1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae20:	079d      	lsls	r5, r3, #30
 800ae22:	4606      	mov	r6, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	d507      	bpl.n	800ae38 <__smakebuf_r+0x1c>
 800ae28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	6123      	str	r3, [r4, #16]
 800ae30:	2301      	movs	r3, #1
 800ae32:	6163      	str	r3, [r4, #20]
 800ae34:	b002      	add	sp, #8
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	ab01      	add	r3, sp, #4
 800ae3a:	466a      	mov	r2, sp
 800ae3c:	f7ff ffca 	bl	800add4 <__swhatbuf_r>
 800ae40:	9900      	ldr	r1, [sp, #0]
 800ae42:	4605      	mov	r5, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff fbd7 	bl	800a5f8 <_malloc_r>
 800ae4a:	b948      	cbnz	r0, 800ae60 <__smakebuf_r+0x44>
 800ae4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d4ef      	bmi.n	800ae34 <__smakebuf_r+0x18>
 800ae54:	f023 0303 	bic.w	r3, r3, #3
 800ae58:	f043 0302 	orr.w	r3, r3, #2
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	e7e3      	b.n	800ae28 <__smakebuf_r+0xc>
 800ae60:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <__smakebuf_r+0x7c>)
 800ae62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	6020      	str	r0, [r4, #0]
 800ae68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae6c:	81a3      	strh	r3, [r4, #12]
 800ae6e:	9b00      	ldr	r3, [sp, #0]
 800ae70:	6163      	str	r3, [r4, #20]
 800ae72:	9b01      	ldr	r3, [sp, #4]
 800ae74:	6120      	str	r0, [r4, #16]
 800ae76:	b15b      	cbz	r3, 800ae90 <__smakebuf_r+0x74>
 800ae78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f000 f863 	bl	800af48 <_isatty_r>
 800ae82:	b128      	cbz	r0, 800ae90 <__smakebuf_r+0x74>
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	f043 0301 	orr.w	r3, r3, #1
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	89a0      	ldrh	r0, [r4, #12]
 800ae92:	4305      	orrs	r5, r0
 800ae94:	81a5      	strh	r5, [r4, #12]
 800ae96:	e7cd      	b.n	800ae34 <__smakebuf_r+0x18>
 800ae98:	08009c79 	.word	0x08009c79

0800ae9c <__ascii_mbtowc>:
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	b901      	cbnz	r1, 800aea2 <__ascii_mbtowc+0x6>
 800aea0:	a901      	add	r1, sp, #4
 800aea2:	b142      	cbz	r2, 800aeb6 <__ascii_mbtowc+0x1a>
 800aea4:	b14b      	cbz	r3, 800aeba <__ascii_mbtowc+0x1e>
 800aea6:	7813      	ldrb	r3, [r2, #0]
 800aea8:	600b      	str	r3, [r1, #0]
 800aeaa:	7812      	ldrb	r2, [r2, #0]
 800aeac:	1e10      	subs	r0, r2, #0
 800aeae:	bf18      	it	ne
 800aeb0:	2001      	movne	r0, #1
 800aeb2:	b002      	add	sp, #8
 800aeb4:	4770      	bx	lr
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	e7fb      	b.n	800aeb2 <__ascii_mbtowc+0x16>
 800aeba:	f06f 0001 	mvn.w	r0, #1
 800aebe:	e7f8      	b.n	800aeb2 <__ascii_mbtowc+0x16>

0800aec0 <__malloc_lock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_lock+0x8>)
 800aec2:	f7fe bfb0 	b.w	8009e26 <__retarget_lock_acquire_recursive>
 800aec6:	bf00      	nop
 800aec8:	20001cc4 	.word	0x20001cc4

0800aecc <__malloc_unlock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	; (800aed4 <__malloc_unlock+0x8>)
 800aece:	f7fe bfab 	b.w	8009e28 <__retarget_lock_release_recursive>
 800aed2:	bf00      	nop
 800aed4:	20001cc4 	.word	0x20001cc4

0800aed8 <_read_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	; (800aef8 <_read_r+0x20>)
 800aedc:	4604      	mov	r4, r0
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	2200      	movs	r2, #0
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f7f6 fc1d 	bl	8001726 <_read>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_read_r+0x1e>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_read_r+0x1e>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	20001ccc 	.word	0x20001ccc

0800aefc <__ascii_wctomb>:
 800aefc:	b149      	cbz	r1, 800af12 <__ascii_wctomb+0x16>
 800aefe:	2aff      	cmp	r2, #255	; 0xff
 800af00:	bf85      	ittet	hi
 800af02:	238a      	movhi	r3, #138	; 0x8a
 800af04:	6003      	strhi	r3, [r0, #0]
 800af06:	700a      	strbls	r2, [r1, #0]
 800af08:	f04f 30ff 	movhi.w	r0, #4294967295
 800af0c:	bf98      	it	ls
 800af0e:	2001      	movls	r0, #1
 800af10:	4770      	bx	lr
 800af12:	4608      	mov	r0, r1
 800af14:	4770      	bx	lr

0800af16 <abort>:
 800af16:	b508      	push	{r3, lr}
 800af18:	2006      	movs	r0, #6
 800af1a:	f000 f84d 	bl	800afb8 <raise>
 800af1e:	2001      	movs	r0, #1
 800af20:	f7f6 fbf7 	bl	8001712 <_exit>

0800af24 <_fstat_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d07      	ldr	r5, [pc, #28]	; (800af44 <_fstat_r+0x20>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	4611      	mov	r1, r2
 800af30:	602b      	str	r3, [r5, #0]
 800af32:	f7f6 fc21 	bl	8001778 <_fstat>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d102      	bne.n	800af40 <_fstat_r+0x1c>
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	b103      	cbz	r3, 800af40 <_fstat_r+0x1c>
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	20001ccc 	.word	0x20001ccc

0800af48 <_isatty_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_isatty_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f6 fc20 	bl	8001798 <_isatty>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_isatty_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_isatty_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20001ccc 	.word	0x20001ccc

0800af68 <_raise_r>:
 800af68:	291f      	cmp	r1, #31
 800af6a:	b538      	push	{r3, r4, r5, lr}
 800af6c:	4604      	mov	r4, r0
 800af6e:	460d      	mov	r5, r1
 800af70:	d904      	bls.n	800af7c <_raise_r+0x14>
 800af72:	2316      	movs	r3, #22
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af7e:	b112      	cbz	r2, 800af86 <_raise_r+0x1e>
 800af80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af84:	b94b      	cbnz	r3, 800af9a <_raise_r+0x32>
 800af86:	4620      	mov	r0, r4
 800af88:	f000 f830 	bl	800afec <_getpid_r>
 800af8c:	462a      	mov	r2, r5
 800af8e:	4601      	mov	r1, r0
 800af90:	4620      	mov	r0, r4
 800af92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af96:	f000 b817 	b.w	800afc8 <_kill_r>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d00a      	beq.n	800afb4 <_raise_r+0x4c>
 800af9e:	1c59      	adds	r1, r3, #1
 800afa0:	d103      	bne.n	800afaa <_raise_r+0x42>
 800afa2:	2316      	movs	r3, #22
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	2001      	movs	r0, #1
 800afa8:	e7e7      	b.n	800af7a <_raise_r+0x12>
 800afaa:	2400      	movs	r4, #0
 800afac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afb0:	4628      	mov	r0, r5
 800afb2:	4798      	blx	r3
 800afb4:	2000      	movs	r0, #0
 800afb6:	e7e0      	b.n	800af7a <_raise_r+0x12>

0800afb8 <raise>:
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <raise+0xc>)
 800afba:	4601      	mov	r1, r0
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	f7ff bfd3 	b.w	800af68 <_raise_r>
 800afc2:	bf00      	nop
 800afc4:	20000010 	.word	0x20000010

0800afc8 <_kill_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	; (800afe8 <_kill_r+0x20>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	4611      	mov	r1, r2
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	f7f6 fb8c 	bl	80016f2 <_kill>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	d102      	bne.n	800afe4 <_kill_r+0x1c>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	b103      	cbz	r3, 800afe4 <_kill_r+0x1c>
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	20001ccc 	.word	0x20001ccc

0800afec <_getpid_r>:
 800afec:	f7f6 bb79 	b.w	80016e2 <_getpid>

0800aff0 <_init>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr

0800affc <_fini>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr

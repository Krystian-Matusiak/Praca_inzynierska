
Living_Bath_Bed_Rooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800b0c0  0800b0c0  0001b0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5dc  0800b5dc  000202e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5dc  0800b5dc  000202e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5dc  0800b5dc  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5dc  0800b5dc  0001b5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800b5e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dac  200002e4  0800b8c8  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002090  0800b8c8  00022090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3ef  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d20  00000000  00000000  0003e703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00042428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00043740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f46d  00000000  00000000  000448d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f2e  00000000  00000000  00063d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b01e9  00000000  00000000  0007cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ce54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f04  00000000  00000000  0012cea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e4 	.word	0x200002e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0a8 	.word	0x0800b0a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	0800b0a8 	.word	0x0800b0a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_write>:
 *      Author: kus
 */

#include "LoRa.h"

int _write(int file , char *ptr , int len){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1 , ptr , len , 50);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2332      	movs	r3, #50	; 0x32
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <_write+0x24>)
 8000bbe:	f004 fad3 	bl	8005168 <HAL_UART_Transmit>
  return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20001fb8 	.word	0x20001fb8

08000bd0 <SPI_CS_LOW>:

void SPI_CS_LOW(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f002 f8e9 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <SPI_CS_HIGH>:

void SPI_CS_HIGH(){
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f002 f8de 	bl	8002db4 <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <Read_Reg>:

unsigned char Read_Reg(unsigned char addr){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = addr & 0x7F;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	SPI_CS_LOW();
 8000c10:	f7ff ffde 	bl	8000bd0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , HAL_MAX_DELAY);
 8000c14:	f107 010f 	add.w	r1, r7, #15
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <Read_Reg+0x48>)
 8000c20:	f003 fbe7 	bl	80043f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000c24:	f107 010e 	add.w	r1, r7, #14
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <Read_Reg+0x48>)
 8000c30:	f003 fd4d 	bl	80046ce <HAL_SPI_Receive>
	SPI_CS_HIGH();
 8000c34:	f7ff ffd7 	bl	8000be6 <SPI_CS_HIGH>

	return data;
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20001f54 	.word	0x20001f54

08000c48 <Write_Reg>:

void Write_Reg(unsigned char addr , unsigned char value){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	73fb      	strb	r3, [r7, #15]
	uint8_t Value = value;
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	73bb      	strb	r3, [r7, #14]

	SPI_CS_LOW();
 8000c66:	f7ff ffb3 	bl	8000bd0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg,	1 , HAL_MAX_DELAY);
 8000c6a:	f107 010f 	add.w	r1, r7, #15
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	2201      	movs	r2, #1
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <Write_Reg+0x50>)
 8000c76:	f003 fbbc 	bl	80043f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &Value,1 , HAL_MAX_DELAY);
 8000c7a:	f107 010e 	add.w	r1, r7, #14
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2201      	movs	r2, #1
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <Write_Reg+0x50>)
 8000c86:	f003 fbb4 	bl	80043f2 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 8000c8a:	f7ff ffac 	bl	8000be6 <SPI_CS_HIGH>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20001f54 	.word	0x20001f54

08000c9c <set_OPMODE>:

void set_OPMODE(uint8_t mode){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, Read_Reg(REG_OPMODE) & ~OPMODE_MASK | mode );
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff ffa8 	bl	8000bfc <Read_Reg>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	f023 0307 	bic.w	r3, r3, #7
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff ffc0 	bl	8000c48 <Write_Reg>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <set_LoRa_mode>:

void set_LoRa_mode(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ffe0 	bl	8000c9c <set_OPMODE>
	HAL_Delay(15);
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f000 fff3 	bl	8001cc8 <HAL_Delay>

	uint8_t data = OPMODE_LORA;
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, data);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff ffac 	bl	8000c48 <Write_Reg>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <set_Freq>:

void set_Freq(uint64_t freq){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	e9c7 0100 	strd	r0, r1, [r7]
	set_OPMODE(OPMODE_SLEEP);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ffca 	bl	8000c9c <set_OPMODE>
	HAL_Delay(15);
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f000 ffdd 	bl	8001cc8 <HAL_Delay>

	uint64_t frf = (( uint64_t)freq <<14 );  // freq *  2^19 / 32
 8000d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	038b      	lsls	r3, r1, #14
 8000d1c:	ea43 4390 	orr.w	r3, r3, r0, lsr #18
 8000d20:	0382      	lsls	r2, r0, #14
 8000d22:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Write_Reg(REG_FRF_MSB, (uint8_t)(frf>>16) );
 8000d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	0c02      	lsrs	r2, r0, #16
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	b2d3      	uxtb	r3, r2
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f7ff ff82 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_FRF_MID, (uint8_t)(frf>>8) );
 8000d44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	0a02      	lsrs	r2, r0, #8
 8000d52:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000d56:	0a0b      	lsrs	r3, r1, #8
 8000d58:	b2d3      	uxtb	r3, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	f7ff ff73 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_FRF_LSB, (uint8_t)(frf>>0) );
 8000d62:	7a3b      	ldrb	r3, [r7, #8]
 8000d64:	4619      	mov	r1, r3
 8000d66:	2008      	movs	r0, #8
 8000d68:	f7ff ff6e 	bl	8000c48 <Write_Reg>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <set_config>:

void set_config(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ff8e 	bl	8000c9c <set_OPMODE>
	HAL_Delay(15);
 8000d80:	200f      	movs	r0, #15
 8000d82:	f000 ffa1 	bl	8001cc8 <HAL_Delay>

	set_LoRa_mode();
 8000d86:	f7ff ffa3 	bl	8000cd0 <set_LoRa_mode>

	unsigned char version = Read_Reg(REG_VERSION);
 8000d8a:	2042      	movs	r0, #66	; 0x42
 8000d8c:	f7ff ff36 	bl	8000bfc <Read_Reg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]

	printf("%d version \n\r", version);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4819      	ldr	r0, [pc, #100]	; (8000e00 <set_config+0x8c>)
 8000d9a:	f007 ff51 	bl	8008c40 <iprintf>

	Write_Reg(REG_SYNC_WORD, 0x34);
 8000d9e:	2134      	movs	r1, #52	; 0x34
 8000da0:	2039      	movs	r0, #57	; 0x39
 8000da2:	f7ff ff51 	bl	8000c48 <Write_Reg>


	Write_Reg(REG_MODEM_CONFIG3,0x04);
 8000da6:	2104      	movs	r1, #4
 8000da8:	2026      	movs	r0, #38	; 0x26
 8000daa:	f7ff ff4d 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG,0x72);
 8000dae:	2172      	movs	r1, #114	; 0x72
 8000db0:	201d      	movs	r0, #29
 8000db2:	f7ff ff49 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG2, (0x07<<4) | 0x04);
 8000db6:	2174      	movs	r1, #116	; 0x74
 8000db8:	201e      	movs	r0, #30
 8000dba:	f7ff ff45 	bl	8000c48 <Write_Reg>

	Write_Reg(REG_SYMB_TIMEOUT_LSB,0x08);
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	201f      	movs	r0, #31
 8000dc2:	f7ff ff41 	bl	8000c48 <Write_Reg>

	Write_Reg(REG_MAX_PAYLOAD_LENGTH, 0x80);
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	2023      	movs	r0, #35	; 0x23
 8000dca:	f7ff ff3d 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, PAYLOAD_LENGTH);
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	2022      	movs	r0, #34	; 0x22
 8000dd2:	f7ff ff39 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_HOP_PERIOD, 0xFF);
 8000dd6:	21ff      	movs	r1, #255	; 0xff
 8000dd8:	2024      	movs	r0, #36	; 0x24
 8000dda:	f7ff ff35 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, Read_Reg(REG_FIFO_TX_BASE_AD));
 8000dde:	200e      	movs	r0, #14
 8000de0:	f7ff ff0c 	bl	8000bfc <Read_Reg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4619      	mov	r1, r3
 8000de8:	200d      	movs	r0, #13
 8000dea:	f7ff ff2d 	bl	8000c48 <Write_Reg>

	Write_Reg(REG_LNA, LNA_MAX_GAIN);
 8000dee:	2123      	movs	r1, #35	; 0x23
 8000df0:	200c      	movs	r0, #12
 8000df2:	f7ff ff29 	bl	8000c48 <Write_Reg>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	0800b0c0 	.word	0x0800b0c0

08000e04 <LoRa_init>:

void LoRa_init(uint64_t freq){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 ffcc 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f000 ff53 	bl	8001cc8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f001 ffc2 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f000 ff49 	bl	8001cc8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 ffb8 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f000 ff3f 	bl	8001cc8 <HAL_Delay>

	set_Freq(freq);
 8000e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e4e:	f7ff ff53 	bl	8000cf8 <set_Freq>
	set_config();
 8000e52:	f7ff ff8f 	bl	8000d74 <set_config>
	set_LoRa_mode();
 8000e56:	f7ff ff3b 	bl	8000cd0 <set_LoRa_mode>

	set_OPMODE(OPMODE_STANDBY);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff ff1e 	bl	8000c9c <set_OPMODE>
	Write_Reg(RegPaRamp, (Read_Reg(RegPaRamp)& 0xF0) | 0x80 );
 8000e60:	200a      	movs	r0, #10
 8000e62:	f7ff fecb 	bl	8000bfc <Read_Reg>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f7ff fee4 	bl	8000c48 <Write_Reg>
	set_Power(23);
 8000e80:	2017      	movs	r0, #23
 8000e82:	f000 f881 	bl	8000f88 <set_Power>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <Write_Buf>:
	}

	return 1;
}

void Write_Buf(unsigned char addr, unsigned char *value, unsigned char len) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0c4      	sub	sp, #272	; 0x110
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	463b      	mov	r3, r7
 8000e98:	6019      	str	r1, [r3, #0]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	1dbb      	adds	r3, r7, #6
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	701a      	strb	r2, [r3, #0]

	uint8_t reg = addr | 0x80;
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t buf[256];
	for (int i = 0; i < len; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ebc:	e011      	b.n	8000ee2 <Write_Buf+0x52>
		buf[i] = value[i];
 8000ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ec2:	463a      	mov	r2, r7
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	7819      	ldrb	r1, [r3, #0]
 8000eca:	f107 0208 	add.w	r2, r7, #8
 8000ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ed2:	4413      	add	r3, r2
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000edc:	3301      	adds	r3, #1
 8000ede:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ee2:	1dbb      	adds	r3, r7, #6
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbe7      	blt.n	8000ebe <Write_Buf+0x2e>
	}

	SPI_CS_LOW();
 8000eee:	f7ff fe6f 	bl	8000bd0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000ef2:	f207 110b 	addw	r1, r7, #267	; 0x10b
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2201      	movs	r2, #1
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <Write_Buf+0x94>)
 8000efe:	f003 fa78 	bl	80043f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, len, HAL_MAX_DELAY);
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f107 0108 	add.w	r1, r7, #8
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <Write_Buf+0x94>)
 8000f12:	f003 fa6e 	bl	80043f2 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 8000f16:	f7ff fe66 	bl	8000be6 <SPI_CS_HIGH>
}
 8000f1a:	bf00      	nop
 8000f1c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20001f54 	.word	0x20001f54

08000f28 <Transmit>:

void Transmit(unsigned char *frame, unsigned char datalen) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]

	Write_Reg(REG_HOP_PERIOD,0x00);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2024      	movs	r0, #36	; 0x24
 8000f38:	f7ff fe86 	bl	8000c48 <Write_Reg>
	Write_Reg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8000f3c:	21f0      	movs	r1, #240	; 0xf0
 8000f3e:	2040      	movs	r0, #64	; 0x40
 8000f40:	f7ff fe82 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS, 0xFF);
 8000f44:	21ff      	movs	r1, #255	; 0xff
 8000f46:	2012      	movs	r0, #18
 8000f48:	f7ff fe7e 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS_MASK, ~IRQ_LORA_TXDONE_MASK);
 8000f4c:	21f7      	movs	r1, #247	; 0xf7
 8000f4e:	2011      	movs	r0, #17
 8000f50:	f7ff fe7a 	bl	8000c48 <Write_Reg>

	Write_Reg(REG_FIFO_TX_BASE_AD, 0x00);
 8000f54:	2100      	movs	r1, #0
 8000f56:	200e      	movs	r0, #14
 8000f58:	f7ff fe76 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, 0x00);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	200d      	movs	r0, #13
 8000f60:	f7ff fe72 	bl	8000c48 <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, datalen);
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	4619      	mov	r1, r3
 8000f68:	2022      	movs	r0, #34	; 0x22
 8000f6a:	f7ff fe6d 	bl	8000c48 <Write_Reg>

	Write_Buf(REG_FIFO, frame, datalen);
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	461a      	mov	r2, r3
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ff8b 	bl	8000e90 <Write_Buf>
	set_OPMODE(OPMODE_TX);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f7ff fe8e 	bl	8000c9c <set_OPMODE>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <set_Power>:

void set_Power(int8_t pw) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	if(pw >= 17) {
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	dd02      	ble.n	8000fa0 <set_Power+0x18>
		pw = 15;
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e005      	b.n	8000fac <set_Power+0x24>
	} else if(pw < 2) {
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	dc01      	bgt.n	8000fac <set_Power+0x24>
		pw = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	71fb      	strb	r3, [r7, #7]
	}
	Write_Reg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2009      	movs	r0, #9
 8000fc0:	f7ff fe42 	bl	8000c48 <Write_Reg>
	Write_Reg(RegPaDac, Read_Reg(RegPaDac)|0x4);
 8000fc4:	205a      	movs	r0, #90	; 0x5a
 8000fc6:	f7ff fe19 	bl	8000bfc <Read_Reg>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	205a      	movs	r0, #90	; 0x5a
 8000fd6:	f7ff fe37 	bl	8000c48 <Write_Reg>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_ADC2_Init+0xb4>)
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <MX_ADC2_Init+0xb8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001008:	2210      	movs	r2, #16
 800100a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <MX_ADC2_Init+0xb4>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001014:	2200      	movs	r2, #0
 8001016:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_ADC2_Init+0xb4>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001028:	2201      	movs	r2, #1
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_ADC2_Init+0xb4>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001034:	2201      	movs	r2, #1
 8001036:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ADC2_Init+0xb4>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001042:	2204      	movs	r2, #4
 8001044:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001048:	2200      	movs	r2, #0
 800104a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_ADC2_Init+0xb4>)
 800104e:	2200      	movs	r2, #0
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001052:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001054:	f000 fe5c 	bl	8001d10 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800105e:	f000 fba1 	bl	80017a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001062:	2301      	movs	r3, #1
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001066:	2301      	movs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800106e:	2301      	movs	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_ADC2_Init+0xb4>)
 8001080:	f001 f89c 	bl	80021bc <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800108a:	f000 fb8b 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20001dd4 	.word	0x20001dd4
 800109c:	50000100 	.word	0x50000100

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_ADC_MspInit+0x74>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d124      	bne.n	800110c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_ADC_MspInit+0x78>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_ADC_MspInit+0x78>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_ADC_MspInit+0x78>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_ADC_MspInit+0x78>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_ADC_MspInit+0x78>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_ADC_MspInit+0x78>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = HUMIDITY_Pin;
 80010f2:	2310      	movs	r3, #16
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HUMIDITY_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f001 fcca 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	50000100 	.word	0x50000100
 8001118:	40021000 	.word	0x40021000

0800111c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <MX_FREERTOS_Init+0x18>)
 8001122:	2100      	movs	r1, #0
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_FREERTOS_Init+0x1c>)
 8001126:	f004 fc01 	bl	800592c <osThreadNew>
 800112a:	4603      	mov	r3, r0
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <MX_FREERTOS_Init+0x20>)
 800112e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800b19c 	.word	0x0800b19c
 8001138:	08001141 	.word	0x08001141
 800113c:	20001e24 	.word	0x20001e24

08001140 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f004 fc99 	bl	8005a80 <osDelay>
 800114e:	e7fb      	b.n	8001148 <StartDefaultTask+0x8>

08001150 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a35      	ldr	r2, [pc, #212]	; (8001240 <MX_GPIO_Init+0xf0>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_GPIO_Init+0xf0>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <MX_GPIO_Init+0xf0>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_GPIO_Init+0xf0>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|FAN_Pin|FLOOD_ALARM_Pin|RST_Pin
 80011ae:	2200      	movs	r2, #0
 80011b0:	f640 110b 	movw	r1, #2315	; 0x90b
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f001 fdfc 	bl	8002db4 <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT_LIVING_Pin|LIGHT_BED_Pin|LIGHT_BATH_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	21c1      	movs	r1, #193	; 0xc1
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011c2:	f001 fdf7 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	481b      	ldr	r0, [pc, #108]	; (8001248 <MX_GPIO_Init+0xf8>)
 80011da:	f001 fc61 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|FAN_Pin|FLOOD_ALARM_Pin|RST_Pin
 80011de:	f640 130b 	movw	r3, #2315	; 0x90b
 80011e2:	60fb      	str	r3, [r7, #12]
                          |CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f001 fc51 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTION_LIVING_Pin|MOTION_BATH_Pin|MOTION_BED_Pin|BUZZER_OFF_Pin;
 80011fe:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f001 fc43 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIGHT_LIVING_Pin|LIGHT_BED_Pin|LIGHT_BATH_Pin;
 800121a:	23c1      	movs	r3, #193	; 0xc1
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001232:	f001 fc35 	bl	8002aa0 <HAL_GPIO_Init>

}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	48000400 	.word	0x48000400
 8001248:	48001400 	.word	0x48001400

0800124c <inttochar>:
// Transmit and receive buffor


uint16_t frame = 0b01000000;

void inttochar(uint16_t i , char * c, uint8_t hum){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	80fb      	strh	r3, [r7, #6]
 8001258:	4613      	mov	r3, r2
 800125a:	717b      	strb	r3, [r7, #5]
	sprintf(humidity_char,"%d",hum);
 800125c:	797b      	ldrb	r3, [r7, #5]
 800125e:	461a      	mov	r2, r3
 8001260:	491c      	ldr	r1, [pc, #112]	; (80012d4 <inttochar+0x88>)
 8001262:	481d      	ldr	r0, [pc, #116]	; (80012d8 <inttochar+0x8c>)
 8001264:	f007 fd04 	bl	8008c70 <siprintf>

	for(int cnt=0 ; cnt<8 ; cnt++){
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e01b      	b.n	80012a6 <inttochar+0x5a>
		if( ((i>>cnt)&(0x01)) == 1 )
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	fa42 f303 	asr.w	r3, r2, r3
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <inttochar+0x44>
			c[7-cnt] = '1';
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1c3 0307 	rsb	r3, r3, #7
 8001284:	461a      	mov	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	2231      	movs	r2, #49	; 0x31
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e007      	b.n	80012a0 <inttochar+0x54>
		else
			c[7-cnt] = '0';
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	461a      	mov	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4413      	add	r3, r2
 800129c:	2230      	movs	r2, #48	; 0x30
 800129e:	701a      	strb	r2, [r3, #0]
	for(int cnt=0 ; cnt<8 ; cnt++){
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	dde0      	ble.n	800126e <inttochar+0x22>
	}
	c[9] = humidity_char[0];
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3309      	adds	r3, #9
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <inttochar+0x8c>)
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	701a      	strb	r2, [r3, #0]
	c[10] = humidity_char[1];
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	330a      	adds	r3, #10
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <inttochar+0x8c>)
 80012bc:	7852      	ldrb	r2, [r2, #1]
 80012be:	701a      	strb	r2, [r3, #0]
	c[11] = humidity_char[2];
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	330b      	adds	r3, #11
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <inttochar+0x8c>)
 80012c6:	7892      	ldrb	r2, [r2, #2]
 80012c8:	701a      	strb	r2, [r3, #0]

}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800b0ec 	.word	0x0800b0ec
 80012d8:	20001f40 	.word	0x20001f40

080012dc <light_livingroom>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void light_livingroom   (void *pvParameters){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	while(1){

		isLivingroomEmpty = HAL_GPIO_ReadPin(MOTION_LIVING_GPIO_Port, MOTION_LIVING_Pin);
 80012e4:	2120      	movs	r1, #32
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fd4b 	bl	8002d84 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <light_livingroom+0x5c>)
 80012f4:	701a      	strb	r2, [r3, #0]

		if( !isLivingroomEmpty ){
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <light_livingroom+0x5c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <light_livingroom+0x3c>
			HAL_GPIO_WritePin(LIGHT_LIVING_GPIO_Port, LIGHT_LIVING_Pin, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	2101      	movs	r1, #1
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <light_livingroom+0x60>)
 8001304:	f001 fd56 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame | (1<<5);
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <light_livingroom+0x64>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <light_livingroom+0x64>)
 8001314:	801a      	strh	r2, [r3, #0]
 8001316:	e00b      	b.n	8001330 <light_livingroom+0x54>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_LIVING_GPIO_Port, LIGHT_LIVING_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <light_livingroom+0x60>)
 800131e:	f001 fd49 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame & ~(1<<5);
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <light_livingroom+0x64>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	f023 0320 	bic.w	r3, r3, #32
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <light_livingroom+0x64>)
 800132e:	801a      	strh	r2, [r3, #0]
		}
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 8001330:	2014      	movs	r0, #20
 8001332:	f005 fb39 	bl	80069a8 <vTaskDelay>
		isLivingroomEmpty = HAL_GPIO_ReadPin(MOTION_LIVING_GPIO_Port, MOTION_LIVING_Pin);
 8001336:	e7d5      	b.n	80012e4 <light_livingroom+0x8>
 8001338:	20000300 	.word	0x20000300
 800133c:	48000400 	.word	0x48000400
 8001340:	20000002 	.word	0x20000002

08001344 <light_bathroom>:
	}
	vTaskDelete(NULL);
}
int a=0;
void light_bathroom   	(void *pvParameters){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	while(1){

		isBathroomEmpty = HAL_GPIO_ReadPin(MOTION_BATH_GPIO_Port, MOTION_BATH_Pin);
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f001 fd17 	bl	8002d84 <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <light_bathroom+0x5c>)
 800135c:	701a      	strb	r2, [r3, #0]

		if( !isBathroomEmpty ){
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <light_bathroom+0x5c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <light_bathroom+0x3c>
			HAL_GPIO_WritePin(LIGHT_BATH_GPIO_Port, LIGHT_BATH_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <light_bathroom+0x60>)
 800136c:	f001 fd22 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame | (1<<4);
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <light_bathroom+0x64>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <light_bathroom+0x64>)
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	e00b      	b.n	8001398 <light_bathroom+0x54>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_BATH_GPIO_Port, LIGHT_BATH_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <light_bathroom+0x60>)
 8001386:	f001 fd15 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame & ~(1<<4);
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <light_bathroom+0x64>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	f023 0310 	bic.w	r3, r3, #16
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <light_bathroom+0x64>)
 8001396:	801a      	strh	r2, [r3, #0]
		}
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 8001398:	2014      	movs	r0, #20
 800139a:	f005 fb05 	bl	80069a8 <vTaskDelay>
		isBathroomEmpty = HAL_GPIO_ReadPin(MOTION_BATH_GPIO_Port, MOTION_BATH_Pin);
 800139e:	e7d5      	b.n	800134c <light_bathroom+0x8>
 80013a0:	20000301 	.word	0x20000301
 80013a4:	48000400 	.word	0x48000400
 80013a8:	20000002 	.word	0x20000002

080013ac <light_bedroom>:
	}
	vTaskDelete(NULL);
}

void light_bedroom   	(void *pvParameters){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	while(1){

		isBedroomEmpty = HAL_GPIO_ReadPin(MOTION_BED_GPIO_Port, MOTION_BED_Pin);
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 fce3 	bl	8002d84 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <light_bedroom+0x5c>)
 80013c4:	701a      	strb	r2, [r3, #0]

		if( !isBedroomEmpty ){
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <light_bedroom+0x5c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <light_bedroom+0x3c>
			HAL_GPIO_WritePin(LIGHT_BED_GPIO_Port, LIGHT_BED_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2140      	movs	r1, #64	; 0x40
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <light_bedroom+0x60>)
 80013d4:	f001 fcee 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame | (1<<3);
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <light_bedroom+0x64>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <light_bedroom+0x64>)
 80013e4:	801a      	strh	r2, [r3, #0]
 80013e6:	e00b      	b.n	8001400 <light_bedroom+0x54>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_BED_GPIO_Port, LIGHT_BED_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <light_bedroom+0x60>)
 80013ee:	f001 fce1 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame & ~(1<<3);
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <light_bedroom+0x64>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	f023 0308 	bic.w	r3, r3, #8
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <light_bedroom+0x64>)
 80013fe:	801a      	strh	r2, [r3, #0]
		}
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 8001400:	2014      	movs	r0, #20
 8001402:	f005 fad1 	bl	80069a8 <vTaskDelay>
		isBedroomEmpty = HAL_GPIO_ReadPin(MOTION_BED_GPIO_Port, MOTION_BED_Pin);
 8001406:	e7d5      	b.n	80013b4 <light_bedroom+0x8>
 8001408:	20000302 	.word	0x20000302
 800140c:	48000400 	.word	0x48000400
 8001410:	20000002 	.word	0x20000002

08001414 <ceiling_fan>:
	vTaskDelete(NULL);
}



void ceiling_fan 	 	(void *pvParameters){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	while(1){

		//temperature = ( temperature_measure * 50) / 255;

		if( temperature > TEMP_THRESHOLD ){
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <ceiling_fan+0x50>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b1b      	cmp	r3, #27
 8001422:	d90d      	bls.n	8001440 <ceiling_fan+0x2c>
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2102      	movs	r1, #2
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f001 fcc2 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame | 1;
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <ceiling_fan+0x54>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <ceiling_fan+0x54>)
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	e00c      	b.n	800145a <ceiling_fan+0x46>
		}
		else{
			HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2102      	movs	r1, #2
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f001 fcb4 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame & ~1;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <ceiling_fan+0x54>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <ceiling_fan+0x54>)
 8001458:	801a      	strh	r2, [r3, #0]
		}

		vTaskDelay( 20 / portTICK_PERIOD_MS);
 800145a:	2014      	movs	r0, #20
 800145c:	f005 faa4 	bl	80069a8 <vTaskDelay>
		if( temperature > TEMP_THRESHOLD ){
 8001460:	e7dc      	b.n	800141c <ceiling_fan+0x8>
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	20000002 	.word	0x20000002

0800146c <flood_protection>:
	}
	vTaskDelete(NULL);
}

void flood_protection 	(void *pvParameters){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	while(1){

		  HAL_ADC_Start(&hadc2);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <flood_protection+0x74>)
 8001476:	f000 fddd 	bl	8002034 <HAL_ADC_Start>
		  vTaskDelay( 20 / portTICK_PERIOD_MS);
 800147a:	2014      	movs	r0, #20
 800147c:	f005 fa94 	bl	80069a8 <vTaskDelay>

		  //humidity_measure = HAL_ADC_GetValue(&hadc2);
		  humidity = (HAL_ADC_GetValue(&hadc2) * 70)/113 + 20;
 8001480:	4817      	ldr	r0, [pc, #92]	; (80014e0 <flood_protection+0x74>)
 8001482:	f000 fe8d 	bl	80021a0 <HAL_ADC_GetValue>
 8001486:	4603      	mov	r3, r0
 8001488:	2246      	movs	r2, #70	; 0x46
 800148a:	fb02 f203 	mul.w	r2, r2, r3
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <flood_protection+0x78>)
 8001490:	fba3 1302 	umull	r1, r3, r3, r2
 8001494:	1ad2      	subs	r2, r2, r3
 8001496:	0852      	lsrs	r2, r2, #1
 8001498:	4413      	add	r3, r2
 800149a:	099b      	lsrs	r3, r3, #6
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3314      	adds	r3, #20
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <flood_protection+0x7c>)
 80014a4:	701a      	strb	r2, [r3, #0]

		  if(humidity > 90)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <flood_protection+0x7c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b5a      	cmp	r3, #90	; 0x5a
 80014ac:	d902      	bls.n	80014b4 <flood_protection+0x48>
			  humidity = 90;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <flood_protection+0x7c>)
 80014b0:	225a      	movs	r2, #90	; 0x5a
 80014b2:	701a      	strb	r2, [r3, #0]

		  vTaskDelay( 20 / portTICK_PERIOD_MS);
 80014b4:	2014      	movs	r0, #20
 80014b6:	f005 fa77 	bl	80069a8 <vTaskDelay>

		  if( humidity >= 50)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <flood_protection+0x7c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b31      	cmp	r3, #49	; 0x31
 80014c0:	d906      	bls.n	80014d0 <flood_protection+0x64>
			HAL_GPIO_WritePin(FLOOD_ALARM_GPIO_Port, FLOOD_ALARM_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2108      	movs	r1, #8
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f001 fc73 	bl	8002db4 <HAL_GPIO_WritePin>
 80014ce:	e7d1      	b.n	8001474 <flood_protection+0x8>
		  else
			HAL_GPIO_WritePin(FLOOD_ALARM_GPIO_Port, FLOOD_ALARM_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2108      	movs	r1, #8
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f001 fc6c 	bl	8002db4 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc2);
 80014dc:	e7ca      	b.n	8001474 <flood_protection+0x8>
 80014de:	bf00      	nop
 80014e0:	20001dd4 	.word	0x20001dd4
 80014e4:	21fb7813 	.word	0x21fb7813
 80014e8:	20000303 	.word	0x20000303

080014ec <alarm_clock>:

	}
	vTaskDelete(NULL);
}

void alarm_clock		(void *pvParameters){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	while(1){
		if( hours == 10 && HAL_GPIO_ReadPin(BUZZER_OFF_GPIO_Port, BUZZER_OFF_Pin) != GPIO_PIN_RESET)
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <alarm_clock+0x74>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0a      	cmp	r3, #10
 80014fa:	d10e      	bne.n	800151a <alarm_clock+0x2e>
 80014fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 fc3e 	bl	8002d84 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <alarm_clock+0x2e>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2101      	movs	r1, #1
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f001 fc4d 	bl	8002db4 <HAL_GPIO_WritePin>

		if( HAL_GPIO_ReadPin(BUZZER_OFF_GPIO_Port, BUZZER_OFF_Pin) == GPIO_PIN_RESET ){
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f001 fc2f 	bl	8002d84 <HAL_GPIO_ReadPin>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <alarm_clock+0x5c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f001 fc3e 	bl	8002db4 <HAL_GPIO_WritePin>
			frame = frame | (1<<1);
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <alarm_clock+0x78>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <alarm_clock+0x78>)
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	e006      	b.n	8001556 <alarm_clock+0x6a>
		}
		else
			frame = frame & ~(1<<1);
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <alarm_clock+0x78>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f023 0302 	bic.w	r3, r3, #2
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <alarm_clock+0x78>)
 8001554:	801a      	strh	r2, [r3, #0]

		vTaskDelay( 20 / portTICK_PERIOD_MS);
 8001556:	2014      	movs	r0, #20
 8001558:	f005 fa26 	bl	80069a8 <vTaskDelay>
		if( hours == 10 && HAL_GPIO_ReadPin(BUZZER_OFF_GPIO_Port, BUZZER_OFF_Pin) != GPIO_PIN_RESET)
 800155c:	e7ca      	b.n	80014f4 <alarm_clock+0x8>
 800155e:	bf00      	nop
 8001560:	20000001 	.word	0x20000001
 8001564:	20000002 	.word	0x20000002

08001568 <TX_radio>:
	}
	vTaskDelete(NULL);
}

void TX_radio(void *pvParameters){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	while(1){

		inttochar(frame, tx_data,humidity);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <TX_radio+0x34>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <TX_radio+0x38>)
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	490a      	ldr	r1, [pc, #40]	; (80015a4 <TX_radio+0x3c>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe66 	bl	800124c <inttochar>
		vTaskDelay( 200 / portTICK_PERIOD_MS);
 8001580:	20c8      	movs	r0, #200	; 0xc8
 8001582:	f005 fa11 	bl	80069a8 <vTaskDelay>
		Transmit(tx_data, strlen((char *)tx_data));
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <TX_radio+0x3c>)
 8001588:	f7fe fe22 	bl	80001d0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <TX_radio+0x3c>)
 8001594:	f7ff fcc8 	bl	8000f28 <Transmit>
		inttochar(frame, tx_data,humidity);
 8001598:	e7ea      	b.n	8001570 <TX_radio+0x8>
 800159a:	bf00      	nop
 800159c:	20000002 	.word	0x20000002
 80015a0:	20000303 	.word	0x20000303
 80015a4:	20000004 	.word	0x20000004

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fb25 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f89d 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f7ff fdcb 	bl	8001150 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015ba:	f000 f8f9 	bl	80017b0 <MX_SPI1_Init>
  MX_ADC2_Init();
 80015be:	f7ff fd11 	bl	8000fe4 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80015c2:	f000 fa7d 	bl	8001ac0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc2);
 80015c6:	4834      	ldr	r0, [pc, #208]	; (8001698 <main+0xf0>)
 80015c8:	f000 fd34 	bl	8002034 <HAL_ADC_Start>
  LoRa_init(868);
 80015cc:	f44f 7059 	mov.w	r0, #868	; 0x364
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	f7ff fc16 	bl	8000e04 <LoRa_init>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f001 fbe8 	bl	8002db4 <HAL_GPIO_WritePin>

  xTaskCreate( flood_protection , "FLOOD_PROTECTION_TASK"	, 140, NULL, 1, light_fl_handle );
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <main+0xf4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	228c      	movs	r2, #140	; 0x8c
 80015f2:	492b      	ldr	r1, [pc, #172]	; (80016a0 <main+0xf8>)
 80015f4:	482b      	ldr	r0, [pc, #172]	; (80016a4 <main+0xfc>)
 80015f6:	f005 f89b 	bl	8006730 <xTaskCreate>
  xTaskCreate( TX_radio			, "RADIO_TRANSMIT_TASK"		, 130, NULL, 1, tx_handle );
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x100>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	2301      	movs	r3, #1
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	2282      	movs	r2, #130	; 0x82
 8001608:	4928      	ldr	r1, [pc, #160]	; (80016ac <main+0x104>)
 800160a:	4829      	ldr	r0, [pc, #164]	; (80016b0 <main+0x108>)
 800160c:	f005 f890 	bl	8006730 <xTaskCreate>

  xTaskCreate( alarm_clock		, "ALARM_CLOCK_TASK"		, 100, NULL, 1, light_alarm_handle );
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <main+0x10c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2301      	movs	r3, #1
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	2264      	movs	r2, #100	; 0x64
 800161e:	4926      	ldr	r1, [pc, #152]	; (80016b8 <main+0x110>)
 8001620:	4826      	ldr	r0, [pc, #152]	; (80016bc <main+0x114>)
 8001622:	f005 f885 	bl	8006730 <xTaskCreate>
  xTaskCreate( ceiling_fan		, "CEILING_FAN_TASK" 		, 70, NULL, 1, fan_handle );
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <main+0x118>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2301      	movs	r3, #1
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	2246      	movs	r2, #70	; 0x46
 8001634:	4923      	ldr	r1, [pc, #140]	; (80016c4 <main+0x11c>)
 8001636:	4824      	ldr	r0, [pc, #144]	; (80016c8 <main+0x120>)
 8001638:	f005 f87a 	bl	8006730 <xTaskCreate>

  xTaskCreate( light_livingroom	, "LIGHT_LIVINGROOM_TASK"	, 50, NULL, 1, light_liv_handle );
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <main+0x124>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2301      	movs	r3, #1
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	2232      	movs	r2, #50	; 0x32
 800164a:	4921      	ldr	r1, [pc, #132]	; (80016d0 <main+0x128>)
 800164c:	4821      	ldr	r0, [pc, #132]	; (80016d4 <main+0x12c>)
 800164e:	f005 f86f 	bl	8006730 <xTaskCreate>
  xTaskCreate( light_bathroom	, "LIGHT_BATHROOM_TASK"		, 50, NULL, 1, light_bath_handle );
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <main+0x130>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	2301      	movs	r3, #1
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2300      	movs	r3, #0
 800165e:	2232      	movs	r2, #50	; 0x32
 8001660:	491e      	ldr	r1, [pc, #120]	; (80016dc <main+0x134>)
 8001662:	481f      	ldr	r0, [pc, #124]	; (80016e0 <main+0x138>)
 8001664:	f005 f864 	bl	8006730 <xTaskCreate>
  xTaskCreate( light_bedroom	, "LIGHT_BEDROOM_TASK"		, 50, NULL, 1, light_bed_handle );
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <main+0x13c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	2301      	movs	r3, #1
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	2232      	movs	r2, #50	; 0x32
 8001676:	491c      	ldr	r1, [pc, #112]	; (80016e8 <main+0x140>)
 8001678:	481c      	ldr	r0, [pc, #112]	; (80016ec <main+0x144>)
 800167a:	f005 f859 	bl	8006730 <xTaskCreate>
//  xSemaphoreTake(mutex, portMAX_DELAY);




  vTaskStartScheduler();
 800167e:	f005 f9c7 	bl	8006a10 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001682:	f004 f8eb 	bl	800585c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001686:	f7ff fd49 	bl	800111c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800168a:	f004 f91b 	bl	80058c4 <osKernelStart>



  while (1)
  {
	vTaskDelay( 2 / portTICK_PERIOD_MS);
 800168e:	2002      	movs	r0, #2
 8001690:	f005 f98a 	bl	80069a8 <vTaskDelay>
 8001694:	e7fb      	b.n	800168e <main+0xe6>
 8001696:	bf00      	nop
 8001698:	20001dd4 	.word	0x20001dd4
 800169c:	20001f50 	.word	0x20001f50
 80016a0:	0800b0f0 	.word	0x0800b0f0
 80016a4:	0800146d 	.word	0x0800146d
 80016a8:	20001e2c 	.word	0x20001e2c
 80016ac:	0800b108 	.word	0x0800b108
 80016b0:	08001569 	.word	0x08001569
 80016b4:	20001f4c 	.word	0x20001f4c
 80016b8:	0800b11c 	.word	0x0800b11c
 80016bc:	080014ed 	.word	0x080014ed
 80016c0:	20001e30 	.word	0x20001e30
 80016c4:	0800b130 	.word	0x0800b130
 80016c8:	08001415 	.word	0x08001415
 80016cc:	20001e28 	.word	0x20001e28
 80016d0:	0800b144 	.word	0x0800b144
 80016d4:	080012dd 	.word	0x080012dd
 80016d8:	20001f48 	.word	0x20001f48
 80016dc:	0800b15c 	.word	0x0800b15c
 80016e0:	08001345 	.word	0x08001345
 80016e4:	20001e3c 	.word	0x20001e3c
 80016e8:	0800b170 	.word	0x0800b170
 80016ec:	080013ad 	.word	0x080013ad

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b096      	sub	sp, #88	; 0x58
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fa:	2228      	movs	r2, #40	; 0x28
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fe2c 	bl	800835c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001724:	2302      	movs	r3, #2
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172c:	2310      	movs	r3, #16
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	2302      	movs	r3, #2
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001734:	2300      	movs	r3, #0
 8001736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001738:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800173c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fb4e 	bl	8002de4 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800174e:	f000 f829 	bl	80017a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fa41 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001778:	f000 f814 	bl	80017a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800177c:	2381      	movs	r3, #129	; 0x81
 800177e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fc67 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001798:	f000 f804 	bl	80017a4 <Error_Handler>
  }
}
 800179c:	bf00      	nop
 800179e:	3758      	adds	r7, #88	; 0x58
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_SPI1_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <MX_SPI1_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_SPI1_Init+0x74>)
 80017bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_SPI1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_SPI1_Init+0x74>)
 80017ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_SPI1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_SPI1_Init+0x74>)
 80017de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_SPI1_Init+0x74>)
 80017e6:	2218      	movs	r2, #24
 80017e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_SPI1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_SPI1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_SPI1_Init+0x74>)
 80017fe:	2207      	movs	r2, #7
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_SPI1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_SPI1_Init+0x74>)
 800180a:	2208      	movs	r2, #8
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_SPI1_Init+0x74>)
 8001810:	f002 fd4c 	bl	80042ac <HAL_SPI_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800181a:	f7ff ffc3 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20001f54 	.word	0x20001f54
 8001828:	40013000 	.word	0x40013000

0800182c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_SPI_MspInit+0x7c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d127      	bne.n	800189e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001858:	6193      	str	r3, [r2, #24]
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_SPI_MspInit+0x80>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0x80>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800187e:	2338      	movs	r3, #56	; 0x38
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_SPI_MspInit+0x84>)
 800189a:	f001 f901 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000400 	.word	0x48000400

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_MspInit+0x4c>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_MspInit+0x4c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_MspInit+0x4c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_MspInit+0x4c>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_MspInit+0x4c>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	210f      	movs	r1, #15
 80018ee:	f06f 0001 	mvn.w	r0, #1
 80018f2:	f001 f8ac 	bl	8002a4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f9a8 	bl	8001c88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001938:	f005 fcbc 	bl	80072b4 <xTaskGetSchedulerState>
 800193c:	4603      	mov	r3, r0
 800193e:	2b01      	cmp	r3, #1
 8001940:	d001      	beq.n	8001946 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001942:	f006 fa69 	bl	8007e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}

0800194a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
	return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_kill>:

int _kill(int pid, int sig)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001964:	f006 fcc2 	bl	80082ec <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	2216      	movs	r2, #22
 800196c:	601a      	str	r2, [r3, #0]
	return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_exit>:

void _exit (int status)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001982:	f04f 31ff 	mov.w	r1, #4294967295
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffe7 	bl	800195a <_kill>
	while (1) {}		/* Make sure we hang here */
 800198c:	e7fe      	b.n	800198c <_exit+0x12>

0800198e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e00a      	b.n	80019b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a0:	f3af 8000 	nop.w
 80019a4:	4601      	mov	r1, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	60ba      	str	r2, [r7, #8]
 80019ac:	b2ca      	uxtb	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbf0      	blt.n	80019a0 <_read+0x12>
	}

return len;
 80019be:	687b      	ldr	r3, [r7, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f0:	605a      	str	r2, [r3, #4]
	return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_isatty>:

int _isatty(int file)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
	return 0;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f006 fc44 	bl	80082ec <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20003000 	.word	0x20003000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	20000304 	.word	0x20000304
 8001a98:	20002090 	.word	0x20002090

08001a9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MX_USART1_UART_Init+0x5c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001acc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART1_UART_Init+0x58>)
 8001b04:	f003 fae2 	bl	80050cc <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b0e:	f7ff fe49 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20001fb8 	.word	0x20001fb8
 8001b1c:	40013800 	.word	0x40013800

08001b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_UART_MspInit+0x80>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d129      	bne.n	8001b96 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6193      	str	r3, [r2, #24]
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b84:	2307      	movs	r3, #7
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b92:	f000 ff85 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <LoopForever+0xe>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc4:	4c0b      	ldr	r4, [pc, #44]	; (8001bf4 <LoopForever+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bd2:	f7ff ff63 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f006 fb8f 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bda:	f7ff fce5 	bl	80015a8 <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001be0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001bec:	0800b5e4 	.word	0x0800b5e4
  ldr r2, =_sbss
 8001bf0:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001bf4:	20002090 	.word	0x20002090

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x28>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x28>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 ff13 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	200f      	movs	r0, #15
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fe4c 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000

08001c28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 ff1d 	bl	8002a86 <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 fef3 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000104 	.word	0x20000104
 8001c80:	2000010c 	.word	0x2000010c
 8001c84:	20000108 	.word	0x20000108

08001c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000010c 	.word	0x2000010c
 8001cac:	2000203c 	.word	0x2000203c

08001cb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000203c 	.word	0x2000203c

08001cc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000010c 	.word	0x2000010c

08001d10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b09a      	sub	sp, #104	; 0x68
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e172      	b.n	8002016 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d176      	bne.n	8001e30 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d152      	bne.n	8001df0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff f99b 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13b      	bne.n	8001df0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fd45 	bl	8002808 <ADC_Disable>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12f      	bne.n	8001df0 <HAL_ADC_Init+0xe0>
 8001d90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d12b      	bne.n	8001df0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da0:	f023 0302 	bic.w	r3, r3, #2
 8001da4:	f043 0202 	orr.w	r2, r3, #2
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dcc:	4b94      	ldr	r3, [pc, #592]	; (8002020 <HAL_ADC_Init+0x310>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a94      	ldr	r2, [pc, #592]	; (8002024 <HAL_ADC_Init+0x314>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9a      	lsrs	r2, r3, #18
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de2:	e002      	b.n	8001dea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f9      	bne.n	8001de4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e0c:	d110      	bne.n	8001e30 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f023 0312 	bic.w	r3, r3, #18
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f040 80df 	bne.w	8001ffc <HAL_ADC_Init+0x2ec>
 8001e3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80da 	bne.w	8001ffc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80d2 	bne.w	8001ffc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e60:	f043 0202 	orr.w	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e68:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_ADC_Init+0x318>)
 8001e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e74:	d102      	bne.n	8001e7c <HAL_ADC_Init+0x16c>
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_ADC_Init+0x31c>)
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e002      	b.n	8001e82 <HAL_ADC_Init+0x172>
 8001e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d108      	bne.n	8001ea2 <HAL_ADC_Init+0x192>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Init+0x192>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_ADC_Init+0x194>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d11c      	bne.n	8001ee2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_ADC_Init+0x1ba>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_Init+0x1ba>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_ADC_Init+0x1bc>
 8001eca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7e5b      	ldrb	r3, [r3, #25]
 8001ee6:	035b      	lsls	r3, r3, #13
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eec:	2a01      	cmp	r2, #1
 8001eee:	d002      	beq.n	8001ef6 <HAL_ADC_Init+0x1e6>
 8001ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_Init+0x1e8>
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d11b      	bne.n	8001f4e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7e5b      	ldrb	r3, [r3, #25]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	045a      	lsls	r2, r3, #17
 8001f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f30:	e00d      	b.n	8001f4e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d007      	beq.n	8001f66 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f62:	4313      	orrs	r3, r2
 8001f64:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d114      	bne.n	8001f9e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f82:	f023 0302 	bic.w	r3, r3, #2
 8001f86:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7e1b      	ldrb	r3, [r3, #24]
 8001f8c:	039a      	lsls	r2, r3, #14
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4313      	orrs	r3, r2
 8001f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_ADC_Init+0x320>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f023 010f 	bic.w	r1, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd2:	e007      	b.n	8001fe4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020f 	bic.w	r2, r2, #15
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffa:	e00a      	b.n	8002012 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f023 0312 	bic.w	r3, r3, #18
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800200c:	2301      	movs	r3, #1
 800200e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002016:	4618      	mov	r0, r3
 8002018:	3768      	adds	r7, #104	; 0x68
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000104 	.word	0x20000104
 8002024:	431bde83 	.word	0x431bde83
 8002028:	50000300 	.word	0x50000300
 800202c:	50000100 	.word	0x50000100
 8002030:	fff0c007 	.word	0xfff0c007

08002034 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 809c 	bne.w	8002188 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_Start+0x2a>
 800205a:	2302      	movs	r3, #2
 800205c:	e097      	b.n	800218e <HAL_ADC_Start+0x15a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fb6a 	bl	8002740 <ADC_Enable>
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8083 	bne.w	800217e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_ADC_Start+0x164>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <HAL_ADC_Start+0x6e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a0:	d115      	bne.n	80020ce <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d027      	beq.n	800210c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020cc:	e01e      	b.n	800210c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Start+0xba>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2c      	ldr	r2, [pc, #176]	; (800219c <HAL_ADC_Start+0x168>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10e      	bne.n	800210c <HAL_ADC_Start+0xd8>
 80020ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002104:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002118:	d106      	bne.n	8002128 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f023 0206 	bic.w	r2, r3, #6
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
 8002126:	e002      	b.n	800212e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	221c      	movs	r2, #28
 800213c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_ADC_Start+0x164>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_ADC_Start+0x138>
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_ADC_Start+0x164>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b05      	cmp	r3, #5
 8002154:	d00a      	beq.n	800216c <HAL_ADC_Start+0x138>
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_ADC_Start+0x164>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2b09      	cmp	r3, #9
 8002160:	d004      	beq.n	800216c <HAL_ADC_Start+0x138>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216a:	d10f      	bne.n	800218c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0204 	orr.w	r2, r2, #4
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	e006      	b.n	800218c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002186:	e001      	b.n	800218c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	50000300 	.word	0x50000300
 800219c:	50000100 	.word	0x50000100

080021a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021bc:	b480      	push	{r7}
 80021be:	b09b      	sub	sp, #108	; 0x6c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x22>
 80021da:	2302      	movs	r3, #2
 80021dc:	e2a5      	b.n	800272a <HAL_ADC_ConfigChannel+0x56e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8289 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d81c      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	461a      	mov	r2, r3
 8002212:	231f      	movs	r3, #31
 8002214:	4093      	lsls	r3, r2
 8002216:	43db      	mvns	r3, r3
 8002218:	4019      	ands	r1, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
 8002236:	e063      	b.n	8002300 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d81e      	bhi.n	800227e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	3b1e      	subs	r3, #30
 8002254:	221f      	movs	r2, #31
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	4019      	ands	r1, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	3b1e      	subs	r3, #30
 8002270:	fa00 f203 	lsl.w	r2, r0, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	; 0x34
 800227c:	e040      	b.n	8002300 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b0e      	cmp	r3, #14
 8002284:	d81e      	bhi.n	80022c4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3b3c      	subs	r3, #60	; 0x3c
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4019      	ands	r1, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	3b3c      	subs	r3, #60	; 0x3c
 80022b6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
 80022c2:	e01d      	b.n	8002300 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	3b5a      	subs	r3, #90	; 0x5a
 80022d8:	221f      	movs	r2, #31
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	4019      	ands	r1, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	3b5a      	subs	r3, #90	; 0x5a
 80022f4:	fa00 f203 	lsl.w	r2, r0, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80e5 	bne.w	80024da <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d91c      	bls.n	8002352 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6999      	ldr	r1, [r3, #24]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	3b1e      	subs	r3, #30
 800232a:	2207      	movs	r2, #7
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6898      	ldr	r0, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	3b1e      	subs	r3, #30
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	619a      	str	r2, [r3, #24]
 8002350:	e019      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6959      	ldr	r1, [r3, #20]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	2207      	movs	r2, #7
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4019      	ands	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6898      	ldr	r0, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	fa00 f203 	lsl.w	r2, r0, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d84f      	bhi.n	8002448 <HAL_ADC_ConfigChannel+0x28c>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_ADC_ConfigChannel+0x1f4>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023e3 	.word	0x080023e3
 80023b8:	08002405 	.word	0x08002405
 80023bc:	08002427 	.word	0x08002427
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c6:	4b9e      	ldr	r3, [pc, #632]	; (8002640 <HAL_ADC_ConfigChannel+0x484>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	0691      	lsls	r1, r2, #26
 80023d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023d2:	430a      	orrs	r2, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023de:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023e0:	e07e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023e8:	4b95      	ldr	r3, [pc, #596]	; (8002640 <HAL_ADC_ConfigChannel+0x484>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	0691      	lsls	r1, r2, #26
 80023f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023f4:	430a      	orrs	r2, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002400:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002402:	e06d      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800240a:	4b8d      	ldr	r3, [pc, #564]	; (8002640 <HAL_ADC_ConfigChannel+0x484>)
 800240c:	4013      	ands	r3, r2
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	0691      	lsls	r1, r2, #26
 8002414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002416:	430a      	orrs	r2, r1
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002422:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002424:	e05c      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800242c:	4b84      	ldr	r3, [pc, #528]	; (8002640 <HAL_ADC_ConfigChannel+0x484>)
 800242e:	4013      	ands	r3, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	0691      	lsls	r1, r2, #26
 8002436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002438:	430a      	orrs	r2, r1
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002444:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002446:	e04b      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	069b      	lsls	r3, r3, #26
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800246a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	429a      	cmp	r2, r3
 800247e:	d107      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800248e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	069b      	lsls	r3, r3, #26
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024b2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d10a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80024d8:	e001      	b.n	80024de <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80024de:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x344>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x344>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_ADC_ConfigChannel+0x346>
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 810b 	bne.w	800271e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d00f      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	400a      	ands	r2, r1
 800252a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800252e:	e049      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2201      	movs	r2, #1
 800253e:	409a      	lsls	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b09      	cmp	r3, #9
 8002550:	d91c      	bls.n	800258c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6999      	ldr	r1, [r3, #24]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	3b1b      	subs	r3, #27
 8002564:	2207      	movs	r2, #7
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	4019      	ands	r1, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6898      	ldr	r0, [r3, #8]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	3b1b      	subs	r3, #27
 800257e:	fa00 f203 	lsl.w	r2, r0, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	619a      	str	r2, [r3, #24]
 800258a:	e01b      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6959      	ldr	r1, [r3, #20]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	2207      	movs	r2, #7
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6898      	ldr	r0, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_ADC_ConfigChannel+0x488>)
 80025c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	f040 8092 	bne.w	800271e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80025fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 808b 	bne.w	800271e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002610:	d102      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x45c>
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_ADC_ConfigChannel+0x48c>)
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e002      	b.n	800261e <HAL_ADC_ConfigChannel+0x462>
 8002618:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800261c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10f      	bne.n	800264c <HAL_ADC_ConfigChannel+0x490>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_ADC_ConfigChannel+0x490>
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <HAL_ADC_ConfigChannel+0x492>
 800263e:	bf00      	nop
 8002640:	83fff000 	.word	0x83fff000
 8002644:	50000300 	.word	0x50000300
 8002648:	50000100 	.word	0x50000100
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d150      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002652:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x4b8>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x4b8>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_ADC_ConfigChannel+0x4ba>
 8002674:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002676:	2b00      	cmp	r3, #0
 8002678:	d13c      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b10      	cmp	r3, #16
 8002680:	d11d      	bne.n	80026be <HAL_ADC_ConfigChannel+0x502>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268a:	d118      	bne.n	80026be <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800268c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002696:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_ADC_ConfigChannel+0x57c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_ADC_ConfigChannel+0x580>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9a      	lsrs	r2, r3, #18
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ae:	e002      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f9      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026bc:	e02e      	b.n	800271c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d10b      	bne.n	80026de <HAL_ADC_ConfigChannel+0x522>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ce:	d106      	bne.n	80026de <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80026d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026dc:	e01e      	b.n	800271c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b12      	cmp	r3, #18
 80026e4:	d11a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80026e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026f2:	e013      	b.n	800271c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002706:	e00a      	b.n	800271e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800271a:	e000      	b.n	800271e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800271c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800272a:	4618      	mov	r0, r3
 800272c:	376c      	adds	r7, #108	; 0x6c
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000104 	.word	0x20000104
 800273c:	431bde83 	.word	0x431bde83

08002740 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <ADC_Enable+0x2c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <ADC_Enable+0x2c>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <ADC_Enable+0x2e>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d143      	bne.n	80027fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <ADC_Enable+0xc4>)
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0210 	orr.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e02f      	b.n	80027fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027ac:	f7ff fa80 	bl	8001cb0 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027b2:	e01b      	b.n	80027ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027b4:	f7ff fa7c 	bl	8001cb0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d914      	bls.n	80027ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d00d      	beq.n	80027ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d1dc      	bne.n	80027b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	8000003f 	.word	0x8000003f

08002808 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <ADC_Disable+0x2c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <ADC_Disable+0x2c>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <ADC_Disable+0x2e>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d047      	beq.n	80028ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030d 	and.w	r3, r3, #13
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10f      	bne.n	8002868 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0202 	orr.w	r2, r2, #2
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2203      	movs	r2, #3
 800285e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002860:	f7ff fa26 	bl	8001cb0 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002866:	e029      	b.n	80028bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0210 	orr.w	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e023      	b.n	80028cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002884:	f7ff fa14 	bl	8001cb0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d914      	bls.n	80028bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10d      	bne.n	80028bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0210 	orr.w	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d0dc      	beq.n	8002884 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff47 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff5c 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffb0 	bl	80029f4 <SysTick_Config>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aae:	e14e      	b.n	8002d4e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8140 	beq.w	8002d48 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d005      	beq.n	8002ae0 <HAL_GPIO_Init+0x40>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d130      	bne.n	8002b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b16:	2201      	movs	r2, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0201 	and.w	r2, r3, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d017      	beq.n	8002b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d123      	bne.n	8002bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 809a 	beq.w	8002d48 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c14:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a54      	ldr	r2, [pc, #336]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b52      	ldr	r3, [pc, #328]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c2c:	4a50      	ldr	r2, [pc, #320]	; (8002d70 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c56:	d013      	beq.n	8002c80 <HAL_GPIO_Init+0x1e0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a46      	ldr	r2, [pc, #280]	; (8002d74 <HAL_GPIO_Init+0x2d4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00d      	beq.n	8002c7c <HAL_GPIO_Init+0x1dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_GPIO_Init+0x2d8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <HAL_GPIO_Init+0x1d8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a44      	ldr	r2, [pc, #272]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_GPIO_Init+0x1d4>
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x1e2>
 8002c74:	2305      	movs	r3, #5
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x1e2>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x1e2>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x1e2>
 8002c80:	2300      	movs	r3, #0
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c92:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_GPIO_Init+0x2d0>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cc4:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_GPIO_Init+0x2e0>)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f aea9 	bne.w	8002ab0 <HAL_GPIO_Init+0x10>
  }
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010000 	.word	0x40010000
 8002d74:	48000400 	.word	0x48000400
 8002d78:	48000800 	.word	0x48000800
 8002d7c:	48000c00 	.word	0x48000c00
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f000 bef4 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 816a 	beq.w	80030e2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e0e:	4bb3      	ldr	r3, [pc, #716]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d00c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e1a:	4bb0      	ldr	r3, [pc, #704]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d159      	bne.n	8002eda <HAL_RCC_OscConfig+0xf6>
 8002e26:	4bad      	ldr	r3, [pc, #692]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e32:	d152      	bne.n	8002eda <HAL_RCC_OscConfig+0xf6>
 8002e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCC_OscConfig+0x82>
 8002e60:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0xae>
 8002e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002e8e:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002e9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ea6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 810c 	beq.w	80030e0 <HAL_RCC_OscConfig+0x2fc>
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 8106 	bne.w	80030e0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f000 be86 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x110>
 8002ee6:	4b7d      	ldr	r3, [pc, #500]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7c      	ldr	r2, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e030      	b.n	8002f56 <HAL_RCC_OscConfig+0x172>
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x134>
 8002efe:	4b77      	ldr	r3, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a76      	ldr	r2, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b74      	ldr	r3, [pc, #464]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a73      	ldr	r2, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0x172>
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x15a>
 8002f24:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6c      	ldr	r2, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x172>
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a63      	ldr	r2, [pc, #396]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f56:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	495d      	ldr	r1, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d059      	beq.n	8003028 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fe9c 	bl	8001cb0 <HAL_GetTick>
 8002f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7e:	f7fe fe97 	bl	8001cb0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d902      	bls.n	8002f94 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f000 be29 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>
 8002f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002fa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x1e2>
 8002fc0:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x20e>
 8002fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fe2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ff6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ffa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ffe:	fa92 f2a2 	rbit	r2, r2
 8003002:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003006:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800300a:	fab2 f282 	clz	r2, r2
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f042 0220 	orr.w	r2, r2, #32
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f002 021f 	and.w	r2, r2, #31
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ab      	beq.n	8002f7e <HAL_RCC_OscConfig+0x19a>
 8003026:	e05c      	b.n	80030e2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fe42 	bl	8001cb0 <HAL_GetTick>
 800302c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003032:	f7fe fe3d 	bl	8001cb0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d902      	bls.n	8003048 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	f000 bdcf 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>
 8003048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800304c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800305c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_RCC_OscConfig+0x296>
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x2c2>
 800307a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800307e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800308e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003092:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003096:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_RCC_OscConfig+0x2f8>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80030ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030ba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ab      	bne.n	8003032 <HAL_RCC_OscConfig+0x24e>
 80030da:	e002      	b.n	80030e2 <HAL_RCC_OscConfig+0x2fe>
 80030dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 816f 	beq.w	80033d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030f2:	4bd0      	ldr	r3, [pc, #832]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030fe:	4bcd      	ldr	r3, [pc, #820]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d16c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x400>
 800310a:	4bca      	ldr	r3, [pc, #808]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d166      	bne.n	80031e4 <HAL_RCC_OscConfig+0x400>
 8003116:	2302      	movs	r3, #2
 8003118:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003128:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_RCC_OscConfig+0x362>
 8003140:	4bbc      	ldr	r3, [pc, #752]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e013      	b.n	800316e <HAL_RCC_OscConfig+0x38a>
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003158:	2302      	movs	r3, #2
 800315a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800315e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800316a:	4bb2      	ldr	r3, [pc, #712]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2202      	movs	r2, #2
 8003170:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003174:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003178:	fa92 f2a2 	rbit	r2, r2
 800317c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003180:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003184:	fab2 f282 	clz	r2, r2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f042 0220 	orr.w	r2, r2, #32
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f002 021f 	and.w	r2, r2, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_RCC_OscConfig+0x3cc>
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f000 bd1b 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b0:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	21f8      	movs	r1, #248	; 0xf8
 80031c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031c8:	fa91 f1a1 	rbit	r1, r1
 80031cc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80031d0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031d4:	fab1 f181 	clz	r1, r1
 80031d8:	b2c9      	uxtb	r1, r1
 80031da:	408b      	lsls	r3, r1
 80031dc:	4995      	ldr	r1, [pc, #596]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	e0f5      	b.n	80033d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8085 	beq.w	80032fa <HAL_RCC_OscConfig+0x516>
 80031f0:	2301      	movs	r3, #1
 80031f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2301      	movs	r3, #1
 800321a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fd48 	bl	8001cb0 <HAL_GetTick>
 8003220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003226:	f7fe fd43 	bl	8001cb0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	f000 bcd5 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>
 800323c:	2302      	movs	r3, #2
 800323e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800324e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_RCC_OscConfig+0x488>
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e013      	b.n	8003294 <HAL_RCC_OscConfig+0x4b0>
 800326c:	2302      	movs	r3, #2
 800326e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800327e:	2302      	movs	r3, #2
 8003280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003290:	4b68      	ldr	r3, [pc, #416]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2202      	movs	r2, #2
 8003296:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800329a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0af      	beq.n	8003226 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	21f8      	movs	r1, #248	; 0xf8
 80032d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032de:	fa91 f1a1 	rbit	r1, r1
 80032e2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80032e6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80032ea:	fab1 f181 	clz	r1, r1
 80032ee:	b2c9      	uxtb	r1, r1
 80032f0:	408b      	lsls	r3, r1
 80032f2:	4950      	ldr	r1, [pc, #320]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e06a      	b.n	80033d0 <HAL_RCC_OscConfig+0x5ec>
 80032fa:	2301      	movs	r3, #1
 80032fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800330c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800331a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	2300      	movs	r3, #0
 8003324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe fcc3 	bl	8001cb0 <HAL_GetTick>
 800332a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe fcbe 	bl	8001cb0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d902      	bls.n	8003346 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	f000 bc50 	b.w	8003be6 <HAL_RCC_OscConfig+0xe02>
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x592>
 8003370:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	e013      	b.n	800339e <HAL_RCC_OscConfig+0x5ba>
 8003376:	2302      	movs	r3, #2
 8003378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800338e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x650>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033a8:	fa92 f2a2 	rbit	r2, r2
 80033ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033b4:	fab2 f282 	clz	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1af      	bne.n	8003330 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80da 	beq.w	8003594 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d069      	beq.n	80034be <HAL_RCC_OscConfig+0x6da>
 80033ea:	2301      	movs	r3, #1
 80033ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80033fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_OscConfig+0x654>)
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	2301      	movs	r3, #1
 8003412:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fe fc4c 	bl	8001cb0 <HAL_GetTick>
 8003418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341c:	e00e      	b.n	800343c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe fc47 	bl	8001cb0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d906      	bls.n	800343c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e3d9      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	10908120 	.word	0x10908120
 800343c:	2302      	movs	r3, #2
 800343e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800344e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003452:	2202      	movs	r2, #2
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	fa93 f2a3 	rbit	r2, r3
 8003460:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800346a:	2202      	movs	r2, #2
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800347c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	4ba5      	ldr	r3, [pc, #660]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003482:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003486:	2102      	movs	r1, #2
 8003488:	6019      	str	r1, [r3, #0]
 800348a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	fa93 f1a3 	rbit	r1, r3
 8003494:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003498:	6019      	str	r1, [r3, #0]
  return result;
 800349a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0b0      	beq.n	800341e <HAL_RCC_OscConfig+0x63a>
 80034bc:	e06a      	b.n	8003594 <HAL_RCC_OscConfig+0x7b0>
 80034be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034d4:	601a      	str	r2, [r3, #0]
  return result;
 80034d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <HAL_RCC_OscConfig+0x934>)
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fe fbde 	bl	8001cb0 <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	e009      	b.n	800350e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fa:	f7fe fbd9 	bl	8001cb0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e36b      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 800350e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003512:	2202      	movs	r2, #2
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800352a:	2202      	movs	r2, #2
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003542:	2202      	movs	r2, #2
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	fa93 f2a3 	rbit	r2, r3
 8003550:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003554:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003556:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800355a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800355e:	2102      	movs	r1, #2
 8003560:	6019      	str	r1, [r3, #0]
 8003562:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f1a3 	rbit	r1, r3
 800356c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003570:	6019      	str	r1, [r3, #0]
  return result;
 8003572:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1b2      	bne.n	80034fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8158 	beq.w	8003854 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	61d3      	str	r3, [r2, #28]
 80035c2:	4b54      	ldr	r3, [pc, #336]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	f107 0308 	add.w	r3, r7, #8
 80035d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_OscConfig+0x938>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11a      	bne.n	800361e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e8:	4b4c      	ldr	r3, [pc, #304]	; (800371c <HAL_RCC_OscConfig+0x938>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	; (800371c <HAL_RCC_OscConfig+0x938>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f4:	f7fe fb5c 	bl	8001cb0 <HAL_GetTick>
 80035f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e009      	b.n	8003612 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe fb57 	bl	8001cb0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e2e9      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_RCC_OscConfig+0x938>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ef      	beq.n	80035fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x852>
 8003628:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a39      	ldr	r2, [pc, #228]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6213      	str	r3, [r2, #32]
 8003634:	e02f      	b.n	8003696 <HAL_RCC_OscConfig+0x8b2>
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <HAL_RCC_OscConfig+0x876>
 8003640:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a33      	ldr	r2, [pc, #204]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	6213      	str	r3, [r2, #32]
 800364c:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a30      	ldr	r2, [pc, #192]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003652:	f023 0304 	bic.w	r3, r3, #4
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	e01d      	b.n	8003696 <HAL_RCC_OscConfig+0x8b2>
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d10c      	bne.n	800367e <HAL_RCC_OscConfig+0x89a>
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	e00b      	b.n	8003696 <HAL_RCC_OscConfig+0x8b2>
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a24      	ldr	r2, [pc, #144]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d06b      	beq.n	8003778 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe fb06 	bl	8001cb0 <HAL_GetTick>
 80036a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe fb01 	bl	8001cb0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e291      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 80036c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036c6:	2202      	movs	r2, #2
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036de:	2202      	movs	r2, #2
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036f0:	601a      	str	r2, [r3, #0]
  return result;
 80036f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d109      	bne.n	8003720 <HAL_RCC_OscConfig+0x93c>
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <HAL_RCC_OscConfig+0x930>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	e014      	b.n	800373c <HAL_RCC_OscConfig+0x958>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	10908120 	.word	0x10908120
 800371c:	40007000 	.word	0x40007000
 8003720:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003724:	2202      	movs	r2, #2
 8003726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	fa93 f2a3 	rbit	r2, r3
 8003732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	4bbb      	ldr	r3, [pc, #748]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003740:	2102      	movs	r1, #2
 8003742:	6011      	str	r1, [r2, #0]
 8003744:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	fa92 f1a2 	rbit	r1, r2
 800374e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003752:	6011      	str	r1, [r2, #0]
  return result;
 8003754:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d099      	beq.n	80036aa <HAL_RCC_OscConfig+0x8c6>
 8003776:	e063      	b.n	8003840 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7fe fa9a 	bl	8001cb0 <HAL_GetTick>
 800377c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003780:	e00b      	b.n	800379a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fe fa95 	bl	8001cb0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e225      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 800379a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800379e:	2202      	movs	r2, #2
 80037a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fa93 f2a3 	rbit	r2, r3
 80037ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037b6:	2202      	movs	r2, #2
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037c8:	601a      	str	r2, [r3, #0]
  return result;
 80037ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d102      	bne.n	80037ea <HAL_RCC_OscConfig+0xa06>
 80037e4:	4b90      	ldr	r3, [pc, #576]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	e00d      	b.n	8003806 <HAL_RCC_OscConfig+0xa22>
 80037ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fa93 f2a3 	rbit	r2, r3
 80037fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4b89      	ldr	r3, [pc, #548]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800380a:	2102      	movs	r1, #2
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	fa92 f1a2 	rbit	r1, r2
 8003818:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800381c:	6011      	str	r1, [r2, #0]
  return result;
 800381e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	fab2 f282 	clz	r2, r2
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f002 021f 	and.w	r2, r2, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1a0      	bne.n	8003782 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003840:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	4a76      	ldr	r2, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003852:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 81c2 	beq.w	8003be4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003860:	4b71      	ldr	r3, [pc, #452]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	f000 819c 	beq.w	8003ba6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b02      	cmp	r3, #2
 8003876:	f040 8114 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xcbe>
 800387a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800387e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003892:	601a      	str	r2, [r3, #0]
  return result;
 8003894:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003898:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	461a      	mov	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe f9fe 	bl	8001cb0 <HAL_GetTick>
 80038b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e009      	b.n	80038ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe f9f9 	bl	8001cb0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e18b      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 80038ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f2a3 	rbit	r2, r3
 80038e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0xb24>
 8003902:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e01b      	b.n	8003940 <HAL_RCC_OscConfig+0xb5c>
 8003908:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800390c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f2a3 	rbit	r2, r3
 800391c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003944:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	fa92 f1a2 	rbit	r1, r2
 8003954:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003958:	6011      	str	r1, [r2, #0]
  return result;
 800395a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	fab2 f282 	clz	r2, r2
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	f042 0220 	orr.w	r2, r2, #32
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	f002 021f 	and.w	r2, r2, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d19e      	bne.n	80038ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	430b      	orrs	r3, r1
 8003992:	4925      	ldr	r1, [pc, #148]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
 8003998:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800399c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039b0:	601a      	str	r2, [r3, #0]
  return result;
 80039b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	461a      	mov	r2, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe f96f 	bl	8001cb0 <HAL_GetTick>
 80039d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d6:	e009      	b.n	80039ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fe f96a 	bl	8001cb0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0fc      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 80039ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a04:	601a      	str	r2, [r3, #0]
  return result;
 8003a06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0xc48>
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <HAL_RCC_OscConfig+0xc44>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	e01e      	b.n	8003a64 <HAL_RCC_OscConfig+0xc80>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCC_OscConfig+0xe0c>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fa92 f1a2 	rbit	r1, r2
 8003a78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a7c:	6011      	str	r1, [r2, #0]
  return result;
 8003a7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f002 021f 	and.w	r2, r2, #31
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d09b      	beq.n	80039d8 <HAL_RCC_OscConfig+0xbf4>
 8003aa0:	e0a0      	b.n	8003be4 <HAL_RCC_OscConfig+0xe00>
 8003aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aba:	601a      	str	r2, [r3, #0]
  return result;
 8003abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe f8ea 	bl	8001cb0 <HAL_GetTick>
 8003adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae0:	e009      	b.n	8003af6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe f8e5 	bl	8001cb0 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e077      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
 8003af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0e:	601a      	str	r2, [r3, #0]
  return result;
 8003b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_OscConfig+0xd4c>
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_OscConfig+0xe0c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0xd84>
 8003b30:	f107 0320 	add.w	r3, r7, #32
 8003b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f107 0320 	add.w	r3, r7, #32
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f2a3 	rbit	r2, r3
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f107 0318 	add.w	r3, r7, #24
 8003b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f107 0318 	add.w	r3, r7, #24
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_OscConfig+0xe0c>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f107 0210 	add.w	r2, r7, #16
 8003b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	f107 0210 	add.w	r2, r7, #16
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	fa92 f1a2 	rbit	r1, r2
 8003b7c:	f107 020c 	add.w	r2, r7, #12
 8003b80:	6011      	str	r1, [r2, #0]
  return result;
 8003b82:	f107 020c 	add.w	r2, r7, #12
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d19e      	bne.n	8003ae2 <HAL_RCC_OscConfig+0xcfe>
 8003ba4:	e01e      	b.n	8003be4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba6:	1d3b      	adds	r3, r7, #4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e018      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0xe0c>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b09e      	sub	sp, #120	; 0x78
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e162      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b90      	ldr	r3, [pc, #576]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d910      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b8d      	ldr	r3, [pc, #564]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	498b      	ldr	r1, [pc, #556]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b89      	ldr	r3, [pc, #548]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e14a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	497f      	ldr	r1, [pc, #508]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80dc 	beq.w	8003e20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d13c      	bne.n	8003cea <HAL_RCC_ClockConfig+0xf6>
 8003c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xa6>
 8003c94:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e00f      	b.n	8003cba <HAL_RCC_ClockConfig+0xc6>
 8003c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cac:	663b      	str	r3, [r7, #96]	; 0x60
 8003cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb6:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cc2:	fa92 f2a2 	rbit	r2, r2
 8003cc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cca:	fab2 f282 	clz	r2, r2
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f042 0220 	orr.w	r2, r2, #32
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	f002 021f 	and.w	r2, r2, #31
 8003cda:	2101      	movs	r1, #1
 8003cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d17b      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0f3      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d13c      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x178>
 8003cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x128>
 8003d16:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCC_ClockConfig+0x148>
 8003d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d38:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d40:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d44:	fa92 f2a2 	rbit	r2, r2
 8003d48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4c:	fab2 f282 	clz	r2, r2
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f042 0220 	orr.w	r2, r2, #32
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f002 021f 	and.w	r2, r2, #31
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d13a      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b2      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d102      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x1a0>
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	e00d      	b.n	8003db0 <HAL_RCC_ClockConfig+0x1bc>
 8003d94:	2302      	movs	r3, #2
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003da0:	2302      	movs	r3, #2
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2202      	movs	r2, #2
 8003db2:	61ba      	str	r2, [r7, #24]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	fa92 f2a2 	rbit	r2, r2
 8003dba:	617a      	str	r2, [r7, #20]
  return result;
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	fab2 f282 	clz	r2, r2
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f042 0220 	orr.w	r2, r2, #32
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f002 021f 	and.w	r2, r2, #31
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e079      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f023 0203 	bic.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df0:	f7fd ff5e 	bl	8001cb0 <HAL_GetTick>
 8003df4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df8:	f7fd ff5a 	bl	8001cb0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e061      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_ClockConfig+0x260>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 020c 	and.w	r2, r3, #12
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d1eb      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d214      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 0207 	bic.w	r2, r3, #7
 8003e36:	4906      	ldr	r1, [pc, #24]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <HAL_RCC_ClockConfig+0x25c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2de>
 8003e50:	40022000 	.word	0x40022000
 8003e54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCC_ClockConfig+0x2e8>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	491a      	ldr	r1, [pc, #104]	; (8003edc <HAL_RCC_ClockConfig+0x2e8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <HAL_RCC_ClockConfig+0x2e8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4912      	ldr	r1, [pc, #72]	; (8003edc <HAL_RCC_ClockConfig+0x2e8>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e96:	f000 f829 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003e9a:	4601      	mov	r1, r0
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <HAL_RCC_ClockConfig+0x2e8>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea4:	22f0      	movs	r2, #240	; 0xf0
 8003ea6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	fa92 f2a2 	rbit	r2, r2
 8003eae:	60fa      	str	r2, [r7, #12]
  return result;
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	fab2 f282 	clz	r2, r2
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	40d3      	lsrs	r3, r2
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x2ec>)
 8003ebc:	5cd3      	ldrb	r3, [r2, r3]
 8003ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd feac 	bl	8001c28 <HAL_InitTick>
  
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3778      	adds	r7, #120	; 0x78
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	0800b1c0 	.word	0x0800b1c0
 8003ee4:	20000104 	.word	0x20000104
 8003ee8:	20000108 	.word	0x20000108

08003eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b08b      	sub	sp, #44	; 0x2c
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d002      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x30>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x36>
 8003f1a:	e03c      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f1e:	623b      	str	r3, [r7, #32]
      break;
 8003f20:	e03c      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	fa92 f2a2 	rbit	r2, r2
 8003f34:	607a      	str	r2, [r7, #4]
  return result;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	40d3      	lsrs	r3, r2
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	220f      	movs	r2, #15
 8003f50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	fa92 f2a2 	rbit	r2, r2
 8003f58:	60fa      	str	r2, [r7, #12]
  return result;
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	fab2 f282 	clz	r2, r2
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	40d3      	lsrs	r3, r2
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f66:	5cd3      	ldrb	r3, [r2, r3]
 8003f68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f74:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	e004      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	623b      	str	r3, [r7, #32]
      break;
 8003f94:	e002      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f98:	623b      	str	r3, [r7, #32]
      break;
 8003f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	372c      	adds	r7, #44	; 0x2c
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	007a1200 	.word	0x007a1200
 8003fb4:	0800b1d8 	.word	0x0800b1d8
 8003fb8:	0800b1e8 	.word	0x0800b1e8
 8003fbc:	003d0900 	.word	0x003d0900

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000104 	.word	0x20000104

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fde:	f7ff ffef 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	fa92 f2a2 	rbit	r2, r2
 8003ff8:	603a      	str	r2, [r7, #0]
  return result;
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	fab2 f282 	clz	r2, r2
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	40d3      	lsrs	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	0800b1d0 	.word	0x0800b1d0

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004022:	f7ff ffcd 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004026:	4601      	mov	r1, r0
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004030:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	fa92 f2a2 	rbit	r2, r2
 800403c:	603a      	str	r2, [r7, #0]
  return result;
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	40d3      	lsrs	r3, r2
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_RCC_GetPCLK2Freq+0x40>)
 800404a:	5cd3      	ldrb	r3, [r2, r3]
 800404c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	0800b1d0 	.word	0x0800b1d0

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b092      	sub	sp, #72	; 0x48
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80cd 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004084:	4b86      	ldr	r3, [pc, #536]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10e      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b83      	ldr	r3, [pc, #524]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a82      	ldr	r2, [pc, #520]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409a:	61d3      	str	r3, [r2, #28]
 800409c:	4b80      	ldr	r3, [pc, #512]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b7a      	ldr	r3, [pc, #488]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a79      	ldr	r2, [pc, #484]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fd fdf3 	bl	8001cb0 <HAL_GetTick>
 80040ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fd fdef 	bl	8001cb0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b64      	cmp	r3, #100	; 0x64
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0db      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b70      	ldr	r3, [pc, #448]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ec:	4b6c      	ldr	r3, [pc, #432]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d07d      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004106:	429a      	cmp	r2, r3
 8004108:	d076      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410a:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	461a      	mov	r2, r3
 8004134:	2301      	movs	r3, #1
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800415c:	4a50      	ldr	r2, [pc, #320]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d045      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fd fda0 	bl	8001cb0 <HAL_GetTick>
 8004170:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004172:	e00a      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd fd9c 	bl	8001cb0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e086      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800418a:	2302      	movs	r3, #2
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	2302      	movs	r3, #2
 8004198:	623b      	str	r3, [r7, #32]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	61fb      	str	r3, [r7, #28]
  return result;
 80041a2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d102      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80041b8:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	e007      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041be:	2302      	movs	r3, #2
 80041c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2202      	movs	r2, #2
 80041d0:	613a      	str	r2, [r7, #16]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	fa92 f2a2 	rbit	r2, r2
 80041d8:	60fa      	str	r2, [r7, #12]
  return result;
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	fab2 f282 	clz	r2, r2
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	f002 021f 	and.w	r2, r2, #31
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f202 	lsl.w	r2, r1, r2
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0bd      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041f8:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4926      	ldr	r1, [pc, #152]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004206:	4313      	orrs	r3, r2
 8004208:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800420a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800422a:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	491a      	ldr	r1, [pc, #104]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004238:	4313      	orrs	r3, r2
 800423a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f023 0210 	bic.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4912      	ldr	r1, [pc, #72]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004256:	4313      	orrs	r3, r2
 8004258:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	490b      	ldr	r1, [pc, #44]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	4903      	ldr	r1, [pc, #12]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004292:	4313      	orrs	r3, r2
 8004294:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3748      	adds	r7, #72	; 0x48
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	10908100 	.word	0x10908100

080042ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e095      	b.n	80043ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ce:	d009      	beq.n	80042e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
 80042d6:	e005      	b.n	80042e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd fa94 	bl	800182c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004324:	d902      	bls.n	800432c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e002      	b.n	8004332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800432c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800433a:	d007      	beq.n	800434c <HAL_SPI_Init+0xa0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004344:	d002      	beq.n	800434c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	ea42 0103 	orr.w	r1, r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	f003 0204 	and.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043c8:	ea42 0103 	orr.w	r1, r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b088      	sub	sp, #32
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_SPI_Transmit+0x22>
 8004410:	2302      	movs	r3, #2
 8004412:	e158      	b.n	80046c6 <HAL_SPI_Transmit+0x2d4>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800441c:	f7fd fc48 	bl	8001cb0 <HAL_GetTick>
 8004420:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d002      	beq.n	8004438 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004436:	e13d      	b.n	80046b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_SPI_Transmit+0x52>
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004448:	e134      	b.n	80046b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	d10f      	bne.n	80044b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d007      	beq.n	80044d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044dc:	d94b      	bls.n	8004576 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Transmit+0xfa>
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d13e      	bne.n	800456a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	881a      	ldrh	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004510:	e02b      	b.n	800456a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d112      	bne.n	8004546 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	1c9a      	adds	r2, r3, #2
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004544:	e011      	b.n	800456a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004546:	f7fd fbb3 	bl	8001cb0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d803      	bhi.n	800455e <HAL_SPI_Transmit+0x16c>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d102      	bne.n	8004564 <HAL_SPI_Transmit+0x172>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004568:	e0a4      	b.n	80046b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ce      	bne.n	8004512 <HAL_SPI_Transmit+0x120>
 8004574:	e07c      	b.n	8004670 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x192>
 800457e:	8afb      	ldrh	r3, [r7, #22]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d170      	bne.n	8004666 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d912      	bls.n	80045b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b02      	subs	r3, #2
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045b2:	e058      	b.n	8004666 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045da:	e044      	b.n	8004666 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d12b      	bne.n	8004642 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d912      	bls.n	800461a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b02      	subs	r3, #2
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004618:	e025      	b.n	8004666 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004640:	e011      	b.n	8004666 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004642:	f7fd fb35 	bl	8001cb0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d803      	bhi.n	800465a <HAL_SPI_Transmit+0x268>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d102      	bne.n	8004660 <HAL_SPI_Transmit+0x26e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004664:	e026      	b.n	80046b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1b5      	bne.n	80045dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fce3 	bl	8005040 <SPI_EndRxTxTransaction>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e000      	b.n	80046b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80046b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b088      	sub	sp, #32
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d112      	bne.n	8004712 <HAL_SPI_Receive+0x44>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10e      	bne.n	8004712 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2204      	movs	r2, #4
 80046f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f910 	bl	800492e <HAL_SPI_TransmitReceive>
 800470e:	4603      	mov	r3, r0
 8004710:	e109      	b.n	8004926 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_SPI_Receive+0x52>
 800471c:	2302      	movs	r3, #2
 800471e:	e102      	b.n	8004926 <HAL_SPI_Receive+0x258>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004728:	f7fd fac2 	bl	8001cb0 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b01      	cmp	r3, #1
 8004738:	d002      	beq.n	8004740 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800473a:	2302      	movs	r3, #2
 800473c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800473e:	e0e9      	b.n	8004914 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_Receive+0x7e>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004750:	e0e0      	b.n	8004914 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2204      	movs	r2, #4
 8004756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800479c:	d908      	bls.n	80047b0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	e007      	b.n	80047c0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c8:	d10f      	bne.n	80047ea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d007      	beq.n	8004808 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004810:	d867      	bhi.n	80048e2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004812:	e030      	b.n	8004876 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d117      	bne.n	8004852 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f103 020c 	add.w	r2, r3, #12
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	7812      	ldrb	r2, [r2, #0]
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004850:	e011      	b.n	8004876 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004852:	f7fd fa2d 	bl	8001cb0 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d803      	bhi.n	800486a <HAL_SPI_Receive+0x19c>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d102      	bne.n	8004870 <HAL_SPI_Receive+0x1a2>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004874:	e04e      	b.n	8004914 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1c8      	bne.n	8004814 <HAL_SPI_Receive+0x146>
 8004882:	e034      	b.n	80048ee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d115      	bne.n	80048be <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	b292      	uxth	r2, r2
 800489e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048bc:	e011      	b.n	80048e2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048be:	f7fd f9f7 	bl	8001cb0 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d803      	bhi.n	80048d6 <HAL_SPI_Receive+0x208>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_Receive+0x20e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048e0:	e018      	b.n	8004914 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ca      	bne.n	8004884 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fb4c 	bl	8004f90 <SPI_EndRxTransaction>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]
 8004910:	e000      	b.n	8004914 <HAL_SPI_Receive+0x246>
  }

error :
 8004912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b08a      	sub	sp, #40	; 0x28
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800493c:	2301      	movs	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x26>
 8004950:	2302      	movs	r3, #2
 8004952:	e1fb      	b.n	8004d4c <HAL_SPI_TransmitReceive+0x41e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495c:	f7fd f9a8 	bl	8001cb0 <HAL_GetTick>
 8004960:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004968:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004974:	887b      	ldrh	r3, [r7, #2]
 8004976:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004978:	7efb      	ldrb	r3, [r7, #27]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d00e      	beq.n	800499c <HAL_SPI_TransmitReceive+0x6e>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004984:	d106      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x66>
 800498e:	7efb      	ldrb	r3, [r7, #27]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d003      	beq.n	800499c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800499a:	e1cd      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x80>
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049b4:	e1c0      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d003      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2205      	movs	r2, #5
 80049c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	887a      	ldrh	r2, [r7, #2]
 80049e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	887a      	ldrh	r2, [r7, #2]
 80049f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a0c:	d802      	bhi.n	8004a14 <HAL_SPI_TransmitReceive+0xe6>
 8004a0e:	8a3b      	ldrh	r3, [r7, #16]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d908      	bls.n	8004a26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	e007      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d007      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a5c:	d97c      	bls.n	8004b58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x13e>
 8004a66:	8a7b      	ldrh	r3, [r7, #18]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d169      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	1c9a      	adds	r2, r3, #2
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a90:	e056      	b.n	8004b40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x1aa>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <HAL_SPI_TransmitReceive+0x1aa>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d113      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d11c      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1f2>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	b292      	uxth	r2, r2
 8004afe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b20:	f7fd f8c6 	bl	8001cb0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d807      	bhi.n	8004b40 <HAL_SPI_TransmitReceive+0x212>
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d003      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b3e:	e0fb      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1a3      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x164>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d19d      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x164>
 8004b56:	e0df      	b.n	8004d18 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x23a>
 8004b60:	8a7b      	ldrh	r3, [r7, #18]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f040 80cb 	bne.w	8004cfe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d912      	bls.n	8004b98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b02      	subs	r3, #2
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b96:	e0b2      	b.n	8004cfe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bbe:	e09e      	b.n	8004cfe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d134      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x30a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02f      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x30a>
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d12c      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d912      	bls.n	8004c0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	881a      	ldrh	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	1c9a      	adds	r2, r3, #2
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b02      	subs	r3, #2
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0c:	e012      	b.n	8004c34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d148      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x3aa>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d042      	beq.n	8004cd8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d923      	bls.n	8004ca6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	b292      	uxth	r2, r2
 8004c6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b02      	subs	r3, #2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d81f      	bhi.n	8004cd4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e016      	b.n	8004cd4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f103 020c 	add.w	r2, r3, #12
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	7812      	ldrb	r2, [r2, #0]
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cd8:	f7fc ffea 	bl	8001cb0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d803      	bhi.n	8004cf0 <HAL_SPI_TransmitReceive+0x3c2>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x3c8>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004cfc:	e01c      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f47f af5b 	bne.w	8004bc0 <HAL_SPI_TransmitReceive+0x292>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f47f af54 	bne.w	8004bc0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f98f 	bl	8005040 <SPI_EndRxTxTransaction>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	661a      	str	r2, [r3, #96]	; 0x60
 8004d34:	e000      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3728      	adds	r7, #40	; 0x28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d64:	f7fc ffa4 	bl	8001cb0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d74:	f7fc ff9c 	bl	8001cb0 <HAL_GetTick>
 8004d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	015b      	lsls	r3, r3, #5
 8004d80:	0d1b      	lsrs	r3, r3, #20
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8a:	e054      	b.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d050      	beq.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d94:	f7fc ff8c 	bl	8001cb0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d902      	bls.n	8004daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d13d      	bne.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d111      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	d004      	beq.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d107      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	d10f      	bne.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e017      	b.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d19b      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000104 	.word	0x20000104

08004e64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e76:	f7fc ff1b 	bl	8001cb0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	4413      	add	r3, r2
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e86:	f7fc ff13 	bl	8001cb0 <HAL_GetTick>
 8004e8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e94:	4b3d      	ldr	r3, [pc, #244]	; (8004f8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00da      	lsls	r2, r3, #3
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	0d1b      	lsrs	r3, r3, #20
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004eac:	e060      	b.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004eb4:	d107      	bne.n	8004ec6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d050      	beq.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ece:	f7fc feef 	bl	8001cb0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d902      	bls.n	8004ee4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d13d      	bne.n	8004f60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efc:	d111      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f06:	d004      	beq.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f10:	d107      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2a:	d10f      	bne.n	8004f4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e010      	b.n	8004f82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d196      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000104 	.word	0x20000104

08004f90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa4:	d111      	bne.n	8004fca <SPI_EndRxTransaction+0x3a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fae:	d004      	beq.n	8004fba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb8:	d107      	bne.n	8004fca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff febd 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e023      	b.n	8005038 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff8:	d11d      	bne.n	8005036 <SPI_EndRxTransaction+0xa6>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d004      	beq.n	800500e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d113      	bne.n	8005036 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff ff22 	bl	8004e64 <SPI_WaitFifoStateUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e000      	b.n	8005038 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ff03 	bl	8004e64 <SPI_WaitFifoStateUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e027      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fe68 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e014      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff fedc 	bl	8004e64 <SPI_WaitFifoStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e000      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e040      	b.n	8005160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc fd16 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8c0 	bl	8005290 <UART_SetConfig>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e022      	b.n	8005160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f9ea 	bl	80054fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa71 	bl	8005640 <UART_CheckIdleState>
 800515e:	4603      	mov	r3, r0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517c:	2b20      	cmp	r3, #32
 800517e:	f040 8082 	bne.w	8005286 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_UART_Transmit+0x26>
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e07a      	b.n	8005288 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Transmit+0x38>
 800519c:	2302      	movs	r3, #2
 800519e:	e073      	b.n	8005288 <HAL_UART_Transmit+0x120>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2221      	movs	r2, #33	; 0x21
 80051b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b6:	f7fc fd7b 	bl	8001cb0 <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d108      	bne.n	80051e8 <HAL_UART_Transmit+0x80>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e003      	b.n	80051f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051f8:	e02d      	b.n	8005256 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fa64 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e039      	b.n	8005288 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005226:	b292      	uxth	r2, r2
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3302      	adds	r3, #2
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e008      	b.n	8005244 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	b292      	uxth	r2, r2
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3301      	adds	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1cb      	bne.n	80051fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	2140      	movs	r1, #64	; 0x40
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fa30 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e005      	b.n	8005288 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b8a      	ldr	r3, [pc, #552]	; (80054e4 <UART_SetConfig+0x254>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	430b      	orrs	r3, r1
 80052c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a78      	ldr	r2, [pc, #480]	; (80054e8 <UART_SetConfig+0x258>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d120      	bne.n	800534e <UART_SetConfig+0xbe>
 800530c:	4b77      	ldr	r3, [pc, #476]	; (80054ec <UART_SetConfig+0x25c>)
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b03      	cmp	r3, #3
 8005316:	d817      	bhi.n	8005348 <UART_SetConfig+0xb8>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x90>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005331 	.word	0x08005331
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005343 	.word	0x08005343
 800532c:	08005337 	.word	0x08005337
 8005330:	2300      	movs	r3, #0
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e01d      	b.n	8005372 <UART_SetConfig+0xe2>
 8005336:	2302      	movs	r3, #2
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e01a      	b.n	8005372 <UART_SetConfig+0xe2>
 800533c:	2304      	movs	r3, #4
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e017      	b.n	8005372 <UART_SetConfig+0xe2>
 8005342:	2308      	movs	r3, #8
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e014      	b.n	8005372 <UART_SetConfig+0xe2>
 8005348:	2310      	movs	r3, #16
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e011      	b.n	8005372 <UART_SetConfig+0xe2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a67      	ldr	r2, [pc, #412]	; (80054f0 <UART_SetConfig+0x260>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d102      	bne.n	800535e <UART_SetConfig+0xce>
 8005358:	2300      	movs	r3, #0
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e009      	b.n	8005372 <UART_SetConfig+0xe2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a64      	ldr	r2, [pc, #400]	; (80054f4 <UART_SetConfig+0x264>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d102      	bne.n	800536e <UART_SetConfig+0xde>
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e001      	b.n	8005372 <UART_SetConfig+0xe2>
 800536e:	2310      	movs	r3, #16
 8005370:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537a:	d15b      	bne.n	8005434 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800537c:	7ffb      	ldrb	r3, [r7, #31]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d827      	bhi.n	80053d2 <UART_SetConfig+0x142>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0xf8>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053bd 	.word	0x080053bd
 8005394:	080053d3 	.word	0x080053d3
 8005398:	080053c3 	.word	0x080053c3
 800539c:	080053d3 	.word	0x080053d3
 80053a0:	080053d3 	.word	0x080053d3
 80053a4:	080053d3 	.word	0x080053d3
 80053a8:	080053cb 	.word	0x080053cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fe fe14 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 80053b0:	61b8      	str	r0, [r7, #24]
        break;
 80053b2:	e013      	b.n	80053dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fe32 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80053b8:	61b8      	str	r0, [r7, #24]
        break;
 80053ba:	e00f      	b.n	80053dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053bc:	4b4e      	ldr	r3, [pc, #312]	; (80054f8 <UART_SetConfig+0x268>)
 80053be:	61bb      	str	r3, [r7, #24]
        break;
 80053c0:	e00c      	b.n	80053dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c2:	f7fe fd93 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 80053c6:	61b8      	str	r0, [r7, #24]
        break;
 80053c8:	e008      	b.n	80053dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	61bb      	str	r3, [r7, #24]
        break;
 80053d0:	e004      	b.n	80053dc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	77bb      	strb	r3, [r7, #30]
        break;
 80053da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d074      	beq.n	80054cc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	005a      	lsls	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b0f      	cmp	r3, #15
 80053fe:	d916      	bls.n	800542e <UART_SetConfig+0x19e>
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005406:	d212      	bcs.n	800542e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f023 030f 	bic.w	r3, r3, #15
 8005410:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	b29b      	uxth	r3, r3
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	b29a      	uxth	r2, r3
 800541e:	89fb      	ldrh	r3, [r7, #14]
 8005420:	4313      	orrs	r3, r2
 8005422:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	89fa      	ldrh	r2, [r7, #14]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e04e      	b.n	80054cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	77bb      	strb	r3, [r7, #30]
 8005432:	e04b      	b.n	80054cc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005434:	7ffb      	ldrb	r3, [r7, #31]
 8005436:	2b08      	cmp	r3, #8
 8005438:	d827      	bhi.n	800548a <UART_SetConfig+0x1fa>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x1b0>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	0800548b 	.word	0x0800548b
 8005450:	0800547b 	.word	0x0800547b
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800548b 	.word	0x0800548b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fe fdb8 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8005468:	61b8      	str	r0, [r7, #24]
        break;
 800546a:	e013      	b.n	8005494 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fe fdd6 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005470:	61b8      	str	r0, [r7, #24]
        break;
 8005472:	e00f      	b.n	8005494 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <UART_SetConfig+0x268>)
 8005476:	61bb      	str	r3, [r7, #24]
        break;
 8005478:	e00c      	b.n	8005494 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fd37 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 800547e:	61b8      	str	r0, [r7, #24]
        break;
 8005480:	e008      	b.n	8005494 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	61bb      	str	r3, [r7, #24]
        break;
 8005488:	e004      	b.n	8005494 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	77bb      	strb	r3, [r7, #30]
        break;
 8005492:	bf00      	nop
    }

    if (pclk != 0U)
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	085a      	lsrs	r2, r3, #1
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	441a      	add	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	d908      	bls.n	80054c8 <UART_SetConfig+0x238>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d204      	bcs.n	80054c8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	e001      	b.n	80054cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	efff69f3 	.word	0xefff69f3
 80054e8:	40013800 	.word	0x40013800
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40004400 	.word	0x40004400
 80054f4:	40004800 	.word	0x40004800
 80054f8:	007a1200 	.word	0x007a1200

080054fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01a      	beq.n	8005612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fa:	d10a      	bne.n	8005612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af02      	add	r7, sp, #8
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005650:	f7fc fb2e 	bl	8001cb0 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b08      	cmp	r3, #8
 8005662:	d10e      	bne.n	8005682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f82d 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e023      	b.n	80056ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b04      	cmp	r3, #4
 800568e:	d10e      	bne.n	80056ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f817 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e00d      	b.n	80056ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b09c      	sub	sp, #112	; 0x70
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	4613      	mov	r3, r2
 80056e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e2:	e0a5      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	f000 80a1 	beq.w	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fc fadf 	bl	8001cb0 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <UART_WaitOnFlagUntilTimeout+0x32>
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	2b00      	cmp	r3, #0
 8005702:	d13e      	bne.n	8005782 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005718:	667b      	str	r3, [r7, #100]	; 0x64
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005724:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e6      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	663b      	str	r3, [r7, #96]	; 0x60
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005756:	64ba      	str	r2, [r7, #72]	; 0x48
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800575c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e067      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d04f      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d147      	bne.n	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e6      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	613b      	str	r3, [r7, #16]
   return(result);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3308      	adds	r3, #8
 80057fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057fc:	623a      	str	r2, [r7, #32]
 80057fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	69f9      	ldr	r1, [r7, #28]
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	61bb      	str	r3, [r7, #24]
   return(result);
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e5      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e010      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	f43f af4a 	beq.w	80056e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3770      	adds	r7, #112	; 0x70
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005862:	f3ef 8305 	mrs	r3, IPSR
 8005866:	60bb      	str	r3, [r7, #8]
  return(result);
 8005868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10f      	bne.n	800588e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586e:	f3ef 8310 	mrs	r3, PRIMASK
 8005872:	607b      	str	r3, [r7, #4]
  return(result);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <osKernelInitialize+0x32>
 800587a:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <osKernelInitialize+0x64>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d109      	bne.n	8005896 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005882:	f3ef 8311 	mrs	r3, BASEPRI
 8005886:	603b      	str	r3, [r7, #0]
  return(result);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800588e:	f06f 0305 	mvn.w	r3, #5
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e00c      	b.n	80058b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <osKernelInitialize+0x64>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d105      	bne.n	80058aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <osKernelInitialize+0x64>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e002      	b.n	80058b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80058aa:	f04f 33ff 	mov.w	r3, #4294967295
 80058ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000308 	.word	0x20000308

080058c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ca:	f3ef 8305 	mrs	r3, IPSR
 80058ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80058d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d6:	f3ef 8310 	mrs	r3, PRIMASK
 80058da:	607b      	str	r3, [r7, #4]
  return(result);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <osKernelStart+0x32>
 80058e2:	4b11      	ldr	r3, [pc, #68]	; (8005928 <osKernelStart+0x64>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d109      	bne.n	80058fe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058ea:	f3ef 8311 	mrs	r3, BASEPRI
 80058ee:	603b      	str	r3, [r7, #0]
  return(result);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80058f6:	f06f 0305 	mvn.w	r3, #5
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e00e      	b.n	800591c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <osKernelStart+0x64>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d107      	bne.n	8005916 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005906:	4b08      	ldr	r3, [pc, #32]	; (8005928 <osKernelStart+0x64>)
 8005908:	2202      	movs	r2, #2
 800590a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800590c:	f001 f880 	bl	8006a10 <vTaskStartScheduler>
      stat = osOK;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e002      	b.n	800591c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000308 	.word	0x20000308

0800592c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b092      	sub	sp, #72	; 0x48
 8005930:	af04      	add	r7, sp, #16
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593c:	f3ef 8305 	mrs	r3, IPSR
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005944:	2b00      	cmp	r3, #0
 8005946:	f040 8094 	bne.w	8005a72 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594a:	f3ef 8310 	mrs	r3, PRIMASK
 800594e:	623b      	str	r3, [r7, #32]
  return(result);
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 808d 	bne.w	8005a72 <osThreadNew+0x146>
 8005958:	4b48      	ldr	r3, [pc, #288]	; (8005a7c <osThreadNew+0x150>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d106      	bne.n	800596e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005960:	f3ef 8311 	mrs	r3, BASEPRI
 8005964:	61fb      	str	r3, [r7, #28]
  return(result);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 8082 	bne.w	8005a72 <osThreadNew+0x146>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d07e      	beq.n	8005a72 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005978:	2318      	movs	r3, #24
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800597c:	2300      	movs	r3, #0
 800597e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005980:	f107 031b 	add.w	r3, r7, #27
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d045      	beq.n	8005a1e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <osThreadNew+0x74>
        name = attr->name;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <osThreadNew+0x9a>
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	2b38      	cmp	r3, #56	; 0x38
 80059b8:	d805      	bhi.n	80059c6 <osThreadNew+0x9a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <osThreadNew+0x9e>
        return (NULL);
 80059c6:	2300      	movs	r3, #0
 80059c8:	e054      	b.n	8005a74 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <osThreadNew+0xd4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b5b      	cmp	r3, #91	; 0x5b
 80059e8:	d90a      	bls.n	8005a00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <osThreadNew+0xd4>
        mem = 1;
 80059fa:	2301      	movs	r3, #1
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fe:	e010      	b.n	8005a22 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10c      	bne.n	8005a22 <osThreadNew+0xf6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d108      	bne.n	8005a22 <osThreadNew+0xf6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <osThreadNew+0xf6>
          mem = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1c:	e001      	b.n	8005a22 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a30:	9202      	str	r2, [sp, #8]
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fe1a 	bl	8006678 <xTaskCreateStatic>
 8005a44:	4603      	mov	r3, r0
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e013      	b.n	8005a72 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d110      	bne.n	8005a72 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fe64 	bl	8006730 <xTaskCreate>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <osThreadNew+0x146>
          hTask = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a72:	697b      	ldr	r3, [r7, #20]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3738      	adds	r7, #56	; 0x38
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000308 	.word	0x20000308

08005a80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a88:	f3ef 8305 	mrs	r3, IPSR
 8005a8c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10f      	bne.n	8005ab4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a94:	f3ef 8310 	mrs	r3, PRIMASK
 8005a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <osDelay+0x34>
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <osDelay+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d109      	bne.n	8005abc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <osDelay+0x3c>
    stat = osErrorISR;
 8005ab4:	f06f 0305 	mvn.w	r3, #5
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e007      	b.n	8005acc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <osDelay+0x4c>
      vTaskDelay(ticks);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 ff6e 	bl	80069a8 <vTaskDelay>
    }
  }

  return (stat);
 8005acc:	697b      	ldr	r3, [r7, #20]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000308 	.word	0x20000308

08005adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a07      	ldr	r2, [pc, #28]	; (8005b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8005aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4a06      	ldr	r2, [pc, #24]	; (8005b0c <vApplicationGetIdleTaskMemory+0x30>)
 8005af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	601a      	str	r2, [r3, #0]
}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	2000030c 	.word	0x2000030c
 8005b0c:	20000368 	.word	0x20000368

08005b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vApplicationGetTimerTaskMemory+0x30>)
 8005b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b2e:	601a      	str	r2, [r3, #0]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000568 	.word	0x20000568
 8005b40:	200005c4 	.word	0x200005c4

08005b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f103 0208 	add.w	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f103 0208 	add.w	r2, r3, #8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f103 0208 	add.w	r2, r3, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d103      	bne.n	8005c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e00c      	b.n	8005c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e002      	b.n	8005c14 <vListInsert+0x2e>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d2f6      	bcs.n	8005c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6892      	ldr	r2, [r2, #8]
 8005c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6852      	ldr	r2, [r2, #4]
 8005c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d103      	bne.n	8005c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	1e5a      	subs	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cd6:	f002 f80d 	bl	8007cf4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	441a      	add	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	3b01      	subs	r3, #1
 8005d08:	68f9      	ldr	r1, [r7, #12]
 8005d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d114      	bne.n	8005d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01a      	beq.n	8005d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3310      	adds	r3, #16
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 f8f7 	bl	8006f2c <xTaskRemoveFromEventList>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d012      	beq.n	8005d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <xQueueGenericReset+0xcc>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	e009      	b.n	8005d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3310      	adds	r3, #16
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fef2 	bl	8005b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3324      	adds	r3, #36	; 0x24
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff feed 	bl	8005b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d6a:	f001 fff3 	bl	8007d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d6e:	2301      	movs	r3, #1
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	; 0x38
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <xQueueGenericCreateStatic+0x52>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <xQueueGenericCreateStatic+0x56>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <xQueueGenericCreateStatic+0x58>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	623b      	str	r3, [r7, #32]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <xQueueGenericCreateStatic+0x7e>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <xQueueGenericCreateStatic+0x82>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <xQueueGenericCreateStatic+0x84>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	61fb      	str	r3, [r7, #28]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e1a:	2350      	movs	r3, #80	; 0x50
 8005e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b50      	cmp	r3, #80	; 0x50
 8005e22:	d00a      	beq.n	8005e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	61bb      	str	r3, [r7, #24]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f805 	bl	8005e6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3730      	adds	r7, #48	; 0x30
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e002      	b.n	8005e8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e98:	2101      	movs	r1, #1
 8005e9a:	69b8      	ldr	r0, [r7, #24]
 8005e9c:	f7ff ff06 	bl	8005cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	; 0x38
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericSend+0x32>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <xQueueGenericSend+0x40>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <xQueueGenericSend+0x44>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <xQueueGenericSend+0x46>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <xQueueGenericSend+0x60>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSend+0x6e>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <xQueueGenericSend+0x72>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <xQueueGenericSend+0x74>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	623b      	str	r3, [r7, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f3e:	f001 f9b9 	bl	80072b4 <xTaskGetSchedulerState>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xQueueGenericSend+0x9e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xQueueGenericSend+0xa2>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueGenericSend+0xa4>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61fb      	str	r3, [r7, #28]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f6e:	f001 fec1 	bl	8007cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <xQueueGenericSend+0xd4>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d129      	bne.n	8005fd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f8a:	f000 fa07 	bl	800639c <prvCopyDataToQueue>
 8005f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	3324      	adds	r3, #36	; 0x24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 ffc5 	bl	8006f2c <xTaskRemoveFromEventList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fa8:	4b3f      	ldr	r3, [pc, #252]	; (80060a8 <xQueueGenericSend+0x1f8>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	e00a      	b.n	8005fd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fc0:	4b39      	ldr	r3, [pc, #228]	; (80060a8 <xQueueGenericSend+0x1f8>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fd0:	f001 fec0 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e063      	b.n	80060a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fde:	f001 feb9 	bl	8007d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e05c      	b.n	80060a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 ffff 	bl	8006ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ffa:	f001 feab 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ffe:	f000 fd6d 	bl	8006adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006002:	f001 fe77 	bl	8007cf4 <vPortEnterCritical>
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800600c:	b25b      	sxtb	r3, r3
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d103      	bne.n	800601c <xQueueGenericSend+0x16c>
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006022:	b25b      	sxtb	r3, r3
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d103      	bne.n	8006032 <xQueueGenericSend+0x182>
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006032:	f001 fe8f 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006036:	1d3a      	adds	r2, r7, #4
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f000 ffee 	bl	8007020 <xTaskCheckForTimeOut>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d124      	bne.n	8006094 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800604a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604c:	f000 fa9e 	bl	800658c <prvIsQueueFull>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3310      	adds	r3, #16
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f000 ff14 	bl	8006e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006066:	f000 fa29 	bl	80064bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800606a:	f000 fd45 	bl	8006af8 <xTaskResumeAll>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f af7c 	bne.w	8005f6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <xQueueGenericSend+0x1f8>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	e772      	b.n	8005f6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608a:	f000 fa17 	bl	80064bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800608e:	f000 fd33 	bl	8006af8 <xTaskResumeAll>
 8006092:	e76c      	b.n	8005f6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006096:	f000 fa11 	bl	80064bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800609a:	f000 fd2d 	bl	8006af8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800609e:	2300      	movs	r3, #0
		}
	}
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3738      	adds	r7, #56	; 0x38
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <xQueueGenericSendFromISR+0x3c>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <xQueueGenericSendFromISR+0x40>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <xQueueGenericSendFromISR+0x42>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	623b      	str	r3, [r7, #32]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d103      	bne.n	8006116 <xQueueGenericSendFromISR+0x6a>
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <xQueueGenericSendFromISR+0x6e>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <xQueueGenericSendFromISR+0x70>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	61fb      	str	r3, [r7, #28]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006136:	f001 febf 	bl	8007eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800613a:	f3ef 8211 	mrs	r2, BASEPRI
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	61ba      	str	r2, [r7, #24]
 8006150:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006152:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	429a      	cmp	r2, r3
 8006160:	d302      	bcc.n	8006168 <xQueueGenericSendFromISR+0xbc>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d12c      	bne.n	80061c2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006178:	f000 f910 	bl	800639c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800617c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d112      	bne.n	80061ac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	3324      	adds	r3, #36	; 0x24
 8006192:	4618      	mov	r0, r3
 8006194:	f000 feca 	bl	8006f2c <xTaskRemoveFromEventList>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e007      	b.n	80061bc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061b0:	3301      	adds	r3, #1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	b25a      	sxtb	r2, r3
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061bc:	2301      	movs	r3, #1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80061c0:	e001      	b.n	80061c6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3738      	adds	r7, #56	; 0x38
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	; 0x30
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xQueueReceive+0x30>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	623b      	str	r3, [r7, #32]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <xQueueReceive+0x3e>
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <xQueueReceive+0x42>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueReceive+0x44>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueReceive+0x5e>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	61fb      	str	r3, [r7, #28]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800623a:	f001 f83b 	bl	80072b4 <xTaskGetSchedulerState>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <xQueueReceive+0x6e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <xQueueReceive+0x72>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <xQueueReceive+0x74>
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xQueueReceive+0x8e>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	61bb      	str	r3, [r7, #24]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800626a:	f001 fd43 	bl	8007cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01f      	beq.n	80062ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 f8f7 	bl	8006470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	3310      	adds	r3, #16
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fe48 	bl	8006f2c <xTaskRemoveFromEventList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062a2:	4b3d      	ldr	r3, [pc, #244]	; (8006398 <xQueueReceive+0x1bc>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062b2:	f001 fd4f 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e069      	b.n	800638e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062c0:	f001 fd48 	bl	8007d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e062      	b.n	800638e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ce:	f107 0310 	add.w	r3, r7, #16
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fe8e 	bl	8006ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062dc:	f001 fd3a 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e0:	f000 fbfc 	bl	8006adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062e4:	f001 fd06 	bl	8007cf4 <vPortEnterCritical>
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ee:	b25b      	sxtb	r3, r3
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d103      	bne.n	80062fe <xQueueReceive+0x122>
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006304:	b25b      	sxtb	r3, r3
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d103      	bne.n	8006314 <xQueueReceive+0x138>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006314:	f001 fd1e 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006318:	1d3a      	adds	r2, r7, #4
 800631a:	f107 0310 	add.w	r3, r7, #16
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fe7d 	bl	8007020 <xTaskCheckForTimeOut>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d123      	bne.n	8006374 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800632c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632e:	f000 f917 	bl	8006560 <prvIsQueueEmpty>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d017      	beq.n	8006368 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fda3 	bl	8006e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006348:	f000 f8b8 	bl	80064bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800634c:	f000 fbd4 	bl	8006af8 <xTaskResumeAll>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d189      	bne.n	800626a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006356:	4b10      	ldr	r3, [pc, #64]	; (8006398 <xQueueReceive+0x1bc>)
 8006358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	e780      	b.n	800626a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636a:	f000 f8a7 	bl	80064bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800636e:	f000 fbc3 	bl	8006af8 <xTaskResumeAll>
 8006372:	e77a      	b.n	800626a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006376:	f000 f8a1 	bl	80064bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800637a:	f000 fbbd 	bl	8006af8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800637e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006380:	f000 f8ee 	bl	8006560 <prvIsQueueEmpty>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f43f af6f 	beq.w	800626a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800638c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800638e:	4618      	mov	r0, r3
 8006390:	3730      	adds	r7, #48	; 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10d      	bne.n	80063d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d14d      	bne.n	800645e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 ff92 	bl	80072f0 <xTaskPriorityDisinherit>
 80063cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	e043      	b.n	800645e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d119      	bne.n	8006410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6898      	ldr	r0, [r3, #8]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	461a      	mov	r2, r3
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	f001 ffaa 	bl	8008340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d32b      	bcc.n	800645e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	e026      	b.n	800645e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68d8      	ldr	r0, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	461a      	mov	r2, r3
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	f001 ff90 	bl	8008340 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	425b      	negs	r3, r3
 800642a:	441a      	add	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d207      	bcs.n	800644c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	425b      	negs	r3, r3
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d105      	bne.n	800645e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	3b01      	subs	r3, #1
 800645c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006466:	697b      	ldr	r3, [r7, #20]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	441a      	add	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d303      	bcc.n	80064a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	461a      	mov	r2, r3
 80064ae:	6838      	ldr	r0, [r7, #0]
 80064b0:	f001 ff46 	bl	8008340 <memcpy>
	}
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064c4:	f001 fc16 	bl	8007cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d0:	e011      	b.n	80064f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d012      	beq.n	8006500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd24 	bl	8006f2c <xTaskRemoveFromEventList>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ea:	f000 fdfb 	bl	80070e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dce9      	bgt.n	80064d2 <prvUnlockQueue+0x16>
 80064fe:	e000      	b.n	8006502 <prvUnlockQueue+0x46>
					break;
 8006500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800650a:	f001 fc23 	bl	8007d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800650e:	f001 fbf1 	bl	8007cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800651a:	e011      	b.n	8006540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3310      	adds	r3, #16
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fcff 	bl	8006f2c <xTaskRemoveFromEventList>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006534:	f000 fdd6 	bl	80070e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	3b01      	subs	r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	dce9      	bgt.n	800651c <prvUnlockQueue+0x60>
 8006548:	e000      	b.n	800654c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800654a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	22ff      	movs	r2, #255	; 0xff
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006554:	f001 fbfe 	bl	8007d54 <vPortExitCritical>
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006568:	f001 fbc4 	bl	8007cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e001      	b.n	800657e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800657e:	f001 fbe9 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006594:	f001 fbae 	bl	8007cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d102      	bne.n	80065aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e001      	b.n	80065ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ae:	f001 fbd1 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e014      	b.n	80065f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065cc:	4a0f      	ldr	r2, [pc, #60]	; (800660c <vQueueAddToRegistry+0x50>)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065d8:	490c      	ldr	r1, [pc, #48]	; (800660c <vQueueAddToRegistry+0x50>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <vQueueAddToRegistry+0x50>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	4413      	add	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065ee:	e006      	b.n	80065fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b07      	cmp	r3, #7
 80065fa:	d9e7      	bls.n	80065cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20002040 	.word	0x20002040

08006610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006620:	f001 fb68 	bl	8007cf4 <vPortEnterCritical>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800662a:	b25b      	sxtb	r3, r3
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d103      	bne.n	800663a <vQueueWaitForMessageRestricted+0x2a>
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006640:	b25b      	sxtb	r3, r3
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d103      	bne.n	8006650 <vQueueWaitForMessageRestricted+0x40>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006650:	f001 fb80 	bl	8007d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	3324      	adds	r3, #36	; 0x24
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fc35 	bl	8006ed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800666a:	6978      	ldr	r0, [r7, #20]
 800666c:	f7ff ff26 	bl	80064bc <prvUnlockQueue>
	}
 8006670:	bf00      	nop
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08e      	sub	sp, #56	; 0x38
 800667c:	af04      	add	r7, sp, #16
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	623b      	str	r3, [r7, #32]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xTaskCreateStatic+0x46>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	61fb      	str	r3, [r7, #28]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066be:	235c      	movs	r3, #92	; 0x5c
 80066c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b5c      	cmp	r3, #92	; 0x5c
 80066c6:	d00a      	beq.n	80066de <xTaskCreateStatic+0x66>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	61bb      	str	r3, [r7, #24]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01e      	beq.n	8006722 <xTaskCreateStatic+0xaa>
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066fc:	2300      	movs	r3, #0
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	f107 0314 	add.w	r3, r7, #20
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f850 	bl	80067ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800671a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800671c:	f000 f8d4 	bl	80068c8 <prvAddNewTaskToReadyList>
 8006720:	e001      	b.n	8006726 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006726:	697b      	ldr	r3, [r7, #20]
	}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	; 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08c      	sub	sp, #48	; 0x30
 8006734:	af04      	add	r7, sp, #16
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fbf7 	bl	8007f38 <pvPortMalloc>
 800674a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006752:	205c      	movs	r0, #92	; 0x5c
 8006754:	f001 fbf0 	bl	8007f38 <pvPortMalloc>
 8006758:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
 8006766:	e005      	b.n	8006774 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006768:	6978      	ldr	r0, [r7, #20]
 800676a:	f001 fca9 	bl	80080c0 <vPortFree>
 800676e:	e001      	b.n	8006774 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d017      	beq.n	80067aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	2300      	movs	r3, #0
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	9302      	str	r3, [sp, #8]
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f80e 	bl	80067ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800679e:	69f8      	ldr	r0, [r7, #28]
 80067a0:	f000 f892 	bl	80068c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067a4:	2301      	movs	r3, #1
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e002      	b.n	80067b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067b0:	69bb      	ldr	r3, [r7, #24]
	}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b088      	sub	sp, #32
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	461a      	mov	r2, r3
 80067d2:	21a5      	movs	r1, #165	; 0xa5
 80067d4:	f001 fdc2 	bl	800835c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067e2:	3b01      	subs	r3, #1
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f023 0307 	bic.w	r3, r3, #7
 80067f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	617b      	str	r3, [r7, #20]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	e012      	b.n	800683e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	7819      	ldrb	r1, [r3, #0]
 8006820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	3334      	adds	r3, #52	; 0x34
 8006828:	460a      	mov	r2, r1
 800682a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d9e9      	bls.n	8006818 <prvInitialiseNewTask+0x5e>
 8006844:	e000      	b.n	8006848 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006846:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2b37      	cmp	r3, #55	; 0x37
 8006854:	d901      	bls.n	800685a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006856:	2337      	movs	r3, #55	; 0x37
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006864:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	2200      	movs	r2, #0
 800686a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff f987 	bl	8005b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	3318      	adds	r3, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff f982 	bl	8005b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006884:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006894:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	2200      	movs	r2, #0
 800689a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	69b8      	ldr	r0, [r7, #24]
 80068aa:	f001 f8f5 	bl	8007a98 <pxPortInitialiseStack>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c0:	bf00      	nop
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d0:	f001 fa10 	bl	8007cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068d4:	4b2d      	ldr	r3, [pc, #180]	; (800698c <prvAddNewTaskToReadyList+0xc4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	4a2c      	ldr	r2, [pc, #176]	; (800698c <prvAddNewTaskToReadyList+0xc4>)
 80068dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068de:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <prvAddNewTaskToReadyList+0xc8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068e6:	4a2a      	ldr	r2, [pc, #168]	; (8006990 <prvAddNewTaskToReadyList+0xc8>)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068ec:	4b27      	ldr	r3, [pc, #156]	; (800698c <prvAddNewTaskToReadyList+0xc4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d110      	bne.n	8006916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068f4:	f000 fc1a 	bl	800712c <prvInitialiseTaskLists>
 80068f8:	e00d      	b.n	8006916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068fa:	4b26      	ldr	r3, [pc, #152]	; (8006994 <prvAddNewTaskToReadyList+0xcc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <prvAddNewTaskToReadyList+0xc8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	429a      	cmp	r2, r3
 800690e:	d802      	bhi.n	8006916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006910:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvAddNewTaskToReadyList+0xc8>)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006916:	4b20      	ldr	r3, [pc, #128]	; (8006998 <prvAddNewTaskToReadyList+0xd0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3301      	adds	r3, #1
 800691c:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <prvAddNewTaskToReadyList+0xd0>)
 800691e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <prvAddNewTaskToReadyList+0xd0>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <prvAddNewTaskToReadyList+0xd4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d903      	bls.n	800693c <prvAddNewTaskToReadyList+0x74>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	4a18      	ldr	r2, [pc, #96]	; (800699c <prvAddNewTaskToReadyList+0xd4>)
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <prvAddNewTaskToReadyList+0xd8>)
 800694a:	441a      	add	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3304      	adds	r3, #4
 8006950:	4619      	mov	r1, r3
 8006952:	4610      	mov	r0, r2
 8006954:	f7ff f923 	bl	8005b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006958:	f001 f9fc 	bl	8007d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <prvAddNewTaskToReadyList+0xcc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00e      	beq.n	8006982 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006964:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <prvAddNewTaskToReadyList+0xc8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d207      	bcs.n	8006982 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006972:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <prvAddNewTaskToReadyList+0xdc>)
 8006974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000e98 	.word	0x20000e98
 8006990:	200009c4 	.word	0x200009c4
 8006994:	20000ea4 	.word	0x20000ea4
 8006998:	20000eb4 	.word	0x20000eb4
 800699c:	20000ea0 	.word	0x20000ea0
 80069a0:	200009c8 	.word	0x200009c8
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <vTaskDelay+0x60>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <vTaskDelay+0x30>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	60bb      	str	r3, [r7, #8]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069d8:	f000 f880 	bl	8006adc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fcf4 	bl	80073cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e4:	f000 f888 	bl	8006af8 <xTaskResumeAll>
 80069e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d107      	bne.n	8006a00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <vTaskDelay+0x64>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000ec0 	.word	0x20000ec0
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a1e:	463a      	mov	r2, r7
 8006a20:	1d39      	adds	r1, r7, #4
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff f858 	bl	8005adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	9202      	str	r2, [sp, #8]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	2300      	movs	r3, #0
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	4921      	ldr	r1, [pc, #132]	; (8006ac4 <vTaskStartScheduler+0xb4>)
 8006a40:	4821      	ldr	r0, [pc, #132]	; (8006ac8 <vTaskStartScheduler+0xb8>)
 8006a42:	f7ff fe19 	bl	8006678 <xTaskCreateStatic>
 8006a46:	4603      	mov	r3, r0
 8006a48:	4a20      	ldr	r2, [pc, #128]	; (8006acc <vTaskStartScheduler+0xbc>)
 8006a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a4c:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <vTaskStartScheduler+0xbc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e001      	b.n	8006a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d102      	bne.n	8006a6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a64:	f000 fd06 	bl	8007474 <xTimerCreateTimerTask>
 8006a68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d116      	bne.n	8006a9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	613b      	str	r3, [r7, #16]
}
 8006a82:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a84:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <vTaskStartScheduler+0xc0>)
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a8c:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <vTaskStartScheduler+0xc4>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <vTaskStartScheduler+0xc8>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a98:	f001 f88a 	bl	8007bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a9c:	e00e      	b.n	8006abc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d10a      	bne.n	8006abc <vTaskStartScheduler+0xac>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60fb      	str	r3, [r7, #12]
}
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <vTaskStartScheduler+0xaa>
}
 8006abc:	bf00      	nop
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	0800b184 	.word	0x0800b184
 8006ac8:	080070fd 	.word	0x080070fd
 8006acc:	20000ebc 	.word	0x20000ebc
 8006ad0:	20000eb8 	.word	0x20000eb8
 8006ad4:	20000ea4 	.word	0x20000ea4
 8006ad8:	20000e9c 	.word	0x20000e9c

08006adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <vTaskSuspendAll+0x18>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	4a03      	ldr	r2, [pc, #12]	; (8006af4 <vTaskSuspendAll+0x18>)
 8006ae8:	6013      	str	r3, [r2, #0]
}
 8006aea:	bf00      	nop
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	20000ec0 	.word	0x20000ec0

08006af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b06:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <xTaskResumeAll+0x118>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	603b      	str	r3, [r7, #0]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b24:	f001 f8e6 	bl	8007cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <xTaskResumeAll+0x118>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	4a38      	ldr	r2, [pc, #224]	; (8006c10 <xTaskResumeAll+0x118>)
 8006b30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <xTaskResumeAll+0x118>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d162      	bne.n	8006c00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b3a:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <xTaskResumeAll+0x11c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d05e      	beq.n	8006c00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b42:	e02f      	b.n	8006ba4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b44:	4b34      	ldr	r3, [pc, #208]	; (8006c18 <xTaskResumeAll+0x120>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3318      	adds	r3, #24
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff f881 	bl	8005c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff f87c 	bl	8005c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4b2d      	ldr	r3, [pc, #180]	; (8006c1c <xTaskResumeAll+0x124>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d903      	bls.n	8006b74 <xTaskResumeAll+0x7c>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <xTaskResumeAll+0x124>)
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4a27      	ldr	r2, [pc, #156]	; (8006c20 <xTaskResumeAll+0x128>)
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7ff f807 	bl	8005b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <xTaskResumeAll+0x12c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d302      	bcc.n	8006ba4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b9e:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <xTaskResumeAll+0x130>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ba4:	4b1c      	ldr	r3, [pc, #112]	; (8006c18 <xTaskResumeAll+0x120>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1cb      	bne.n	8006b44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bb2:	f000 fb59 	bl	8007268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <xTaskResumeAll+0x134>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bc2:	f000 f847 	bl	8006c54 <xTaskIncrementTick>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <xTaskResumeAll+0x130>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f1      	bne.n	8006bc2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <xTaskResumeAll+0x134>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006be4:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <xTaskResumeAll+0x130>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <xTaskResumeAll+0x138>)
 8006bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c00:	f001 f8a8 	bl	8007d54 <vPortExitCritical>

	return xAlreadyYielded;
 8006c04:	68bb      	ldr	r3, [r7, #8]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000ec0 	.word	0x20000ec0
 8006c14:	20000e98 	.word	0x20000e98
 8006c18:	20000e58 	.word	0x20000e58
 8006c1c:	20000ea0 	.word	0x20000ea0
 8006c20:	200009c8 	.word	0x200009c8
 8006c24:	200009c4 	.word	0x200009c4
 8006c28:	20000eac 	.word	0x20000eac
 8006c2c:	20000ea8 	.word	0x20000ea8
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <xTaskGetTickCount+0x1c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c40:	687b      	ldr	r3, [r7, #4]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000e9c 	.word	0x20000e9c

08006c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5e:	4b51      	ldr	r3, [pc, #324]	; (8006da4 <xTaskIncrementTick+0x150>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 808e 	bne.w	8006d84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c68:	4b4f      	ldr	r3, [pc, #316]	; (8006da8 <xTaskIncrementTick+0x154>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c70:	4a4d      	ldr	r2, [pc, #308]	; (8006da8 <xTaskIncrementTick+0x154>)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d120      	bne.n	8006cbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <xTaskIncrementTick+0x158>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <xTaskIncrementTick+0x48>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	603b      	str	r3, [r7, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <xTaskIncrementTick+0x46>
 8006c9c:	4b43      	ldr	r3, [pc, #268]	; (8006dac <xTaskIncrementTick+0x158>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	4b43      	ldr	r3, [pc, #268]	; (8006db0 <xTaskIncrementTick+0x15c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a41      	ldr	r2, [pc, #260]	; (8006dac <xTaskIncrementTick+0x158>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	4a41      	ldr	r2, [pc, #260]	; (8006db0 <xTaskIncrementTick+0x15c>)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	4b40      	ldr	r3, [pc, #256]	; (8006db4 <xTaskIncrementTick+0x160>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	4a3f      	ldr	r2, [pc, #252]	; (8006db4 <xTaskIncrementTick+0x160>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	f000 fad5 	bl	8007268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cbe:	4b3e      	ldr	r3, [pc, #248]	; (8006db8 <xTaskIncrementTick+0x164>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d34e      	bcc.n	8006d66 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc8:	4b38      	ldr	r3, [pc, #224]	; (8006dac <xTaskIncrementTick+0x158>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <xTaskIncrementTick+0x82>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <xTaskIncrementTick+0x84>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d004      	beq.n	8006ce6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cdc:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <xTaskIncrementTick+0x164>)
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	601a      	str	r2, [r3, #0]
					break;
 8006ce4:	e03f      	b.n	8006d66 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ce6:	4b31      	ldr	r3, [pc, #196]	; (8006dac <xTaskIncrementTick+0x158>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d203      	bcs.n	8006d06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cfe:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <xTaskIncrementTick+0x164>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6013      	str	r3, [r2, #0]
						break;
 8006d04:	e02f      	b.n	8006d66 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe ffa4 	bl	8005c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	3318      	adds	r3, #24
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe ff9b 	bl	8005c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <xTaskIncrementTick+0x168>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d903      	bls.n	8006d36 <xTaskIncrementTick+0xe2>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <xTaskIncrementTick+0x168>)
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <xTaskIncrementTick+0x16c>)
 8006d44:	441a      	add	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7fe ff26 	bl	8005b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <xTaskIncrementTick+0x170>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d3b3      	bcc.n	8006cc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d64:	e7b0      	b.n	8006cc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d66:	4b17      	ldr	r3, [pc, #92]	; (8006dc4 <xTaskIncrementTick+0x170>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	4914      	ldr	r1, [pc, #80]	; (8006dc0 <xTaskIncrementTick+0x16c>)
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d907      	bls.n	8006d8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e004      	b.n	8006d8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d84:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <xTaskIncrementTick+0x174>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	4a0f      	ldr	r2, [pc, #60]	; (8006dc8 <xTaskIncrementTick+0x174>)
 8006d8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <xTaskIncrementTick+0x178>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d9a:	697b      	ldr	r3, [r7, #20]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000ec0 	.word	0x20000ec0
 8006da8:	20000e9c 	.word	0x20000e9c
 8006dac:	20000e50 	.word	0x20000e50
 8006db0:	20000e54 	.word	0x20000e54
 8006db4:	20000eb0 	.word	0x20000eb0
 8006db8:	20000eb8 	.word	0x20000eb8
 8006dbc:	20000ea0 	.word	0x20000ea0
 8006dc0:	200009c8 	.word	0x200009c8
 8006dc4:	200009c4 	.word	0x200009c4
 8006dc8:	20000ea8 	.word	0x20000ea8
 8006dcc:	20000eac 	.word	0x20000eac

08006dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dd6:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <vTaskSwitchContext+0xa8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dde:	4b27      	ldr	r3, [pc, #156]	; (8006e7c <vTaskSwitchContext+0xac>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006de4:	e041      	b.n	8006e6a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006de6:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <vTaskSwitchContext+0xac>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dec:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <vTaskSwitchContext+0xb0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e010      	b.n	8006e16 <vTaskSwitchContext+0x46>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <vTaskSwitchContext+0x40>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	607b      	str	r3, [r7, #4]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vTaskSwitchContext+0x3e>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	491b      	ldr	r1, [pc, #108]	; (8006e84 <vTaskSwitchContext+0xb4>)
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0e4      	beq.n	8006df4 <vTaskSwitchContext+0x24>
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <vTaskSwitchContext+0xb4>)
 8006e36:	4413      	add	r3, r2
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d104      	bne.n	8006e5a <vTaskSwitchContext+0x8a>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4a09      	ldr	r2, [pc, #36]	; (8006e88 <vTaskSwitchContext+0xb8>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4a06      	ldr	r2, [pc, #24]	; (8006e80 <vTaskSwitchContext+0xb0>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6013      	str	r3, [r2, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000ec0 	.word	0x20000ec0
 8006e7c:	20000eac 	.word	0x20000eac
 8006e80:	20000ea0 	.word	0x20000ea0
 8006e84:	200009c8 	.word	0x200009c8
 8006e88:	200009c4 	.word	0x200009c4

08006e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eb2:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <vTaskPlaceOnEventList+0x44>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe fe93 	bl	8005be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6838      	ldr	r0, [r7, #0]
 8006ec4:	f000 fa82 	bl	80073cc <prvAddCurrentTaskToDelayedList>
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	200009c4 	.word	0x200009c4

08006ed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	617b      	str	r3, [r7, #20]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <vTaskPlaceOnEventListRestricted+0x54>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3318      	adds	r3, #24
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7fe fe4a 	bl	8005b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	68b8      	ldr	r0, [r7, #8]
 8006f1a:	f000 fa57 	bl	80073cc <prvAddCurrentTaskToDelayedList>
	}
 8006f1e:	bf00      	nop
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200009c4 	.word	0x200009c4

08006f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60fb      	str	r3, [r7, #12]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fe7b 	bl	8005c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <xTaskRemoveFromEventList+0xb0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d11d      	bne.n	8006fa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe fe72 	bl	8005c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <xTaskRemoveFromEventList+0xb4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d903      	bls.n	8006f88 <xTaskRemoveFromEventList+0x5c>
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <xTaskRemoveFromEventList+0xb4>)
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4a13      	ldr	r2, [pc, #76]	; (8006fe4 <xTaskRemoveFromEventList+0xb8>)
 8006f96:	441a      	add	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	f7fe fdfd 	bl	8005b9e <vListInsertEnd>
 8006fa4:	e005      	b.n	8006fb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3318      	adds	r3, #24
 8006faa:	4619      	mov	r1, r3
 8006fac:	480e      	ldr	r0, [pc, #56]	; (8006fe8 <xTaskRemoveFromEventList+0xbc>)
 8006fae:	f7fe fdf6 	bl	8005b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <xTaskRemoveFromEventList+0xc0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d905      	bls.n	8006fcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <xTaskRemoveFromEventList+0xc4>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e001      	b.n	8006fd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006fd0:	697b      	ldr	r3, [r7, #20]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000ec0 	.word	0x20000ec0
 8006fe0:	20000ea0 	.word	0x20000ea0
 8006fe4:	200009c8 	.word	0x200009c8
 8006fe8:	20000e58 	.word	0x20000e58
 8006fec:	200009c4 	.word	0x200009c4
 8006ff0:	20000eac 	.word	0x20000eac

08006ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <vTaskInternalSetTimeOutState+0x24>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <vTaskInternalSetTimeOutState+0x28>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	605a      	str	r2, [r3, #4]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000eb0 	.word	0x20000eb0
 800701c:	20000e9c 	.word	0x20000e9c

08007020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007062:	f000 fe47 	bl	8007cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007066:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <xTaskCheckForTimeOut+0xbc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d102      	bne.n	8007086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	e023      	b.n	80070ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <xTaskCheckForTimeOut+0xc0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d007      	beq.n	80070a2 <xTaskCheckForTimeOut+0x82>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	429a      	cmp	r2, r3
 800709a:	d302      	bcc.n	80070a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	e015      	b.n	80070ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d20b      	bcs.n	80070c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ff9b 	bl	8006ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	e004      	b.n	80070ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ce:	f000 fe41 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 80070d2:	69fb      	ldr	r3, [r7, #28]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000e9c 	.word	0x20000e9c
 80070e0:	20000eb0 	.word	0x20000eb0

080070e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070e8:	4b03      	ldr	r3, [pc, #12]	; (80070f8 <vTaskMissedYield+0x14>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
}
 80070ee:	bf00      	nop
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	20000eac 	.word	0x20000eac

080070fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007104:	f000 f852 	bl	80071ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <prvIdleTask+0x28>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d9f9      	bls.n	8007104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <prvIdleTask+0x2c>)
 8007112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007120:	e7f0      	b.n	8007104 <prvIdleTask+0x8>
 8007122:	bf00      	nop
 8007124:	200009c8 	.word	0x200009c8
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007132:	2300      	movs	r3, #0
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	e00c      	b.n	8007152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a12      	ldr	r2, [pc, #72]	; (800718c <prvInitialiseTaskLists+0x60>)
 8007144:	4413      	add	r3, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fcfc 	bl	8005b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3301      	adds	r3, #1
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b37      	cmp	r3, #55	; 0x37
 8007156:	d9ef      	bls.n	8007138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007158:	480d      	ldr	r0, [pc, #52]	; (8007190 <prvInitialiseTaskLists+0x64>)
 800715a:	f7fe fcf3 	bl	8005b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800715e:	480d      	ldr	r0, [pc, #52]	; (8007194 <prvInitialiseTaskLists+0x68>)
 8007160:	f7fe fcf0 	bl	8005b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007164:	480c      	ldr	r0, [pc, #48]	; (8007198 <prvInitialiseTaskLists+0x6c>)
 8007166:	f7fe fced 	bl	8005b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800716a:	480c      	ldr	r0, [pc, #48]	; (800719c <prvInitialiseTaskLists+0x70>)
 800716c:	f7fe fcea 	bl	8005b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007170:	480b      	ldr	r0, [pc, #44]	; (80071a0 <prvInitialiseTaskLists+0x74>)
 8007172:	f7fe fce7 	bl	8005b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <prvInitialiseTaskLists+0x78>)
 8007178:	4a05      	ldr	r2, [pc, #20]	; (8007190 <prvInitialiseTaskLists+0x64>)
 800717a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <prvInitialiseTaskLists+0x7c>)
 800717e:	4a05      	ldr	r2, [pc, #20]	; (8007194 <prvInitialiseTaskLists+0x68>)
 8007180:	601a      	str	r2, [r3, #0]
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	200009c8 	.word	0x200009c8
 8007190:	20000e28 	.word	0x20000e28
 8007194:	20000e3c 	.word	0x20000e3c
 8007198:	20000e58 	.word	0x20000e58
 800719c:	20000e6c 	.word	0x20000e6c
 80071a0:	20000e84 	.word	0x20000e84
 80071a4:	20000e50 	.word	0x20000e50
 80071a8:	20000e54 	.word	0x20000e54

080071ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071b2:	e019      	b.n	80071e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071b4:	f000 fd9e 	bl	8007cf4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <prvCheckTasksWaitingTermination+0x50>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fd47 	bl	8005c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071ca:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <prvCheckTasksWaitingTermination+0x54>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <prvCheckTasksWaitingTermination+0x54>)
 80071d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <prvCheckTasksWaitingTermination+0x58>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <prvCheckTasksWaitingTermination+0x58>)
 80071dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071de:	f000 fdb9 	bl	8007d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f810 	bl	8007208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <prvCheckTasksWaitingTermination+0x58>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e1      	bne.n	80071b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20000e6c 	.word	0x20000e6c
 8007200:	20000e98 	.word	0x20000e98
 8007204:	20000e80 	.word	0x20000e80

08007208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007216:	2b00      	cmp	r3, #0
 8007218:	d108      	bne.n	800722c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	4618      	mov	r0, r3
 8007220:	f000 ff4e 	bl	80080c0 <vPortFree>
				vPortFree( pxTCB );
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 ff4b 	bl	80080c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800722a:	e018      	b.n	800725e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007232:	2b01      	cmp	r3, #1
 8007234:	d103      	bne.n	800723e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 ff42 	bl	80080c0 <vPortFree>
	}
 800723c:	e00f      	b.n	800725e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007244:	2b02      	cmp	r3, #2
 8007246:	d00a      	beq.n	800725e <prvDeleteTCB+0x56>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <prvDeleteTCB+0x54>
	}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800726e:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <prvResetNextTaskUnblockTime+0x44>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <prvResetNextTaskUnblockTime+0x14>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <prvResetNextTaskUnblockTime+0x16>
 800727c:	2300      	movs	r3, #0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007282:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <prvResetNextTaskUnblockTime+0x48>)
 8007284:	f04f 32ff 	mov.w	r2, #4294967295
 8007288:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800728a:	e008      	b.n	800729e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800728c:	4b07      	ldr	r3, [pc, #28]	; (80072ac <prvResetNextTaskUnblockTime+0x44>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	4a05      	ldr	r2, [pc, #20]	; (80072b0 <prvResetNextTaskUnblockTime+0x48>)
 800729c:	6013      	str	r3, [r2, #0]
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000e50 	.word	0x20000e50
 80072b0:	20000eb8 	.word	0x20000eb8

080072b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <xTaskGetSchedulerState+0x34>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072c2:	2301      	movs	r3, #1
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	e008      	b.n	80072da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072c8:	4b08      	ldr	r3, [pc, #32]	; (80072ec <xTaskGetSchedulerState+0x38>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072d0:	2302      	movs	r3, #2
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	e001      	b.n	80072da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072d6:	2300      	movs	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072da:	687b      	ldr	r3, [r7, #4]
	}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000ea4 	.word	0x20000ea4
 80072ec:	20000ec0 	.word	0x20000ec0

080072f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d056      	beq.n	80073b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <xTaskPriorityDisinherit+0xd0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	429a      	cmp	r2, r3
 800730e:	d00a      	beq.n	8007326 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	60fb      	str	r3, [r7, #12]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	60bb      	str	r3, [r7, #8]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007348:	1e5a      	subs	r2, r3, #1
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007356:	429a      	cmp	r2, r3
 8007358:	d02c      	beq.n	80073b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735e:	2b00      	cmp	r3, #0
 8007360:	d128      	bne.n	80073b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	3304      	adds	r3, #4
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fc76 	bl	8005c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <xTaskPriorityDisinherit+0xd4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d903      	bls.n	8007394 <xTaskPriorityDisinherit+0xa4>
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <xTaskPriorityDisinherit+0xd4>)
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <xTaskPriorityDisinherit+0xd8>)
 80073a2:	441a      	add	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fe fbf7 	bl	8005b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073b4:	697b      	ldr	r3, [r7, #20]
	}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	200009c4 	.word	0x200009c4
 80073c4:	20000ea0 	.word	0x20000ea0
 80073c8:	200009c8 	.word	0x200009c8

080073cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073d6:	4b21      	ldr	r3, [pc, #132]	; (800745c <prvAddCurrentTaskToDelayedList+0x90>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fc38 	bl	8005c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d10a      	bne.n	8007406 <prvAddCurrentTaskToDelayedList+0x3a>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f6:	4b1a      	ldr	r3, [pc, #104]	; (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4819      	ldr	r0, [pc, #100]	; (8007464 <prvAddCurrentTaskToDelayedList+0x98>)
 8007400:	f7fe fbcd 	bl	8005b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007404:	e026      	b.n	8007454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	429a      	cmp	r2, r3
 800741c:	d209      	bcs.n	8007432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741e:	4b12      	ldr	r3, [pc, #72]	; (8007468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fe fbdb 	bl	8005be6 <vListInsert>
}
 8007430:	e010      	b.n	8007454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <prvAddCurrentTaskToDelayedList+0x94>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fe fbd1 	bl	8005be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	d202      	bcs.n	8007454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800744e:	4a08      	ldr	r2, [pc, #32]	; (8007470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6013      	str	r3, [r2, #0]
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000e9c 	.word	0x20000e9c
 8007460:	200009c4 	.word	0x200009c4
 8007464:	20000e84 	.word	0x20000e84
 8007468:	20000e54 	.word	0x20000e54
 800746c:	20000e50 	.word	0x20000e50
 8007470:	20000eb8 	.word	0x20000eb8

08007474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800747e:	f000 facb 	bl	8007a18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007482:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <xTimerCreateTimerTask+0x80>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d021      	beq.n	80074ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007492:	1d3a      	adds	r2, r7, #4
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	f107 030c 	add.w	r3, r7, #12
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fb37 	bl	8005b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	9202      	str	r2, [sp, #8]
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	2302      	movs	r3, #2
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	460a      	mov	r2, r1
 80074b4:	4910      	ldr	r1, [pc, #64]	; (80074f8 <xTimerCreateTimerTask+0x84>)
 80074b6:	4811      	ldr	r0, [pc, #68]	; (80074fc <xTimerCreateTimerTask+0x88>)
 80074b8:	f7ff f8de 	bl	8006678 <xTaskCreateStatic>
 80074bc:	4603      	mov	r3, r0
 80074be:	4a10      	ldr	r2, [pc, #64]	; (8007500 <xTimerCreateTimerTask+0x8c>)
 80074c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <xTimerCreateTimerTask+0x8c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	613b      	str	r3, [r7, #16]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000ef4 	.word	0x20000ef4
 80074f8:	0800b18c 	.word	0x0800b18c
 80074fc:	08007621 	.word	0x08007621
 8007500:	20000ef8 	.word	0x20000ef8

08007504 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007512:	2300      	movs	r3, #0
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <xTimerGenericCommand+0x2e>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	623b      	str	r3, [r7, #32]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007532:	4b1a      	ldr	r3, [pc, #104]	; (800759c <xTimerGenericCommand+0x98>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d02a      	beq.n	8007590 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b05      	cmp	r3, #5
 800754a:	dc18      	bgt.n	800757e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800754c:	f7ff feb2 	bl	80072b4 <xTaskGetSchedulerState>
 8007550:	4603      	mov	r3, r0
 8007552:	2b02      	cmp	r3, #2
 8007554:	d109      	bne.n	800756a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007556:	4b11      	ldr	r3, [pc, #68]	; (800759c <xTimerGenericCommand+0x98>)
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	f107 0110 	add.w	r1, r7, #16
 800755e:	2300      	movs	r3, #0
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	f7fe fca5 	bl	8005eb0 <xQueueGenericSend>
 8007566:	6278      	str	r0, [r7, #36]	; 0x24
 8007568:	e012      	b.n	8007590 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800756a:	4b0c      	ldr	r3, [pc, #48]	; (800759c <xTimerGenericCommand+0x98>)
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f107 0110 	add.w	r1, r7, #16
 8007572:	2300      	movs	r3, #0
 8007574:	2200      	movs	r2, #0
 8007576:	f7fe fc9b 	bl	8005eb0 <xQueueGenericSend>
 800757a:	6278      	str	r0, [r7, #36]	; 0x24
 800757c:	e008      	b.n	8007590 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <xTimerGenericCommand+0x98>)
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f107 0110 	add.w	r1, r7, #16
 8007586:	2300      	movs	r3, #0
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f7fe fd8f 	bl	80060ac <xQueueGenericSendFromISR>
 800758e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007592:	4618      	mov	r0, r3
 8007594:	3728      	adds	r7, #40	; 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000ef4 	.word	0x20000ef4

080075a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075aa:	4b1c      	ldr	r3, [pc, #112]	; (800761c <prvProcessExpiredTimer+0x7c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fb4d 	bl	8005c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d122      	bne.n	800760c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	18d1      	adds	r1, r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f000 f8c8 	bl	8007768 <prvInsertTimerInActiveList>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d016      	beq.n	800760c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075de:	2300      	movs	r3, #0
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	2100      	movs	r1, #0
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f7ff ff8b 	bl	8007504 <xTimerGenericCommand>
 80075ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60fb      	str	r3, [r7, #12]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	6978      	ldr	r0, [r7, #20]
 8007612:	4798      	blx	r3
}
 8007614:	bf00      	nop
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20000eec 	.word	0x20000eec

08007620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007628:	f107 0308 	add.w	r3, r7, #8
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f857 	bl	80076e0 <prvGetNextExpireTime>
 8007632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4619      	mov	r1, r3
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f803 	bl	8007644 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800763e:	f000 f8d5 	bl	80077ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007642:	e7f1      	b.n	8007628 <prvTimerTask+0x8>

08007644 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800764e:	f7ff fa45 	bl	8006adc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007652:	f107 0308 	add.w	r3, r7, #8
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f866 	bl	8007728 <prvSampleTimeNow>
 800765c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d130      	bne.n	80076c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <prvProcessTimerOrBlockTask+0x3c>
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	429a      	cmp	r2, r3
 8007670:	d806      	bhi.n	8007680 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007672:	f7ff fa41 	bl	8006af8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff ff91 	bl	80075a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800767e:	e024      	b.n	80076ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007686:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <prvProcessTimerOrBlockTask+0x90>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	bf0c      	ite	eq
 8007690:	2301      	moveq	r3, #1
 8007692:	2300      	movne	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <prvProcessTimerOrBlockTask+0x94>)
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4619      	mov	r1, r3
 80076a6:	f7fe ffb3 	bl	8006610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076aa:	f7ff fa25 	bl	8006af8 <xTaskResumeAll>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076b4:	4b09      	ldr	r3, [pc, #36]	; (80076dc <prvProcessTimerOrBlockTask+0x98>)
 80076b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	f3bf 8f6f 	isb	sy
}
 80076c4:	e001      	b.n	80076ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076c6:	f7ff fa17 	bl	8006af8 <xTaskResumeAll>
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000ef0 	.word	0x20000ef0
 80076d8:	20000ef4 	.word	0x20000ef4
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076e8:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <prvGetNextExpireTime+0x44>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	bf0c      	ite	eq
 80076f2:	2301      	moveq	r3, #1
 80076f4:	2300      	movne	r3, #0
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <prvGetNextExpireTime+0x44>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e001      	b.n	8007716 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000eec 	.word	0x20000eec

08007728 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007730:	f7ff fa80 	bl	8006c34 <xTaskGetTickCount>
 8007734:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <prvSampleTimeNow+0x3c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	429a      	cmp	r2, r3
 800773e:	d205      	bcs.n	800774c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007740:	f000 f908 	bl	8007954 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e002      	b.n	8007752 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007752:	4a04      	ldr	r2, [pc, #16]	; (8007764 <prvSampleTimeNow+0x3c>)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000efc 	.word	0x20000efc

08007768 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	d812      	bhi.n	80077b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	1ad2      	subs	r2, r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	429a      	cmp	r2, r3
 800779a:	d302      	bcc.n	80077a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800779c:	2301      	movs	r3, #1
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e01b      	b.n	80077da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077a2:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <prvInsertTimerInActiveList+0x7c>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe fa1a 	bl	8005be6 <vListInsert>
 80077b2:	e012      	b.n	80077da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d206      	bcs.n	80077ca <prvInsertTimerInActiveList+0x62>
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d302      	bcc.n	80077ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e007      	b.n	80077da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ca:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <prvInsertTimerInActiveList+0x80>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3304      	adds	r3, #4
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f7fe fa06 	bl	8005be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077da:	697b      	ldr	r3, [r7, #20]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000ef0 	.word	0x20000ef0
 80077e8:	20000eec 	.word	0x20000eec

080077ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077f2:	e09d      	b.n	8007930 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	da18      	bge.n	800782c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077fa:	1d3b      	adds	r3, r7, #4
 80077fc:	3304      	adds	r3, #4
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	61fb      	str	r3, [r7, #28]
}
 8007818:	bf00      	nop
 800781a:	e7fe      	b.n	800781a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007822:	6850      	ldr	r0, [r2, #4]
 8007824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007826:	6892      	ldr	r2, [r2, #8]
 8007828:	4611      	mov	r1, r2
 800782a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	db7d      	blt.n	800792e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	3304      	adds	r3, #4
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fa08 	bl	8005c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007848:	463b      	mov	r3, r7
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff ff6c 	bl	8007728 <prvSampleTimeNow>
 8007850:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b09      	cmp	r3, #9
 8007856:	d86b      	bhi.n	8007930 <prvProcessReceivedCommands+0x144>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <prvProcessReceivedCommands+0x74>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007889 	.word	0x08007889
 8007864:	08007889 	.word	0x08007889
 8007868:	08007889 	.word	0x08007889
 800786c:	08007931 	.word	0x08007931
 8007870:	080078e5 	.word	0x080078e5
 8007874:	0800791d 	.word	0x0800791d
 8007878:	08007889 	.word	0x08007889
 800787c:	08007889 	.word	0x08007889
 8007880:	08007931 	.word	0x08007931
 8007884:	080078e5 	.word	0x080078e5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	18d1      	adds	r1, r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007896:	f7ff ff67 	bl	8007768 <prvInsertTimerInActiveList>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d047      	beq.n	8007930 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d13f      	bne.n	8007930 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	441a      	add	r2, r3
 80078b8:	2300      	movs	r3, #0
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	2300      	movs	r3, #0
 80078be:	2100      	movs	r1, #0
 80078c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c2:	f7ff fe1f 	bl	8007504 <xTimerGenericCommand>
 80078c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d130      	bne.n	8007930 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	61bb      	str	r3, [r7, #24]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	617b      	str	r3, [r7, #20]
}
 8007904:	bf00      	nop
 8007906:	e7fe      	b.n	8007906 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	18d1      	adds	r1, r2, r3
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007916:	f7ff ff27 	bl	8007768 <prvInsertTimerInActiveList>
					break;
 800791a:	e009      	b.n	8007930 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007928:	f000 fbca 	bl	80080c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800792c:	e000      	b.n	8007930 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800792e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <prvProcessReceivedCommands+0x164>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	1d39      	adds	r1, r7, #4
 8007936:	2200      	movs	r2, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fc4f 	bl	80061dc <xQueueReceive>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f47f af57 	bne.w	80077f4 <prvProcessReceivedCommands+0x8>
	}
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	3730      	adds	r7, #48	; 0x30
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000ef4 	.word	0x20000ef4

08007954 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800795a:	e045      	b.n	80079e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800795c:	4b2c      	ldr	r3, [pc, #176]	; (8007a10 <prvSwitchTimerLists+0xbc>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007966:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <prvSwitchTimerLists+0xbc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3304      	adds	r3, #4
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe f96f 	bl	8005c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d12e      	bne.n	80079e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4413      	add	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	429a      	cmp	r2, r3
 800799a:	d90e      	bls.n	80079ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079a8:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <prvSwitchTimerLists+0xbc>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fe f917 	bl	8005be6 <vListInsert>
 80079b8:	e016      	b.n	80079e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079ba:	2300      	movs	r3, #0
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	2300      	movs	r3, #0
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	2100      	movs	r1, #0
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fd9d 	bl	8007504 <xTimerGenericCommand>
 80079ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	603b      	str	r3, [r7, #0]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <prvSwitchTimerLists+0xbc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1b4      	bne.n	800795c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <prvSwitchTimerLists+0xbc>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079f8:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <prvSwitchTimerLists+0xc0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a04      	ldr	r2, [pc, #16]	; (8007a10 <prvSwitchTimerLists+0xbc>)
 80079fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a00:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <prvSwitchTimerLists+0xc0>)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	6013      	str	r3, [r2, #0]
}
 8007a06:	bf00      	nop
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000eec 	.word	0x20000eec
 8007a14:	20000ef0 	.word	0x20000ef0

08007a18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a1e:	f000 f969 	bl	8007cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d120      	bne.n	8007a6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a2a:	4814      	ldr	r0, [pc, #80]	; (8007a7c <prvCheckForValidListAndQueue+0x64>)
 8007a2c:	f7fe f88a 	bl	8005b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a30:	4813      	ldr	r0, [pc, #76]	; (8007a80 <prvCheckForValidListAndQueue+0x68>)
 8007a32:	f7fe f887 	bl	8005b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <prvCheckForValidListAndQueue+0x6c>)
 8007a38:	4a10      	ldr	r2, [pc, #64]	; (8007a7c <prvCheckForValidListAndQueue+0x64>)
 8007a3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <prvCheckForValidListAndQueue+0x70>)
 8007a3e:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <prvCheckForValidListAndQueue+0x68>)
 8007a40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a42:	2300      	movs	r3, #0
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <prvCheckForValidListAndQueue+0x74>)
 8007a48:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <prvCheckForValidListAndQueue+0x78>)
 8007a4a:	2110      	movs	r1, #16
 8007a4c:	200a      	movs	r0, #10
 8007a4e:	f7fe f995 	bl	8005d7c <xQueueGenericCreateStatic>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a58:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	490b      	ldr	r1, [pc, #44]	; (8007a94 <prvCheckForValidListAndQueue+0x7c>)
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fda8 	bl	80065bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a6c:	f000 f972 	bl	8007d54 <vPortExitCritical>
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000ef4 	.word	0x20000ef4
 8007a7c:	20000ec4 	.word	0x20000ec4
 8007a80:	20000ed8 	.word	0x20000ed8
 8007a84:	20000eec 	.word	0x20000eec
 8007a88:	20000ef0 	.word	0x20000ef0
 8007a8c:	20000fa0 	.word	0x20000fa0
 8007a90:	20000f00 	.word	0x20000f00
 8007a94:	0800b194 	.word	0x0800b194

08007a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3b04      	subs	r3, #4
 8007aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ac8:	4a0c      	ldr	r2, [pc, #48]	; (8007afc <pxPortInitialiseStack+0x64>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3b14      	subs	r3, #20
 8007ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f06f 0202 	mvn.w	r2, #2
 8007ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3b20      	subs	r3, #32
 8007aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aee:	68fb      	ldr	r3, [r7, #12]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	08007b01 	.word	0x08007b01

08007b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <prvTaskExitError+0x54>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d00a      	beq.n	8007b2a <prvTaskExitError+0x2a>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60fb      	str	r3, [r7, #12]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <prvTaskExitError+0x28>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	60bb      	str	r3, [r7, #8]
}
 8007b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b3e:	bf00      	nop
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0fc      	beq.n	8007b40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	20000110 	.word	0x20000110
	...

08007b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	4770      	bx	lr
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst2>:
 8007b80:	200009c4 	.word	0x200009c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b88:	4808      	ldr	r0, [pc, #32]	; (8007bac <prvPortStartFirstTask+0x24>)
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f380 8808 	msr	MSP, r0
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8814 	msr	CONTROL, r0
 8007b9a:	b662      	cpsie	i
 8007b9c:	b661      	cpsie	f
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	df00      	svc	0
 8007ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007baa:	bf00      	nop
 8007bac:	e000ed08 	.word	0xe000ed08

08007bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bb6:	4b46      	ldr	r3, [pc, #280]	; (8007cd0 <xPortStartScheduler+0x120>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a46      	ldr	r2, [pc, #280]	; (8007cd4 <xPortStartScheduler+0x124>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d10a      	bne.n	8007bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	613b      	str	r3, [r7, #16]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bd6:	4b3e      	ldr	r3, [pc, #248]	; (8007cd0 <xPortStartScheduler+0x120>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a3f      	ldr	r2, [pc, #252]	; (8007cd8 <xPortStartScheduler+0x128>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10a      	bne.n	8007bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	60fb      	str	r3, [r7, #12]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <xPortStartScheduler+0x12c>)
 8007bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	22ff      	movs	r2, #255	; 0xff
 8007c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	4b31      	ldr	r3, [pc, #196]	; (8007ce0 <xPortStartScheduler+0x130>)
 8007c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c1e:	4b31      	ldr	r3, [pc, #196]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c20:	2207      	movs	r2, #7
 8007c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c24:	e009      	b.n	8007c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c26:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b80      	cmp	r3, #128	; 0x80
 8007c44:	d0ef      	beq.n	8007c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c46:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f1c3 0307 	rsb	r3, r3, #7
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d00a      	beq.n	8007c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	60bb      	str	r3, [r7, #8]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c68:	4b1e      	ldr	r3, [pc, #120]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <xPortStartScheduler+0x134>)
 8007c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c92:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <xPortStartScheduler+0x138>)
 8007c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c9e:	f000 f8dd 	bl	8007e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <xPortStartScheduler+0x13c>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ca8:	f000 f8fc 	bl	8007ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <xPortStartScheduler+0x140>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0f      	ldr	r2, [pc, #60]	; (8007cf0 <xPortStartScheduler+0x140>)
 8007cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cb8:	f7ff ff66 	bl	8007b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cbc:	f7ff f888 	bl	8006dd0 <vTaskSwitchContext>
	prvTaskExitError();
 8007cc0:	f7ff ff1e 	bl	8007b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	e000ed00 	.word	0xe000ed00
 8007cd4:	410fc271 	.word	0x410fc271
 8007cd8:	410fc270 	.word	0x410fc270
 8007cdc:	e000e400 	.word	0xe000e400
 8007ce0:	20000ff0 	.word	0x20000ff0
 8007ce4:	20000ff4 	.word	0x20000ff4
 8007ce8:	e000ed20 	.word	0xe000ed20
 8007cec:	20000110 	.word	0x20000110
 8007cf0:	e000ef34 	.word	0xe000ef34

08007cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	607b      	str	r3, [r7, #4]
}
 8007d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <vPortEnterCritical+0x58>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <vPortEnterCritical+0x58>)
 8007d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <vPortEnterCritical+0x58>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d10f      	bne.n	8007d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d20:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <vPortEnterCritical+0x5c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	603b      	str	r3, [r7, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <vPortEnterCritical+0x4a>
	}
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	20000110 	.word	0x20000110
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d5a:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <vPortExitCritical+0x50>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <vPortExitCritical+0x24>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <vPortExitCritical+0x50>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <vPortExitCritical+0x50>)
 8007d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <vPortExitCritical+0x50>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <vPortExitCritical+0x42>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	f383 8811 	msr	BASEPRI, r3
}
 8007d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000110 	.word	0x20000110
	...

08007db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007db0:	f3ef 8009 	mrs	r0, PSP
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <pxCurrentTCBConst>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	f01e 0f10 	tst.w	lr, #16
 8007dc0:	bf08      	it	eq
 8007dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	6010      	str	r0, [r2, #0]
 8007dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007dd4:	f380 8811 	msr	BASEPRI, r0
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f7fe fff6 	bl	8006dd0 <vTaskSwitchContext>
 8007de4:	f04f 0000 	mov.w	r0, #0
 8007de8:	f380 8811 	msr	BASEPRI, r0
 8007dec:	bc09      	pop	{r0, r3}
 8007dee:	6819      	ldr	r1, [r3, #0]
 8007df0:	6808      	ldr	r0, [r1, #0]
 8007df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df6:	f01e 0f10 	tst.w	lr, #16
 8007dfa:	bf08      	it	eq
 8007dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e00:	f380 8809 	msr	PSP, r0
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst>:
 8007e10:	200009c4 	.word	0x200009c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	607b      	str	r3, [r7, #4]
}
 8007e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e32:	f7fe ff0f 	bl	8006c54 <xTaskIncrementTick>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <xPortSysTickHandler+0x40>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	f383 8811 	msr	BASEPRI, r3
}
 8007e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <vPortSetupTimerInterrupt+0x34>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <vPortSetupTimerInterrupt+0x38>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <vPortSetupTimerInterrupt+0x3c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <vPortSetupTimerInterrupt+0x40>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	099b      	lsrs	r3, r3, #6
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <vPortSetupTimerInterrupt+0x44>)
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e7e:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <vPortSetupTimerInterrupt+0x34>)
 8007e80:	2207      	movs	r2, #7
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	e000e010 	.word	0xe000e010
 8007e94:	e000e018 	.word	0xe000e018
 8007e98:	20000104 	.word	0x20000104
 8007e9c:	10624dd3 	.word	0x10624dd3
 8007ea0:	e000e014 	.word	0xe000e014

08007ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007eb4 <vPortEnableVFP+0x10>
 8007ea8:	6801      	ldr	r1, [r0, #0]
 8007eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eae:	6001      	str	r1, [r0, #0]
 8007eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007eb2:	bf00      	nop
 8007eb4:	e000ed88 	.word	0xe000ed88

08007eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ebe:	f3ef 8305 	mrs	r3, IPSR
 8007ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d914      	bls.n	8007ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eca:	4a17      	ldr	r2, [pc, #92]	; (8007f28 <vPortValidateInterruptPriority+0x70>)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ed4:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <vPortValidateInterruptPriority+0x74>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	7afa      	ldrb	r2, [r7, #11]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d20a      	bcs.n	8007ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	607b      	str	r3, [r7, #4]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ef4:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <vPortValidateInterruptPriority+0x78>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007efc:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <vPortValidateInterruptPriority+0x7c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d90a      	bls.n	8007f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	603b      	str	r3, [r7, #0]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <vPortValidateInterruptPriority+0x60>
	}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	e000e3f0 	.word	0xe000e3f0
 8007f2c:	20000ff0 	.word	0x20000ff0
 8007f30:	e000ed0c 	.word	0xe000ed0c
 8007f34:	20000ff4 	.word	0x20000ff4

08007f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	; 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f44:	f7fe fdca 	bl	8006adc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f48:	4b58      	ldr	r3, [pc, #352]	; (80080ac <pvPortMalloc+0x174>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f50:	f000 f910 	bl	8008174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f54:	4b56      	ldr	r3, [pc, #344]	; (80080b0 <pvPortMalloc+0x178>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f040 808e 	bne.w	800807e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01d      	beq.n	8007fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f68:	2208      	movs	r2, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d014      	beq.n	8007fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f023 0307 	bic.w	r3, r3, #7
 8007f80:	3308      	adds	r3, #8
 8007f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	617b      	str	r3, [r7, #20]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d069      	beq.n	800807e <pvPortMalloc+0x146>
 8007faa:	4b42      	ldr	r3, [pc, #264]	; (80080b4 <pvPortMalloc+0x17c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d864      	bhi.n	800807e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fb4:	4b40      	ldr	r3, [pc, #256]	; (80080b8 <pvPortMalloc+0x180>)
 8007fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fb8:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <pvPortMalloc+0x180>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fbe:	e004      	b.n	8007fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d903      	bls.n	8007fdc <pvPortMalloc+0xa4>
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f1      	bne.n	8007fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fdc:	4b33      	ldr	r3, [pc, #204]	; (80080ac <pvPortMalloc+0x174>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d04b      	beq.n	800807e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2208      	movs	r2, #8
 8007fec:	4413      	add	r3, r2
 8007fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	1ad2      	subs	r2, r2, r3
 8008000:	2308      	movs	r3, #8
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	429a      	cmp	r2, r3
 8008006:	d91f      	bls.n	8008048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <pvPortMalloc+0xf8>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	613b      	str	r3, [r7, #16]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	1ad2      	subs	r2, r2, r3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008042:	69b8      	ldr	r0, [r7, #24]
 8008044:	f000 f8f8 	bl	8008238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008048:	4b1a      	ldr	r3, [pc, #104]	; (80080b4 <pvPortMalloc+0x17c>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	4a18      	ldr	r2, [pc, #96]	; (80080b4 <pvPortMalloc+0x17c>)
 8008054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008056:	4b17      	ldr	r3, [pc, #92]	; (80080b4 <pvPortMalloc+0x17c>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b18      	ldr	r3, [pc, #96]	; (80080bc <pvPortMalloc+0x184>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d203      	bcs.n	800806a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008062:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <pvPortMalloc+0x17c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a15      	ldr	r2, [pc, #84]	; (80080bc <pvPortMalloc+0x184>)
 8008068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <pvPortMalloc+0x178>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	431a      	orrs	r2, r3
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800807e:	f7fe fd3b 	bl	8006af8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <pvPortMalloc+0x16a>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60fb      	str	r3, [r7, #12]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <pvPortMalloc+0x168>
	return pvReturn;
 80080a2:	69fb      	ldr	r3, [r7, #28]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20001dbc 	.word	0x20001dbc
 80080b0:	20001dc8 	.word	0x20001dc8
 80080b4:	20001dc0 	.word	0x20001dc0
 80080b8:	20001db4 	.word	0x20001db4
 80080bc:	20001dc4 	.word	0x20001dc4

080080c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d048      	beq.n	8008164 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080d2:	2308      	movs	r3, #8
 80080d4:	425b      	negs	r3, r3
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4413      	add	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	4b21      	ldr	r3, [pc, #132]	; (800816c <vPortFree+0xac>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <vPortFree+0x44>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60fb      	str	r3, [r7, #12]
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <vPortFree+0x62>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60bb      	str	r3, [r7, #8]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	4b11      	ldr	r3, [pc, #68]	; (800816c <vPortFree+0xac>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d019      	beq.n	8008164 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d115      	bne.n	8008164 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b0b      	ldr	r3, [pc, #44]	; (800816c <vPortFree+0xac>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008148:	f7fe fcc8 	bl	8006adc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <vPortFree+0xb0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4413      	add	r3, r2
 8008156:	4a06      	ldr	r2, [pc, #24]	; (8008170 <vPortFree+0xb0>)
 8008158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800815a:	6938      	ldr	r0, [r7, #16]
 800815c:	f000 f86c 	bl	8008238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008160:	f7fe fcca 	bl	8006af8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008164:	bf00      	nop
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20001dc8 	.word	0x20001dc8
 8008170:	20001dc0 	.word	0x20001dc0

08008174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800817a:	f640 53b9 	movw	r3, #3513	; 0xdb9
 800817e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008180:	4b27      	ldr	r3, [pc, #156]	; (8008220 <prvHeapInit+0xac>)
 8008182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3307      	adds	r3, #7
 8008192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	4a1f      	ldr	r2, [pc, #124]	; (8008220 <prvHeapInit+0xac>)
 80081a4:	4413      	add	r3, r2
 80081a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081ac:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <prvHeapInit+0xb0>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081b2:	4b1c      	ldr	r3, [pc, #112]	; (8008224 <prvHeapInit+0xb0>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	4413      	add	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081c0:	2208      	movs	r2, #8
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4a15      	ldr	r2, [pc, #84]	; (8008228 <prvHeapInit+0xb4>)
 80081d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <prvHeapInit+0xb4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2200      	movs	r2, #0
 80081dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081de:	4b12      	ldr	r3, [pc, #72]	; (8008228 <prvHeapInit+0xb4>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <prvHeapInit+0xb4>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	4a0a      	ldr	r2, [pc, #40]	; (800822c <prvHeapInit+0xb8>)
 8008202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <prvHeapInit+0xbc>)
 800820a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <prvHeapInit+0xc0>)
 800820e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20000ff8 	.word	0x20000ff8
 8008224:	20001db4 	.word	0x20001db4
 8008228:	20001dbc 	.word	0x20001dbc
 800822c:	20001dc4 	.word	0x20001dc4
 8008230:	20001dc0 	.word	0x20001dc0
 8008234:	20001dc8 	.word	0x20001dc8

08008238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008240:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <prvInsertBlockIntoFreeList+0xac>)
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e002      	b.n	800824c <prvInsertBlockIntoFreeList+0x14>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	429a      	cmp	r2, r3
 8008254:	d8f7      	bhi.n	8008246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d108      	bne.n	800827a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	441a      	add	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	441a      	add	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d118      	bne.n	80082c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d00d      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	441a      	add	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	e008      	b.n	80082c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <prvInsertBlockIntoFreeList+0xb0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e003      	b.n	80082c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d002      	beq.n	80082d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20001db4 	.word	0x20001db4
 80082e8:	20001dbc 	.word	0x20001dbc

080082ec <__errno>:
 80082ec:	4b01      	ldr	r3, [pc, #4]	; (80082f4 <__errno+0x8>)
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000114 	.word	0x20000114

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4d0d      	ldr	r5, [pc, #52]	; (8008330 <__libc_init_array+0x38>)
 80082fc:	4c0d      	ldr	r4, [pc, #52]	; (8008334 <__libc_init_array+0x3c>)
 80082fe:	1b64      	subs	r4, r4, r5
 8008300:	10a4      	asrs	r4, r4, #2
 8008302:	2600      	movs	r6, #0
 8008304:	42a6      	cmp	r6, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	4d0b      	ldr	r5, [pc, #44]	; (8008338 <__libc_init_array+0x40>)
 800830a:	4c0c      	ldr	r4, [pc, #48]	; (800833c <__libc_init_array+0x44>)
 800830c:	f002 fecc 	bl	800b0a8 <_init>
 8008310:	1b64      	subs	r4, r4, r5
 8008312:	10a4      	asrs	r4, r4, #2
 8008314:	2600      	movs	r6, #0
 8008316:	42a6      	cmp	r6, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008320:	4798      	blx	r3
 8008322:	3601      	adds	r6, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f855 3b04 	ldr.w	r3, [r5], #4
 800832a:	4798      	blx	r3
 800832c:	3601      	adds	r6, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	0800b5dc 	.word	0x0800b5dc
 8008334:	0800b5dc 	.word	0x0800b5dc
 8008338:	0800b5dc 	.word	0x0800b5dc
 800833c:	0800b5e0 	.word	0x0800b5e0

08008340 <memcpy>:
 8008340:	440a      	add	r2, r1
 8008342:	4291      	cmp	r1, r2
 8008344:	f100 33ff 	add.w	r3, r0, #4294967295
 8008348:	d100      	bne.n	800834c <memcpy+0xc>
 800834a:	4770      	bx	lr
 800834c:	b510      	push	{r4, lr}
 800834e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008356:	4291      	cmp	r1, r2
 8008358:	d1f9      	bne.n	800834e <memcpy+0xe>
 800835a:	bd10      	pop	{r4, pc}

0800835c <memset>:
 800835c:	4402      	add	r2, r0
 800835e:	4603      	mov	r3, r0
 8008360:	4293      	cmp	r3, r2
 8008362:	d100      	bne.n	8008366 <memset+0xa>
 8008364:	4770      	bx	lr
 8008366:	f803 1b01 	strb.w	r1, [r3], #1
 800836a:	e7f9      	b.n	8008360 <memset+0x4>

0800836c <__cvt>:
 800836c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	ec55 4b10 	vmov	r4, r5, d0
 8008374:	2d00      	cmp	r5, #0
 8008376:	460e      	mov	r6, r1
 8008378:	4619      	mov	r1, r3
 800837a:	462b      	mov	r3, r5
 800837c:	bfbb      	ittet	lt
 800837e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008382:	461d      	movlt	r5, r3
 8008384:	2300      	movge	r3, #0
 8008386:	232d      	movlt	r3, #45	; 0x2d
 8008388:	700b      	strb	r3, [r1, #0]
 800838a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800838c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008390:	4691      	mov	r9, r2
 8008392:	f023 0820 	bic.w	r8, r3, #32
 8008396:	bfbc      	itt	lt
 8008398:	4622      	movlt	r2, r4
 800839a:	4614      	movlt	r4, r2
 800839c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083a0:	d005      	beq.n	80083ae <__cvt+0x42>
 80083a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083a6:	d100      	bne.n	80083aa <__cvt+0x3e>
 80083a8:	3601      	adds	r6, #1
 80083aa:	2102      	movs	r1, #2
 80083ac:	e000      	b.n	80083b0 <__cvt+0x44>
 80083ae:	2103      	movs	r1, #3
 80083b0:	ab03      	add	r3, sp, #12
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	ab02      	add	r3, sp, #8
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	ec45 4b10 	vmov	d0, r4, r5
 80083bc:	4653      	mov	r3, sl
 80083be:	4632      	mov	r2, r6
 80083c0:	f000 fd02 	bl	8008dc8 <_dtoa_r>
 80083c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083c8:	4607      	mov	r7, r0
 80083ca:	d102      	bne.n	80083d2 <__cvt+0x66>
 80083cc:	f019 0f01 	tst.w	r9, #1
 80083d0:	d022      	beq.n	8008418 <__cvt+0xac>
 80083d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083d6:	eb07 0906 	add.w	r9, r7, r6
 80083da:	d110      	bne.n	80083fe <__cvt+0x92>
 80083dc:	783b      	ldrb	r3, [r7, #0]
 80083de:	2b30      	cmp	r3, #48	; 0x30
 80083e0:	d10a      	bne.n	80083f8 <__cvt+0x8c>
 80083e2:	2200      	movs	r2, #0
 80083e4:	2300      	movs	r3, #0
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f8 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ee:	b918      	cbnz	r0, 80083f8 <__cvt+0x8c>
 80083f0:	f1c6 0601 	rsb	r6, r6, #1
 80083f4:	f8ca 6000 	str.w	r6, [sl]
 80083f8:	f8da 3000 	ldr.w	r3, [sl]
 80083fc:	4499      	add	r9, r3
 80083fe:	2200      	movs	r2, #0
 8008400:	2300      	movs	r3, #0
 8008402:	4620      	mov	r0, r4
 8008404:	4629      	mov	r1, r5
 8008406:	f7f8 fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800840a:	b108      	cbz	r0, 8008410 <__cvt+0xa4>
 800840c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008410:	2230      	movs	r2, #48	; 0x30
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	454b      	cmp	r3, r9
 8008416:	d307      	bcc.n	8008428 <__cvt+0xbc>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800841c:	1bdb      	subs	r3, r3, r7
 800841e:	4638      	mov	r0, r7
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	b004      	add	sp, #16
 8008424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008428:	1c59      	adds	r1, r3, #1
 800842a:	9103      	str	r1, [sp, #12]
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	e7f0      	b.n	8008412 <__cvt+0xa6>

08008430 <__exponent>:
 8008430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008432:	4603      	mov	r3, r0
 8008434:	2900      	cmp	r1, #0
 8008436:	bfb8      	it	lt
 8008438:	4249      	neglt	r1, r1
 800843a:	f803 2b02 	strb.w	r2, [r3], #2
 800843e:	bfb4      	ite	lt
 8008440:	222d      	movlt	r2, #45	; 0x2d
 8008442:	222b      	movge	r2, #43	; 0x2b
 8008444:	2909      	cmp	r1, #9
 8008446:	7042      	strb	r2, [r0, #1]
 8008448:	dd2a      	ble.n	80084a0 <__exponent+0x70>
 800844a:	f10d 0407 	add.w	r4, sp, #7
 800844e:	46a4      	mov	ip, r4
 8008450:	270a      	movs	r7, #10
 8008452:	46a6      	mov	lr, r4
 8008454:	460a      	mov	r2, r1
 8008456:	fb91 f6f7 	sdiv	r6, r1, r7
 800845a:	fb07 1516 	mls	r5, r7, r6, r1
 800845e:	3530      	adds	r5, #48	; 0x30
 8008460:	2a63      	cmp	r2, #99	; 0x63
 8008462:	f104 34ff 	add.w	r4, r4, #4294967295
 8008466:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800846a:	4631      	mov	r1, r6
 800846c:	dcf1      	bgt.n	8008452 <__exponent+0x22>
 800846e:	3130      	adds	r1, #48	; 0x30
 8008470:	f1ae 0502 	sub.w	r5, lr, #2
 8008474:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008478:	1c44      	adds	r4, r0, #1
 800847a:	4629      	mov	r1, r5
 800847c:	4561      	cmp	r1, ip
 800847e:	d30a      	bcc.n	8008496 <__exponent+0x66>
 8008480:	f10d 0209 	add.w	r2, sp, #9
 8008484:	eba2 020e 	sub.w	r2, r2, lr
 8008488:	4565      	cmp	r5, ip
 800848a:	bf88      	it	hi
 800848c:	2200      	movhi	r2, #0
 800848e:	4413      	add	r3, r2
 8008490:	1a18      	subs	r0, r3, r0
 8008492:	b003      	add	sp, #12
 8008494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800849a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800849e:	e7ed      	b.n	800847c <__exponent+0x4c>
 80084a0:	2330      	movs	r3, #48	; 0x30
 80084a2:	3130      	adds	r1, #48	; 0x30
 80084a4:	7083      	strb	r3, [r0, #2]
 80084a6:	70c1      	strb	r1, [r0, #3]
 80084a8:	1d03      	adds	r3, r0, #4
 80084aa:	e7f1      	b.n	8008490 <__exponent+0x60>

080084ac <_printf_float>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	ed2d 8b02 	vpush	{d8}
 80084b4:	b08d      	sub	sp, #52	; 0x34
 80084b6:	460c      	mov	r4, r1
 80084b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084bc:	4616      	mov	r6, r2
 80084be:	461f      	mov	r7, r3
 80084c0:	4605      	mov	r5, r0
 80084c2:	f001 fb63 	bl	8009b8c <_localeconv_r>
 80084c6:	f8d0 a000 	ldr.w	sl, [r0]
 80084ca:	4650      	mov	r0, sl
 80084cc:	f7f7 fe80 	bl	80001d0 <strlen>
 80084d0:	2300      	movs	r3, #0
 80084d2:	930a      	str	r3, [sp, #40]	; 0x28
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	9305      	str	r3, [sp, #20]
 80084d8:	f8d8 3000 	ldr.w	r3, [r8]
 80084dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80084e0:	3307      	adds	r3, #7
 80084e2:	f023 0307 	bic.w	r3, r3, #7
 80084e6:	f103 0208 	add.w	r2, r3, #8
 80084ea:	f8c8 2000 	str.w	r2, [r8]
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80084f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80084fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	f8cd 8018 	str.w	r8, [sp, #24]
 8008504:	ee08 0a10 	vmov	s16, r0
 8008508:	4b9f      	ldr	r3, [pc, #636]	; (8008788 <_printf_float+0x2dc>)
 800850a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800850e:	f04f 32ff 	mov.w	r2, #4294967295
 8008512:	f7f8 fb0b 	bl	8000b2c <__aeabi_dcmpun>
 8008516:	bb88      	cbnz	r0, 800857c <_printf_float+0xd0>
 8008518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800851c:	4b9a      	ldr	r3, [pc, #616]	; (8008788 <_printf_float+0x2dc>)
 800851e:	f04f 32ff 	mov.w	r2, #4294967295
 8008522:	f7f8 fae5 	bl	8000af0 <__aeabi_dcmple>
 8008526:	bb48      	cbnz	r0, 800857c <_printf_float+0xd0>
 8008528:	2200      	movs	r2, #0
 800852a:	2300      	movs	r3, #0
 800852c:	4640      	mov	r0, r8
 800852e:	4649      	mov	r1, r9
 8008530:	f7f8 fad4 	bl	8000adc <__aeabi_dcmplt>
 8008534:	b110      	cbz	r0, 800853c <_printf_float+0x90>
 8008536:	232d      	movs	r3, #45	; 0x2d
 8008538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800853c:	4b93      	ldr	r3, [pc, #588]	; (800878c <_printf_float+0x2e0>)
 800853e:	4894      	ldr	r0, [pc, #592]	; (8008790 <_printf_float+0x2e4>)
 8008540:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008544:	bf94      	ite	ls
 8008546:	4698      	movls	r8, r3
 8008548:	4680      	movhi	r8, r0
 800854a:	2303      	movs	r3, #3
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	9b05      	ldr	r3, [sp, #20]
 8008550:	f023 0204 	bic.w	r2, r3, #4
 8008554:	6022      	str	r2, [r4, #0]
 8008556:	f04f 0900 	mov.w	r9, #0
 800855a:	9700      	str	r7, [sp, #0]
 800855c:	4633      	mov	r3, r6
 800855e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008560:	4621      	mov	r1, r4
 8008562:	4628      	mov	r0, r5
 8008564:	f000 f9d8 	bl	8008918 <_printf_common>
 8008568:	3001      	adds	r0, #1
 800856a:	f040 8090 	bne.w	800868e <_printf_float+0x1e2>
 800856e:	f04f 30ff 	mov.w	r0, #4294967295
 8008572:	b00d      	add	sp, #52	; 0x34
 8008574:	ecbd 8b02 	vpop	{d8}
 8008578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	4640      	mov	r0, r8
 8008582:	4649      	mov	r1, r9
 8008584:	f7f8 fad2 	bl	8000b2c <__aeabi_dcmpun>
 8008588:	b140      	cbz	r0, 800859c <_printf_float+0xf0>
 800858a:	464b      	mov	r3, r9
 800858c:	2b00      	cmp	r3, #0
 800858e:	bfbc      	itt	lt
 8008590:	232d      	movlt	r3, #45	; 0x2d
 8008592:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008596:	487f      	ldr	r0, [pc, #508]	; (8008794 <_printf_float+0x2e8>)
 8008598:	4b7f      	ldr	r3, [pc, #508]	; (8008798 <_printf_float+0x2ec>)
 800859a:	e7d1      	b.n	8008540 <_printf_float+0x94>
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085a2:	9206      	str	r2, [sp, #24]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	d13f      	bne.n	8008628 <_printf_float+0x17c>
 80085a8:	2306      	movs	r3, #6
 80085aa:	6063      	str	r3, [r4, #4]
 80085ac:	9b05      	ldr	r3, [sp, #20]
 80085ae:	6861      	ldr	r1, [r4, #4]
 80085b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085b4:	2300      	movs	r3, #0
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	ab0a      	add	r3, sp, #40	; 0x28
 80085ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085be:	ab09      	add	r3, sp, #36	; 0x24
 80085c0:	ec49 8b10 	vmov	d0, r8, r9
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	6022      	str	r2, [r4, #0]
 80085c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085cc:	4628      	mov	r0, r5
 80085ce:	f7ff fecd 	bl	800836c <__cvt>
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085d6:	2b47      	cmp	r3, #71	; 0x47
 80085d8:	4680      	mov	r8, r0
 80085da:	d108      	bne.n	80085ee <_printf_float+0x142>
 80085dc:	1cc8      	adds	r0, r1, #3
 80085de:	db02      	blt.n	80085e6 <_printf_float+0x13a>
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	4299      	cmp	r1, r3
 80085e4:	dd41      	ble.n	800866a <_printf_float+0x1be>
 80085e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80085ea:	fa5f fb8b 	uxtb.w	fp, fp
 80085ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085f2:	d820      	bhi.n	8008636 <_printf_float+0x18a>
 80085f4:	3901      	subs	r1, #1
 80085f6:	465a      	mov	r2, fp
 80085f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085fc:	9109      	str	r1, [sp, #36]	; 0x24
 80085fe:	f7ff ff17 	bl	8008430 <__exponent>
 8008602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008604:	1813      	adds	r3, r2, r0
 8008606:	2a01      	cmp	r2, #1
 8008608:	4681      	mov	r9, r0
 800860a:	6123      	str	r3, [r4, #16]
 800860c:	dc02      	bgt.n	8008614 <_printf_float+0x168>
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	07d2      	lsls	r2, r2, #31
 8008612:	d501      	bpl.n	8008618 <_printf_float+0x16c>
 8008614:	3301      	adds	r3, #1
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800861c:	2b00      	cmp	r3, #0
 800861e:	d09c      	beq.n	800855a <_printf_float+0xae>
 8008620:	232d      	movs	r3, #45	; 0x2d
 8008622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008626:	e798      	b.n	800855a <_printf_float+0xae>
 8008628:	9a06      	ldr	r2, [sp, #24]
 800862a:	2a47      	cmp	r2, #71	; 0x47
 800862c:	d1be      	bne.n	80085ac <_printf_float+0x100>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1bc      	bne.n	80085ac <_printf_float+0x100>
 8008632:	2301      	movs	r3, #1
 8008634:	e7b9      	b.n	80085aa <_printf_float+0xfe>
 8008636:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800863a:	d118      	bne.n	800866e <_printf_float+0x1c2>
 800863c:	2900      	cmp	r1, #0
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	dd0b      	ble.n	800865a <_printf_float+0x1ae>
 8008642:	6121      	str	r1, [r4, #16]
 8008644:	b913      	cbnz	r3, 800864c <_printf_float+0x1a0>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	07d0      	lsls	r0, r2, #31
 800864a:	d502      	bpl.n	8008652 <_printf_float+0x1a6>
 800864c:	3301      	adds	r3, #1
 800864e:	440b      	add	r3, r1
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	65a1      	str	r1, [r4, #88]	; 0x58
 8008654:	f04f 0900 	mov.w	r9, #0
 8008658:	e7de      	b.n	8008618 <_printf_float+0x16c>
 800865a:	b913      	cbnz	r3, 8008662 <_printf_float+0x1b6>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	07d2      	lsls	r2, r2, #31
 8008660:	d501      	bpl.n	8008666 <_printf_float+0x1ba>
 8008662:	3302      	adds	r3, #2
 8008664:	e7f4      	b.n	8008650 <_printf_float+0x1a4>
 8008666:	2301      	movs	r3, #1
 8008668:	e7f2      	b.n	8008650 <_printf_float+0x1a4>
 800866a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800866e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008670:	4299      	cmp	r1, r3
 8008672:	db05      	blt.n	8008680 <_printf_float+0x1d4>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	6121      	str	r1, [r4, #16]
 8008678:	07d8      	lsls	r0, r3, #31
 800867a:	d5ea      	bpl.n	8008652 <_printf_float+0x1a6>
 800867c:	1c4b      	adds	r3, r1, #1
 800867e:	e7e7      	b.n	8008650 <_printf_float+0x1a4>
 8008680:	2900      	cmp	r1, #0
 8008682:	bfd4      	ite	le
 8008684:	f1c1 0202 	rsble	r2, r1, #2
 8008688:	2201      	movgt	r2, #1
 800868a:	4413      	add	r3, r2
 800868c:	e7e0      	b.n	8008650 <_printf_float+0x1a4>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	055a      	lsls	r2, r3, #21
 8008692:	d407      	bmi.n	80086a4 <_printf_float+0x1f8>
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	4642      	mov	r2, r8
 8008698:	4631      	mov	r1, r6
 800869a:	4628      	mov	r0, r5
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	d12c      	bne.n	80086fc <_printf_float+0x250>
 80086a2:	e764      	b.n	800856e <_printf_float+0xc2>
 80086a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086a8:	f240 80e0 	bls.w	800886c <_printf_float+0x3c0>
 80086ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	f7f8 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d034      	beq.n	8008726 <_printf_float+0x27a>
 80086bc:	4a37      	ldr	r2, [pc, #220]	; (800879c <_printf_float+0x2f0>)
 80086be:	2301      	movs	r3, #1
 80086c0:	4631      	mov	r1, r6
 80086c2:	4628      	mov	r0, r5
 80086c4:	47b8      	blx	r7
 80086c6:	3001      	adds	r0, #1
 80086c8:	f43f af51 	beq.w	800856e <_printf_float+0xc2>
 80086cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d0:	429a      	cmp	r2, r3
 80086d2:	db02      	blt.n	80086da <_printf_float+0x22e>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	07d8      	lsls	r0, r3, #31
 80086d8:	d510      	bpl.n	80086fc <_printf_float+0x250>
 80086da:	ee18 3a10 	vmov	r3, s16
 80086de:	4652      	mov	r2, sl
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f af41 	beq.w	800856e <_printf_float+0xc2>
 80086ec:	f04f 0800 	mov.w	r8, #0
 80086f0:	f104 091a 	add.w	r9, r4, #26
 80086f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4543      	cmp	r3, r8
 80086fa:	dc09      	bgt.n	8008710 <_printf_float+0x264>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	079b      	lsls	r3, r3, #30
 8008700:	f100 8105 	bmi.w	800890e <_printf_float+0x462>
 8008704:	68e0      	ldr	r0, [r4, #12]
 8008706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008708:	4298      	cmp	r0, r3
 800870a:	bfb8      	it	lt
 800870c:	4618      	movlt	r0, r3
 800870e:	e730      	b.n	8008572 <_printf_float+0xc6>
 8008710:	2301      	movs	r3, #1
 8008712:	464a      	mov	r2, r9
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f af27 	beq.w	800856e <_printf_float+0xc2>
 8008720:	f108 0801 	add.w	r8, r8, #1
 8008724:	e7e6      	b.n	80086f4 <_printf_float+0x248>
 8008726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	dc39      	bgt.n	80087a0 <_printf_float+0x2f4>
 800872c:	4a1b      	ldr	r2, [pc, #108]	; (800879c <_printf_float+0x2f0>)
 800872e:	2301      	movs	r3, #1
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f af19 	beq.w	800856e <_printf_float+0xc2>
 800873c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008740:	4313      	orrs	r3, r2
 8008742:	d102      	bne.n	800874a <_printf_float+0x29e>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	07d9      	lsls	r1, r3, #31
 8008748:	d5d8      	bpl.n	80086fc <_printf_float+0x250>
 800874a:	ee18 3a10 	vmov	r3, s16
 800874e:	4652      	mov	r2, sl
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af09 	beq.w	800856e <_printf_float+0xc2>
 800875c:	f04f 0900 	mov.w	r9, #0
 8008760:	f104 0a1a 	add.w	sl, r4, #26
 8008764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008766:	425b      	negs	r3, r3
 8008768:	454b      	cmp	r3, r9
 800876a:	dc01      	bgt.n	8008770 <_printf_float+0x2c4>
 800876c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876e:	e792      	b.n	8008696 <_printf_float+0x1ea>
 8008770:	2301      	movs	r3, #1
 8008772:	4652      	mov	r2, sl
 8008774:	4631      	mov	r1, r6
 8008776:	4628      	mov	r0, r5
 8008778:	47b8      	blx	r7
 800877a:	3001      	adds	r0, #1
 800877c:	f43f aef7 	beq.w	800856e <_printf_float+0xc2>
 8008780:	f109 0901 	add.w	r9, r9, #1
 8008784:	e7ee      	b.n	8008764 <_printf_float+0x2b8>
 8008786:	bf00      	nop
 8008788:	7fefffff 	.word	0x7fefffff
 800878c:	0800b1fc 	.word	0x0800b1fc
 8008790:	0800b200 	.word	0x0800b200
 8008794:	0800b208 	.word	0x0800b208
 8008798:	0800b204 	.word	0x0800b204
 800879c:	0800b20c 	.word	0x0800b20c
 80087a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bfa8      	it	ge
 80087a8:	461a      	movge	r2, r3
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	4691      	mov	r9, r2
 80087ae:	dc37      	bgt.n	8008820 <_printf_float+0x374>
 80087b0:	f04f 0b00 	mov.w	fp, #0
 80087b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087b8:	f104 021a 	add.w	r2, r4, #26
 80087bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	eba3 0309 	sub.w	r3, r3, r9
 80087c4:	455b      	cmp	r3, fp
 80087c6:	dc33      	bgt.n	8008830 <_printf_float+0x384>
 80087c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087cc:	429a      	cmp	r2, r3
 80087ce:	db3b      	blt.n	8008848 <_printf_float+0x39c>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	07da      	lsls	r2, r3, #31
 80087d4:	d438      	bmi.n	8008848 <_printf_float+0x39c>
 80087d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087d8:	9b05      	ldr	r3, [sp, #20]
 80087da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	eba2 0901 	sub.w	r9, r2, r1
 80087e2:	4599      	cmp	r9, r3
 80087e4:	bfa8      	it	ge
 80087e6:	4699      	movge	r9, r3
 80087e8:	f1b9 0f00 	cmp.w	r9, #0
 80087ec:	dc35      	bgt.n	800885a <_printf_float+0x3ae>
 80087ee:	f04f 0800 	mov.w	r8, #0
 80087f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087f6:	f104 0a1a 	add.w	sl, r4, #26
 80087fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	eba3 0309 	sub.w	r3, r3, r9
 8008804:	4543      	cmp	r3, r8
 8008806:	f77f af79 	ble.w	80086fc <_printf_float+0x250>
 800880a:	2301      	movs	r3, #1
 800880c:	4652      	mov	r2, sl
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	f43f aeaa 	beq.w	800856e <_printf_float+0xc2>
 800881a:	f108 0801 	add.w	r8, r8, #1
 800881e:	e7ec      	b.n	80087fa <_printf_float+0x34e>
 8008820:	4613      	mov	r3, r2
 8008822:	4631      	mov	r1, r6
 8008824:	4642      	mov	r2, r8
 8008826:	4628      	mov	r0, r5
 8008828:	47b8      	blx	r7
 800882a:	3001      	adds	r0, #1
 800882c:	d1c0      	bne.n	80087b0 <_printf_float+0x304>
 800882e:	e69e      	b.n	800856e <_printf_float+0xc2>
 8008830:	2301      	movs	r3, #1
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	9205      	str	r2, [sp, #20]
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	f43f ae97 	beq.w	800856e <_printf_float+0xc2>
 8008840:	9a05      	ldr	r2, [sp, #20]
 8008842:	f10b 0b01 	add.w	fp, fp, #1
 8008846:	e7b9      	b.n	80087bc <_printf_float+0x310>
 8008848:	ee18 3a10 	vmov	r3, s16
 800884c:	4652      	mov	r2, sl
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	d1be      	bne.n	80087d6 <_printf_float+0x32a>
 8008858:	e689      	b.n	800856e <_printf_float+0xc2>
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	464b      	mov	r3, r9
 800885e:	4442      	add	r2, r8
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	d1c1      	bne.n	80087ee <_printf_float+0x342>
 800886a:	e680      	b.n	800856e <_printf_float+0xc2>
 800886c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886e:	2a01      	cmp	r2, #1
 8008870:	dc01      	bgt.n	8008876 <_printf_float+0x3ca>
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d538      	bpl.n	80088e8 <_printf_float+0x43c>
 8008876:	2301      	movs	r3, #1
 8008878:	4642      	mov	r2, r8
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f ae74 	beq.w	800856e <_printf_float+0xc2>
 8008886:	ee18 3a10 	vmov	r3, s16
 800888a:	4652      	mov	r2, sl
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f ae6b 	beq.w	800856e <_printf_float+0xc2>
 8008898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800889c:	2200      	movs	r2, #0
 800889e:	2300      	movs	r3, #0
 80088a0:	f7f8 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80088a4:	b9d8      	cbnz	r0, 80088de <_printf_float+0x432>
 80088a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a8:	f108 0201 	add.w	r2, r8, #1
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4631      	mov	r1, r6
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b8      	blx	r7
 80088b4:	3001      	adds	r0, #1
 80088b6:	d10e      	bne.n	80088d6 <_printf_float+0x42a>
 80088b8:	e659      	b.n	800856e <_printf_float+0xc2>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f ae52 	beq.w	800856e <_printf_float+0xc2>
 80088ca:	f108 0801 	add.w	r8, r8, #1
 80088ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4543      	cmp	r3, r8
 80088d4:	dcf1      	bgt.n	80088ba <_printf_float+0x40e>
 80088d6:	464b      	mov	r3, r9
 80088d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088dc:	e6dc      	b.n	8008698 <_printf_float+0x1ec>
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	f104 0a1a 	add.w	sl, r4, #26
 80088e6:	e7f2      	b.n	80088ce <_printf_float+0x422>
 80088e8:	2301      	movs	r3, #1
 80088ea:	4642      	mov	r2, r8
 80088ec:	e7df      	b.n	80088ae <_printf_float+0x402>
 80088ee:	2301      	movs	r3, #1
 80088f0:	464a      	mov	r2, r9
 80088f2:	4631      	mov	r1, r6
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b8      	blx	r7
 80088f8:	3001      	adds	r0, #1
 80088fa:	f43f ae38 	beq.w	800856e <_printf_float+0xc2>
 80088fe:	f108 0801 	add.w	r8, r8, #1
 8008902:	68e3      	ldr	r3, [r4, #12]
 8008904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008906:	1a5b      	subs	r3, r3, r1
 8008908:	4543      	cmp	r3, r8
 800890a:	dcf0      	bgt.n	80088ee <_printf_float+0x442>
 800890c:	e6fa      	b.n	8008704 <_printf_float+0x258>
 800890e:	f04f 0800 	mov.w	r8, #0
 8008912:	f104 0919 	add.w	r9, r4, #25
 8008916:	e7f4      	b.n	8008902 <_printf_float+0x456>

08008918 <_printf_common>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	4616      	mov	r6, r2
 800891e:	4699      	mov	r9, r3
 8008920:	688a      	ldr	r2, [r1, #8]
 8008922:	690b      	ldr	r3, [r1, #16]
 8008924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008928:	4293      	cmp	r3, r2
 800892a:	bfb8      	it	lt
 800892c:	4613      	movlt	r3, r2
 800892e:	6033      	str	r3, [r6, #0]
 8008930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008934:	4607      	mov	r7, r0
 8008936:	460c      	mov	r4, r1
 8008938:	b10a      	cbz	r2, 800893e <_printf_common+0x26>
 800893a:	3301      	adds	r3, #1
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	0699      	lsls	r1, r3, #26
 8008942:	bf42      	ittt	mi
 8008944:	6833      	ldrmi	r3, [r6, #0]
 8008946:	3302      	addmi	r3, #2
 8008948:	6033      	strmi	r3, [r6, #0]
 800894a:	6825      	ldr	r5, [r4, #0]
 800894c:	f015 0506 	ands.w	r5, r5, #6
 8008950:	d106      	bne.n	8008960 <_printf_common+0x48>
 8008952:	f104 0a19 	add.w	sl, r4, #25
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	6832      	ldr	r2, [r6, #0]
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	42ab      	cmp	r3, r5
 800895e:	dc26      	bgt.n	80089ae <_printf_common+0x96>
 8008960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008964:	1e13      	subs	r3, r2, #0
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	bf18      	it	ne
 800896a:	2301      	movne	r3, #1
 800896c:	0692      	lsls	r2, r2, #26
 800896e:	d42b      	bmi.n	80089c8 <_printf_common+0xb0>
 8008970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008974:	4649      	mov	r1, r9
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d01e      	beq.n	80089bc <_printf_common+0xa4>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	68e5      	ldr	r5, [r4, #12]
 8008982:	6832      	ldr	r2, [r6, #0]
 8008984:	f003 0306 	and.w	r3, r3, #6
 8008988:	2b04      	cmp	r3, #4
 800898a:	bf08      	it	eq
 800898c:	1aad      	subeq	r5, r5, r2
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	6922      	ldr	r2, [r4, #16]
 8008992:	bf0c      	ite	eq
 8008994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008998:	2500      	movne	r5, #0
 800899a:	4293      	cmp	r3, r2
 800899c:	bfc4      	itt	gt
 800899e:	1a9b      	subgt	r3, r3, r2
 80089a0:	18ed      	addgt	r5, r5, r3
 80089a2:	2600      	movs	r6, #0
 80089a4:	341a      	adds	r4, #26
 80089a6:	42b5      	cmp	r5, r6
 80089a8:	d11a      	bne.n	80089e0 <_printf_common+0xc8>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e008      	b.n	80089c0 <_printf_common+0xa8>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4652      	mov	r2, sl
 80089b2:	4649      	mov	r1, r9
 80089b4:	4638      	mov	r0, r7
 80089b6:	47c0      	blx	r8
 80089b8:	3001      	adds	r0, #1
 80089ba:	d103      	bne.n	80089c4 <_printf_common+0xac>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c4:	3501      	adds	r5, #1
 80089c6:	e7c6      	b.n	8008956 <_printf_common+0x3e>
 80089c8:	18e1      	adds	r1, r4, r3
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	2030      	movs	r0, #48	; 0x30
 80089ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089d2:	4422      	add	r2, r4
 80089d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089dc:	3302      	adds	r3, #2
 80089de:	e7c7      	b.n	8008970 <_printf_common+0x58>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4622      	mov	r2, r4
 80089e4:	4649      	mov	r1, r9
 80089e6:	4638      	mov	r0, r7
 80089e8:	47c0      	blx	r8
 80089ea:	3001      	adds	r0, #1
 80089ec:	d0e6      	beq.n	80089bc <_printf_common+0xa4>
 80089ee:	3601      	adds	r6, #1
 80089f0:	e7d9      	b.n	80089a6 <_printf_common+0x8e>
	...

080089f4 <_printf_i>:
 80089f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	4691      	mov	r9, r2
 80089fc:	7e27      	ldrb	r7, [r4, #24]
 80089fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a00:	2f78      	cmp	r7, #120	; 0x78
 8008a02:	4680      	mov	r8, r0
 8008a04:	469a      	mov	sl, r3
 8008a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a0a:	d807      	bhi.n	8008a1c <_printf_i+0x28>
 8008a0c:	2f62      	cmp	r7, #98	; 0x62
 8008a0e:	d80a      	bhi.n	8008a26 <_printf_i+0x32>
 8008a10:	2f00      	cmp	r7, #0
 8008a12:	f000 80d8 	beq.w	8008bc6 <_printf_i+0x1d2>
 8008a16:	2f58      	cmp	r7, #88	; 0x58
 8008a18:	f000 80a3 	beq.w	8008b62 <_printf_i+0x16e>
 8008a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a24:	e03a      	b.n	8008a9c <_printf_i+0xa8>
 8008a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a2a:	2b15      	cmp	r3, #21
 8008a2c:	d8f6      	bhi.n	8008a1c <_printf_i+0x28>
 8008a2e:	a001      	add	r0, pc, #4	; (adr r0, 8008a34 <_printf_i+0x40>)
 8008a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008a1d 	.word	0x08008a1d
 8008a40:	08008a1d 	.word	0x08008a1d
 8008a44:	08008a1d 	.word	0x08008a1d
 8008a48:	08008a1d 	.word	0x08008a1d
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008a1d 	.word	0x08008a1d
 8008a54:	08008a1d 	.word	0x08008a1d
 8008a58:	08008a1d 	.word	0x08008a1d
 8008a5c:	08008a1d 	.word	0x08008a1d
 8008a60:	08008bad 	.word	0x08008bad
 8008a64:	08008ad1 	.word	0x08008ad1
 8008a68:	08008b8f 	.word	0x08008b8f
 8008a6c:	08008a1d 	.word	0x08008a1d
 8008a70:	08008a1d 	.word	0x08008a1d
 8008a74:	08008bcf 	.word	0x08008bcf
 8008a78:	08008a1d 	.word	0x08008a1d
 8008a7c:	08008ad1 	.word	0x08008ad1
 8008a80:	08008a1d 	.word	0x08008a1d
 8008a84:	08008a1d 	.word	0x08008a1d
 8008a88:	08008b97 	.word	0x08008b97
 8008a8c:	680b      	ldr	r3, [r1, #0]
 8008a8e:	1d1a      	adds	r2, r3, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	600a      	str	r2, [r1, #0]
 8008a94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e0a3      	b.n	8008be8 <_printf_i+0x1f4>
 8008aa0:	6825      	ldr	r5, [r4, #0]
 8008aa2:	6808      	ldr	r0, [r1, #0]
 8008aa4:	062e      	lsls	r6, r5, #24
 8008aa6:	f100 0304 	add.w	r3, r0, #4
 8008aaa:	d50a      	bpl.n	8008ac2 <_printf_i+0xce>
 8008aac:	6805      	ldr	r5, [r0, #0]
 8008aae:	600b      	str	r3, [r1, #0]
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	da03      	bge.n	8008abc <_printf_i+0xc8>
 8008ab4:	232d      	movs	r3, #45	; 0x2d
 8008ab6:	426d      	negs	r5, r5
 8008ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008abc:	485e      	ldr	r0, [pc, #376]	; (8008c38 <_printf_i+0x244>)
 8008abe:	230a      	movs	r3, #10
 8008ac0:	e019      	b.n	8008af6 <_printf_i+0x102>
 8008ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ac6:	6805      	ldr	r5, [r0, #0]
 8008ac8:	600b      	str	r3, [r1, #0]
 8008aca:	bf18      	it	ne
 8008acc:	b22d      	sxthne	r5, r5
 8008ace:	e7ef      	b.n	8008ab0 <_printf_i+0xbc>
 8008ad0:	680b      	ldr	r3, [r1, #0]
 8008ad2:	6825      	ldr	r5, [r4, #0]
 8008ad4:	1d18      	adds	r0, r3, #4
 8008ad6:	6008      	str	r0, [r1, #0]
 8008ad8:	0628      	lsls	r0, r5, #24
 8008ada:	d501      	bpl.n	8008ae0 <_printf_i+0xec>
 8008adc:	681d      	ldr	r5, [r3, #0]
 8008ade:	e002      	b.n	8008ae6 <_printf_i+0xf2>
 8008ae0:	0669      	lsls	r1, r5, #25
 8008ae2:	d5fb      	bpl.n	8008adc <_printf_i+0xe8>
 8008ae4:	881d      	ldrh	r5, [r3, #0]
 8008ae6:	4854      	ldr	r0, [pc, #336]	; (8008c38 <_printf_i+0x244>)
 8008ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8008aea:	bf0c      	ite	eq
 8008aec:	2308      	moveq	r3, #8
 8008aee:	230a      	movne	r3, #10
 8008af0:	2100      	movs	r1, #0
 8008af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008af6:	6866      	ldr	r6, [r4, #4]
 8008af8:	60a6      	str	r6, [r4, #8]
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	bfa2      	ittt	ge
 8008afe:	6821      	ldrge	r1, [r4, #0]
 8008b00:	f021 0104 	bicge.w	r1, r1, #4
 8008b04:	6021      	strge	r1, [r4, #0]
 8008b06:	b90d      	cbnz	r5, 8008b0c <_printf_i+0x118>
 8008b08:	2e00      	cmp	r6, #0
 8008b0a:	d04d      	beq.n	8008ba8 <_printf_i+0x1b4>
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b12:	fb03 5711 	mls	r7, r3, r1, r5
 8008b16:	5dc7      	ldrb	r7, [r0, r7]
 8008b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b1c:	462f      	mov	r7, r5
 8008b1e:	42bb      	cmp	r3, r7
 8008b20:	460d      	mov	r5, r1
 8008b22:	d9f4      	bls.n	8008b0e <_printf_i+0x11a>
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d10b      	bne.n	8008b40 <_printf_i+0x14c>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	07df      	lsls	r7, r3, #31
 8008b2c:	d508      	bpl.n	8008b40 <_printf_i+0x14c>
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	6861      	ldr	r1, [r4, #4]
 8008b32:	4299      	cmp	r1, r3
 8008b34:	bfde      	ittt	le
 8008b36:	2330      	movle	r3, #48	; 0x30
 8008b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b40:	1b92      	subs	r2, r2, r6
 8008b42:	6122      	str	r2, [r4, #16]
 8008b44:	f8cd a000 	str.w	sl, [sp]
 8008b48:	464b      	mov	r3, r9
 8008b4a:	aa03      	add	r2, sp, #12
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4640      	mov	r0, r8
 8008b50:	f7ff fee2 	bl	8008918 <_printf_common>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d14c      	bne.n	8008bf2 <_printf_i+0x1fe>
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	b004      	add	sp, #16
 8008b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b62:	4835      	ldr	r0, [pc, #212]	; (8008c38 <_printf_i+0x244>)
 8008b64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	680e      	ldr	r6, [r1, #0]
 8008b6c:	061f      	lsls	r7, r3, #24
 8008b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b72:	600e      	str	r6, [r1, #0]
 8008b74:	d514      	bpl.n	8008ba0 <_printf_i+0x1ac>
 8008b76:	07d9      	lsls	r1, r3, #31
 8008b78:	bf44      	itt	mi
 8008b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b7e:	6023      	strmi	r3, [r4, #0]
 8008b80:	b91d      	cbnz	r5, 8008b8a <_printf_i+0x196>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	f023 0320 	bic.w	r3, r3, #32
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	2310      	movs	r3, #16
 8008b8c:	e7b0      	b.n	8008af0 <_printf_i+0xfc>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f043 0320 	orr.w	r3, r3, #32
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	2378      	movs	r3, #120	; 0x78
 8008b98:	4828      	ldr	r0, [pc, #160]	; (8008c3c <_printf_i+0x248>)
 8008b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b9e:	e7e3      	b.n	8008b68 <_printf_i+0x174>
 8008ba0:	065e      	lsls	r6, r3, #25
 8008ba2:	bf48      	it	mi
 8008ba4:	b2ad      	uxthmi	r5, r5
 8008ba6:	e7e6      	b.n	8008b76 <_printf_i+0x182>
 8008ba8:	4616      	mov	r6, r2
 8008baa:	e7bb      	b.n	8008b24 <_printf_i+0x130>
 8008bac:	680b      	ldr	r3, [r1, #0]
 8008bae:	6826      	ldr	r6, [r4, #0]
 8008bb0:	6960      	ldr	r0, [r4, #20]
 8008bb2:	1d1d      	adds	r5, r3, #4
 8008bb4:	600d      	str	r5, [r1, #0]
 8008bb6:	0635      	lsls	r5, r6, #24
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	d501      	bpl.n	8008bc0 <_printf_i+0x1cc>
 8008bbc:	6018      	str	r0, [r3, #0]
 8008bbe:	e002      	b.n	8008bc6 <_printf_i+0x1d2>
 8008bc0:	0671      	lsls	r1, r6, #25
 8008bc2:	d5fb      	bpl.n	8008bbc <_printf_i+0x1c8>
 8008bc4:	8018      	strh	r0, [r3, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	4616      	mov	r6, r2
 8008bcc:	e7ba      	b.n	8008b44 <_printf_i+0x150>
 8008bce:	680b      	ldr	r3, [r1, #0]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	600a      	str	r2, [r1, #0]
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	6862      	ldr	r2, [r4, #4]
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7f7 fb00 	bl	80001e0 <memchr>
 8008be0:	b108      	cbz	r0, 8008be6 <_printf_i+0x1f2>
 8008be2:	1b80      	subs	r0, r0, r6
 8008be4:	6060      	str	r0, [r4, #4]
 8008be6:	6863      	ldr	r3, [r4, #4]
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	2300      	movs	r3, #0
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf0:	e7a8      	b.n	8008b44 <_printf_i+0x150>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	47d0      	blx	sl
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d0ab      	beq.n	8008b58 <_printf_i+0x164>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	079b      	lsls	r3, r3, #30
 8008c04:	d413      	bmi.n	8008c2e <_printf_i+0x23a>
 8008c06:	68e0      	ldr	r0, [r4, #12]
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	4298      	cmp	r0, r3
 8008c0c:	bfb8      	it	lt
 8008c0e:	4618      	movlt	r0, r3
 8008c10:	e7a4      	b.n	8008b5c <_printf_i+0x168>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4632      	mov	r2, r6
 8008c16:	4649      	mov	r1, r9
 8008c18:	4640      	mov	r0, r8
 8008c1a:	47d0      	blx	sl
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d09b      	beq.n	8008b58 <_printf_i+0x164>
 8008c20:	3501      	adds	r5, #1
 8008c22:	68e3      	ldr	r3, [r4, #12]
 8008c24:	9903      	ldr	r1, [sp, #12]
 8008c26:	1a5b      	subs	r3, r3, r1
 8008c28:	42ab      	cmp	r3, r5
 8008c2a:	dcf2      	bgt.n	8008c12 <_printf_i+0x21e>
 8008c2c:	e7eb      	b.n	8008c06 <_printf_i+0x212>
 8008c2e:	2500      	movs	r5, #0
 8008c30:	f104 0619 	add.w	r6, r4, #25
 8008c34:	e7f5      	b.n	8008c22 <_printf_i+0x22e>
 8008c36:	bf00      	nop
 8008c38:	0800b20e 	.word	0x0800b20e
 8008c3c:	0800b21f 	.word	0x0800b21f

08008c40 <iprintf>:
 8008c40:	b40f      	push	{r0, r1, r2, r3}
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <iprintf+0x2c>)
 8008c44:	b513      	push	{r0, r1, r4, lr}
 8008c46:	681c      	ldr	r4, [r3, #0]
 8008c48:	b124      	cbz	r4, 8008c54 <iprintf+0x14>
 8008c4a:	69a3      	ldr	r3, [r4, #24]
 8008c4c:	b913      	cbnz	r3, 8008c54 <iprintf+0x14>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fefe 	bl	8009a50 <__sinit>
 8008c54:	ab05      	add	r3, sp, #20
 8008c56:	9a04      	ldr	r2, [sp, #16]
 8008c58:	68a1      	ldr	r1, [r4, #8]
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f001 fd63 	bl	800a728 <_vfiprintf_r>
 8008c62:	b002      	add	sp, #8
 8008c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c68:	b004      	add	sp, #16
 8008c6a:	4770      	bx	lr
 8008c6c:	20000114 	.word	0x20000114

08008c70 <siprintf>:
 8008c70:	b40e      	push	{r1, r2, r3}
 8008c72:	b500      	push	{lr}
 8008c74:	b09c      	sub	sp, #112	; 0x70
 8008c76:	ab1d      	add	r3, sp, #116	; 0x74
 8008c78:	9002      	str	r0, [sp, #8]
 8008c7a:	9006      	str	r0, [sp, #24]
 8008c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c80:	4809      	ldr	r0, [pc, #36]	; (8008ca8 <siprintf+0x38>)
 8008c82:	9107      	str	r1, [sp, #28]
 8008c84:	9104      	str	r1, [sp, #16]
 8008c86:	4909      	ldr	r1, [pc, #36]	; (8008cac <siprintf+0x3c>)
 8008c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8c:	9105      	str	r1, [sp, #20]
 8008c8e:	6800      	ldr	r0, [r0, #0]
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	a902      	add	r1, sp, #8
 8008c94:	f001 fc1e 	bl	800a4d4 <_svfiprintf_r>
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	b01c      	add	sp, #112	; 0x70
 8008ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca4:	b003      	add	sp, #12
 8008ca6:	4770      	bx	lr
 8008ca8:	20000114 	.word	0x20000114
 8008cac:	ffff0208 	.word	0xffff0208

08008cb0 <quorem>:
 8008cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	6903      	ldr	r3, [r0, #16]
 8008cb6:	690c      	ldr	r4, [r1, #16]
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	4607      	mov	r7, r0
 8008cbc:	f2c0 8081 	blt.w	8008dc2 <quorem+0x112>
 8008cc0:	3c01      	subs	r4, #1
 8008cc2:	f101 0814 	add.w	r8, r1, #20
 8008cc6:	f100 0514 	add.w	r5, r0, #20
 8008cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ce0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ce8:	d331      	bcc.n	8008d4e <quorem+0x9e>
 8008cea:	f04f 0e00 	mov.w	lr, #0
 8008cee:	4640      	mov	r0, r8
 8008cf0:	46ac      	mov	ip, r5
 8008cf2:	46f2      	mov	sl, lr
 8008cf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cf8:	b293      	uxth	r3, r2
 8008cfa:	fb06 e303 	mla	r3, r6, r3, lr
 8008cfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ebaa 0303 	sub.w	r3, sl, r3
 8008d08:	0c12      	lsrs	r2, r2, #16
 8008d0a:	f8dc a000 	ldr.w	sl, [ip]
 8008d0e:	fb06 e202 	mla	r2, r6, r2, lr
 8008d12:	fa13 f38a 	uxtah	r3, r3, sl
 8008d16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d1a:	fa1f fa82 	uxth.w	sl, r2
 8008d1e:	f8dc 2000 	ldr.w	r2, [ip]
 8008d22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d30:	4581      	cmp	r9, r0
 8008d32:	f84c 3b04 	str.w	r3, [ip], #4
 8008d36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d3a:	d2db      	bcs.n	8008cf4 <quorem+0x44>
 8008d3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d40:	b92b      	cbnz	r3, 8008d4e <quorem+0x9e>
 8008d42:	9b01      	ldr	r3, [sp, #4]
 8008d44:	3b04      	subs	r3, #4
 8008d46:	429d      	cmp	r5, r3
 8008d48:	461a      	mov	r2, r3
 8008d4a:	d32e      	bcc.n	8008daa <quorem+0xfa>
 8008d4c:	613c      	str	r4, [r7, #16]
 8008d4e:	4638      	mov	r0, r7
 8008d50:	f001 f9aa 	bl	800a0a8 <__mcmp>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	db24      	blt.n	8008da2 <quorem+0xf2>
 8008d58:	3601      	adds	r6, #1
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f04f 0c00 	mov.w	ip, #0
 8008d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d64:	f8d0 e000 	ldr.w	lr, [r0]
 8008d68:	b293      	uxth	r3, r2
 8008d6a:	ebac 0303 	sub.w	r3, ip, r3
 8008d6e:	0c12      	lsrs	r2, r2, #16
 8008d70:	fa13 f38e 	uxtah	r3, r3, lr
 8008d74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d82:	45c1      	cmp	r9, r8
 8008d84:	f840 3b04 	str.w	r3, [r0], #4
 8008d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d8c:	d2e8      	bcs.n	8008d60 <quorem+0xb0>
 8008d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d96:	b922      	cbnz	r2, 8008da2 <quorem+0xf2>
 8008d98:	3b04      	subs	r3, #4
 8008d9a:	429d      	cmp	r5, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	d30a      	bcc.n	8008db6 <quorem+0x106>
 8008da0:	613c      	str	r4, [r7, #16]
 8008da2:	4630      	mov	r0, r6
 8008da4:	b003      	add	sp, #12
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	3b04      	subs	r3, #4
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	d1cc      	bne.n	8008d4c <quorem+0x9c>
 8008db2:	3c01      	subs	r4, #1
 8008db4:	e7c7      	b.n	8008d46 <quorem+0x96>
 8008db6:	6812      	ldr	r2, [r2, #0]
 8008db8:	3b04      	subs	r3, #4
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	d1f0      	bne.n	8008da0 <quorem+0xf0>
 8008dbe:	3c01      	subs	r4, #1
 8008dc0:	e7eb      	b.n	8008d9a <quorem+0xea>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e7ee      	b.n	8008da4 <quorem+0xf4>
	...

08008dc8 <_dtoa_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	ed2d 8b02 	vpush	{d8}
 8008dd0:	ec57 6b10 	vmov	r6, r7, d0
 8008dd4:	b095      	sub	sp, #84	; 0x54
 8008dd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ddc:	9105      	str	r1, [sp, #20]
 8008dde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008de2:	4604      	mov	r4, r0
 8008de4:	9209      	str	r2, [sp, #36]	; 0x24
 8008de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008de8:	b975      	cbnz	r5, 8008e08 <_dtoa_r+0x40>
 8008dea:	2010      	movs	r0, #16
 8008dec:	f000 fed6 	bl	8009b9c <malloc>
 8008df0:	4602      	mov	r2, r0
 8008df2:	6260      	str	r0, [r4, #36]	; 0x24
 8008df4:	b920      	cbnz	r0, 8008e00 <_dtoa_r+0x38>
 8008df6:	4bb2      	ldr	r3, [pc, #712]	; (80090c0 <_dtoa_r+0x2f8>)
 8008df8:	21ea      	movs	r1, #234	; 0xea
 8008dfa:	48b2      	ldr	r0, [pc, #712]	; (80090c4 <_dtoa_r+0x2fc>)
 8008dfc:	f001 feea 	bl	800abd4 <__assert_func>
 8008e00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e04:	6005      	str	r5, [r0, #0]
 8008e06:	60c5      	str	r5, [r0, #12]
 8008e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e0a:	6819      	ldr	r1, [r3, #0]
 8008e0c:	b151      	cbz	r1, 8008e24 <_dtoa_r+0x5c>
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	604a      	str	r2, [r1, #4]
 8008e12:	2301      	movs	r3, #1
 8008e14:	4093      	lsls	r3, r2
 8008e16:	608b      	str	r3, [r1, #8]
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 ff07 	bl	8009c2c <_Bfree>
 8008e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	1e3b      	subs	r3, r7, #0
 8008e26:	bfb9      	ittee	lt
 8008e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e2c:	9303      	strlt	r3, [sp, #12]
 8008e2e:	2300      	movge	r3, #0
 8008e30:	f8c8 3000 	strge.w	r3, [r8]
 8008e34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008e38:	4ba3      	ldr	r3, [pc, #652]	; (80090c8 <_dtoa_r+0x300>)
 8008e3a:	bfbc      	itt	lt
 8008e3c:	2201      	movlt	r2, #1
 8008e3e:	f8c8 2000 	strlt.w	r2, [r8]
 8008e42:	ea33 0309 	bics.w	r3, r3, r9
 8008e46:	d11b      	bne.n	8008e80 <_dtoa_r+0xb8>
 8008e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e54:	4333      	orrs	r3, r6
 8008e56:	f000 857a 	beq.w	800994e <_dtoa_r+0xb86>
 8008e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e5c:	b963      	cbnz	r3, 8008e78 <_dtoa_r+0xb0>
 8008e5e:	4b9b      	ldr	r3, [pc, #620]	; (80090cc <_dtoa_r+0x304>)
 8008e60:	e024      	b.n	8008eac <_dtoa_r+0xe4>
 8008e62:	4b9b      	ldr	r3, [pc, #620]	; (80090d0 <_dtoa_r+0x308>)
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	9800      	ldr	r0, [sp, #0]
 8008e6e:	b015      	add	sp, #84	; 0x54
 8008e70:	ecbd 8b02 	vpop	{d8}
 8008e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	4b94      	ldr	r3, [pc, #592]	; (80090cc <_dtoa_r+0x304>)
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	3303      	adds	r3, #3
 8008e7e:	e7f3      	b.n	8008e68 <_dtoa_r+0xa0>
 8008e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e84:	2200      	movs	r2, #0
 8008e86:	ec51 0b17 	vmov	r0, r1, d7
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008e90:	f7f7 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e94:	4680      	mov	r8, r0
 8008e96:	b158      	cbz	r0, 8008eb0 <_dtoa_r+0xe8>
 8008e98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8551 	beq.w	8009948 <_dtoa_r+0xb80>
 8008ea6:	488b      	ldr	r0, [pc, #556]	; (80090d4 <_dtoa_r+0x30c>)
 8008ea8:	6018      	str	r0, [r3, #0]
 8008eaa:	1e43      	subs	r3, r0, #1
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	e7dd      	b.n	8008e6c <_dtoa_r+0xa4>
 8008eb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008eb4:	aa12      	add	r2, sp, #72	; 0x48
 8008eb6:	a913      	add	r1, sp, #76	; 0x4c
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f001 f999 	bl	800a1f0 <__d2b>
 8008ebe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ec2:	4683      	mov	fp, r0
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	d07c      	beq.n	8008fc2 <_dtoa_r+0x1fa>
 8008ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ed6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ee2:	4b7d      	ldr	r3, [pc, #500]	; (80090d8 <_dtoa_r+0x310>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	4639      	mov	r1, r7
 8008eea:	f7f7 f9cd 	bl	8000288 <__aeabi_dsub>
 8008eee:	a36e      	add	r3, pc, #440	; (adr r3, 80090a8 <_dtoa_r+0x2e0>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	a36d      	add	r3, pc, #436	; (adr r3, 80090b0 <_dtoa_r+0x2e8>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 f9c5 	bl	800028c <__adddf3>
 8008f02:	4606      	mov	r6, r0
 8008f04:	4628      	mov	r0, r5
 8008f06:	460f      	mov	r7, r1
 8008f08:	f7f7 fb0c 	bl	8000524 <__aeabi_i2d>
 8008f0c:	a36a      	add	r3, pc, #424	; (adr r3, 80090b8 <_dtoa_r+0x2f0>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f7f7 fb71 	bl	80005f8 <__aeabi_dmul>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	f7f7 f9b5 	bl	800028c <__adddf3>
 8008f22:	4606      	mov	r6, r0
 8008f24:	460f      	mov	r7, r1
 8008f26:	f7f7 fe17 	bl	8000b58 <__aeabi_d2iz>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4682      	mov	sl, r0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8008f38:	b148      	cbz	r0, 8008f4e <_dtoa_r+0x186>
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f7f7 faf2 	bl	8000524 <__aeabi_i2d>
 8008f40:	4632      	mov	r2, r6
 8008f42:	463b      	mov	r3, r7
 8008f44:	f7f7 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f48:	b908      	cbnz	r0, 8008f4e <_dtoa_r+0x186>
 8008f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f4e:	f1ba 0f16 	cmp.w	sl, #22
 8008f52:	d854      	bhi.n	8008ffe <_dtoa_r+0x236>
 8008f54:	4b61      	ldr	r3, [pc, #388]	; (80090dc <_dtoa_r+0x314>)
 8008f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f62:	f7f7 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d04b      	beq.n	8009002 <_dtoa_r+0x23a>
 8008f6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f6e:	2300      	movs	r3, #0
 8008f70:	930e      	str	r3, [sp, #56]	; 0x38
 8008f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f74:	1b5d      	subs	r5, r3, r5
 8008f76:	1e6b      	subs	r3, r5, #1
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	bf43      	ittte	mi
 8008f7c:	2300      	movmi	r3, #0
 8008f7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008f82:	9304      	strmi	r3, [sp, #16]
 8008f84:	f04f 0800 	movpl.w	r8, #0
 8008f88:	f1ba 0f00 	cmp.w	sl, #0
 8008f8c:	db3b      	blt.n	8009006 <_dtoa_r+0x23e>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008f94:	4453      	add	r3, sl
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9306      	str	r3, [sp, #24]
 8008f9c:	9b05      	ldr	r3, [sp, #20]
 8008f9e:	2b09      	cmp	r3, #9
 8008fa0:	d869      	bhi.n	8009076 <_dtoa_r+0x2ae>
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	bfc4      	itt	gt
 8008fa6:	3b04      	subgt	r3, #4
 8008fa8:	9305      	strgt	r3, [sp, #20]
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	f1a3 0302 	sub.w	r3, r3, #2
 8008fb0:	bfcc      	ite	gt
 8008fb2:	2500      	movgt	r5, #0
 8008fb4:	2501      	movle	r5, #1
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d869      	bhi.n	800908e <_dtoa_r+0x2c6>
 8008fba:	e8df f003 	tbb	[pc, r3]
 8008fbe:	4e2c      	.short	0x4e2c
 8008fc0:	5a4c      	.short	0x5a4c
 8008fc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008fc6:	441d      	add	r5, r3
 8008fc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	bfc1      	itttt	gt
 8008fd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008fdc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fe0:	bfda      	itte	le
 8008fe2:	f1c3 0320 	rsble	r3, r3, #32
 8008fe6:	fa06 f003 	lslle.w	r0, r6, r3
 8008fea:	4318      	orrgt	r0, r3
 8008fec:	f7f7 fa8a 	bl	8000504 <__aeabi_ui2d>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ff8:	3d01      	subs	r5, #1
 8008ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8008ffc:	e771      	b.n	8008ee2 <_dtoa_r+0x11a>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7b6      	b.n	8008f70 <_dtoa_r+0x1a8>
 8009002:	900e      	str	r0, [sp, #56]	; 0x38
 8009004:	e7b5      	b.n	8008f72 <_dtoa_r+0x1aa>
 8009006:	f1ca 0300 	rsb	r3, sl, #0
 800900a:	9306      	str	r3, [sp, #24]
 800900c:	2300      	movs	r3, #0
 800900e:	eba8 080a 	sub.w	r8, r8, sl
 8009012:	930d      	str	r3, [sp, #52]	; 0x34
 8009014:	e7c2      	b.n	8008f9c <_dtoa_r+0x1d4>
 8009016:	2300      	movs	r3, #0
 8009018:	9308      	str	r3, [sp, #32]
 800901a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	dc39      	bgt.n	8009094 <_dtoa_r+0x2cc>
 8009020:	f04f 0901 	mov.w	r9, #1
 8009024:	f8cd 9004 	str.w	r9, [sp, #4]
 8009028:	464b      	mov	r3, r9
 800902a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800902e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009030:	2200      	movs	r2, #0
 8009032:	6042      	str	r2, [r0, #4]
 8009034:	2204      	movs	r2, #4
 8009036:	f102 0614 	add.w	r6, r2, #20
 800903a:	429e      	cmp	r6, r3
 800903c:	6841      	ldr	r1, [r0, #4]
 800903e:	d92f      	bls.n	80090a0 <_dtoa_r+0x2d8>
 8009040:	4620      	mov	r0, r4
 8009042:	f000 fdb3 	bl	8009bac <_Balloc>
 8009046:	9000      	str	r0, [sp, #0]
 8009048:	2800      	cmp	r0, #0
 800904a:	d14b      	bne.n	80090e4 <_dtoa_r+0x31c>
 800904c:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <_dtoa_r+0x318>)
 800904e:	4602      	mov	r2, r0
 8009050:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009054:	e6d1      	b.n	8008dfa <_dtoa_r+0x32>
 8009056:	2301      	movs	r3, #1
 8009058:	e7de      	b.n	8009018 <_dtoa_r+0x250>
 800905a:	2300      	movs	r3, #0
 800905c:	9308      	str	r3, [sp, #32]
 800905e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009060:	eb0a 0903 	add.w	r9, sl, r3
 8009064:	f109 0301 	add.w	r3, r9, #1
 8009068:	2b01      	cmp	r3, #1
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	bfb8      	it	lt
 800906e:	2301      	movlt	r3, #1
 8009070:	e7dd      	b.n	800902e <_dtoa_r+0x266>
 8009072:	2301      	movs	r3, #1
 8009074:	e7f2      	b.n	800905c <_dtoa_r+0x294>
 8009076:	2501      	movs	r5, #1
 8009078:	2300      	movs	r3, #0
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	9508      	str	r5, [sp, #32]
 800907e:	f04f 39ff 	mov.w	r9, #4294967295
 8009082:	2200      	movs	r2, #0
 8009084:	f8cd 9004 	str.w	r9, [sp, #4]
 8009088:	2312      	movs	r3, #18
 800908a:	9209      	str	r2, [sp, #36]	; 0x24
 800908c:	e7cf      	b.n	800902e <_dtoa_r+0x266>
 800908e:	2301      	movs	r3, #1
 8009090:	9308      	str	r3, [sp, #32]
 8009092:	e7f4      	b.n	800907e <_dtoa_r+0x2b6>
 8009094:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009098:	f8cd 9004 	str.w	r9, [sp, #4]
 800909c:	464b      	mov	r3, r9
 800909e:	e7c6      	b.n	800902e <_dtoa_r+0x266>
 80090a0:	3101      	adds	r1, #1
 80090a2:	6041      	str	r1, [r0, #4]
 80090a4:	0052      	lsls	r2, r2, #1
 80090a6:	e7c6      	b.n	8009036 <_dtoa_r+0x26e>
 80090a8:	636f4361 	.word	0x636f4361
 80090ac:	3fd287a7 	.word	0x3fd287a7
 80090b0:	8b60c8b3 	.word	0x8b60c8b3
 80090b4:	3fc68a28 	.word	0x3fc68a28
 80090b8:	509f79fb 	.word	0x509f79fb
 80090bc:	3fd34413 	.word	0x3fd34413
 80090c0:	0800b23d 	.word	0x0800b23d
 80090c4:	0800b254 	.word	0x0800b254
 80090c8:	7ff00000 	.word	0x7ff00000
 80090cc:	0800b239 	.word	0x0800b239
 80090d0:	0800b230 	.word	0x0800b230
 80090d4:	0800b20d 	.word	0x0800b20d
 80090d8:	3ff80000 	.word	0x3ff80000
 80090dc:	0800b3b0 	.word	0x0800b3b0
 80090e0:	0800b2b3 	.word	0x0800b2b3
 80090e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e6:	9a00      	ldr	r2, [sp, #0]
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	9b01      	ldr	r3, [sp, #4]
 80090ec:	2b0e      	cmp	r3, #14
 80090ee:	f200 80ad 	bhi.w	800924c <_dtoa_r+0x484>
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	f000 80aa 	beq.w	800924c <_dtoa_r+0x484>
 80090f8:	f1ba 0f00 	cmp.w	sl, #0
 80090fc:	dd36      	ble.n	800916c <_dtoa_r+0x3a4>
 80090fe:	4ac3      	ldr	r2, [pc, #780]	; (800940c <_dtoa_r+0x644>)
 8009100:	f00a 030f 	and.w	r3, sl, #15
 8009104:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009108:	ed93 7b00 	vldr	d7, [r3]
 800910c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009110:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009114:	eeb0 8a47 	vmov.f32	s16, s14
 8009118:	eef0 8a67 	vmov.f32	s17, s15
 800911c:	d016      	beq.n	800914c <_dtoa_r+0x384>
 800911e:	4bbc      	ldr	r3, [pc, #752]	; (8009410 <_dtoa_r+0x648>)
 8009120:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009128:	f7f7 fb90 	bl	800084c <__aeabi_ddiv>
 800912c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009130:	f007 070f 	and.w	r7, r7, #15
 8009134:	2503      	movs	r5, #3
 8009136:	4eb6      	ldr	r6, [pc, #728]	; (8009410 <_dtoa_r+0x648>)
 8009138:	b957      	cbnz	r7, 8009150 <_dtoa_r+0x388>
 800913a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913e:	ec53 2b18 	vmov	r2, r3, d8
 8009142:	f7f7 fb83 	bl	800084c <__aeabi_ddiv>
 8009146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800914a:	e029      	b.n	80091a0 <_dtoa_r+0x3d8>
 800914c:	2502      	movs	r5, #2
 800914e:	e7f2      	b.n	8009136 <_dtoa_r+0x36e>
 8009150:	07f9      	lsls	r1, r7, #31
 8009152:	d508      	bpl.n	8009166 <_dtoa_r+0x39e>
 8009154:	ec51 0b18 	vmov	r0, r1, d8
 8009158:	e9d6 2300 	ldrd	r2, r3, [r6]
 800915c:	f7f7 fa4c 	bl	80005f8 <__aeabi_dmul>
 8009160:	ec41 0b18 	vmov	d8, r0, r1
 8009164:	3501      	adds	r5, #1
 8009166:	107f      	asrs	r7, r7, #1
 8009168:	3608      	adds	r6, #8
 800916a:	e7e5      	b.n	8009138 <_dtoa_r+0x370>
 800916c:	f000 80a6 	beq.w	80092bc <_dtoa_r+0x4f4>
 8009170:	f1ca 0600 	rsb	r6, sl, #0
 8009174:	4ba5      	ldr	r3, [pc, #660]	; (800940c <_dtoa_r+0x644>)
 8009176:	4fa6      	ldr	r7, [pc, #664]	; (8009410 <_dtoa_r+0x648>)
 8009178:	f006 020f 	and.w	r2, r6, #15
 800917c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009188:	f7f7 fa36 	bl	80005f8 <__aeabi_dmul>
 800918c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009190:	1136      	asrs	r6, r6, #4
 8009192:	2300      	movs	r3, #0
 8009194:	2502      	movs	r5, #2
 8009196:	2e00      	cmp	r6, #0
 8009198:	f040 8085 	bne.w	80092a6 <_dtoa_r+0x4de>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1d2      	bne.n	8009146 <_dtoa_r+0x37e>
 80091a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 808c 	beq.w	80092c0 <_dtoa_r+0x4f8>
 80091a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091ac:	4b99      	ldr	r3, [pc, #612]	; (8009414 <_dtoa_r+0x64c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	4630      	mov	r0, r6
 80091b2:	4639      	mov	r1, r7
 80091b4:	f7f7 fc92 	bl	8000adc <__aeabi_dcmplt>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	f000 8081 	beq.w	80092c0 <_dtoa_r+0x4f8>
 80091be:	9b01      	ldr	r3, [sp, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d07d      	beq.n	80092c0 <_dtoa_r+0x4f8>
 80091c4:	f1b9 0f00 	cmp.w	r9, #0
 80091c8:	dd3c      	ble.n	8009244 <_dtoa_r+0x47c>
 80091ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091ce:	9307      	str	r3, [sp, #28]
 80091d0:	2200      	movs	r2, #0
 80091d2:	4b91      	ldr	r3, [pc, #580]	; (8009418 <_dtoa_r+0x650>)
 80091d4:	4630      	mov	r0, r6
 80091d6:	4639      	mov	r1, r7
 80091d8:	f7f7 fa0e 	bl	80005f8 <__aeabi_dmul>
 80091dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091e0:	3501      	adds	r5, #1
 80091e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80091e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7f7 f99a 	bl	8000524 <__aeabi_i2d>
 80091f0:	4632      	mov	r2, r6
 80091f2:	463b      	mov	r3, r7
 80091f4:	f7f7 fa00 	bl	80005f8 <__aeabi_dmul>
 80091f8:	4b88      	ldr	r3, [pc, #544]	; (800941c <_dtoa_r+0x654>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	f7f7 f846 	bl	800028c <__adddf3>
 8009200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800920c:	2b00      	cmp	r3, #0
 800920e:	d15c      	bne.n	80092ca <_dtoa_r+0x502>
 8009210:	4b83      	ldr	r3, [pc, #524]	; (8009420 <_dtoa_r+0x658>)
 8009212:	2200      	movs	r2, #0
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 f836 	bl	8000288 <__aeabi_dsub>
 800921c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
 8009224:	f7f7 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 8009228:	2800      	cmp	r0, #0
 800922a:	f040 8296 	bne.w	800975a <_dtoa_r+0x992>
 800922e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009232:	4630      	mov	r0, r6
 8009234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800923e:	2800      	cmp	r0, #0
 8009240:	f040 8288 	bne.w	8009754 <_dtoa_r+0x98c>
 8009244:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009248:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800924c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800924e:	2b00      	cmp	r3, #0
 8009250:	f2c0 8158 	blt.w	8009504 <_dtoa_r+0x73c>
 8009254:	f1ba 0f0e 	cmp.w	sl, #14
 8009258:	f300 8154 	bgt.w	8009504 <_dtoa_r+0x73c>
 800925c:	4b6b      	ldr	r3, [pc, #428]	; (800940c <_dtoa_r+0x644>)
 800925e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009262:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	2b00      	cmp	r3, #0
 800926a:	f280 80e3 	bge.w	8009434 <_dtoa_r+0x66c>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f300 80df 	bgt.w	8009434 <_dtoa_r+0x66c>
 8009276:	f040 826d 	bne.w	8009754 <_dtoa_r+0x98c>
 800927a:	4b69      	ldr	r3, [pc, #420]	; (8009420 <_dtoa_r+0x658>)
 800927c:	2200      	movs	r2, #0
 800927e:	4640      	mov	r0, r8
 8009280:	4649      	mov	r1, r9
 8009282:	f7f7 f9b9 	bl	80005f8 <__aeabi_dmul>
 8009286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800928a:	f7f7 fc3b 	bl	8000b04 <__aeabi_dcmpge>
 800928e:	9e01      	ldr	r6, [sp, #4]
 8009290:	4637      	mov	r7, r6
 8009292:	2800      	cmp	r0, #0
 8009294:	f040 8243 	bne.w	800971e <_dtoa_r+0x956>
 8009298:	9d00      	ldr	r5, [sp, #0]
 800929a:	2331      	movs	r3, #49	; 0x31
 800929c:	f805 3b01 	strb.w	r3, [r5], #1
 80092a0:	f10a 0a01 	add.w	sl, sl, #1
 80092a4:	e23f      	b.n	8009726 <_dtoa_r+0x95e>
 80092a6:	07f2      	lsls	r2, r6, #31
 80092a8:	d505      	bpl.n	80092b6 <_dtoa_r+0x4ee>
 80092aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ae:	f7f7 f9a3 	bl	80005f8 <__aeabi_dmul>
 80092b2:	3501      	adds	r5, #1
 80092b4:	2301      	movs	r3, #1
 80092b6:	1076      	asrs	r6, r6, #1
 80092b8:	3708      	adds	r7, #8
 80092ba:	e76c      	b.n	8009196 <_dtoa_r+0x3ce>
 80092bc:	2502      	movs	r5, #2
 80092be:	e76f      	b.n	80091a0 <_dtoa_r+0x3d8>
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80092c6:	930c      	str	r3, [sp, #48]	; 0x30
 80092c8:	e78d      	b.n	80091e6 <_dtoa_r+0x41e>
 80092ca:	9900      	ldr	r1, [sp, #0]
 80092cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092d0:	4b4e      	ldr	r3, [pc, #312]	; (800940c <_dtoa_r+0x644>)
 80092d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092d6:	4401      	add	r1, r0
 80092d8:	9102      	str	r1, [sp, #8]
 80092da:	9908      	ldr	r1, [sp, #32]
 80092dc:	eeb0 8a47 	vmov.f32	s16, s14
 80092e0:	eef0 8a67 	vmov.f32	s17, s15
 80092e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d045      	beq.n	800937c <_dtoa_r+0x5b4>
 80092f0:	494c      	ldr	r1, [pc, #304]	; (8009424 <_dtoa_r+0x65c>)
 80092f2:	2000      	movs	r0, #0
 80092f4:	f7f7 faaa 	bl	800084c <__aeabi_ddiv>
 80092f8:	ec53 2b18 	vmov	r2, r3, d8
 80092fc:	f7f6 ffc4 	bl	8000288 <__aeabi_dsub>
 8009300:	9d00      	ldr	r5, [sp, #0]
 8009302:	ec41 0b18 	vmov	d8, r0, r1
 8009306:	4639      	mov	r1, r7
 8009308:	4630      	mov	r0, r6
 800930a:	f7f7 fc25 	bl	8000b58 <__aeabi_d2iz>
 800930e:	900c      	str	r0, [sp, #48]	; 0x30
 8009310:	f7f7 f908 	bl	8000524 <__aeabi_i2d>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f6 ffb4 	bl	8000288 <__aeabi_dsub>
 8009320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009322:	3330      	adds	r3, #48	; 0x30
 8009324:	f805 3b01 	strb.w	r3, [r5], #1
 8009328:	ec53 2b18 	vmov	r2, r3, d8
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	f7f7 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	d165      	bne.n	8009404 <_dtoa_r+0x63c>
 8009338:	4632      	mov	r2, r6
 800933a:	463b      	mov	r3, r7
 800933c:	4935      	ldr	r1, [pc, #212]	; (8009414 <_dtoa_r+0x64c>)
 800933e:	2000      	movs	r0, #0
 8009340:	f7f6 ffa2 	bl	8000288 <__aeabi_dsub>
 8009344:	ec53 2b18 	vmov	r2, r3, d8
 8009348:	f7f7 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	f040 80b9 	bne.w	80094c4 <_dtoa_r+0x6fc>
 8009352:	9b02      	ldr	r3, [sp, #8]
 8009354:	429d      	cmp	r5, r3
 8009356:	f43f af75 	beq.w	8009244 <_dtoa_r+0x47c>
 800935a:	4b2f      	ldr	r3, [pc, #188]	; (8009418 <_dtoa_r+0x650>)
 800935c:	ec51 0b18 	vmov	r0, r1, d8
 8009360:	2200      	movs	r2, #0
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	4b2c      	ldr	r3, [pc, #176]	; (8009418 <_dtoa_r+0x650>)
 8009368:	ec41 0b18 	vmov	d8, r0, r1
 800936c:	2200      	movs	r2, #0
 800936e:	4630      	mov	r0, r6
 8009370:	4639      	mov	r1, r7
 8009372:	f7f7 f941 	bl	80005f8 <__aeabi_dmul>
 8009376:	4606      	mov	r6, r0
 8009378:	460f      	mov	r7, r1
 800937a:	e7c4      	b.n	8009306 <_dtoa_r+0x53e>
 800937c:	ec51 0b17 	vmov	r0, r1, d7
 8009380:	f7f7 f93a 	bl	80005f8 <__aeabi_dmul>
 8009384:	9b02      	ldr	r3, [sp, #8]
 8009386:	9d00      	ldr	r5, [sp, #0]
 8009388:	930c      	str	r3, [sp, #48]	; 0x30
 800938a:	ec41 0b18 	vmov	d8, r0, r1
 800938e:	4639      	mov	r1, r7
 8009390:	4630      	mov	r0, r6
 8009392:	f7f7 fbe1 	bl	8000b58 <__aeabi_d2iz>
 8009396:	9011      	str	r0, [sp, #68]	; 0x44
 8009398:	f7f7 f8c4 	bl	8000524 <__aeabi_i2d>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4630      	mov	r0, r6
 80093a2:	4639      	mov	r1, r7
 80093a4:	f7f6 ff70 	bl	8000288 <__aeabi_dsub>
 80093a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093aa:	3330      	adds	r3, #48	; 0x30
 80093ac:	f805 3b01 	strb.w	r3, [r5], #1
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	429d      	cmp	r5, r3
 80093b4:	4606      	mov	r6, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	d134      	bne.n	8009428 <_dtoa_r+0x660>
 80093be:	4b19      	ldr	r3, [pc, #100]	; (8009424 <_dtoa_r+0x65c>)
 80093c0:	ec51 0b18 	vmov	r0, r1, d8
 80093c4:	f7f6 ff62 	bl	800028c <__adddf3>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4630      	mov	r0, r6
 80093ce:	4639      	mov	r1, r7
 80093d0:	f7f7 fba2 	bl	8000b18 <__aeabi_dcmpgt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d175      	bne.n	80094c4 <_dtoa_r+0x6fc>
 80093d8:	ec53 2b18 	vmov	r2, r3, d8
 80093dc:	4911      	ldr	r1, [pc, #68]	; (8009424 <_dtoa_r+0x65c>)
 80093de:	2000      	movs	r0, #0
 80093e0:	f7f6 ff52 	bl	8000288 <__aeabi_dsub>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4630      	mov	r0, r6
 80093ea:	4639      	mov	r1, r7
 80093ec:	f7f7 fb76 	bl	8000adc <__aeabi_dcmplt>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	f43f af27 	beq.w	8009244 <_dtoa_r+0x47c>
 80093f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093f8:	1e6b      	subs	r3, r5, #1
 80093fa:	930c      	str	r3, [sp, #48]	; 0x30
 80093fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009400:	2b30      	cmp	r3, #48	; 0x30
 8009402:	d0f8      	beq.n	80093f6 <_dtoa_r+0x62e>
 8009404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009408:	e04a      	b.n	80094a0 <_dtoa_r+0x6d8>
 800940a:	bf00      	nop
 800940c:	0800b3b0 	.word	0x0800b3b0
 8009410:	0800b388 	.word	0x0800b388
 8009414:	3ff00000 	.word	0x3ff00000
 8009418:	40240000 	.word	0x40240000
 800941c:	401c0000 	.word	0x401c0000
 8009420:	40140000 	.word	0x40140000
 8009424:	3fe00000 	.word	0x3fe00000
 8009428:	4baf      	ldr	r3, [pc, #700]	; (80096e8 <_dtoa_r+0x920>)
 800942a:	f7f7 f8e5 	bl	80005f8 <__aeabi_dmul>
 800942e:	4606      	mov	r6, r0
 8009430:	460f      	mov	r7, r1
 8009432:	e7ac      	b.n	800938e <_dtoa_r+0x5c6>
 8009434:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009438:	9d00      	ldr	r5, [sp, #0]
 800943a:	4642      	mov	r2, r8
 800943c:	464b      	mov	r3, r9
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f7 fa03 	bl	800084c <__aeabi_ddiv>
 8009446:	f7f7 fb87 	bl	8000b58 <__aeabi_d2iz>
 800944a:	9002      	str	r0, [sp, #8]
 800944c:	f7f7 f86a 	bl	8000524 <__aeabi_i2d>
 8009450:	4642      	mov	r2, r8
 8009452:	464b      	mov	r3, r9
 8009454:	f7f7 f8d0 	bl	80005f8 <__aeabi_dmul>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4630      	mov	r0, r6
 800945e:	4639      	mov	r1, r7
 8009460:	f7f6 ff12 	bl	8000288 <__aeabi_dsub>
 8009464:	9e02      	ldr	r6, [sp, #8]
 8009466:	9f01      	ldr	r7, [sp, #4]
 8009468:	3630      	adds	r6, #48	; 0x30
 800946a:	f805 6b01 	strb.w	r6, [r5], #1
 800946e:	9e00      	ldr	r6, [sp, #0]
 8009470:	1bae      	subs	r6, r5, r6
 8009472:	42b7      	cmp	r7, r6
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	d137      	bne.n	80094ea <_dtoa_r+0x722>
 800947a:	f7f6 ff07 	bl	800028c <__adddf3>
 800947e:	4642      	mov	r2, r8
 8009480:	464b      	mov	r3, r9
 8009482:	4606      	mov	r6, r0
 8009484:	460f      	mov	r7, r1
 8009486:	f7f7 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800948a:	b9c8      	cbnz	r0, 80094c0 <_dtoa_r+0x6f8>
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	f7f7 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009498:	b110      	cbz	r0, 80094a0 <_dtoa_r+0x6d8>
 800949a:	9b02      	ldr	r3, [sp, #8]
 800949c:	07d9      	lsls	r1, r3, #31
 800949e:	d40f      	bmi.n	80094c0 <_dtoa_r+0x6f8>
 80094a0:	4620      	mov	r0, r4
 80094a2:	4659      	mov	r1, fp
 80094a4:	f000 fbc2 	bl	8009c2c <_Bfree>
 80094a8:	2300      	movs	r3, #0
 80094aa:	702b      	strb	r3, [r5, #0]
 80094ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ae:	f10a 0001 	add.w	r0, sl, #1
 80094b2:	6018      	str	r0, [r3, #0]
 80094b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f43f acd8 	beq.w	8008e6c <_dtoa_r+0xa4>
 80094bc:	601d      	str	r5, [r3, #0]
 80094be:	e4d5      	b.n	8008e6c <_dtoa_r+0xa4>
 80094c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80094c4:	462b      	mov	r3, r5
 80094c6:	461d      	mov	r5, r3
 80094c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094cc:	2a39      	cmp	r2, #57	; 0x39
 80094ce:	d108      	bne.n	80094e2 <_dtoa_r+0x71a>
 80094d0:	9a00      	ldr	r2, [sp, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d1f7      	bne.n	80094c6 <_dtoa_r+0x6fe>
 80094d6:	9a07      	ldr	r2, [sp, #28]
 80094d8:	9900      	ldr	r1, [sp, #0]
 80094da:	3201      	adds	r2, #1
 80094dc:	9207      	str	r2, [sp, #28]
 80094de:	2230      	movs	r2, #48	; 0x30
 80094e0:	700a      	strb	r2, [r1, #0]
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	3201      	adds	r2, #1
 80094e6:	701a      	strb	r2, [r3, #0]
 80094e8:	e78c      	b.n	8009404 <_dtoa_r+0x63c>
 80094ea:	4b7f      	ldr	r3, [pc, #508]	; (80096e8 <_dtoa_r+0x920>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	f7f7 f883 	bl	80005f8 <__aeabi_dmul>
 80094f2:	2200      	movs	r2, #0
 80094f4:	2300      	movs	r3, #0
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	f7f7 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d09b      	beq.n	800943a <_dtoa_r+0x672>
 8009502:	e7cd      	b.n	80094a0 <_dtoa_r+0x6d8>
 8009504:	9a08      	ldr	r2, [sp, #32]
 8009506:	2a00      	cmp	r2, #0
 8009508:	f000 80c4 	beq.w	8009694 <_dtoa_r+0x8cc>
 800950c:	9a05      	ldr	r2, [sp, #20]
 800950e:	2a01      	cmp	r2, #1
 8009510:	f300 80a8 	bgt.w	8009664 <_dtoa_r+0x89c>
 8009514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009516:	2a00      	cmp	r2, #0
 8009518:	f000 80a0 	beq.w	800965c <_dtoa_r+0x894>
 800951c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009520:	9e06      	ldr	r6, [sp, #24]
 8009522:	4645      	mov	r5, r8
 8009524:	9a04      	ldr	r2, [sp, #16]
 8009526:	2101      	movs	r1, #1
 8009528:	441a      	add	r2, r3
 800952a:	4620      	mov	r0, r4
 800952c:	4498      	add	r8, r3
 800952e:	9204      	str	r2, [sp, #16]
 8009530:	f000 fc38 	bl	8009da4 <__i2b>
 8009534:	4607      	mov	r7, r0
 8009536:	2d00      	cmp	r5, #0
 8009538:	dd0b      	ble.n	8009552 <_dtoa_r+0x78a>
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	dd08      	ble.n	8009552 <_dtoa_r+0x78a>
 8009540:	42ab      	cmp	r3, r5
 8009542:	9a04      	ldr	r2, [sp, #16]
 8009544:	bfa8      	it	ge
 8009546:	462b      	movge	r3, r5
 8009548:	eba8 0803 	sub.w	r8, r8, r3
 800954c:	1aed      	subs	r5, r5, r3
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	b1fb      	cbz	r3, 8009596 <_dtoa_r+0x7ce>
 8009556:	9b08      	ldr	r3, [sp, #32]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 809f 	beq.w	800969c <_dtoa_r+0x8d4>
 800955e:	2e00      	cmp	r6, #0
 8009560:	dd11      	ble.n	8009586 <_dtoa_r+0x7be>
 8009562:	4639      	mov	r1, r7
 8009564:	4632      	mov	r2, r6
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fcd8 	bl	8009f1c <__pow5mult>
 800956c:	465a      	mov	r2, fp
 800956e:	4601      	mov	r1, r0
 8009570:	4607      	mov	r7, r0
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fc2c 	bl	8009dd0 <__multiply>
 8009578:	4659      	mov	r1, fp
 800957a:	9007      	str	r0, [sp, #28]
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fb55 	bl	8009c2c <_Bfree>
 8009582:	9b07      	ldr	r3, [sp, #28]
 8009584:	469b      	mov	fp, r3
 8009586:	9b06      	ldr	r3, [sp, #24]
 8009588:	1b9a      	subs	r2, r3, r6
 800958a:	d004      	beq.n	8009596 <_dtoa_r+0x7ce>
 800958c:	4659      	mov	r1, fp
 800958e:	4620      	mov	r0, r4
 8009590:	f000 fcc4 	bl	8009f1c <__pow5mult>
 8009594:	4683      	mov	fp, r0
 8009596:	2101      	movs	r1, #1
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fc03 	bl	8009da4 <__i2b>
 800959e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	4606      	mov	r6, r0
 80095a4:	dd7c      	ble.n	80096a0 <_dtoa_r+0x8d8>
 80095a6:	461a      	mov	r2, r3
 80095a8:	4601      	mov	r1, r0
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 fcb6 	bl	8009f1c <__pow5mult>
 80095b0:	9b05      	ldr	r3, [sp, #20]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	4606      	mov	r6, r0
 80095b6:	dd76      	ble.n	80096a6 <_dtoa_r+0x8de>
 80095b8:	2300      	movs	r3, #0
 80095ba:	9306      	str	r3, [sp, #24]
 80095bc:	6933      	ldr	r3, [r6, #16]
 80095be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095c2:	6918      	ldr	r0, [r3, #16]
 80095c4:	f000 fb9e 	bl	8009d04 <__hi0bits>
 80095c8:	f1c0 0020 	rsb	r0, r0, #32
 80095cc:	9b04      	ldr	r3, [sp, #16]
 80095ce:	4418      	add	r0, r3
 80095d0:	f010 001f 	ands.w	r0, r0, #31
 80095d4:	f000 8086 	beq.w	80096e4 <_dtoa_r+0x91c>
 80095d8:	f1c0 0320 	rsb	r3, r0, #32
 80095dc:	2b04      	cmp	r3, #4
 80095de:	dd7f      	ble.n	80096e0 <_dtoa_r+0x918>
 80095e0:	f1c0 001c 	rsb	r0, r0, #28
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	4403      	add	r3, r0
 80095e8:	4480      	add	r8, r0
 80095ea:	4405      	add	r5, r0
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	f1b8 0f00 	cmp.w	r8, #0
 80095f2:	dd05      	ble.n	8009600 <_dtoa_r+0x838>
 80095f4:	4659      	mov	r1, fp
 80095f6:	4642      	mov	r2, r8
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fce9 	bl	8009fd0 <__lshift>
 80095fe:	4683      	mov	fp, r0
 8009600:	9b04      	ldr	r3, [sp, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd05      	ble.n	8009612 <_dtoa_r+0x84a>
 8009606:	4631      	mov	r1, r6
 8009608:	461a      	mov	r2, r3
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fce0 	bl	8009fd0 <__lshift>
 8009610:	4606      	mov	r6, r0
 8009612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009614:	2b00      	cmp	r3, #0
 8009616:	d069      	beq.n	80096ec <_dtoa_r+0x924>
 8009618:	4631      	mov	r1, r6
 800961a:	4658      	mov	r0, fp
 800961c:	f000 fd44 	bl	800a0a8 <__mcmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	da63      	bge.n	80096ec <_dtoa_r+0x924>
 8009624:	2300      	movs	r3, #0
 8009626:	4659      	mov	r1, fp
 8009628:	220a      	movs	r2, #10
 800962a:	4620      	mov	r0, r4
 800962c:	f000 fb20 	bl	8009c70 <__multadd>
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009636:	4683      	mov	fp, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 818f 	beq.w	800995c <_dtoa_r+0xb94>
 800963e:	4639      	mov	r1, r7
 8009640:	2300      	movs	r3, #0
 8009642:	220a      	movs	r2, #10
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fb13 	bl	8009c70 <__multadd>
 800964a:	f1b9 0f00 	cmp.w	r9, #0
 800964e:	4607      	mov	r7, r0
 8009650:	f300 808e 	bgt.w	8009770 <_dtoa_r+0x9a8>
 8009654:	9b05      	ldr	r3, [sp, #20]
 8009656:	2b02      	cmp	r3, #2
 8009658:	dc50      	bgt.n	80096fc <_dtoa_r+0x934>
 800965a:	e089      	b.n	8009770 <_dtoa_r+0x9a8>
 800965c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800965e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009662:	e75d      	b.n	8009520 <_dtoa_r+0x758>
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	1e5e      	subs	r6, r3, #1
 8009668:	9b06      	ldr	r3, [sp, #24]
 800966a:	42b3      	cmp	r3, r6
 800966c:	bfbf      	itttt	lt
 800966e:	9b06      	ldrlt	r3, [sp, #24]
 8009670:	9606      	strlt	r6, [sp, #24]
 8009672:	1af2      	sublt	r2, r6, r3
 8009674:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009676:	bfb6      	itet	lt
 8009678:	189b      	addlt	r3, r3, r2
 800967a:	1b9e      	subge	r6, r3, r6
 800967c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	bfb8      	it	lt
 8009682:	2600      	movlt	r6, #0
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfb5      	itete	lt
 8009688:	eba8 0503 	sublt.w	r5, r8, r3
 800968c:	9b01      	ldrge	r3, [sp, #4]
 800968e:	2300      	movlt	r3, #0
 8009690:	4645      	movge	r5, r8
 8009692:	e747      	b.n	8009524 <_dtoa_r+0x75c>
 8009694:	9e06      	ldr	r6, [sp, #24]
 8009696:	9f08      	ldr	r7, [sp, #32]
 8009698:	4645      	mov	r5, r8
 800969a:	e74c      	b.n	8009536 <_dtoa_r+0x76e>
 800969c:	9a06      	ldr	r2, [sp, #24]
 800969e:	e775      	b.n	800958c <_dtoa_r+0x7c4>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	dc18      	bgt.n	80096d8 <_dtoa_r+0x910>
 80096a6:	9b02      	ldr	r3, [sp, #8]
 80096a8:	b9b3      	cbnz	r3, 80096d8 <_dtoa_r+0x910>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b0:	b9a3      	cbnz	r3, 80096dc <_dtoa_r+0x914>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096b8:	0d1b      	lsrs	r3, r3, #20
 80096ba:	051b      	lsls	r3, r3, #20
 80096bc:	b12b      	cbz	r3, 80096ca <_dtoa_r+0x902>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	3301      	adds	r3, #1
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	f108 0801 	add.w	r8, r8, #1
 80096c8:	2301      	movs	r3, #1
 80096ca:	9306      	str	r3, [sp, #24]
 80096cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f47f af74 	bne.w	80095bc <_dtoa_r+0x7f4>
 80096d4:	2001      	movs	r0, #1
 80096d6:	e779      	b.n	80095cc <_dtoa_r+0x804>
 80096d8:	2300      	movs	r3, #0
 80096da:	e7f6      	b.n	80096ca <_dtoa_r+0x902>
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	e7f4      	b.n	80096ca <_dtoa_r+0x902>
 80096e0:	d085      	beq.n	80095ee <_dtoa_r+0x826>
 80096e2:	4618      	mov	r0, r3
 80096e4:	301c      	adds	r0, #28
 80096e6:	e77d      	b.n	80095e4 <_dtoa_r+0x81c>
 80096e8:	40240000 	.word	0x40240000
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dc38      	bgt.n	8009764 <_dtoa_r+0x99c>
 80096f2:	9b05      	ldr	r3, [sp, #20]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	dd35      	ble.n	8009764 <_dtoa_r+0x99c>
 80096f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80096fc:	f1b9 0f00 	cmp.w	r9, #0
 8009700:	d10d      	bne.n	800971e <_dtoa_r+0x956>
 8009702:	4631      	mov	r1, r6
 8009704:	464b      	mov	r3, r9
 8009706:	2205      	movs	r2, #5
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fab1 	bl	8009c70 <__multadd>
 800970e:	4601      	mov	r1, r0
 8009710:	4606      	mov	r6, r0
 8009712:	4658      	mov	r0, fp
 8009714:	f000 fcc8 	bl	800a0a8 <__mcmp>
 8009718:	2800      	cmp	r0, #0
 800971a:	f73f adbd 	bgt.w	8009298 <_dtoa_r+0x4d0>
 800971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009720:	9d00      	ldr	r5, [sp, #0]
 8009722:	ea6f 0a03 	mvn.w	sl, r3
 8009726:	f04f 0800 	mov.w	r8, #0
 800972a:	4631      	mov	r1, r6
 800972c:	4620      	mov	r0, r4
 800972e:	f000 fa7d 	bl	8009c2c <_Bfree>
 8009732:	2f00      	cmp	r7, #0
 8009734:	f43f aeb4 	beq.w	80094a0 <_dtoa_r+0x6d8>
 8009738:	f1b8 0f00 	cmp.w	r8, #0
 800973c:	d005      	beq.n	800974a <_dtoa_r+0x982>
 800973e:	45b8      	cmp	r8, r7
 8009740:	d003      	beq.n	800974a <_dtoa_r+0x982>
 8009742:	4641      	mov	r1, r8
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fa71 	bl	8009c2c <_Bfree>
 800974a:	4639      	mov	r1, r7
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fa6d 	bl	8009c2c <_Bfree>
 8009752:	e6a5      	b.n	80094a0 <_dtoa_r+0x6d8>
 8009754:	2600      	movs	r6, #0
 8009756:	4637      	mov	r7, r6
 8009758:	e7e1      	b.n	800971e <_dtoa_r+0x956>
 800975a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800975c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009760:	4637      	mov	r7, r6
 8009762:	e599      	b.n	8009298 <_dtoa_r+0x4d0>
 8009764:	9b08      	ldr	r3, [sp, #32]
 8009766:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80fd 	beq.w	800996a <_dtoa_r+0xba2>
 8009770:	2d00      	cmp	r5, #0
 8009772:	dd05      	ble.n	8009780 <_dtoa_r+0x9b8>
 8009774:	4639      	mov	r1, r7
 8009776:	462a      	mov	r2, r5
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fc29 	bl	8009fd0 <__lshift>
 800977e:	4607      	mov	r7, r0
 8009780:	9b06      	ldr	r3, [sp, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d05c      	beq.n	8009840 <_dtoa_r+0xa78>
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fa0f 	bl	8009bac <_Balloc>
 800978e:	4605      	mov	r5, r0
 8009790:	b928      	cbnz	r0, 800979e <_dtoa_r+0x9d6>
 8009792:	4b80      	ldr	r3, [pc, #512]	; (8009994 <_dtoa_r+0xbcc>)
 8009794:	4602      	mov	r2, r0
 8009796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800979a:	f7ff bb2e 	b.w	8008dfa <_dtoa_r+0x32>
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	0092      	lsls	r2, r2, #2
 80097a4:	f107 010c 	add.w	r1, r7, #12
 80097a8:	300c      	adds	r0, #12
 80097aa:	f7fe fdc9 	bl	8008340 <memcpy>
 80097ae:	2201      	movs	r2, #1
 80097b0:	4629      	mov	r1, r5
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fc0c 	bl	8009fd0 <__lshift>
 80097b8:	9b00      	ldr	r3, [sp, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	444b      	add	r3, r9
 80097c2:	9307      	str	r3, [sp, #28]
 80097c4:	9b02      	ldr	r3, [sp, #8]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	46b8      	mov	r8, r7
 80097cc:	9306      	str	r3, [sp, #24]
 80097ce:	4607      	mov	r7, r0
 80097d0:	9b01      	ldr	r3, [sp, #4]
 80097d2:	4631      	mov	r1, r6
 80097d4:	3b01      	subs	r3, #1
 80097d6:	4658      	mov	r0, fp
 80097d8:	9302      	str	r3, [sp, #8]
 80097da:	f7ff fa69 	bl	8008cb0 <quorem>
 80097de:	4603      	mov	r3, r0
 80097e0:	3330      	adds	r3, #48	; 0x30
 80097e2:	9004      	str	r0, [sp, #16]
 80097e4:	4641      	mov	r1, r8
 80097e6:	4658      	mov	r0, fp
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	f000 fc5d 	bl	800a0a8 <__mcmp>
 80097ee:	463a      	mov	r2, r7
 80097f0:	4681      	mov	r9, r0
 80097f2:	4631      	mov	r1, r6
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 fc73 	bl	800a0e0 <__mdiff>
 80097fa:	68c2      	ldr	r2, [r0, #12]
 80097fc:	9b08      	ldr	r3, [sp, #32]
 80097fe:	4605      	mov	r5, r0
 8009800:	bb02      	cbnz	r2, 8009844 <_dtoa_r+0xa7c>
 8009802:	4601      	mov	r1, r0
 8009804:	4658      	mov	r0, fp
 8009806:	f000 fc4f 	bl	800a0a8 <__mcmp>
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	4602      	mov	r2, r0
 800980e:	4629      	mov	r1, r5
 8009810:	4620      	mov	r0, r4
 8009812:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009816:	f000 fa09 	bl	8009c2c <_Bfree>
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800981e:	9d01      	ldr	r5, [sp, #4]
 8009820:	ea43 0102 	orr.w	r1, r3, r2
 8009824:	9b06      	ldr	r3, [sp, #24]
 8009826:	430b      	orrs	r3, r1
 8009828:	9b08      	ldr	r3, [sp, #32]
 800982a:	d10d      	bne.n	8009848 <_dtoa_r+0xa80>
 800982c:	2b39      	cmp	r3, #57	; 0x39
 800982e:	d029      	beq.n	8009884 <_dtoa_r+0xabc>
 8009830:	f1b9 0f00 	cmp.w	r9, #0
 8009834:	dd01      	ble.n	800983a <_dtoa_r+0xa72>
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	3331      	adds	r3, #49	; 0x31
 800983a:	9a02      	ldr	r2, [sp, #8]
 800983c:	7013      	strb	r3, [r2, #0]
 800983e:	e774      	b.n	800972a <_dtoa_r+0x962>
 8009840:	4638      	mov	r0, r7
 8009842:	e7b9      	b.n	80097b8 <_dtoa_r+0x9f0>
 8009844:	2201      	movs	r2, #1
 8009846:	e7e2      	b.n	800980e <_dtoa_r+0xa46>
 8009848:	f1b9 0f00 	cmp.w	r9, #0
 800984c:	db06      	blt.n	800985c <_dtoa_r+0xa94>
 800984e:	9905      	ldr	r1, [sp, #20]
 8009850:	ea41 0909 	orr.w	r9, r1, r9
 8009854:	9906      	ldr	r1, [sp, #24]
 8009856:	ea59 0101 	orrs.w	r1, r9, r1
 800985a:	d120      	bne.n	800989e <_dtoa_r+0xad6>
 800985c:	2a00      	cmp	r2, #0
 800985e:	ddec      	ble.n	800983a <_dtoa_r+0xa72>
 8009860:	4659      	mov	r1, fp
 8009862:	2201      	movs	r2, #1
 8009864:	4620      	mov	r0, r4
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	f000 fbb2 	bl	8009fd0 <__lshift>
 800986c:	4631      	mov	r1, r6
 800986e:	4683      	mov	fp, r0
 8009870:	f000 fc1a 	bl	800a0a8 <__mcmp>
 8009874:	2800      	cmp	r0, #0
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	dc02      	bgt.n	8009880 <_dtoa_r+0xab8>
 800987a:	d1de      	bne.n	800983a <_dtoa_r+0xa72>
 800987c:	07da      	lsls	r2, r3, #31
 800987e:	d5dc      	bpl.n	800983a <_dtoa_r+0xa72>
 8009880:	2b39      	cmp	r3, #57	; 0x39
 8009882:	d1d8      	bne.n	8009836 <_dtoa_r+0xa6e>
 8009884:	9a02      	ldr	r2, [sp, #8]
 8009886:	2339      	movs	r3, #57	; 0x39
 8009888:	7013      	strb	r3, [r2, #0]
 800988a:	462b      	mov	r3, r5
 800988c:	461d      	mov	r5, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009894:	2a39      	cmp	r2, #57	; 0x39
 8009896:	d050      	beq.n	800993a <_dtoa_r+0xb72>
 8009898:	3201      	adds	r2, #1
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e745      	b.n	800972a <_dtoa_r+0x962>
 800989e:	2a00      	cmp	r2, #0
 80098a0:	dd03      	ble.n	80098aa <_dtoa_r+0xae2>
 80098a2:	2b39      	cmp	r3, #57	; 0x39
 80098a4:	d0ee      	beq.n	8009884 <_dtoa_r+0xabc>
 80098a6:	3301      	adds	r3, #1
 80098a8:	e7c7      	b.n	800983a <_dtoa_r+0xa72>
 80098aa:	9a01      	ldr	r2, [sp, #4]
 80098ac:	9907      	ldr	r1, [sp, #28]
 80098ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098b2:	428a      	cmp	r2, r1
 80098b4:	d02a      	beq.n	800990c <_dtoa_r+0xb44>
 80098b6:	4659      	mov	r1, fp
 80098b8:	2300      	movs	r3, #0
 80098ba:	220a      	movs	r2, #10
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 f9d7 	bl	8009c70 <__multadd>
 80098c2:	45b8      	cmp	r8, r7
 80098c4:	4683      	mov	fp, r0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	f04f 020a 	mov.w	r2, #10
 80098ce:	4641      	mov	r1, r8
 80098d0:	4620      	mov	r0, r4
 80098d2:	d107      	bne.n	80098e4 <_dtoa_r+0xb1c>
 80098d4:	f000 f9cc 	bl	8009c70 <__multadd>
 80098d8:	4680      	mov	r8, r0
 80098da:	4607      	mov	r7, r0
 80098dc:	9b01      	ldr	r3, [sp, #4]
 80098de:	3301      	adds	r3, #1
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	e775      	b.n	80097d0 <_dtoa_r+0xa08>
 80098e4:	f000 f9c4 	bl	8009c70 <__multadd>
 80098e8:	4639      	mov	r1, r7
 80098ea:	4680      	mov	r8, r0
 80098ec:	2300      	movs	r3, #0
 80098ee:	220a      	movs	r2, #10
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 f9bd 	bl	8009c70 <__multadd>
 80098f6:	4607      	mov	r7, r0
 80098f8:	e7f0      	b.n	80098dc <_dtoa_r+0xb14>
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	9a00      	ldr	r2, [sp, #0]
 8009900:	bfcc      	ite	gt
 8009902:	464d      	movgt	r5, r9
 8009904:	2501      	movle	r5, #1
 8009906:	4415      	add	r5, r2
 8009908:	f04f 0800 	mov.w	r8, #0
 800990c:	4659      	mov	r1, fp
 800990e:	2201      	movs	r2, #1
 8009910:	4620      	mov	r0, r4
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	f000 fb5c 	bl	8009fd0 <__lshift>
 8009918:	4631      	mov	r1, r6
 800991a:	4683      	mov	fp, r0
 800991c:	f000 fbc4 	bl	800a0a8 <__mcmp>
 8009920:	2800      	cmp	r0, #0
 8009922:	dcb2      	bgt.n	800988a <_dtoa_r+0xac2>
 8009924:	d102      	bne.n	800992c <_dtoa_r+0xb64>
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	07db      	lsls	r3, r3, #31
 800992a:	d4ae      	bmi.n	800988a <_dtoa_r+0xac2>
 800992c:	462b      	mov	r3, r5
 800992e:	461d      	mov	r5, r3
 8009930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009934:	2a30      	cmp	r2, #48	; 0x30
 8009936:	d0fa      	beq.n	800992e <_dtoa_r+0xb66>
 8009938:	e6f7      	b.n	800972a <_dtoa_r+0x962>
 800993a:	9a00      	ldr	r2, [sp, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d1a5      	bne.n	800988c <_dtoa_r+0xac4>
 8009940:	f10a 0a01 	add.w	sl, sl, #1
 8009944:	2331      	movs	r3, #49	; 0x31
 8009946:	e779      	b.n	800983c <_dtoa_r+0xa74>
 8009948:	4b13      	ldr	r3, [pc, #76]	; (8009998 <_dtoa_r+0xbd0>)
 800994a:	f7ff baaf 	b.w	8008eac <_dtoa_r+0xe4>
 800994e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009950:	2b00      	cmp	r3, #0
 8009952:	f47f aa86 	bne.w	8008e62 <_dtoa_r+0x9a>
 8009956:	4b11      	ldr	r3, [pc, #68]	; (800999c <_dtoa_r+0xbd4>)
 8009958:	f7ff baa8 	b.w	8008eac <_dtoa_r+0xe4>
 800995c:	f1b9 0f00 	cmp.w	r9, #0
 8009960:	dc03      	bgt.n	800996a <_dtoa_r+0xba2>
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	2b02      	cmp	r3, #2
 8009966:	f73f aec9 	bgt.w	80096fc <_dtoa_r+0x934>
 800996a:	9d00      	ldr	r5, [sp, #0]
 800996c:	4631      	mov	r1, r6
 800996e:	4658      	mov	r0, fp
 8009970:	f7ff f99e 	bl	8008cb0 <quorem>
 8009974:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009978:	f805 3b01 	strb.w	r3, [r5], #1
 800997c:	9a00      	ldr	r2, [sp, #0]
 800997e:	1aaa      	subs	r2, r5, r2
 8009980:	4591      	cmp	r9, r2
 8009982:	ddba      	ble.n	80098fa <_dtoa_r+0xb32>
 8009984:	4659      	mov	r1, fp
 8009986:	2300      	movs	r3, #0
 8009988:	220a      	movs	r2, #10
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f970 	bl	8009c70 <__multadd>
 8009990:	4683      	mov	fp, r0
 8009992:	e7eb      	b.n	800996c <_dtoa_r+0xba4>
 8009994:	0800b2b3 	.word	0x0800b2b3
 8009998:	0800b20c 	.word	0x0800b20c
 800999c:	0800b230 	.word	0x0800b230

080099a0 <std>:
 80099a0:	2300      	movs	r3, #0
 80099a2:	b510      	push	{r4, lr}
 80099a4:	4604      	mov	r4, r0
 80099a6:	e9c0 3300 	strd	r3, r3, [r0]
 80099aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ae:	6083      	str	r3, [r0, #8]
 80099b0:	8181      	strh	r1, [r0, #12]
 80099b2:	6643      	str	r3, [r0, #100]	; 0x64
 80099b4:	81c2      	strh	r2, [r0, #14]
 80099b6:	6183      	str	r3, [r0, #24]
 80099b8:	4619      	mov	r1, r3
 80099ba:	2208      	movs	r2, #8
 80099bc:	305c      	adds	r0, #92	; 0x5c
 80099be:	f7fe fccd 	bl	800835c <memset>
 80099c2:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <std+0x38>)
 80099c4:	6263      	str	r3, [r4, #36]	; 0x24
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <std+0x3c>)
 80099c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <std+0x40>)
 80099cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <std+0x44>)
 80099d0:	6224      	str	r4, [r4, #32]
 80099d2:	6323      	str	r3, [r4, #48]	; 0x30
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	bf00      	nop
 80099d8:	0800a9a9 	.word	0x0800a9a9
 80099dc:	0800a9cb 	.word	0x0800a9cb
 80099e0:	0800aa03 	.word	0x0800aa03
 80099e4:	0800aa27 	.word	0x0800aa27

080099e8 <_cleanup_r>:
 80099e8:	4901      	ldr	r1, [pc, #4]	; (80099f0 <_cleanup_r+0x8>)
 80099ea:	f000 b8af 	b.w	8009b4c <_fwalk_reent>
 80099ee:	bf00      	nop
 80099f0:	0800ad3d 	.word	0x0800ad3d

080099f4 <__sfmoreglue>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	1e4a      	subs	r2, r1, #1
 80099f8:	2568      	movs	r5, #104	; 0x68
 80099fa:	4355      	muls	r5, r2
 80099fc:	460e      	mov	r6, r1
 80099fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a02:	f000 fcb1 	bl	800a368 <_malloc_r>
 8009a06:	4604      	mov	r4, r0
 8009a08:	b140      	cbz	r0, 8009a1c <__sfmoreglue+0x28>
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	e9c0 1600 	strd	r1, r6, [r0]
 8009a10:	300c      	adds	r0, #12
 8009a12:	60a0      	str	r0, [r4, #8]
 8009a14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a18:	f7fe fca0 	bl	800835c <memset>
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}

08009a20 <__sfp_lock_acquire>:
 8009a20:	4801      	ldr	r0, [pc, #4]	; (8009a28 <__sfp_lock_acquire+0x8>)
 8009a22:	f000 b8b8 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 8009a26:	bf00      	nop
 8009a28:	20002088 	.word	0x20002088

08009a2c <__sfp_lock_release>:
 8009a2c:	4801      	ldr	r0, [pc, #4]	; (8009a34 <__sfp_lock_release+0x8>)
 8009a2e:	f000 b8b3 	b.w	8009b98 <__retarget_lock_release_recursive>
 8009a32:	bf00      	nop
 8009a34:	20002088 	.word	0x20002088

08009a38 <__sinit_lock_acquire>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__sinit_lock_acquire+0x8>)
 8009a3a:	f000 b8ac 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	20002083 	.word	0x20002083

08009a44 <__sinit_lock_release>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__sinit_lock_release+0x8>)
 8009a46:	f000 b8a7 	b.w	8009b98 <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20002083 	.word	0x20002083

08009a50 <__sinit>:
 8009a50:	b510      	push	{r4, lr}
 8009a52:	4604      	mov	r4, r0
 8009a54:	f7ff fff0 	bl	8009a38 <__sinit_lock_acquire>
 8009a58:	69a3      	ldr	r3, [r4, #24]
 8009a5a:	b11b      	cbz	r3, 8009a64 <__sinit+0x14>
 8009a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a60:	f7ff bff0 	b.w	8009a44 <__sinit_lock_release>
 8009a64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a68:	6523      	str	r3, [r4, #80]	; 0x50
 8009a6a:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <__sinit+0x68>)
 8009a6c:	4a13      	ldr	r2, [pc, #76]	; (8009abc <__sinit+0x6c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a72:	42a3      	cmp	r3, r4
 8009a74:	bf04      	itt	eq
 8009a76:	2301      	moveq	r3, #1
 8009a78:	61a3      	streq	r3, [r4, #24]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 f820 	bl	8009ac0 <__sfp>
 8009a80:	6060      	str	r0, [r4, #4]
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f81c 	bl	8009ac0 <__sfp>
 8009a88:	60a0      	str	r0, [r4, #8]
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 f818 	bl	8009ac0 <__sfp>
 8009a90:	2200      	movs	r2, #0
 8009a92:	60e0      	str	r0, [r4, #12]
 8009a94:	2104      	movs	r1, #4
 8009a96:	6860      	ldr	r0, [r4, #4]
 8009a98:	f7ff ff82 	bl	80099a0 <std>
 8009a9c:	68a0      	ldr	r0, [r4, #8]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	2109      	movs	r1, #9
 8009aa2:	f7ff ff7d 	bl	80099a0 <std>
 8009aa6:	68e0      	ldr	r0, [r4, #12]
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	2112      	movs	r1, #18
 8009aac:	f7ff ff78 	bl	80099a0 <std>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	61a3      	str	r3, [r4, #24]
 8009ab4:	e7d2      	b.n	8009a5c <__sinit+0xc>
 8009ab6:	bf00      	nop
 8009ab8:	0800b1f8 	.word	0x0800b1f8
 8009abc:	080099e9 	.word	0x080099e9

08009ac0 <__sfp>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	f7ff ffac 	bl	8009a20 <__sfp_lock_acquire>
 8009ac8:	4b1e      	ldr	r3, [pc, #120]	; (8009b44 <__sfp+0x84>)
 8009aca:	681e      	ldr	r6, [r3, #0]
 8009acc:	69b3      	ldr	r3, [r6, #24]
 8009ace:	b913      	cbnz	r3, 8009ad6 <__sfp+0x16>
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7ff ffbd 	bl	8009a50 <__sinit>
 8009ad6:	3648      	adds	r6, #72	; 0x48
 8009ad8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	d503      	bpl.n	8009ae8 <__sfp+0x28>
 8009ae0:	6833      	ldr	r3, [r6, #0]
 8009ae2:	b30b      	cbz	r3, 8009b28 <__sfp+0x68>
 8009ae4:	6836      	ldr	r6, [r6, #0]
 8009ae6:	e7f7      	b.n	8009ad8 <__sfp+0x18>
 8009ae8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009aec:	b9d5      	cbnz	r5, 8009b24 <__sfp+0x64>
 8009aee:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <__sfp+0x88>)
 8009af0:	60e3      	str	r3, [r4, #12]
 8009af2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009af6:	6665      	str	r5, [r4, #100]	; 0x64
 8009af8:	f000 f84c 	bl	8009b94 <__retarget_lock_init_recursive>
 8009afc:	f7ff ff96 	bl	8009a2c <__sfp_lock_release>
 8009b00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b08:	6025      	str	r5, [r4, #0]
 8009b0a:	61a5      	str	r5, [r4, #24]
 8009b0c:	2208      	movs	r2, #8
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b14:	f7fe fc22 	bl	800835c <memset>
 8009b18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b20:	4620      	mov	r0, r4
 8009b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b24:	3468      	adds	r4, #104	; 0x68
 8009b26:	e7d9      	b.n	8009adc <__sfp+0x1c>
 8009b28:	2104      	movs	r1, #4
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	f7ff ff62 	bl	80099f4 <__sfmoreglue>
 8009b30:	4604      	mov	r4, r0
 8009b32:	6030      	str	r0, [r6, #0]
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d1d5      	bne.n	8009ae4 <__sfp+0x24>
 8009b38:	f7ff ff78 	bl	8009a2c <__sfp_lock_release>
 8009b3c:	230c      	movs	r3, #12
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	e7ee      	b.n	8009b20 <__sfp+0x60>
 8009b42:	bf00      	nop
 8009b44:	0800b1f8 	.word	0x0800b1f8
 8009b48:	ffff0001 	.word	0xffff0001

08009b4c <_fwalk_reent>:
 8009b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b50:	4606      	mov	r6, r0
 8009b52:	4688      	mov	r8, r1
 8009b54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b58:	2700      	movs	r7, #0
 8009b5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b5e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b62:	d505      	bpl.n	8009b70 <_fwalk_reent+0x24>
 8009b64:	6824      	ldr	r4, [r4, #0]
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	d1f7      	bne.n	8009b5a <_fwalk_reent+0xe>
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b70:	89ab      	ldrh	r3, [r5, #12]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d907      	bls.n	8009b86 <_fwalk_reent+0x3a>
 8009b76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	d003      	beq.n	8009b86 <_fwalk_reent+0x3a>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4630      	mov	r0, r6
 8009b82:	47c0      	blx	r8
 8009b84:	4307      	orrs	r7, r0
 8009b86:	3568      	adds	r5, #104	; 0x68
 8009b88:	e7e9      	b.n	8009b5e <_fwalk_reent+0x12>
	...

08009b8c <_localeconv_r>:
 8009b8c:	4800      	ldr	r0, [pc, #0]	; (8009b90 <_localeconv_r+0x4>)
 8009b8e:	4770      	bx	lr
 8009b90:	20000268 	.word	0x20000268

08009b94 <__retarget_lock_init_recursive>:
 8009b94:	4770      	bx	lr

08009b96 <__retarget_lock_acquire_recursive>:
 8009b96:	4770      	bx	lr

08009b98 <__retarget_lock_release_recursive>:
 8009b98:	4770      	bx	lr
	...

08009b9c <malloc>:
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <malloc+0xc>)
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	f000 bbe1 	b.w	800a368 <_malloc_r>
 8009ba6:	bf00      	nop
 8009ba8:	20000114 	.word	0x20000114

08009bac <_Balloc>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	460d      	mov	r5, r1
 8009bb4:	b976      	cbnz	r6, 8009bd4 <_Balloc+0x28>
 8009bb6:	2010      	movs	r0, #16
 8009bb8:	f7ff fff0 	bl	8009b9c <malloc>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	6260      	str	r0, [r4, #36]	; 0x24
 8009bc0:	b920      	cbnz	r0, 8009bcc <_Balloc+0x20>
 8009bc2:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <_Balloc+0x78>)
 8009bc4:	4818      	ldr	r0, [pc, #96]	; (8009c28 <_Balloc+0x7c>)
 8009bc6:	2166      	movs	r1, #102	; 0x66
 8009bc8:	f001 f804 	bl	800abd4 <__assert_func>
 8009bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd0:	6006      	str	r6, [r0, #0]
 8009bd2:	60c6      	str	r6, [r0, #12]
 8009bd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bd6:	68f3      	ldr	r3, [r6, #12]
 8009bd8:	b183      	cbz	r3, 8009bfc <_Balloc+0x50>
 8009bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009be2:	b9b8      	cbnz	r0, 8009c14 <_Balloc+0x68>
 8009be4:	2101      	movs	r1, #1
 8009be6:	fa01 f605 	lsl.w	r6, r1, r5
 8009bea:	1d72      	adds	r2, r6, #5
 8009bec:	0092      	lsls	r2, r2, #2
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 fb5a 	bl	800a2a8 <_calloc_r>
 8009bf4:	b160      	cbz	r0, 8009c10 <_Balloc+0x64>
 8009bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bfa:	e00e      	b.n	8009c1a <_Balloc+0x6e>
 8009bfc:	2221      	movs	r2, #33	; 0x21
 8009bfe:	2104      	movs	r1, #4
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fb51 	bl	800a2a8 <_calloc_r>
 8009c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c08:	60f0      	str	r0, [r6, #12]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e4      	bne.n	8009bda <_Balloc+0x2e>
 8009c10:	2000      	movs	r0, #0
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	6802      	ldr	r2, [r0, #0]
 8009c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c20:	e7f7      	b.n	8009c12 <_Balloc+0x66>
 8009c22:	bf00      	nop
 8009c24:	0800b23d 	.word	0x0800b23d
 8009c28:	0800b324 	.word	0x0800b324

08009c2c <_Bfree>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c30:	4605      	mov	r5, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	b976      	cbnz	r6, 8009c54 <_Bfree+0x28>
 8009c36:	2010      	movs	r0, #16
 8009c38:	f7ff ffb0 	bl	8009b9c <malloc>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	6268      	str	r0, [r5, #36]	; 0x24
 8009c40:	b920      	cbnz	r0, 8009c4c <_Bfree+0x20>
 8009c42:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <_Bfree+0x3c>)
 8009c44:	4809      	ldr	r0, [pc, #36]	; (8009c6c <_Bfree+0x40>)
 8009c46:	218a      	movs	r1, #138	; 0x8a
 8009c48:	f000 ffc4 	bl	800abd4 <__assert_func>
 8009c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c50:	6006      	str	r6, [r0, #0]
 8009c52:	60c6      	str	r6, [r0, #12]
 8009c54:	b13c      	cbz	r4, 8009c66 <_Bfree+0x3a>
 8009c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c58:	6862      	ldr	r2, [r4, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c60:	6021      	str	r1, [r4, #0]
 8009c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c66:	bd70      	pop	{r4, r5, r6, pc}
 8009c68:	0800b23d 	.word	0x0800b23d
 8009c6c:	0800b324 	.word	0x0800b324

08009c70 <__multadd>:
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	690e      	ldr	r6, [r1, #16]
 8009c76:	4607      	mov	r7, r0
 8009c78:	4698      	mov	r8, r3
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	f101 0014 	add.w	r0, r1, #20
 8009c80:	2300      	movs	r3, #0
 8009c82:	6805      	ldr	r5, [r0, #0]
 8009c84:	b2a9      	uxth	r1, r5
 8009c86:	fb02 8101 	mla	r1, r2, r1, r8
 8009c8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009c8e:	0c2d      	lsrs	r5, r5, #16
 8009c90:	fb02 c505 	mla	r5, r2, r5, ip
 8009c94:	b289      	uxth	r1, r1
 8009c96:	3301      	adds	r3, #1
 8009c98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009c9c:	429e      	cmp	r6, r3
 8009c9e:	f840 1b04 	str.w	r1, [r0], #4
 8009ca2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ca6:	dcec      	bgt.n	8009c82 <__multadd+0x12>
 8009ca8:	f1b8 0f00 	cmp.w	r8, #0
 8009cac:	d022      	beq.n	8009cf4 <__multadd+0x84>
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	42b3      	cmp	r3, r6
 8009cb2:	dc19      	bgt.n	8009ce8 <__multadd+0x78>
 8009cb4:	6861      	ldr	r1, [r4, #4]
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	3101      	adds	r1, #1
 8009cba:	f7ff ff77 	bl	8009bac <_Balloc>
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	b928      	cbnz	r0, 8009cce <__multadd+0x5e>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <__multadd+0x8c>)
 8009cc6:	480e      	ldr	r0, [pc, #56]	; (8009d00 <__multadd+0x90>)
 8009cc8:	21b5      	movs	r1, #181	; 0xb5
 8009cca:	f000 ff83 	bl	800abd4 <__assert_func>
 8009cce:	6922      	ldr	r2, [r4, #16]
 8009cd0:	3202      	adds	r2, #2
 8009cd2:	f104 010c 	add.w	r1, r4, #12
 8009cd6:	0092      	lsls	r2, r2, #2
 8009cd8:	300c      	adds	r0, #12
 8009cda:	f7fe fb31 	bl	8008340 <memcpy>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff ffa3 	bl	8009c2c <_Bfree>
 8009ce6:	462c      	mov	r4, r5
 8009ce8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009cec:	3601      	adds	r6, #1
 8009cee:	f8c3 8014 	str.w	r8, [r3, #20]
 8009cf2:	6126      	str	r6, [r4, #16]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800b2b3 	.word	0x0800b2b3
 8009d00:	0800b324 	.word	0x0800b324

08009d04 <__hi0bits>:
 8009d04:	0c03      	lsrs	r3, r0, #16
 8009d06:	041b      	lsls	r3, r3, #16
 8009d08:	b9d3      	cbnz	r3, 8009d40 <__hi0bits+0x3c>
 8009d0a:	0400      	lsls	r0, r0, #16
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d12:	bf04      	itt	eq
 8009d14:	0200      	lsleq	r0, r0, #8
 8009d16:	3308      	addeq	r3, #8
 8009d18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d1c:	bf04      	itt	eq
 8009d1e:	0100      	lsleq	r0, r0, #4
 8009d20:	3304      	addeq	r3, #4
 8009d22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d26:	bf04      	itt	eq
 8009d28:	0080      	lsleq	r0, r0, #2
 8009d2a:	3302      	addeq	r3, #2
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	db05      	blt.n	8009d3c <__hi0bits+0x38>
 8009d30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d34:	f103 0301 	add.w	r3, r3, #1
 8009d38:	bf08      	it	eq
 8009d3a:	2320      	moveq	r3, #32
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	4770      	bx	lr
 8009d40:	2300      	movs	r3, #0
 8009d42:	e7e4      	b.n	8009d0e <__hi0bits+0xa>

08009d44 <__lo0bits>:
 8009d44:	6803      	ldr	r3, [r0, #0]
 8009d46:	f013 0207 	ands.w	r2, r3, #7
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	d00b      	beq.n	8009d66 <__lo0bits+0x22>
 8009d4e:	07da      	lsls	r2, r3, #31
 8009d50:	d424      	bmi.n	8009d9c <__lo0bits+0x58>
 8009d52:	0798      	lsls	r0, r3, #30
 8009d54:	bf49      	itett	mi
 8009d56:	085b      	lsrmi	r3, r3, #1
 8009d58:	089b      	lsrpl	r3, r3, #2
 8009d5a:	2001      	movmi	r0, #1
 8009d5c:	600b      	strmi	r3, [r1, #0]
 8009d5e:	bf5c      	itt	pl
 8009d60:	600b      	strpl	r3, [r1, #0]
 8009d62:	2002      	movpl	r0, #2
 8009d64:	4770      	bx	lr
 8009d66:	b298      	uxth	r0, r3
 8009d68:	b9b0      	cbnz	r0, 8009d98 <__lo0bits+0x54>
 8009d6a:	0c1b      	lsrs	r3, r3, #16
 8009d6c:	2010      	movs	r0, #16
 8009d6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d72:	bf04      	itt	eq
 8009d74:	0a1b      	lsreq	r3, r3, #8
 8009d76:	3008      	addeq	r0, #8
 8009d78:	071a      	lsls	r2, r3, #28
 8009d7a:	bf04      	itt	eq
 8009d7c:	091b      	lsreq	r3, r3, #4
 8009d7e:	3004      	addeq	r0, #4
 8009d80:	079a      	lsls	r2, r3, #30
 8009d82:	bf04      	itt	eq
 8009d84:	089b      	lsreq	r3, r3, #2
 8009d86:	3002      	addeq	r0, #2
 8009d88:	07da      	lsls	r2, r3, #31
 8009d8a:	d403      	bmi.n	8009d94 <__lo0bits+0x50>
 8009d8c:	085b      	lsrs	r3, r3, #1
 8009d8e:	f100 0001 	add.w	r0, r0, #1
 8009d92:	d005      	beq.n	8009da0 <__lo0bits+0x5c>
 8009d94:	600b      	str	r3, [r1, #0]
 8009d96:	4770      	bx	lr
 8009d98:	4610      	mov	r0, r2
 8009d9a:	e7e8      	b.n	8009d6e <__lo0bits+0x2a>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	4770      	bx	lr
 8009da0:	2020      	movs	r0, #32
 8009da2:	4770      	bx	lr

08009da4 <__i2b>:
 8009da4:	b510      	push	{r4, lr}
 8009da6:	460c      	mov	r4, r1
 8009da8:	2101      	movs	r1, #1
 8009daa:	f7ff feff 	bl	8009bac <_Balloc>
 8009dae:	4602      	mov	r2, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <__i2b+0x1a>
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <__i2b+0x24>)
 8009db4:	4805      	ldr	r0, [pc, #20]	; (8009dcc <__i2b+0x28>)
 8009db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dba:	f000 ff0b 	bl	800abd4 <__assert_func>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	6144      	str	r4, [r0, #20]
 8009dc2:	6103      	str	r3, [r0, #16]
 8009dc4:	bd10      	pop	{r4, pc}
 8009dc6:	bf00      	nop
 8009dc8:	0800b2b3 	.word	0x0800b2b3
 8009dcc:	0800b324 	.word	0x0800b324

08009dd0 <__multiply>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	690a      	ldr	r2, [r1, #16]
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	bfb8      	it	lt
 8009dde:	460b      	movlt	r3, r1
 8009de0:	460d      	mov	r5, r1
 8009de2:	bfbc      	itt	lt
 8009de4:	4625      	movlt	r5, r4
 8009de6:	461c      	movlt	r4, r3
 8009de8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009dec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009df0:	68ab      	ldr	r3, [r5, #8]
 8009df2:	6869      	ldr	r1, [r5, #4]
 8009df4:	eb0a 0709 	add.w	r7, sl, r9
 8009df8:	42bb      	cmp	r3, r7
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	bfb8      	it	lt
 8009dfe:	3101      	addlt	r1, #1
 8009e00:	f7ff fed4 	bl	8009bac <_Balloc>
 8009e04:	b930      	cbnz	r0, 8009e14 <__multiply+0x44>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4b42      	ldr	r3, [pc, #264]	; (8009f14 <__multiply+0x144>)
 8009e0a:	4843      	ldr	r0, [pc, #268]	; (8009f18 <__multiply+0x148>)
 8009e0c:	f240 115d 	movw	r1, #349	; 0x15d
 8009e10:	f000 fee0 	bl	800abd4 <__assert_func>
 8009e14:	f100 0614 	add.w	r6, r0, #20
 8009e18:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009e1c:	4633      	mov	r3, r6
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4543      	cmp	r3, r8
 8009e22:	d31e      	bcc.n	8009e62 <__multiply+0x92>
 8009e24:	f105 0c14 	add.w	ip, r5, #20
 8009e28:	f104 0314 	add.w	r3, r4, #20
 8009e2c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e30:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e34:	9202      	str	r2, [sp, #8]
 8009e36:	ebac 0205 	sub.w	r2, ip, r5
 8009e3a:	3a15      	subs	r2, #21
 8009e3c:	f022 0203 	bic.w	r2, r2, #3
 8009e40:	3204      	adds	r2, #4
 8009e42:	f105 0115 	add.w	r1, r5, #21
 8009e46:	458c      	cmp	ip, r1
 8009e48:	bf38      	it	cc
 8009e4a:	2204      	movcc	r2, #4
 8009e4c:	9201      	str	r2, [sp, #4]
 8009e4e:	9a02      	ldr	r2, [sp, #8]
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d808      	bhi.n	8009e68 <__multiply+0x98>
 8009e56:	2f00      	cmp	r7, #0
 8009e58:	dc55      	bgt.n	8009f06 <__multiply+0x136>
 8009e5a:	6107      	str	r7, [r0, #16]
 8009e5c:	b005      	add	sp, #20
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	f843 2b04 	str.w	r2, [r3], #4
 8009e66:	e7db      	b.n	8009e20 <__multiply+0x50>
 8009e68:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e6c:	f1ba 0f00 	cmp.w	sl, #0
 8009e70:	d020      	beq.n	8009eb4 <__multiply+0xe4>
 8009e72:	f105 0e14 	add.w	lr, r5, #20
 8009e76:	46b1      	mov	r9, r6
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e7e:	f8d9 b000 	ldr.w	fp, [r9]
 8009e82:	b2a1      	uxth	r1, r4
 8009e84:	fa1f fb8b 	uxth.w	fp, fp
 8009e88:	fb0a b101 	mla	r1, sl, r1, fp
 8009e8c:	4411      	add	r1, r2
 8009e8e:	f8d9 2000 	ldr.w	r2, [r9]
 8009e92:	0c24      	lsrs	r4, r4, #16
 8009e94:	0c12      	lsrs	r2, r2, #16
 8009e96:	fb0a 2404 	mla	r4, sl, r4, r2
 8009e9a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009e9e:	b289      	uxth	r1, r1
 8009ea0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ea4:	45f4      	cmp	ip, lr
 8009ea6:	f849 1b04 	str.w	r1, [r9], #4
 8009eaa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009eae:	d8e4      	bhi.n	8009e7a <__multiply+0xaa>
 8009eb0:	9901      	ldr	r1, [sp, #4]
 8009eb2:	5072      	str	r2, [r6, r1]
 8009eb4:	9a03      	ldr	r2, [sp, #12]
 8009eb6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	d01f      	beq.n	8009f02 <__multiply+0x132>
 8009ec2:	6834      	ldr	r4, [r6, #0]
 8009ec4:	f105 0114 	add.w	r1, r5, #20
 8009ec8:	46b6      	mov	lr, r6
 8009eca:	f04f 0a00 	mov.w	sl, #0
 8009ece:	880a      	ldrh	r2, [r1, #0]
 8009ed0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ed4:	fb09 b202 	mla	r2, r9, r2, fp
 8009ed8:	4492      	add	sl, r2
 8009eda:	b2a4      	uxth	r4, r4
 8009edc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ee0:	f84e 4b04 	str.w	r4, [lr], #4
 8009ee4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ee8:	f8be 2000 	ldrh.w	r2, [lr]
 8009eec:	0c24      	lsrs	r4, r4, #16
 8009eee:	fb09 2404 	mla	r4, r9, r4, r2
 8009ef2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ef6:	458c      	cmp	ip, r1
 8009ef8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009efc:	d8e7      	bhi.n	8009ece <__multiply+0xfe>
 8009efe:	9a01      	ldr	r2, [sp, #4]
 8009f00:	50b4      	str	r4, [r6, r2]
 8009f02:	3604      	adds	r6, #4
 8009f04:	e7a3      	b.n	8009e4e <__multiply+0x7e>
 8009f06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1a5      	bne.n	8009e5a <__multiply+0x8a>
 8009f0e:	3f01      	subs	r7, #1
 8009f10:	e7a1      	b.n	8009e56 <__multiply+0x86>
 8009f12:	bf00      	nop
 8009f14:	0800b2b3 	.word	0x0800b2b3
 8009f18:	0800b324 	.word	0x0800b324

08009f1c <__pow5mult>:
 8009f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f20:	4615      	mov	r5, r2
 8009f22:	f012 0203 	ands.w	r2, r2, #3
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	d007      	beq.n	8009f3c <__pow5mult+0x20>
 8009f2c:	4c25      	ldr	r4, [pc, #148]	; (8009fc4 <__pow5mult+0xa8>)
 8009f2e:	3a01      	subs	r2, #1
 8009f30:	2300      	movs	r3, #0
 8009f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f36:	f7ff fe9b 	bl	8009c70 <__multadd>
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	10ad      	asrs	r5, r5, #2
 8009f3e:	d03d      	beq.n	8009fbc <__pow5mult+0xa0>
 8009f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f42:	b97c      	cbnz	r4, 8009f64 <__pow5mult+0x48>
 8009f44:	2010      	movs	r0, #16
 8009f46:	f7ff fe29 	bl	8009b9c <malloc>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8009f4e:	b928      	cbnz	r0, 8009f5c <__pow5mult+0x40>
 8009f50:	4b1d      	ldr	r3, [pc, #116]	; (8009fc8 <__pow5mult+0xac>)
 8009f52:	481e      	ldr	r0, [pc, #120]	; (8009fcc <__pow5mult+0xb0>)
 8009f54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f58:	f000 fe3c 	bl	800abd4 <__assert_func>
 8009f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f60:	6004      	str	r4, [r0, #0]
 8009f62:	60c4      	str	r4, [r0, #12]
 8009f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f6c:	b94c      	cbnz	r4, 8009f82 <__pow5mult+0x66>
 8009f6e:	f240 2171 	movw	r1, #625	; 0x271
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7ff ff16 	bl	8009da4 <__i2b>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f7e:	4604      	mov	r4, r0
 8009f80:	6003      	str	r3, [r0, #0]
 8009f82:	f04f 0900 	mov.w	r9, #0
 8009f86:	07eb      	lsls	r3, r5, #31
 8009f88:	d50a      	bpl.n	8009fa0 <__pow5mult+0x84>
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ff1e 	bl	8009dd0 <__multiply>
 8009f94:	4639      	mov	r1, r7
 8009f96:	4680      	mov	r8, r0
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff fe47 	bl	8009c2c <_Bfree>
 8009f9e:	4647      	mov	r7, r8
 8009fa0:	106d      	asrs	r5, r5, #1
 8009fa2:	d00b      	beq.n	8009fbc <__pow5mult+0xa0>
 8009fa4:	6820      	ldr	r0, [r4, #0]
 8009fa6:	b938      	cbnz	r0, 8009fb8 <__pow5mult+0x9c>
 8009fa8:	4622      	mov	r2, r4
 8009faa:	4621      	mov	r1, r4
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7ff ff0f 	bl	8009dd0 <__multiply>
 8009fb2:	6020      	str	r0, [r4, #0]
 8009fb4:	f8c0 9000 	str.w	r9, [r0]
 8009fb8:	4604      	mov	r4, r0
 8009fba:	e7e4      	b.n	8009f86 <__pow5mult+0x6a>
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc2:	bf00      	nop
 8009fc4:	0800b478 	.word	0x0800b478
 8009fc8:	0800b23d 	.word	0x0800b23d
 8009fcc:	0800b324 	.word	0x0800b324

08009fd0 <__lshift>:
 8009fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	6849      	ldr	r1, [r1, #4]
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	4691      	mov	r9, r2
 8009fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fe8:	f108 0601 	add.w	r6, r8, #1
 8009fec:	42b3      	cmp	r3, r6
 8009fee:	db0b      	blt.n	800a008 <__lshift+0x38>
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f7ff fddb 	bl	8009bac <_Balloc>
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	b948      	cbnz	r0, 800a00e <__lshift+0x3e>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	4b28      	ldr	r3, [pc, #160]	; (800a0a0 <__lshift+0xd0>)
 8009ffe:	4829      	ldr	r0, [pc, #164]	; (800a0a4 <__lshift+0xd4>)
 800a000:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a004:	f000 fde6 	bl	800abd4 <__assert_func>
 800a008:	3101      	adds	r1, #1
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	e7ee      	b.n	8009fec <__lshift+0x1c>
 800a00e:	2300      	movs	r3, #0
 800a010:	f100 0114 	add.w	r1, r0, #20
 800a014:	f100 0210 	add.w	r2, r0, #16
 800a018:	4618      	mov	r0, r3
 800a01a:	4553      	cmp	r3, sl
 800a01c:	db33      	blt.n	800a086 <__lshift+0xb6>
 800a01e:	6920      	ldr	r0, [r4, #16]
 800a020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a024:	f104 0314 	add.w	r3, r4, #20
 800a028:	f019 091f 	ands.w	r9, r9, #31
 800a02c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a034:	d02b      	beq.n	800a08e <__lshift+0xbe>
 800a036:	f1c9 0e20 	rsb	lr, r9, #32
 800a03a:	468a      	mov	sl, r1
 800a03c:	2200      	movs	r2, #0
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	fa00 f009 	lsl.w	r0, r0, r9
 800a044:	4302      	orrs	r2, r0
 800a046:	f84a 2b04 	str.w	r2, [sl], #4
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	459c      	cmp	ip, r3
 800a050:	fa22 f20e 	lsr.w	r2, r2, lr
 800a054:	d8f3      	bhi.n	800a03e <__lshift+0x6e>
 800a056:	ebac 0304 	sub.w	r3, ip, r4
 800a05a:	3b15      	subs	r3, #21
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	3304      	adds	r3, #4
 800a062:	f104 0015 	add.w	r0, r4, #21
 800a066:	4584      	cmp	ip, r0
 800a068:	bf38      	it	cc
 800a06a:	2304      	movcc	r3, #4
 800a06c:	50ca      	str	r2, [r1, r3]
 800a06e:	b10a      	cbz	r2, 800a074 <__lshift+0xa4>
 800a070:	f108 0602 	add.w	r6, r8, #2
 800a074:	3e01      	subs	r6, #1
 800a076:	4638      	mov	r0, r7
 800a078:	612e      	str	r6, [r5, #16]
 800a07a:	4621      	mov	r1, r4
 800a07c:	f7ff fdd6 	bl	8009c2c <_Bfree>
 800a080:	4628      	mov	r0, r5
 800a082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a086:	f842 0f04 	str.w	r0, [r2, #4]!
 800a08a:	3301      	adds	r3, #1
 800a08c:	e7c5      	b.n	800a01a <__lshift+0x4a>
 800a08e:	3904      	subs	r1, #4
 800a090:	f853 2b04 	ldr.w	r2, [r3], #4
 800a094:	f841 2f04 	str.w	r2, [r1, #4]!
 800a098:	459c      	cmp	ip, r3
 800a09a:	d8f9      	bhi.n	800a090 <__lshift+0xc0>
 800a09c:	e7ea      	b.n	800a074 <__lshift+0xa4>
 800a09e:	bf00      	nop
 800a0a0:	0800b2b3 	.word	0x0800b2b3
 800a0a4:	0800b324 	.word	0x0800b324

0800a0a8 <__mcmp>:
 800a0a8:	b530      	push	{r4, r5, lr}
 800a0aa:	6902      	ldr	r2, [r0, #16]
 800a0ac:	690c      	ldr	r4, [r1, #16]
 800a0ae:	1b12      	subs	r2, r2, r4
 800a0b0:	d10e      	bne.n	800a0d0 <__mcmp+0x28>
 800a0b2:	f100 0314 	add.w	r3, r0, #20
 800a0b6:	3114      	adds	r1, #20
 800a0b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0c8:	42a5      	cmp	r5, r4
 800a0ca:	d003      	beq.n	800a0d4 <__mcmp+0x2c>
 800a0cc:	d305      	bcc.n	800a0da <__mcmp+0x32>
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	bd30      	pop	{r4, r5, pc}
 800a0d4:	4283      	cmp	r3, r0
 800a0d6:	d3f3      	bcc.n	800a0c0 <__mcmp+0x18>
 800a0d8:	e7fa      	b.n	800a0d0 <__mcmp+0x28>
 800a0da:	f04f 32ff 	mov.w	r2, #4294967295
 800a0de:	e7f7      	b.n	800a0d0 <__mcmp+0x28>

0800a0e0 <__mdiff>:
 800a0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4617      	mov	r7, r2
 800a0ee:	f7ff ffdb 	bl	800a0a8 <__mcmp>
 800a0f2:	1e05      	subs	r5, r0, #0
 800a0f4:	d110      	bne.n	800a118 <__mdiff+0x38>
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff fd57 	bl	8009bac <_Balloc>
 800a0fe:	b930      	cbnz	r0, 800a10e <__mdiff+0x2e>
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <__mdiff+0x108>)
 800a102:	4602      	mov	r2, r0
 800a104:	f240 2132 	movw	r1, #562	; 0x232
 800a108:	4838      	ldr	r0, [pc, #224]	; (800a1ec <__mdiff+0x10c>)
 800a10a:	f000 fd63 	bl	800abd4 <__assert_func>
 800a10e:	2301      	movs	r3, #1
 800a110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a118:	bfa4      	itt	ge
 800a11a:	463b      	movge	r3, r7
 800a11c:	4627      	movge	r7, r4
 800a11e:	4630      	mov	r0, r6
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	bfa6      	itte	ge
 800a124:	461c      	movge	r4, r3
 800a126:	2500      	movge	r5, #0
 800a128:	2501      	movlt	r5, #1
 800a12a:	f7ff fd3f 	bl	8009bac <_Balloc>
 800a12e:	b920      	cbnz	r0, 800a13a <__mdiff+0x5a>
 800a130:	4b2d      	ldr	r3, [pc, #180]	; (800a1e8 <__mdiff+0x108>)
 800a132:	4602      	mov	r2, r0
 800a134:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a138:	e7e6      	b.n	800a108 <__mdiff+0x28>
 800a13a:	693e      	ldr	r6, [r7, #16]
 800a13c:	60c5      	str	r5, [r0, #12]
 800a13e:	6925      	ldr	r5, [r4, #16]
 800a140:	f107 0114 	add.w	r1, r7, #20
 800a144:	f104 0914 	add.w	r9, r4, #20
 800a148:	f100 0e14 	add.w	lr, r0, #20
 800a14c:	f107 0210 	add.w	r2, r7, #16
 800a150:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a154:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a158:	46f2      	mov	sl, lr
 800a15a:	2700      	movs	r7, #0
 800a15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a164:	fa1f f883 	uxth.w	r8, r3
 800a168:	fa17 f78b 	uxtah	r7, r7, fp
 800a16c:	0c1b      	lsrs	r3, r3, #16
 800a16e:	eba7 0808 	sub.w	r8, r7, r8
 800a172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a17a:	fa1f f888 	uxth.w	r8, r8
 800a17e:	141f      	asrs	r7, r3, #16
 800a180:	454d      	cmp	r5, r9
 800a182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a186:	f84a 3b04 	str.w	r3, [sl], #4
 800a18a:	d8e7      	bhi.n	800a15c <__mdiff+0x7c>
 800a18c:	1b2b      	subs	r3, r5, r4
 800a18e:	3b15      	subs	r3, #21
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	3304      	adds	r3, #4
 800a196:	3415      	adds	r4, #21
 800a198:	42a5      	cmp	r5, r4
 800a19a:	bf38      	it	cc
 800a19c:	2304      	movcc	r3, #4
 800a19e:	4419      	add	r1, r3
 800a1a0:	4473      	add	r3, lr
 800a1a2:	469e      	mov	lr, r3
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	4565      	cmp	r5, ip
 800a1a8:	d30e      	bcc.n	800a1c8 <__mdiff+0xe8>
 800a1aa:	f10c 0203 	add.w	r2, ip, #3
 800a1ae:	1a52      	subs	r2, r2, r1
 800a1b0:	f022 0203 	bic.w	r2, r2, #3
 800a1b4:	3903      	subs	r1, #3
 800a1b6:	458c      	cmp	ip, r1
 800a1b8:	bf38      	it	cc
 800a1ba:	2200      	movcc	r2, #0
 800a1bc:	441a      	add	r2, r3
 800a1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1c2:	b17b      	cbz	r3, 800a1e4 <__mdiff+0x104>
 800a1c4:	6106      	str	r6, [r0, #16]
 800a1c6:	e7a5      	b.n	800a114 <__mdiff+0x34>
 800a1c8:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1cc:	fa17 f488 	uxtah	r4, r7, r8
 800a1d0:	1422      	asrs	r2, r4, #16
 800a1d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a1d6:	b2a4      	uxth	r4, r4
 800a1d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a1dc:	f84e 4b04 	str.w	r4, [lr], #4
 800a1e0:	1417      	asrs	r7, r2, #16
 800a1e2:	e7e0      	b.n	800a1a6 <__mdiff+0xc6>
 800a1e4:	3e01      	subs	r6, #1
 800a1e6:	e7ea      	b.n	800a1be <__mdiff+0xde>
 800a1e8:	0800b2b3 	.word	0x0800b2b3
 800a1ec:	0800b324 	.word	0x0800b324

0800a1f0 <__d2b>:
 800a1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	4689      	mov	r9, r1
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	ec57 6b10 	vmov	r6, r7, d0
 800a1fc:	4690      	mov	r8, r2
 800a1fe:	f7ff fcd5 	bl	8009bac <_Balloc>
 800a202:	4604      	mov	r4, r0
 800a204:	b930      	cbnz	r0, 800a214 <__d2b+0x24>
 800a206:	4602      	mov	r2, r0
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <__d2b+0xb0>)
 800a20a:	4826      	ldr	r0, [pc, #152]	; (800a2a4 <__d2b+0xb4>)
 800a20c:	f240 310a 	movw	r1, #778	; 0x30a
 800a210:	f000 fce0 	bl	800abd4 <__assert_func>
 800a214:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a21c:	bb35      	cbnz	r5, 800a26c <__d2b+0x7c>
 800a21e:	2e00      	cmp	r6, #0
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	d028      	beq.n	800a276 <__d2b+0x86>
 800a224:	4668      	mov	r0, sp
 800a226:	9600      	str	r6, [sp, #0]
 800a228:	f7ff fd8c 	bl	8009d44 <__lo0bits>
 800a22c:	9900      	ldr	r1, [sp, #0]
 800a22e:	b300      	cbz	r0, 800a272 <__d2b+0x82>
 800a230:	9a01      	ldr	r2, [sp, #4]
 800a232:	f1c0 0320 	rsb	r3, r0, #32
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	430b      	orrs	r3, r1
 800a23c:	40c2      	lsrs	r2, r0
 800a23e:	6163      	str	r3, [r4, #20]
 800a240:	9201      	str	r2, [sp, #4]
 800a242:	9b01      	ldr	r3, [sp, #4]
 800a244:	61a3      	str	r3, [r4, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	bf14      	ite	ne
 800a24a:	2202      	movne	r2, #2
 800a24c:	2201      	moveq	r2, #1
 800a24e:	6122      	str	r2, [r4, #16]
 800a250:	b1d5      	cbz	r5, 800a288 <__d2b+0x98>
 800a252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a256:	4405      	add	r5, r0
 800a258:	f8c9 5000 	str.w	r5, [r9]
 800a25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a260:	f8c8 0000 	str.w	r0, [r8]
 800a264:	4620      	mov	r0, r4
 800a266:	b003      	add	sp, #12
 800a268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a270:	e7d5      	b.n	800a21e <__d2b+0x2e>
 800a272:	6161      	str	r1, [r4, #20]
 800a274:	e7e5      	b.n	800a242 <__d2b+0x52>
 800a276:	a801      	add	r0, sp, #4
 800a278:	f7ff fd64 	bl	8009d44 <__lo0bits>
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	6163      	str	r3, [r4, #20]
 800a280:	2201      	movs	r2, #1
 800a282:	6122      	str	r2, [r4, #16]
 800a284:	3020      	adds	r0, #32
 800a286:	e7e3      	b.n	800a250 <__d2b+0x60>
 800a288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a28c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a290:	f8c9 0000 	str.w	r0, [r9]
 800a294:	6918      	ldr	r0, [r3, #16]
 800a296:	f7ff fd35 	bl	8009d04 <__hi0bits>
 800a29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a29e:	e7df      	b.n	800a260 <__d2b+0x70>
 800a2a0:	0800b2b3 	.word	0x0800b2b3
 800a2a4:	0800b324 	.word	0x0800b324

0800a2a8 <_calloc_r>:
 800a2a8:	b513      	push	{r0, r1, r4, lr}
 800a2aa:	434a      	muls	r2, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	9201      	str	r2, [sp, #4]
 800a2b0:	f000 f85a 	bl	800a368 <_malloc_r>
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	b118      	cbz	r0, 800a2c0 <_calloc_r+0x18>
 800a2b8:	9a01      	ldr	r2, [sp, #4]
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	f7fe f84e 	bl	800835c <memset>
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	b002      	add	sp, #8
 800a2c4:	bd10      	pop	{r4, pc}
	...

0800a2c8 <_free_r>:
 800a2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	d048      	beq.n	800a360 <_free_r+0x98>
 800a2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d2:	9001      	str	r0, [sp, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2da:	bfb8      	it	lt
 800a2dc:	18e4      	addlt	r4, r4, r3
 800a2de:	f000 fe1d 	bl	800af1c <__malloc_lock>
 800a2e2:	4a20      	ldr	r2, [pc, #128]	; (800a364 <_free_r+0x9c>)
 800a2e4:	9801      	ldr	r0, [sp, #4]
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	4615      	mov	r5, r2
 800a2ea:	b933      	cbnz	r3, 800a2fa <_free_r+0x32>
 800a2ec:	6063      	str	r3, [r4, #4]
 800a2ee:	6014      	str	r4, [r2, #0]
 800a2f0:	b003      	add	sp, #12
 800a2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f6:	f000 be17 	b.w	800af28 <__malloc_unlock>
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	d90b      	bls.n	800a316 <_free_r+0x4e>
 800a2fe:	6821      	ldr	r1, [r4, #0]
 800a300:	1862      	adds	r2, r4, r1
 800a302:	4293      	cmp	r3, r2
 800a304:	bf04      	itt	eq
 800a306:	681a      	ldreq	r2, [r3, #0]
 800a308:	685b      	ldreq	r3, [r3, #4]
 800a30a:	6063      	str	r3, [r4, #4]
 800a30c:	bf04      	itt	eq
 800a30e:	1852      	addeq	r2, r2, r1
 800a310:	6022      	streq	r2, [r4, #0]
 800a312:	602c      	str	r4, [r5, #0]
 800a314:	e7ec      	b.n	800a2f0 <_free_r+0x28>
 800a316:	461a      	mov	r2, r3
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b10b      	cbz	r3, 800a320 <_free_r+0x58>
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d9fa      	bls.n	800a316 <_free_r+0x4e>
 800a320:	6811      	ldr	r1, [r2, #0]
 800a322:	1855      	adds	r5, r2, r1
 800a324:	42a5      	cmp	r5, r4
 800a326:	d10b      	bne.n	800a340 <_free_r+0x78>
 800a328:	6824      	ldr	r4, [r4, #0]
 800a32a:	4421      	add	r1, r4
 800a32c:	1854      	adds	r4, r2, r1
 800a32e:	42a3      	cmp	r3, r4
 800a330:	6011      	str	r1, [r2, #0]
 800a332:	d1dd      	bne.n	800a2f0 <_free_r+0x28>
 800a334:	681c      	ldr	r4, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	6053      	str	r3, [r2, #4]
 800a33a:	4421      	add	r1, r4
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	e7d7      	b.n	800a2f0 <_free_r+0x28>
 800a340:	d902      	bls.n	800a348 <_free_r+0x80>
 800a342:	230c      	movs	r3, #12
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	e7d3      	b.n	800a2f0 <_free_r+0x28>
 800a348:	6825      	ldr	r5, [r4, #0]
 800a34a:	1961      	adds	r1, r4, r5
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf04      	itt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	bf04      	itt	eq
 800a358:	1949      	addeq	r1, r1, r5
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	6054      	str	r4, [r2, #4]
 800a35e:	e7c7      	b.n	800a2f0 <_free_r+0x28>
 800a360:	b003      	add	sp, #12
 800a362:	bd30      	pop	{r4, r5, pc}
 800a364:	20001dcc 	.word	0x20001dcc

0800a368 <_malloc_r>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	1ccd      	adds	r5, r1, #3
 800a36c:	f025 0503 	bic.w	r5, r5, #3
 800a370:	3508      	adds	r5, #8
 800a372:	2d0c      	cmp	r5, #12
 800a374:	bf38      	it	cc
 800a376:	250c      	movcc	r5, #12
 800a378:	2d00      	cmp	r5, #0
 800a37a:	4606      	mov	r6, r0
 800a37c:	db01      	blt.n	800a382 <_malloc_r+0x1a>
 800a37e:	42a9      	cmp	r1, r5
 800a380:	d903      	bls.n	800a38a <_malloc_r+0x22>
 800a382:	230c      	movs	r3, #12
 800a384:	6033      	str	r3, [r6, #0]
 800a386:	2000      	movs	r0, #0
 800a388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38a:	f000 fdc7 	bl	800af1c <__malloc_lock>
 800a38e:	4921      	ldr	r1, [pc, #132]	; (800a414 <_malloc_r+0xac>)
 800a390:	680a      	ldr	r2, [r1, #0]
 800a392:	4614      	mov	r4, r2
 800a394:	b99c      	cbnz	r4, 800a3be <_malloc_r+0x56>
 800a396:	4f20      	ldr	r7, [pc, #128]	; (800a418 <_malloc_r+0xb0>)
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	b923      	cbnz	r3, 800a3a6 <_malloc_r+0x3e>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f000 faf2 	bl	800a988 <_sbrk_r>
 800a3a4:	6038      	str	r0, [r7, #0]
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 faed 	bl	800a988 <_sbrk_r>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	d123      	bne.n	800a3fa <_malloc_r+0x92>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	6033      	str	r3, [r6, #0]
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f000 fdb6 	bl	800af28 <__malloc_unlock>
 800a3bc:	e7e3      	b.n	800a386 <_malloc_r+0x1e>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	1b5b      	subs	r3, r3, r5
 800a3c2:	d417      	bmi.n	800a3f4 <_malloc_r+0x8c>
 800a3c4:	2b0b      	cmp	r3, #11
 800a3c6:	d903      	bls.n	800a3d0 <_malloc_r+0x68>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	441c      	add	r4, r3
 800a3cc:	6025      	str	r5, [r4, #0]
 800a3ce:	e004      	b.n	800a3da <_malloc_r+0x72>
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	42a2      	cmp	r2, r4
 800a3d4:	bf0c      	ite	eq
 800a3d6:	600b      	streq	r3, [r1, #0]
 800a3d8:	6053      	strne	r3, [r2, #4]
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f000 fda4 	bl	800af28 <__malloc_unlock>
 800a3e0:	f104 000b 	add.w	r0, r4, #11
 800a3e4:	1d23      	adds	r3, r4, #4
 800a3e6:	f020 0007 	bic.w	r0, r0, #7
 800a3ea:	1ac2      	subs	r2, r0, r3
 800a3ec:	d0cc      	beq.n	800a388 <_malloc_r+0x20>
 800a3ee:	1a1b      	subs	r3, r3, r0
 800a3f0:	50a3      	str	r3, [r4, r2]
 800a3f2:	e7c9      	b.n	800a388 <_malloc_r+0x20>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	6864      	ldr	r4, [r4, #4]
 800a3f8:	e7cc      	b.n	800a394 <_malloc_r+0x2c>
 800a3fa:	1cc4      	adds	r4, r0, #3
 800a3fc:	f024 0403 	bic.w	r4, r4, #3
 800a400:	42a0      	cmp	r0, r4
 800a402:	d0e3      	beq.n	800a3cc <_malloc_r+0x64>
 800a404:	1a21      	subs	r1, r4, r0
 800a406:	4630      	mov	r0, r6
 800a408:	f000 fabe 	bl	800a988 <_sbrk_r>
 800a40c:	3001      	adds	r0, #1
 800a40e:	d1dd      	bne.n	800a3cc <_malloc_r+0x64>
 800a410:	e7cf      	b.n	800a3b2 <_malloc_r+0x4a>
 800a412:	bf00      	nop
 800a414:	20001dcc 	.word	0x20001dcc
 800a418:	20001dd0 	.word	0x20001dd0

0800a41c <__ssputs_r>:
 800a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	688e      	ldr	r6, [r1, #8]
 800a422:	429e      	cmp	r6, r3
 800a424:	4682      	mov	sl, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4690      	mov	r8, r2
 800a42a:	461f      	mov	r7, r3
 800a42c:	d838      	bhi.n	800a4a0 <__ssputs_r+0x84>
 800a42e:	898a      	ldrh	r2, [r1, #12]
 800a430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a434:	d032      	beq.n	800a49c <__ssputs_r+0x80>
 800a436:	6825      	ldr	r5, [r4, #0]
 800a438:	6909      	ldr	r1, [r1, #16]
 800a43a:	eba5 0901 	sub.w	r9, r5, r1
 800a43e:	6965      	ldr	r5, [r4, #20]
 800a440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a448:	3301      	adds	r3, #1
 800a44a:	444b      	add	r3, r9
 800a44c:	106d      	asrs	r5, r5, #1
 800a44e:	429d      	cmp	r5, r3
 800a450:	bf38      	it	cc
 800a452:	461d      	movcc	r5, r3
 800a454:	0553      	lsls	r3, r2, #21
 800a456:	d531      	bpl.n	800a4bc <__ssputs_r+0xa0>
 800a458:	4629      	mov	r1, r5
 800a45a:	f7ff ff85 	bl	800a368 <_malloc_r>
 800a45e:	4606      	mov	r6, r0
 800a460:	b950      	cbnz	r0, 800a478 <__ssputs_r+0x5c>
 800a462:	230c      	movs	r3, #12
 800a464:	f8ca 3000 	str.w	r3, [sl]
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a478:	6921      	ldr	r1, [r4, #16]
 800a47a:	464a      	mov	r2, r9
 800a47c:	f7fd ff60 	bl	8008340 <memcpy>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	6126      	str	r6, [r4, #16]
 800a48e:	6165      	str	r5, [r4, #20]
 800a490:	444e      	add	r6, r9
 800a492:	eba5 0509 	sub.w	r5, r5, r9
 800a496:	6026      	str	r6, [r4, #0]
 800a498:	60a5      	str	r5, [r4, #8]
 800a49a:	463e      	mov	r6, r7
 800a49c:	42be      	cmp	r6, r7
 800a49e:	d900      	bls.n	800a4a2 <__ssputs_r+0x86>
 800a4a0:	463e      	mov	r6, r7
 800a4a2:	4632      	mov	r2, r6
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	f000 fd1e 	bl	800aee8 <memmove>
 800a4ac:	68a3      	ldr	r3, [r4, #8]
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	1b9b      	subs	r3, r3, r6
 800a4b2:	4432      	add	r2, r6
 800a4b4:	60a3      	str	r3, [r4, #8]
 800a4b6:	6022      	str	r2, [r4, #0]
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	e7db      	b.n	800a474 <__ssputs_r+0x58>
 800a4bc:	462a      	mov	r2, r5
 800a4be:	f000 fd39 	bl	800af34 <_realloc_r>
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d1e1      	bne.n	800a48c <__ssputs_r+0x70>
 800a4c8:	6921      	ldr	r1, [r4, #16]
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	f7ff fefc 	bl	800a2c8 <_free_r>
 800a4d0:	e7c7      	b.n	800a462 <__ssputs_r+0x46>
	...

0800a4d4 <_svfiprintf_r>:
 800a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d8:	4698      	mov	r8, r3
 800a4da:	898b      	ldrh	r3, [r1, #12]
 800a4dc:	061b      	lsls	r3, r3, #24
 800a4de:	b09d      	sub	sp, #116	; 0x74
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	d50e      	bpl.n	800a506 <_svfiprintf_r+0x32>
 800a4e8:	690b      	ldr	r3, [r1, #16]
 800a4ea:	b963      	cbnz	r3, 800a506 <_svfiprintf_r+0x32>
 800a4ec:	2140      	movs	r1, #64	; 0x40
 800a4ee:	f7ff ff3b 	bl	800a368 <_malloc_r>
 800a4f2:	6028      	str	r0, [r5, #0]
 800a4f4:	6128      	str	r0, [r5, #16]
 800a4f6:	b920      	cbnz	r0, 800a502 <_svfiprintf_r+0x2e>
 800a4f8:	230c      	movs	r3, #12
 800a4fa:	603b      	str	r3, [r7, #0]
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	e0d1      	b.n	800a6a6 <_svfiprintf_r+0x1d2>
 800a502:	2340      	movs	r3, #64	; 0x40
 800a504:	616b      	str	r3, [r5, #20]
 800a506:	2300      	movs	r3, #0
 800a508:	9309      	str	r3, [sp, #36]	; 0x24
 800a50a:	2320      	movs	r3, #32
 800a50c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a510:	f8cd 800c 	str.w	r8, [sp, #12]
 800a514:	2330      	movs	r3, #48	; 0x30
 800a516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6c0 <_svfiprintf_r+0x1ec>
 800a51a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a51e:	f04f 0901 	mov.w	r9, #1
 800a522:	4623      	mov	r3, r4
 800a524:	469a      	mov	sl, r3
 800a526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a52a:	b10a      	cbz	r2, 800a530 <_svfiprintf_r+0x5c>
 800a52c:	2a25      	cmp	r2, #37	; 0x25
 800a52e:	d1f9      	bne.n	800a524 <_svfiprintf_r+0x50>
 800a530:	ebba 0b04 	subs.w	fp, sl, r4
 800a534:	d00b      	beq.n	800a54e <_svfiprintf_r+0x7a>
 800a536:	465b      	mov	r3, fp
 800a538:	4622      	mov	r2, r4
 800a53a:	4629      	mov	r1, r5
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7ff ff6d 	bl	800a41c <__ssputs_r>
 800a542:	3001      	adds	r0, #1
 800a544:	f000 80aa 	beq.w	800a69c <_svfiprintf_r+0x1c8>
 800a548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a54a:	445a      	add	r2, fp
 800a54c:	9209      	str	r2, [sp, #36]	; 0x24
 800a54e:	f89a 3000 	ldrb.w	r3, [sl]
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80a2 	beq.w	800a69c <_svfiprintf_r+0x1c8>
 800a558:	2300      	movs	r3, #0
 800a55a:	f04f 32ff 	mov.w	r2, #4294967295
 800a55e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a562:	f10a 0a01 	add.w	sl, sl, #1
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a56e:	931a      	str	r3, [sp, #104]	; 0x68
 800a570:	4654      	mov	r4, sl
 800a572:	2205      	movs	r2, #5
 800a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a578:	4851      	ldr	r0, [pc, #324]	; (800a6c0 <_svfiprintf_r+0x1ec>)
 800a57a:	f7f5 fe31 	bl	80001e0 <memchr>
 800a57e:	9a04      	ldr	r2, [sp, #16]
 800a580:	b9d8      	cbnz	r0, 800a5ba <_svfiprintf_r+0xe6>
 800a582:	06d0      	lsls	r0, r2, #27
 800a584:	bf44      	itt	mi
 800a586:	2320      	movmi	r3, #32
 800a588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a58c:	0711      	lsls	r1, r2, #28
 800a58e:	bf44      	itt	mi
 800a590:	232b      	movmi	r3, #43	; 0x2b
 800a592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a596:	f89a 3000 	ldrb.w	r3, [sl]
 800a59a:	2b2a      	cmp	r3, #42	; 0x2a
 800a59c:	d015      	beq.n	800a5ca <_svfiprintf_r+0xf6>
 800a59e:	9a07      	ldr	r2, [sp, #28]
 800a5a0:	4654      	mov	r4, sl
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	f04f 0c0a 	mov.w	ip, #10
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ae:	3b30      	subs	r3, #48	; 0x30
 800a5b0:	2b09      	cmp	r3, #9
 800a5b2:	d94e      	bls.n	800a652 <_svfiprintf_r+0x17e>
 800a5b4:	b1b0      	cbz	r0, 800a5e4 <_svfiprintf_r+0x110>
 800a5b6:	9207      	str	r2, [sp, #28]
 800a5b8:	e014      	b.n	800a5e4 <_svfiprintf_r+0x110>
 800a5ba:	eba0 0308 	sub.w	r3, r0, r8
 800a5be:	fa09 f303 	lsl.w	r3, r9, r3
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	46a2      	mov	sl, r4
 800a5c8:	e7d2      	b.n	800a570 <_svfiprintf_r+0x9c>
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	1d19      	adds	r1, r3, #4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	9103      	str	r1, [sp, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bfbb      	ittet	lt
 800a5d6:	425b      	neglt	r3, r3
 800a5d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a5dc:	9307      	strge	r3, [sp, #28]
 800a5de:	9307      	strlt	r3, [sp, #28]
 800a5e0:	bfb8      	it	lt
 800a5e2:	9204      	strlt	r2, [sp, #16]
 800a5e4:	7823      	ldrb	r3, [r4, #0]
 800a5e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5e8:	d10c      	bne.n	800a604 <_svfiprintf_r+0x130>
 800a5ea:	7863      	ldrb	r3, [r4, #1]
 800a5ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ee:	d135      	bne.n	800a65c <_svfiprintf_r+0x188>
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	1d1a      	adds	r2, r3, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	9203      	str	r2, [sp, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	bfb8      	it	lt
 800a5fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a600:	3402      	adds	r4, #2
 800a602:	9305      	str	r3, [sp, #20]
 800a604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6d0 <_svfiprintf_r+0x1fc>
 800a608:	7821      	ldrb	r1, [r4, #0]
 800a60a:	2203      	movs	r2, #3
 800a60c:	4650      	mov	r0, sl
 800a60e:	f7f5 fde7 	bl	80001e0 <memchr>
 800a612:	b140      	cbz	r0, 800a626 <_svfiprintf_r+0x152>
 800a614:	2340      	movs	r3, #64	; 0x40
 800a616:	eba0 000a 	sub.w	r0, r0, sl
 800a61a:	fa03 f000 	lsl.w	r0, r3, r0
 800a61e:	9b04      	ldr	r3, [sp, #16]
 800a620:	4303      	orrs	r3, r0
 800a622:	3401      	adds	r4, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a62a:	4826      	ldr	r0, [pc, #152]	; (800a6c4 <_svfiprintf_r+0x1f0>)
 800a62c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a630:	2206      	movs	r2, #6
 800a632:	f7f5 fdd5 	bl	80001e0 <memchr>
 800a636:	2800      	cmp	r0, #0
 800a638:	d038      	beq.n	800a6ac <_svfiprintf_r+0x1d8>
 800a63a:	4b23      	ldr	r3, [pc, #140]	; (800a6c8 <_svfiprintf_r+0x1f4>)
 800a63c:	bb1b      	cbnz	r3, 800a686 <_svfiprintf_r+0x1b2>
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	3307      	adds	r3, #7
 800a642:	f023 0307 	bic.w	r3, r3, #7
 800a646:	3308      	adds	r3, #8
 800a648:	9303      	str	r3, [sp, #12]
 800a64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64c:	4433      	add	r3, r6
 800a64e:	9309      	str	r3, [sp, #36]	; 0x24
 800a650:	e767      	b.n	800a522 <_svfiprintf_r+0x4e>
 800a652:	fb0c 3202 	mla	r2, ip, r2, r3
 800a656:	460c      	mov	r4, r1
 800a658:	2001      	movs	r0, #1
 800a65a:	e7a5      	b.n	800a5a8 <_svfiprintf_r+0xd4>
 800a65c:	2300      	movs	r3, #0
 800a65e:	3401      	adds	r4, #1
 800a660:	9305      	str	r3, [sp, #20]
 800a662:	4619      	mov	r1, r3
 800a664:	f04f 0c0a 	mov.w	ip, #10
 800a668:	4620      	mov	r0, r4
 800a66a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a66e:	3a30      	subs	r2, #48	; 0x30
 800a670:	2a09      	cmp	r2, #9
 800a672:	d903      	bls.n	800a67c <_svfiprintf_r+0x1a8>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d0c5      	beq.n	800a604 <_svfiprintf_r+0x130>
 800a678:	9105      	str	r1, [sp, #20]
 800a67a:	e7c3      	b.n	800a604 <_svfiprintf_r+0x130>
 800a67c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a680:	4604      	mov	r4, r0
 800a682:	2301      	movs	r3, #1
 800a684:	e7f0      	b.n	800a668 <_svfiprintf_r+0x194>
 800a686:	ab03      	add	r3, sp, #12
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	462a      	mov	r2, r5
 800a68c:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <_svfiprintf_r+0x1f8>)
 800a68e:	a904      	add	r1, sp, #16
 800a690:	4638      	mov	r0, r7
 800a692:	f7fd ff0b 	bl	80084ac <_printf_float>
 800a696:	1c42      	adds	r2, r0, #1
 800a698:	4606      	mov	r6, r0
 800a69a:	d1d6      	bne.n	800a64a <_svfiprintf_r+0x176>
 800a69c:	89ab      	ldrh	r3, [r5, #12]
 800a69e:	065b      	lsls	r3, r3, #25
 800a6a0:	f53f af2c 	bmi.w	800a4fc <_svfiprintf_r+0x28>
 800a6a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6a6:	b01d      	add	sp, #116	; 0x74
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	ab03      	add	r3, sp, #12
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <_svfiprintf_r+0x1f8>)
 800a6b4:	a904      	add	r1, sp, #16
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7fe f99c 	bl	80089f4 <_printf_i>
 800a6bc:	e7eb      	b.n	800a696 <_svfiprintf_r+0x1c2>
 800a6be:	bf00      	nop
 800a6c0:	0800b484 	.word	0x0800b484
 800a6c4:	0800b48e 	.word	0x0800b48e
 800a6c8:	080084ad 	.word	0x080084ad
 800a6cc:	0800a41d 	.word	0x0800a41d
 800a6d0:	0800b48a 	.word	0x0800b48a

0800a6d4 <__sfputc_r>:
 800a6d4:	6893      	ldr	r3, [r2, #8]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	b410      	push	{r4}
 800a6dc:	6093      	str	r3, [r2, #8]
 800a6de:	da08      	bge.n	800a6f2 <__sfputc_r+0x1e>
 800a6e0:	6994      	ldr	r4, [r2, #24]
 800a6e2:	42a3      	cmp	r3, r4
 800a6e4:	db01      	blt.n	800a6ea <__sfputc_r+0x16>
 800a6e6:	290a      	cmp	r1, #10
 800a6e8:	d103      	bne.n	800a6f2 <__sfputc_r+0x1e>
 800a6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ee:	f000 b99f 	b.w	800aa30 <__swbuf_r>
 800a6f2:	6813      	ldr	r3, [r2, #0]
 800a6f4:	1c58      	adds	r0, r3, #1
 800a6f6:	6010      	str	r0, [r2, #0]
 800a6f8:	7019      	strb	r1, [r3, #0]
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <__sfputs_r>:
 800a702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	4614      	mov	r4, r2
 800a70a:	18d5      	adds	r5, r2, r3
 800a70c:	42ac      	cmp	r4, r5
 800a70e:	d101      	bne.n	800a714 <__sfputs_r+0x12>
 800a710:	2000      	movs	r0, #0
 800a712:	e007      	b.n	800a724 <__sfputs_r+0x22>
 800a714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a718:	463a      	mov	r2, r7
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7ff ffda 	bl	800a6d4 <__sfputc_r>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d1f3      	bne.n	800a70c <__sfputs_r+0xa>
 800a724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a728 <_vfiprintf_r>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	460d      	mov	r5, r1
 800a72e:	b09d      	sub	sp, #116	; 0x74
 800a730:	4614      	mov	r4, r2
 800a732:	4698      	mov	r8, r3
 800a734:	4606      	mov	r6, r0
 800a736:	b118      	cbz	r0, 800a740 <_vfiprintf_r+0x18>
 800a738:	6983      	ldr	r3, [r0, #24]
 800a73a:	b90b      	cbnz	r3, 800a740 <_vfiprintf_r+0x18>
 800a73c:	f7ff f988 	bl	8009a50 <__sinit>
 800a740:	4b89      	ldr	r3, [pc, #548]	; (800a968 <_vfiprintf_r+0x240>)
 800a742:	429d      	cmp	r5, r3
 800a744:	d11b      	bne.n	800a77e <_vfiprintf_r+0x56>
 800a746:	6875      	ldr	r5, [r6, #4]
 800a748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a74a:	07d9      	lsls	r1, r3, #31
 800a74c:	d405      	bmi.n	800a75a <_vfiprintf_r+0x32>
 800a74e:	89ab      	ldrh	r3, [r5, #12]
 800a750:	059a      	lsls	r2, r3, #22
 800a752:	d402      	bmi.n	800a75a <_vfiprintf_r+0x32>
 800a754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a756:	f7ff fa1e 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	071b      	lsls	r3, r3, #28
 800a75e:	d501      	bpl.n	800a764 <_vfiprintf_r+0x3c>
 800a760:	692b      	ldr	r3, [r5, #16]
 800a762:	b9eb      	cbnz	r3, 800a7a0 <_vfiprintf_r+0x78>
 800a764:	4629      	mov	r1, r5
 800a766:	4630      	mov	r0, r6
 800a768:	f000 f9c6 	bl	800aaf8 <__swsetup_r>
 800a76c:	b1c0      	cbz	r0, 800a7a0 <_vfiprintf_r+0x78>
 800a76e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a770:	07dc      	lsls	r4, r3, #31
 800a772:	d50e      	bpl.n	800a792 <_vfiprintf_r+0x6a>
 800a774:	f04f 30ff 	mov.w	r0, #4294967295
 800a778:	b01d      	add	sp, #116	; 0x74
 800a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77e:	4b7b      	ldr	r3, [pc, #492]	; (800a96c <_vfiprintf_r+0x244>)
 800a780:	429d      	cmp	r5, r3
 800a782:	d101      	bne.n	800a788 <_vfiprintf_r+0x60>
 800a784:	68b5      	ldr	r5, [r6, #8]
 800a786:	e7df      	b.n	800a748 <_vfiprintf_r+0x20>
 800a788:	4b79      	ldr	r3, [pc, #484]	; (800a970 <_vfiprintf_r+0x248>)
 800a78a:	429d      	cmp	r5, r3
 800a78c:	bf08      	it	eq
 800a78e:	68f5      	ldreq	r5, [r6, #12]
 800a790:	e7da      	b.n	800a748 <_vfiprintf_r+0x20>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	0598      	lsls	r0, r3, #22
 800a796:	d4ed      	bmi.n	800a774 <_vfiprintf_r+0x4c>
 800a798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a79a:	f7ff f9fd 	bl	8009b98 <__retarget_lock_release_recursive>
 800a79e:	e7e9      	b.n	800a774 <_vfiprintf_r+0x4c>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ae:	2330      	movs	r3, #48	; 0x30
 800a7b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a974 <_vfiprintf_r+0x24c>
 800a7b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b8:	f04f 0901 	mov.w	r9, #1
 800a7bc:	4623      	mov	r3, r4
 800a7be:	469a      	mov	sl, r3
 800a7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c4:	b10a      	cbz	r2, 800a7ca <_vfiprintf_r+0xa2>
 800a7c6:	2a25      	cmp	r2, #37	; 0x25
 800a7c8:	d1f9      	bne.n	800a7be <_vfiprintf_r+0x96>
 800a7ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ce:	d00b      	beq.n	800a7e8 <_vfiprintf_r+0xc0>
 800a7d0:	465b      	mov	r3, fp
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7ff ff93 	bl	800a702 <__sfputs_r>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	f000 80aa 	beq.w	800a936 <_vfiprintf_r+0x20e>
 800a7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e4:	445a      	add	r2, fp
 800a7e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 80a2 	beq.w	800a936 <_vfiprintf_r+0x20e>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fc:	f10a 0a01 	add.w	sl, sl, #1
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	9307      	str	r3, [sp, #28]
 800a804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a808:	931a      	str	r3, [sp, #104]	; 0x68
 800a80a:	4654      	mov	r4, sl
 800a80c:	2205      	movs	r2, #5
 800a80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a812:	4858      	ldr	r0, [pc, #352]	; (800a974 <_vfiprintf_r+0x24c>)
 800a814:	f7f5 fce4 	bl	80001e0 <memchr>
 800a818:	9a04      	ldr	r2, [sp, #16]
 800a81a:	b9d8      	cbnz	r0, 800a854 <_vfiprintf_r+0x12c>
 800a81c:	06d1      	lsls	r1, r2, #27
 800a81e:	bf44      	itt	mi
 800a820:	2320      	movmi	r3, #32
 800a822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a826:	0713      	lsls	r3, r2, #28
 800a828:	bf44      	itt	mi
 800a82a:	232b      	movmi	r3, #43	; 0x2b
 800a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a830:	f89a 3000 	ldrb.w	r3, [sl]
 800a834:	2b2a      	cmp	r3, #42	; 0x2a
 800a836:	d015      	beq.n	800a864 <_vfiprintf_r+0x13c>
 800a838:	9a07      	ldr	r2, [sp, #28]
 800a83a:	4654      	mov	r4, sl
 800a83c:	2000      	movs	r0, #0
 800a83e:	f04f 0c0a 	mov.w	ip, #10
 800a842:	4621      	mov	r1, r4
 800a844:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a848:	3b30      	subs	r3, #48	; 0x30
 800a84a:	2b09      	cmp	r3, #9
 800a84c:	d94e      	bls.n	800a8ec <_vfiprintf_r+0x1c4>
 800a84e:	b1b0      	cbz	r0, 800a87e <_vfiprintf_r+0x156>
 800a850:	9207      	str	r2, [sp, #28]
 800a852:	e014      	b.n	800a87e <_vfiprintf_r+0x156>
 800a854:	eba0 0308 	sub.w	r3, r0, r8
 800a858:	fa09 f303 	lsl.w	r3, r9, r3
 800a85c:	4313      	orrs	r3, r2
 800a85e:	9304      	str	r3, [sp, #16]
 800a860:	46a2      	mov	sl, r4
 800a862:	e7d2      	b.n	800a80a <_vfiprintf_r+0xe2>
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	1d19      	adds	r1, r3, #4
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	9103      	str	r1, [sp, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bfbb      	ittet	lt
 800a870:	425b      	neglt	r3, r3
 800a872:	f042 0202 	orrlt.w	r2, r2, #2
 800a876:	9307      	strge	r3, [sp, #28]
 800a878:	9307      	strlt	r3, [sp, #28]
 800a87a:	bfb8      	it	lt
 800a87c:	9204      	strlt	r2, [sp, #16]
 800a87e:	7823      	ldrb	r3, [r4, #0]
 800a880:	2b2e      	cmp	r3, #46	; 0x2e
 800a882:	d10c      	bne.n	800a89e <_vfiprintf_r+0x176>
 800a884:	7863      	ldrb	r3, [r4, #1]
 800a886:	2b2a      	cmp	r3, #42	; 0x2a
 800a888:	d135      	bne.n	800a8f6 <_vfiprintf_r+0x1ce>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	1d1a      	adds	r2, r3, #4
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	9203      	str	r2, [sp, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	bfb8      	it	lt
 800a896:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89a:	3402      	adds	r4, #2
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a984 <_vfiprintf_r+0x25c>
 800a8a2:	7821      	ldrb	r1, [r4, #0]
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	4650      	mov	r0, sl
 800a8a8:	f7f5 fc9a 	bl	80001e0 <memchr>
 800a8ac:	b140      	cbz	r0, 800a8c0 <_vfiprintf_r+0x198>
 800a8ae:	2340      	movs	r3, #64	; 0x40
 800a8b0:	eba0 000a 	sub.w	r0, r0, sl
 800a8b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a8b8:	9b04      	ldr	r3, [sp, #16]
 800a8ba:	4303      	orrs	r3, r0
 800a8bc:	3401      	adds	r4, #1
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c4:	482c      	ldr	r0, [pc, #176]	; (800a978 <_vfiprintf_r+0x250>)
 800a8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ca:	2206      	movs	r2, #6
 800a8cc:	f7f5 fc88 	bl	80001e0 <memchr>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d03f      	beq.n	800a954 <_vfiprintf_r+0x22c>
 800a8d4:	4b29      	ldr	r3, [pc, #164]	; (800a97c <_vfiprintf_r+0x254>)
 800a8d6:	bb1b      	cbnz	r3, 800a920 <_vfiprintf_r+0x1f8>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	3307      	adds	r3, #7
 800a8dc:	f023 0307 	bic.w	r3, r3, #7
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	9303      	str	r3, [sp, #12]
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	443b      	add	r3, r7
 800a8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ea:	e767      	b.n	800a7bc <_vfiprintf_r+0x94>
 800a8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	e7a5      	b.n	800a842 <_vfiprintf_r+0x11a>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4620      	mov	r0, r4
 800a904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a908:	3a30      	subs	r2, #48	; 0x30
 800a90a:	2a09      	cmp	r2, #9
 800a90c:	d903      	bls.n	800a916 <_vfiprintf_r+0x1ee>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0c5      	beq.n	800a89e <_vfiprintf_r+0x176>
 800a912:	9105      	str	r1, [sp, #20]
 800a914:	e7c3      	b.n	800a89e <_vfiprintf_r+0x176>
 800a916:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91a:	4604      	mov	r4, r0
 800a91c:	2301      	movs	r3, #1
 800a91e:	e7f0      	b.n	800a902 <_vfiprintf_r+0x1da>
 800a920:	ab03      	add	r3, sp, #12
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	462a      	mov	r2, r5
 800a926:	4b16      	ldr	r3, [pc, #88]	; (800a980 <_vfiprintf_r+0x258>)
 800a928:	a904      	add	r1, sp, #16
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7fd fdbe 	bl	80084ac <_printf_float>
 800a930:	4607      	mov	r7, r0
 800a932:	1c78      	adds	r0, r7, #1
 800a934:	d1d6      	bne.n	800a8e4 <_vfiprintf_r+0x1bc>
 800a936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a938:	07d9      	lsls	r1, r3, #31
 800a93a:	d405      	bmi.n	800a948 <_vfiprintf_r+0x220>
 800a93c:	89ab      	ldrh	r3, [r5, #12]
 800a93e:	059a      	lsls	r2, r3, #22
 800a940:	d402      	bmi.n	800a948 <_vfiprintf_r+0x220>
 800a942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a944:	f7ff f928 	bl	8009b98 <__retarget_lock_release_recursive>
 800a948:	89ab      	ldrh	r3, [r5, #12]
 800a94a:	065b      	lsls	r3, r3, #25
 800a94c:	f53f af12 	bmi.w	800a774 <_vfiprintf_r+0x4c>
 800a950:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a952:	e711      	b.n	800a778 <_vfiprintf_r+0x50>
 800a954:	ab03      	add	r3, sp, #12
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	462a      	mov	r2, r5
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <_vfiprintf_r+0x258>)
 800a95c:	a904      	add	r1, sp, #16
 800a95e:	4630      	mov	r0, r6
 800a960:	f7fe f848 	bl	80089f4 <_printf_i>
 800a964:	e7e4      	b.n	800a930 <_vfiprintf_r+0x208>
 800a966:	bf00      	nop
 800a968:	0800b2e4 	.word	0x0800b2e4
 800a96c:	0800b304 	.word	0x0800b304
 800a970:	0800b2c4 	.word	0x0800b2c4
 800a974:	0800b484 	.word	0x0800b484
 800a978:	0800b48e 	.word	0x0800b48e
 800a97c:	080084ad 	.word	0x080084ad
 800a980:	0800a703 	.word	0x0800a703
 800a984:	0800b48a 	.word	0x0800b48a

0800a988 <_sbrk_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d06      	ldr	r5, [pc, #24]	; (800a9a4 <_sbrk_r+0x1c>)
 800a98c:	2300      	movs	r3, #0
 800a98e:	4604      	mov	r4, r0
 800a990:	4608      	mov	r0, r1
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	f7f7 f84c 	bl	8001a30 <_sbrk>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_sbrk_r+0x1a>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_sbrk_r+0x1a>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	2000208c 	.word	0x2000208c

0800a9a8 <__sread>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	f000 fae6 	bl	800af80 <_read_r>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	bfab      	itete	ge
 800a9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a9bc:	181b      	addge	r3, r3, r0
 800a9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9c2:	bfac      	ite	ge
 800a9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9c6:	81a3      	strhlt	r3, [r4, #12]
 800a9c8:	bd10      	pop	{r4, pc}

0800a9ca <__swrite>:
 800a9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	898b      	ldrh	r3, [r1, #12]
 800a9d2:	05db      	lsls	r3, r3, #23
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	4616      	mov	r6, r2
 800a9da:	d505      	bpl.n	800a9e8 <__swrite+0x1e>
 800a9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f000 f9f8 	bl	800add8 <_lseek_r>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fe:	f000 b869 	b.w	800aad4 <_write_r>

0800aa02 <__sseek>:
 800aa02:	b510      	push	{r4, lr}
 800aa04:	460c      	mov	r4, r1
 800aa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0a:	f000 f9e5 	bl	800add8 <_lseek_r>
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	bf15      	itete	ne
 800aa14:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa1e:	81a3      	strheq	r3, [r4, #12]
 800aa20:	bf18      	it	ne
 800aa22:	81a3      	strhne	r3, [r4, #12]
 800aa24:	bd10      	pop	{r4, pc}

0800aa26 <__sclose>:
 800aa26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2a:	f000 b8f1 	b.w	800ac10 <_close_r>
	...

0800aa30 <__swbuf_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	460e      	mov	r6, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	4605      	mov	r5, r0
 800aa38:	b118      	cbz	r0, 800aa42 <__swbuf_r+0x12>
 800aa3a:	6983      	ldr	r3, [r0, #24]
 800aa3c:	b90b      	cbnz	r3, 800aa42 <__swbuf_r+0x12>
 800aa3e:	f7ff f807 	bl	8009a50 <__sinit>
 800aa42:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <__swbuf_r+0x98>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	d12b      	bne.n	800aaa0 <__swbuf_r+0x70>
 800aa48:	686c      	ldr	r4, [r5, #4]
 800aa4a:	69a3      	ldr	r3, [r4, #24]
 800aa4c:	60a3      	str	r3, [r4, #8]
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	071a      	lsls	r2, r3, #28
 800aa52:	d52f      	bpl.n	800aab4 <__swbuf_r+0x84>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b36b      	cbz	r3, 800aab4 <__swbuf_r+0x84>
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	1ac0      	subs	r0, r0, r3
 800aa5e:	6963      	ldr	r3, [r4, #20]
 800aa60:	b2f6      	uxtb	r6, r6
 800aa62:	4283      	cmp	r3, r0
 800aa64:	4637      	mov	r7, r6
 800aa66:	dc04      	bgt.n	800aa72 <__swbuf_r+0x42>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 f966 	bl	800ad3c <_fflush_r>
 800aa70:	bb30      	cbnz	r0, 800aac0 <__swbuf_r+0x90>
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	60a3      	str	r3, [r4, #8]
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	6022      	str	r2, [r4, #0]
 800aa7e:	701e      	strb	r6, [r3, #0]
 800aa80:	6963      	ldr	r3, [r4, #20]
 800aa82:	3001      	adds	r0, #1
 800aa84:	4283      	cmp	r3, r0
 800aa86:	d004      	beq.n	800aa92 <__swbuf_r+0x62>
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	07db      	lsls	r3, r3, #31
 800aa8c:	d506      	bpl.n	800aa9c <__swbuf_r+0x6c>
 800aa8e:	2e0a      	cmp	r6, #10
 800aa90:	d104      	bne.n	800aa9c <__swbuf_r+0x6c>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4628      	mov	r0, r5
 800aa96:	f000 f951 	bl	800ad3c <_fflush_r>
 800aa9a:	b988      	cbnz	r0, 800aac0 <__swbuf_r+0x90>
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <__swbuf_r+0x9c>)
 800aaa2:	429c      	cmp	r4, r3
 800aaa4:	d101      	bne.n	800aaaa <__swbuf_r+0x7a>
 800aaa6:	68ac      	ldr	r4, [r5, #8]
 800aaa8:	e7cf      	b.n	800aa4a <__swbuf_r+0x1a>
 800aaaa:	4b09      	ldr	r3, [pc, #36]	; (800aad0 <__swbuf_r+0xa0>)
 800aaac:	429c      	cmp	r4, r3
 800aaae:	bf08      	it	eq
 800aab0:	68ec      	ldreq	r4, [r5, #12]
 800aab2:	e7ca      	b.n	800aa4a <__swbuf_r+0x1a>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f81e 	bl	800aaf8 <__swsetup_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d0cb      	beq.n	800aa58 <__swbuf_r+0x28>
 800aac0:	f04f 37ff 	mov.w	r7, #4294967295
 800aac4:	e7ea      	b.n	800aa9c <__swbuf_r+0x6c>
 800aac6:	bf00      	nop
 800aac8:	0800b2e4 	.word	0x0800b2e4
 800aacc:	0800b304 	.word	0x0800b304
 800aad0:	0800b2c4 	.word	0x0800b2c4

0800aad4 <_write_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d07      	ldr	r5, [pc, #28]	; (800aaf4 <_write_r+0x20>)
 800aad8:	4604      	mov	r4, r0
 800aada:	4608      	mov	r0, r1
 800aadc:	4611      	mov	r1, r2
 800aade:	2200      	movs	r2, #0
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	f7f6 f860 	bl	8000ba8 <_write>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d102      	bne.n	800aaf2 <_write_r+0x1e>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	b103      	cbz	r3, 800aaf2 <_write_r+0x1e>
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	2000208c 	.word	0x2000208c

0800aaf8 <__swsetup_r>:
 800aaf8:	4b32      	ldr	r3, [pc, #200]	; (800abc4 <__swsetup_r+0xcc>)
 800aafa:	b570      	push	{r4, r5, r6, lr}
 800aafc:	681d      	ldr	r5, [r3, #0]
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	b125      	cbz	r5, 800ab0e <__swsetup_r+0x16>
 800ab04:	69ab      	ldr	r3, [r5, #24]
 800ab06:	b913      	cbnz	r3, 800ab0e <__swsetup_r+0x16>
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7fe ffa1 	bl	8009a50 <__sinit>
 800ab0e:	4b2e      	ldr	r3, [pc, #184]	; (800abc8 <__swsetup_r+0xd0>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d10f      	bne.n	800ab34 <__swsetup_r+0x3c>
 800ab14:	686c      	ldr	r4, [r5, #4]
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab1c:	0719      	lsls	r1, r3, #28
 800ab1e:	d42c      	bmi.n	800ab7a <__swsetup_r+0x82>
 800ab20:	06dd      	lsls	r5, r3, #27
 800ab22:	d411      	bmi.n	800ab48 <__swsetup_r+0x50>
 800ab24:	2309      	movs	r3, #9
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	e03e      	b.n	800abb2 <__swsetup_r+0xba>
 800ab34:	4b25      	ldr	r3, [pc, #148]	; (800abcc <__swsetup_r+0xd4>)
 800ab36:	429c      	cmp	r4, r3
 800ab38:	d101      	bne.n	800ab3e <__swsetup_r+0x46>
 800ab3a:	68ac      	ldr	r4, [r5, #8]
 800ab3c:	e7eb      	b.n	800ab16 <__swsetup_r+0x1e>
 800ab3e:	4b24      	ldr	r3, [pc, #144]	; (800abd0 <__swsetup_r+0xd8>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	bf08      	it	eq
 800ab44:	68ec      	ldreq	r4, [r5, #12]
 800ab46:	e7e6      	b.n	800ab16 <__swsetup_r+0x1e>
 800ab48:	0758      	lsls	r0, r3, #29
 800ab4a:	d512      	bpl.n	800ab72 <__swsetup_r+0x7a>
 800ab4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab4e:	b141      	cbz	r1, 800ab62 <__swsetup_r+0x6a>
 800ab50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab54:	4299      	cmp	r1, r3
 800ab56:	d002      	beq.n	800ab5e <__swsetup_r+0x66>
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fbb5 	bl	800a2c8 <_free_r>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6363      	str	r3, [r4, #52]	; 0x34
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f043 0308 	orr.w	r3, r3, #8
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	b94b      	cbnz	r3, 800ab92 <__swsetup_r+0x9a>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab88:	d003      	beq.n	800ab92 <__swsetup_r+0x9a>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 f959 	bl	800ae44 <__smakebuf_r>
 800ab92:	89a0      	ldrh	r0, [r4, #12]
 800ab94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab98:	f010 0301 	ands.w	r3, r0, #1
 800ab9c:	d00a      	beq.n	800abb4 <__swsetup_r+0xbc>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60a3      	str	r3, [r4, #8]
 800aba2:	6963      	ldr	r3, [r4, #20]
 800aba4:	425b      	negs	r3, r3
 800aba6:	61a3      	str	r3, [r4, #24]
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	b943      	cbnz	r3, 800abbe <__swsetup_r+0xc6>
 800abac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abb0:	d1ba      	bne.n	800ab28 <__swsetup_r+0x30>
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	0781      	lsls	r1, r0, #30
 800abb6:	bf58      	it	pl
 800abb8:	6963      	ldrpl	r3, [r4, #20]
 800abba:	60a3      	str	r3, [r4, #8]
 800abbc:	e7f4      	b.n	800aba8 <__swsetup_r+0xb0>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e7f7      	b.n	800abb2 <__swsetup_r+0xba>
 800abc2:	bf00      	nop
 800abc4:	20000114 	.word	0x20000114
 800abc8:	0800b2e4 	.word	0x0800b2e4
 800abcc:	0800b304 	.word	0x0800b304
 800abd0:	0800b2c4 	.word	0x0800b2c4

0800abd4 <__assert_func>:
 800abd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abd6:	4614      	mov	r4, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <__assert_func+0x2c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4605      	mov	r5, r0
 800abe0:	68d8      	ldr	r0, [r3, #12]
 800abe2:	b14c      	cbz	r4, 800abf8 <__assert_func+0x24>
 800abe4:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <__assert_func+0x30>)
 800abe6:	9100      	str	r1, [sp, #0]
 800abe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abec:	4906      	ldr	r1, [pc, #24]	; (800ac08 <__assert_func+0x34>)
 800abee:	462b      	mov	r3, r5
 800abf0:	f000 f8e0 	bl	800adb4 <fiprintf>
 800abf4:	f000 f9e3 	bl	800afbe <abort>
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <__assert_func+0x38>)
 800abfa:	461c      	mov	r4, r3
 800abfc:	e7f3      	b.n	800abe6 <__assert_func+0x12>
 800abfe:	bf00      	nop
 800ac00:	20000114 	.word	0x20000114
 800ac04:	0800b495 	.word	0x0800b495
 800ac08:	0800b4a2 	.word	0x0800b4a2
 800ac0c:	0800b4d0 	.word	0x0800b4d0

0800ac10 <_close_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	; (800ac2c <_close_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f6 fed4 	bl	80019c8 <_close>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_close_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_close_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	2000208c 	.word	0x2000208c

0800ac30 <__sflush_r>:
 800ac30:	898a      	ldrh	r2, [r1, #12]
 800ac32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac36:	4605      	mov	r5, r0
 800ac38:	0710      	lsls	r0, r2, #28
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	d458      	bmi.n	800acf0 <__sflush_r+0xc0>
 800ac3e:	684b      	ldr	r3, [r1, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dc05      	bgt.n	800ac50 <__sflush_r+0x20>
 800ac44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dc02      	bgt.n	800ac50 <__sflush_r+0x20>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	d0f9      	beq.n	800ac4a <__sflush_r+0x1a>
 800ac56:	2300      	movs	r3, #0
 800ac58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac5c:	682f      	ldr	r7, [r5, #0]
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	d032      	beq.n	800acc8 <__sflush_r+0x98>
 800ac62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	075a      	lsls	r2, r3, #29
 800ac68:	d505      	bpl.n	800ac76 <__sflush_r+0x46>
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	1ac0      	subs	r0, r0, r3
 800ac6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac70:	b10b      	cbz	r3, 800ac76 <__sflush_r+0x46>
 800ac72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac74:	1ac0      	subs	r0, r0, r3
 800ac76:	2300      	movs	r3, #0
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac7c:	6a21      	ldr	r1, [r4, #32]
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b0      	blx	r6
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	d106      	bne.n	800ac96 <__sflush_r+0x66>
 800ac88:	6829      	ldr	r1, [r5, #0]
 800ac8a:	291d      	cmp	r1, #29
 800ac8c:	d82c      	bhi.n	800ace8 <__sflush_r+0xb8>
 800ac8e:	4a2a      	ldr	r2, [pc, #168]	; (800ad38 <__sflush_r+0x108>)
 800ac90:	40ca      	lsrs	r2, r1
 800ac92:	07d6      	lsls	r6, r2, #31
 800ac94:	d528      	bpl.n	800ace8 <__sflush_r+0xb8>
 800ac96:	2200      	movs	r2, #0
 800ac98:	6062      	str	r2, [r4, #4]
 800ac9a:	04d9      	lsls	r1, r3, #19
 800ac9c:	6922      	ldr	r2, [r4, #16]
 800ac9e:	6022      	str	r2, [r4, #0]
 800aca0:	d504      	bpl.n	800acac <__sflush_r+0x7c>
 800aca2:	1c42      	adds	r2, r0, #1
 800aca4:	d101      	bne.n	800acaa <__sflush_r+0x7a>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	b903      	cbnz	r3, 800acac <__sflush_r+0x7c>
 800acaa:	6560      	str	r0, [r4, #84]	; 0x54
 800acac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acae:	602f      	str	r7, [r5, #0]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	d0ca      	beq.n	800ac4a <__sflush_r+0x1a>
 800acb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <__sflush_r+0x92>
 800acbc:	4628      	mov	r0, r5
 800acbe:	f7ff fb03 	bl	800a2c8 <_free_r>
 800acc2:	2000      	movs	r0, #0
 800acc4:	6360      	str	r0, [r4, #52]	; 0x34
 800acc6:	e7c1      	b.n	800ac4c <__sflush_r+0x1c>
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	2301      	movs	r3, #1
 800accc:	4628      	mov	r0, r5
 800acce:	47b0      	blx	r6
 800acd0:	1c41      	adds	r1, r0, #1
 800acd2:	d1c7      	bne.n	800ac64 <__sflush_r+0x34>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0c4      	beq.n	800ac64 <__sflush_r+0x34>
 800acda:	2b1d      	cmp	r3, #29
 800acdc:	d001      	beq.n	800ace2 <__sflush_r+0xb2>
 800acde:	2b16      	cmp	r3, #22
 800ace0:	d101      	bne.n	800ace6 <__sflush_r+0xb6>
 800ace2:	602f      	str	r7, [r5, #0]
 800ace4:	e7b1      	b.n	800ac4a <__sflush_r+0x1a>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	e7ad      	b.n	800ac4c <__sflush_r+0x1c>
 800acf0:	690f      	ldr	r7, [r1, #16]
 800acf2:	2f00      	cmp	r7, #0
 800acf4:	d0a9      	beq.n	800ac4a <__sflush_r+0x1a>
 800acf6:	0793      	lsls	r3, r2, #30
 800acf8:	680e      	ldr	r6, [r1, #0]
 800acfa:	bf08      	it	eq
 800acfc:	694b      	ldreq	r3, [r1, #20]
 800acfe:	600f      	str	r7, [r1, #0]
 800ad00:	bf18      	it	ne
 800ad02:	2300      	movne	r3, #0
 800ad04:	eba6 0807 	sub.w	r8, r6, r7
 800ad08:	608b      	str	r3, [r1, #8]
 800ad0a:	f1b8 0f00 	cmp.w	r8, #0
 800ad0e:	dd9c      	ble.n	800ac4a <__sflush_r+0x1a>
 800ad10:	6a21      	ldr	r1, [r4, #32]
 800ad12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad14:	4643      	mov	r3, r8
 800ad16:	463a      	mov	r2, r7
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	dc06      	bgt.n	800ad2e <__sflush_r+0xfe>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	e78e      	b.n	800ac4c <__sflush_r+0x1c>
 800ad2e:	4407      	add	r7, r0
 800ad30:	eba8 0800 	sub.w	r8, r8, r0
 800ad34:	e7e9      	b.n	800ad0a <__sflush_r+0xda>
 800ad36:	bf00      	nop
 800ad38:	20400001 	.word	0x20400001

0800ad3c <_fflush_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	690b      	ldr	r3, [r1, #16]
 800ad40:	4605      	mov	r5, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	b913      	cbnz	r3, 800ad4c <_fflush_r+0x10>
 800ad46:	2500      	movs	r5, #0
 800ad48:	4628      	mov	r0, r5
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	b118      	cbz	r0, 800ad56 <_fflush_r+0x1a>
 800ad4e:	6983      	ldr	r3, [r0, #24]
 800ad50:	b90b      	cbnz	r3, 800ad56 <_fflush_r+0x1a>
 800ad52:	f7fe fe7d 	bl	8009a50 <__sinit>
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <_fflush_r+0x6c>)
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	d11b      	bne.n	800ad94 <_fflush_r+0x58>
 800ad5c:	686c      	ldr	r4, [r5, #4]
 800ad5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0ef      	beq.n	800ad46 <_fflush_r+0xa>
 800ad66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad68:	07d0      	lsls	r0, r2, #31
 800ad6a:	d404      	bmi.n	800ad76 <_fflush_r+0x3a>
 800ad6c:	0599      	lsls	r1, r3, #22
 800ad6e:	d402      	bmi.n	800ad76 <_fflush_r+0x3a>
 800ad70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad72:	f7fe ff10 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800ad76:	4628      	mov	r0, r5
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7ff ff59 	bl	800ac30 <__sflush_r>
 800ad7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad80:	07da      	lsls	r2, r3, #31
 800ad82:	4605      	mov	r5, r0
 800ad84:	d4e0      	bmi.n	800ad48 <_fflush_r+0xc>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	059b      	lsls	r3, r3, #22
 800ad8a:	d4dd      	bmi.n	800ad48 <_fflush_r+0xc>
 800ad8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad8e:	f7fe ff03 	bl	8009b98 <__retarget_lock_release_recursive>
 800ad92:	e7d9      	b.n	800ad48 <_fflush_r+0xc>
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <_fflush_r+0x70>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <_fflush_r+0x62>
 800ad9a:	68ac      	ldr	r4, [r5, #8]
 800ad9c:	e7df      	b.n	800ad5e <_fflush_r+0x22>
 800ad9e:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <_fflush_r+0x74>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68ec      	ldreq	r4, [r5, #12]
 800ada6:	e7da      	b.n	800ad5e <_fflush_r+0x22>
 800ada8:	0800b2e4 	.word	0x0800b2e4
 800adac:	0800b304 	.word	0x0800b304
 800adb0:	0800b2c4 	.word	0x0800b2c4

0800adb4 <fiprintf>:
 800adb4:	b40e      	push	{r1, r2, r3}
 800adb6:	b503      	push	{r0, r1, lr}
 800adb8:	4601      	mov	r1, r0
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	4805      	ldr	r0, [pc, #20]	; (800add4 <fiprintf+0x20>)
 800adbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc2:	6800      	ldr	r0, [r0, #0]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	f7ff fcaf 	bl	800a728 <_vfiprintf_r>
 800adca:	b002      	add	sp, #8
 800adcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800add0:	b003      	add	sp, #12
 800add2:	4770      	bx	lr
 800add4:	20000114 	.word	0x20000114

0800add8 <_lseek_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d07      	ldr	r5, [pc, #28]	; (800adf8 <_lseek_r+0x20>)
 800addc:	4604      	mov	r4, r0
 800adde:	4608      	mov	r0, r1
 800ade0:	4611      	mov	r1, r2
 800ade2:	2200      	movs	r2, #0
 800ade4:	602a      	str	r2, [r5, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f7f6 fe15 	bl	8001a16 <_lseek>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_lseek_r+0x1e>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_lseek_r+0x1e>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	2000208c 	.word	0x2000208c

0800adfc <__swhatbuf_r>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	460e      	mov	r6, r1
 800ae00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae04:	2900      	cmp	r1, #0
 800ae06:	b096      	sub	sp, #88	; 0x58
 800ae08:	4614      	mov	r4, r2
 800ae0a:	461d      	mov	r5, r3
 800ae0c:	da07      	bge.n	800ae1e <__swhatbuf_r+0x22>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	89b3      	ldrh	r3, [r6, #12]
 800ae14:	061a      	lsls	r2, r3, #24
 800ae16:	d410      	bmi.n	800ae3a <__swhatbuf_r+0x3e>
 800ae18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1c:	e00e      	b.n	800ae3c <__swhatbuf_r+0x40>
 800ae1e:	466a      	mov	r2, sp
 800ae20:	f000 f8d4 	bl	800afcc <_fstat_r>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	dbf2      	blt.n	800ae0e <__swhatbuf_r+0x12>
 800ae28:	9a01      	ldr	r2, [sp, #4]
 800ae2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae32:	425a      	negs	r2, r3
 800ae34:	415a      	adcs	r2, r3
 800ae36:	602a      	str	r2, [r5, #0]
 800ae38:	e7ee      	b.n	800ae18 <__swhatbuf_r+0x1c>
 800ae3a:	2340      	movs	r3, #64	; 0x40
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	b016      	add	sp, #88	; 0x58
 800ae42:	bd70      	pop	{r4, r5, r6, pc}

0800ae44 <__smakebuf_r>:
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae48:	079d      	lsls	r5, r3, #30
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	d507      	bpl.n	800ae60 <__smakebuf_r+0x1c>
 800ae50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	2301      	movs	r3, #1
 800ae5a:	6163      	str	r3, [r4, #20]
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	ab01      	add	r3, sp, #4
 800ae62:	466a      	mov	r2, sp
 800ae64:	f7ff ffca 	bl	800adfc <__swhatbuf_r>
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff fa7b 	bl	800a368 <_malloc_r>
 800ae72:	b948      	cbnz	r0, 800ae88 <__smakebuf_r+0x44>
 800ae74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae78:	059a      	lsls	r2, r3, #22
 800ae7a:	d4ef      	bmi.n	800ae5c <__smakebuf_r+0x18>
 800ae7c:	f023 0303 	bic.w	r3, r3, #3
 800ae80:	f043 0302 	orr.w	r3, r3, #2
 800ae84:	81a3      	strh	r3, [r4, #12]
 800ae86:	e7e3      	b.n	800ae50 <__smakebuf_r+0xc>
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <__smakebuf_r+0x7c>)
 800ae8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	6020      	str	r0, [r4, #0]
 800ae90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae94:	81a3      	strh	r3, [r4, #12]
 800ae96:	9b00      	ldr	r3, [sp, #0]
 800ae98:	6163      	str	r3, [r4, #20]
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	6120      	str	r0, [r4, #16]
 800ae9e:	b15b      	cbz	r3, 800aeb8 <__smakebuf_r+0x74>
 800aea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea4:	4630      	mov	r0, r6
 800aea6:	f000 f8a3 	bl	800aff0 <_isatty_r>
 800aeaa:	b128      	cbz	r0, 800aeb8 <__smakebuf_r+0x74>
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f023 0303 	bic.w	r3, r3, #3
 800aeb2:	f043 0301 	orr.w	r3, r3, #1
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	89a0      	ldrh	r0, [r4, #12]
 800aeba:	4305      	orrs	r5, r0
 800aebc:	81a5      	strh	r5, [r4, #12]
 800aebe:	e7cd      	b.n	800ae5c <__smakebuf_r+0x18>
 800aec0:	080099e9 	.word	0x080099e9

0800aec4 <__ascii_mbtowc>:
 800aec4:	b082      	sub	sp, #8
 800aec6:	b901      	cbnz	r1, 800aeca <__ascii_mbtowc+0x6>
 800aec8:	a901      	add	r1, sp, #4
 800aeca:	b142      	cbz	r2, 800aede <__ascii_mbtowc+0x1a>
 800aecc:	b14b      	cbz	r3, 800aee2 <__ascii_mbtowc+0x1e>
 800aece:	7813      	ldrb	r3, [r2, #0]
 800aed0:	600b      	str	r3, [r1, #0]
 800aed2:	7812      	ldrb	r2, [r2, #0]
 800aed4:	1e10      	subs	r0, r2, #0
 800aed6:	bf18      	it	ne
 800aed8:	2001      	movne	r0, #1
 800aeda:	b002      	add	sp, #8
 800aedc:	4770      	bx	lr
 800aede:	4610      	mov	r0, r2
 800aee0:	e7fb      	b.n	800aeda <__ascii_mbtowc+0x16>
 800aee2:	f06f 0001 	mvn.w	r0, #1
 800aee6:	e7f8      	b.n	800aeda <__ascii_mbtowc+0x16>

0800aee8 <memmove>:
 800aee8:	4288      	cmp	r0, r1
 800aeea:	b510      	push	{r4, lr}
 800aeec:	eb01 0402 	add.w	r4, r1, r2
 800aef0:	d902      	bls.n	800aef8 <memmove+0x10>
 800aef2:	4284      	cmp	r4, r0
 800aef4:	4623      	mov	r3, r4
 800aef6:	d807      	bhi.n	800af08 <memmove+0x20>
 800aef8:	1e43      	subs	r3, r0, #1
 800aefa:	42a1      	cmp	r1, r4
 800aefc:	d008      	beq.n	800af10 <memmove+0x28>
 800aefe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af06:	e7f8      	b.n	800aefa <memmove+0x12>
 800af08:	4402      	add	r2, r0
 800af0a:	4601      	mov	r1, r0
 800af0c:	428a      	cmp	r2, r1
 800af0e:	d100      	bne.n	800af12 <memmove+0x2a>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af1a:	e7f7      	b.n	800af0c <memmove+0x24>

0800af1c <__malloc_lock>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__malloc_lock+0x8>)
 800af1e:	f7fe be3a 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 800af22:	bf00      	nop
 800af24:	20002084 	.word	0x20002084

0800af28 <__malloc_unlock>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__malloc_unlock+0x8>)
 800af2a:	f7fe be35 	b.w	8009b98 <__retarget_lock_release_recursive>
 800af2e:	bf00      	nop
 800af30:	20002084 	.word	0x20002084

0800af34 <_realloc_r>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	4607      	mov	r7, r0
 800af38:	4614      	mov	r4, r2
 800af3a:	460e      	mov	r6, r1
 800af3c:	b921      	cbnz	r1, 800af48 <_realloc_r+0x14>
 800af3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af42:	4611      	mov	r1, r2
 800af44:	f7ff ba10 	b.w	800a368 <_malloc_r>
 800af48:	b922      	cbnz	r2, 800af54 <_realloc_r+0x20>
 800af4a:	f7ff f9bd 	bl	800a2c8 <_free_r>
 800af4e:	4625      	mov	r5, r4
 800af50:	4628      	mov	r0, r5
 800af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af54:	f000 f85c 	bl	800b010 <_malloc_usable_size_r>
 800af58:	42a0      	cmp	r0, r4
 800af5a:	d20f      	bcs.n	800af7c <_realloc_r+0x48>
 800af5c:	4621      	mov	r1, r4
 800af5e:	4638      	mov	r0, r7
 800af60:	f7ff fa02 	bl	800a368 <_malloc_r>
 800af64:	4605      	mov	r5, r0
 800af66:	2800      	cmp	r0, #0
 800af68:	d0f2      	beq.n	800af50 <_realloc_r+0x1c>
 800af6a:	4631      	mov	r1, r6
 800af6c:	4622      	mov	r2, r4
 800af6e:	f7fd f9e7 	bl	8008340 <memcpy>
 800af72:	4631      	mov	r1, r6
 800af74:	4638      	mov	r0, r7
 800af76:	f7ff f9a7 	bl	800a2c8 <_free_r>
 800af7a:	e7e9      	b.n	800af50 <_realloc_r+0x1c>
 800af7c:	4635      	mov	r5, r6
 800af7e:	e7e7      	b.n	800af50 <_realloc_r+0x1c>

0800af80 <_read_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4d07      	ldr	r5, [pc, #28]	; (800afa0 <_read_r+0x20>)
 800af84:	4604      	mov	r4, r0
 800af86:	4608      	mov	r0, r1
 800af88:	4611      	mov	r1, r2
 800af8a:	2200      	movs	r2, #0
 800af8c:	602a      	str	r2, [r5, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	f7f6 fcfd 	bl	800198e <_read>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_read_r+0x1e>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_read_r+0x1e>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	2000208c 	.word	0x2000208c

0800afa4 <__ascii_wctomb>:
 800afa4:	b149      	cbz	r1, 800afba <__ascii_wctomb+0x16>
 800afa6:	2aff      	cmp	r2, #255	; 0xff
 800afa8:	bf85      	ittet	hi
 800afaa:	238a      	movhi	r3, #138	; 0x8a
 800afac:	6003      	strhi	r3, [r0, #0]
 800afae:	700a      	strbls	r2, [r1, #0]
 800afb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800afb4:	bf98      	it	ls
 800afb6:	2001      	movls	r0, #1
 800afb8:	4770      	bx	lr
 800afba:	4608      	mov	r0, r1
 800afbc:	4770      	bx	lr

0800afbe <abort>:
 800afbe:	b508      	push	{r3, lr}
 800afc0:	2006      	movs	r0, #6
 800afc2:	f000 f855 	bl	800b070 <raise>
 800afc6:	2001      	movs	r0, #1
 800afc8:	f7f6 fcd7 	bl	800197a <_exit>

0800afcc <_fstat_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	4d07      	ldr	r5, [pc, #28]	; (800afec <_fstat_r+0x20>)
 800afd0:	2300      	movs	r3, #0
 800afd2:	4604      	mov	r4, r0
 800afd4:	4608      	mov	r0, r1
 800afd6:	4611      	mov	r1, r2
 800afd8:	602b      	str	r3, [r5, #0]
 800afda:	f7f6 fd01 	bl	80019e0 <_fstat>
 800afde:	1c43      	adds	r3, r0, #1
 800afe0:	d102      	bne.n	800afe8 <_fstat_r+0x1c>
 800afe2:	682b      	ldr	r3, [r5, #0]
 800afe4:	b103      	cbz	r3, 800afe8 <_fstat_r+0x1c>
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	bd38      	pop	{r3, r4, r5, pc}
 800afea:	bf00      	nop
 800afec:	2000208c 	.word	0x2000208c

0800aff0 <_isatty_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d06      	ldr	r5, [pc, #24]	; (800b00c <_isatty_r+0x1c>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	f7f6 fd00 	bl	8001a00 <_isatty>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_isatty_r+0x1a>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_isatty_r+0x1a>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	2000208c 	.word	0x2000208c

0800b010 <_malloc_usable_size_r>:
 800b010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b014:	1f18      	subs	r0, r3, #4
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfbc      	itt	lt
 800b01a:	580b      	ldrlt	r3, [r1, r0]
 800b01c:	18c0      	addlt	r0, r0, r3
 800b01e:	4770      	bx	lr

0800b020 <_raise_r>:
 800b020:	291f      	cmp	r1, #31
 800b022:	b538      	push	{r3, r4, r5, lr}
 800b024:	4604      	mov	r4, r0
 800b026:	460d      	mov	r5, r1
 800b028:	d904      	bls.n	800b034 <_raise_r+0x14>
 800b02a:	2316      	movs	r3, #22
 800b02c:	6003      	str	r3, [r0, #0]
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b036:	b112      	cbz	r2, 800b03e <_raise_r+0x1e>
 800b038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b03c:	b94b      	cbnz	r3, 800b052 <_raise_r+0x32>
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 f830 	bl	800b0a4 <_getpid_r>
 800b044:	462a      	mov	r2, r5
 800b046:	4601      	mov	r1, r0
 800b048:	4620      	mov	r0, r4
 800b04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b04e:	f000 b817 	b.w	800b080 <_kill_r>
 800b052:	2b01      	cmp	r3, #1
 800b054:	d00a      	beq.n	800b06c <_raise_r+0x4c>
 800b056:	1c59      	adds	r1, r3, #1
 800b058:	d103      	bne.n	800b062 <_raise_r+0x42>
 800b05a:	2316      	movs	r3, #22
 800b05c:	6003      	str	r3, [r0, #0]
 800b05e:	2001      	movs	r0, #1
 800b060:	e7e7      	b.n	800b032 <_raise_r+0x12>
 800b062:	2400      	movs	r4, #0
 800b064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b068:	4628      	mov	r0, r5
 800b06a:	4798      	blx	r3
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7e0      	b.n	800b032 <_raise_r+0x12>

0800b070 <raise>:
 800b070:	4b02      	ldr	r3, [pc, #8]	; (800b07c <raise+0xc>)
 800b072:	4601      	mov	r1, r0
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	f7ff bfd3 	b.w	800b020 <_raise_r>
 800b07a:	bf00      	nop
 800b07c:	20000114 	.word	0x20000114

0800b080 <_kill_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d07      	ldr	r5, [pc, #28]	; (800b0a0 <_kill_r+0x20>)
 800b084:	2300      	movs	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	4608      	mov	r0, r1
 800b08a:	4611      	mov	r1, r2
 800b08c:	602b      	str	r3, [r5, #0]
 800b08e:	f7f6 fc64 	bl	800195a <_kill>
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	d102      	bne.n	800b09c <_kill_r+0x1c>
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	b103      	cbz	r3, 800b09c <_kill_r+0x1c>
 800b09a:	6023      	str	r3, [r4, #0]
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	bf00      	nop
 800b0a0:	2000208c 	.word	0x2000208c

0800b0a4 <_getpid_r>:
 800b0a4:	f7f6 bc51 	b.w	800194a <_getpid>

0800b0a8 <_init>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	bf00      	nop
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr

0800b0b4 <_fini>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr


NRF905_Radio_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004898  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b74  08004b74  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004b74  08004b74  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b74  08004b74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000078  08004bf4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004bf4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1e8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f99  00000000  00000000  0002b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbbe  00000000  00000000  0002e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbb6  00000000  00000000  0004a096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e764  00000000  00000000  00055c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f43b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da4  00000000  00000000  000f4404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a10 	.word	0x08004a10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004a10 	.word	0x08004a10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000286:	4b36      	ldr	r3, [pc, #216]	; (8000360 <MX_GPIO_Init+0xf0>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a35      	ldr	r2, [pc, #212]	; (8000360 <MX_GPIO_Init+0xf0>)
 800028c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b33      	ldr	r3, [pc, #204]	; (8000360 <MX_GPIO_Init+0xf0>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029e:	4b30      	ldr	r3, [pc, #192]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a2f      	ldr	r2, [pc, #188]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a29      	ldr	r2, [pc, #164]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b27      	ldr	r3, [pc, #156]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|Tx_Pin|CE_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	21c2      	movs	r1, #194	; 0xc2
 80002d2:	4824      	ldr	r0, [pc, #144]	; (8000364 <MX_GPIO_Init+0xf4>)
 80002d4:	f000 ff10 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 ff09 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Address_match_Pin|Data_ready_Pin;
 80002e6:	2303      	movs	r3, #3
 80002e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	4619      	mov	r1, r3
 80002f8:	481b      	ldr	r0, [pc, #108]	; (8000368 <MX_GPIO_Init+0xf8>)
 80002fa:	f000 fd73 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_Pin|Tx_Pin|CE_Pin;
 80002fe:	23c2      	movs	r3, #194	; 0xc2
 8000300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	4619      	mov	r1, r3
 8000314:	4813      	ldr	r0, [pc, #76]	; (8000364 <MX_GPIO_Init+0xf4>)
 8000316:	f000 fd65 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Carrier_detect_Pin;
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Carrier_detect_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 030c 	add.w	r3, r7, #12
 800032c:	4619      	mov	r1, r3
 800032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000332:	f000 fd57 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800033a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4619      	mov	r1, r3
 800034e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000352:	f000 fd47 	bl	8000de4 <HAL_GPIO_Init>

}
 8000356:	bf00      	nop
 8000358:	3720      	adds	r7, #32
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000
 8000364:	48000400 	.word	0x48000400
 8000368:	48001400 	.word	0x48001400

0800036c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1 , ptr , len , 50);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	b29a      	uxth	r2, r3
 800037c:	2332      	movs	r3, #50	; 0x32
 800037e:	68b9      	ldr	r1, [r7, #8]
 8000380:	4803      	ldr	r0, [pc, #12]	; (8000390 <_write+0x24>)
 8000382:	f003 f88b 	bl	800349c <HAL_UART_Transmit>
  return len;
 8000386:	687b      	ldr	r3, [r7, #4]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000108 	.word	0x20000108

08000394 <is_Data_Ready>:
	printf("Received -> %d \r\n" , rx_data );

	PWR_ON();
}

uint8_t is_Data_Ready(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(Data_ready_GPIO_Port, Data_ready_Pin)== GPIO_PIN_SET )
 8000398:	2102      	movs	r1, #2
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <is_Data_Ready+0x1c>)
 800039c:	f000 fe94 	bl	80010c8 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d101      	bne.n	80003aa <is_Data_Ready+0x16>
		return 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e000      	b.n	80003ac <is_Data_Ready+0x18>
	else
		return 0;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	48001400 	.word	0x48001400

080003b4 <set_Standby_mode>:
		return 1;
	else
		return 0;
}

void set_Standby_mode(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2180      	movs	r1, #128	; 0x80
 80003bc:	4802      	ldr	r0, [pc, #8]	; (80003c8 <set_Standby_mode+0x14>)
 80003be:	f000 fe9b 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	48000400 	.word	0x48000400

080003cc <set_TxRx_mode>:

void set_TxRx_mode(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <set_TxRx_mode+0x14>)
 80003d6:	f000 fe8f 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	48000400 	.word	0x48000400

080003e4 <set_Tx_mode>:

void set_Tx_mode(){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	4802      	ldr	r0, [pc, #8]	; (80003f8 <set_Tx_mode+0x14>)
 80003ee:	f000 fe83 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	48000400 	.word	0x48000400

080003fc <set_Rx_mode>:

void set_Rx_mode(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2140      	movs	r1, #64	; 0x40
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <set_Rx_mode+0x14>)
 8000406:	f000 fe77 	bl	80010f8 <HAL_GPIO_WritePin>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	48000400 	.word	0x48000400

08000414 <PWR_ON>:

void PWR_ON(){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2102      	movs	r1, #2
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <PWR_ON+0x14>)
 800041e:	f000 fe6b 	bl	80010f8 <HAL_GPIO_WritePin>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	48000400 	.word	0x48000400

0800042c <PWR_OFF>:

void PWR_OFF(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2102      	movs	r1, #2
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <PWR_OFF+0x14>)
 8000436:	f000 fe5f 	bl	80010f8 <HAL_GPIO_WritePin>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	48000400 	.word	0x48000400

08000444 <set_Channel>:

void set_Channel(){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	PWR_OFF();
 800044a:	f7ff ffef 	bl	800042c <PWR_OFF>

	uint8_t channel_add=0x00;
 800044e:	2300      	movs	r3, #0
 8000450:	71fb      	strb	r3, [r7, #7]
	uint8_t setCHANNEL = ( CHANNEL_CONFIG | (PA_PWR_6dbm<<2) | HFREQ_PLL );
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <set_Channel+0x74>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b25a      	sxtb	r2, r3
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <set_Channel+0x78>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b25b      	sxtb	r3, r3
 8000460:	4313      	orrs	r3, r2
 8000462:	b25a      	sxtb	r2, r3
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <set_Channel+0x7c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b25b      	sxtb	r3, r3
 800046a:	4313      	orrs	r3, r2
 800046c:	b25b      	sxtb	r3, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f000 fe3c 	bl	80010f8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &setCHANNEL , 1 , 1000);
 8000480:	1db9      	adds	r1, r7, #6
 8000482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000486:	2201      	movs	r2, #1
 8000488:	480e      	ldr	r0, [pc, #56]	; (80004c4 <set_Channel+0x80>)
 800048a:	f002 f954 	bl	8002736 <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &CH_NO, 1 , 1000);
 800048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000492:	2201      	movs	r2, #1
 8000494:	490c      	ldr	r1, [pc, #48]	; (80004c8 <set_Channel+0x84>)
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <set_Channel+0x80>)
 8000498:	f002 f94d 	bl	8002736 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a6:	f000 fe27 	bl	80010f8 <HAL_GPIO_WritePin>

	PWR_ON();
 80004aa:	f7ff ffb3 	bl	8000414 <PWR_ON>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000004 	.word	0x20000004
 80004bc:	20000002 	.word	0x20000002
 80004c0:	20000094 	.word	0x20000094
 80004c4:	200000a4 	.word	0x200000a4
 80004c8:	20000003 	.word	0x20000003

080004cc <read_reg>:

void read_reg(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	uint8_t read=0x21;
 80004d2:	2321      	movs	r3, #33	; 0x21
 80004d4:	71fb      	strb	r3, [r7, #7]
	//read = 0x24;
	uint8_t data=0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71bb      	strb	r3, [r7, #6]

	PWR_OFF();
 80004da:	f7ff ffa7 	bl	800042c <PWR_OFF>
	//set_Rx_mode();
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 fe06 	bl	80010f8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &read, 1 , 1000);
 80004ec:	1df9      	adds	r1, r7, #7
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	2201      	movs	r2, #1
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <read_reg+0x60>)
 80004f6:	f002 f91e 	bl	8002736 <HAL_SPI_Transmit>
	HAL_SPI_Receive( &hspi1, &data, 1 , 1000);
 80004fa:	1db9      	adds	r1, r7, #6
 80004fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000500:	2201      	movs	r2, #1
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <read_reg+0x60>)
 8000504:	f002 fa85 	bl	8002a12 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 fdf1 	bl	80010f8 <HAL_GPIO_WritePin>

	printf("Register -> %d \r\n" , data );
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4619      	mov	r1, r3
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <read_reg+0x64>)
 800051c:	f003 fb22 	bl	8003b64 <iprintf>

	PWR_ON();
 8000520:	f7ff ff78 	bl	8000414 <PWR_ON>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000a4 	.word	0x200000a4
 8000530:	08004a3c 	.word	0x08004a3c

08000534 <TX_radio>:

	PWR_ON();

}

void TX_radio(){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

	set_Standby_mode();
 800053a:	f7ff ff3b 	bl	80003b4 <set_Standby_mode>
	PWR_ON();
 800053e:	f7ff ff69 	bl	8000414 <PWR_ON>
	set_Tx_mode();
 8000542:	f7ff ff4f 	bl	80003e4 <set_Tx_mode>
	uint8_t add[4] = { 0xE7,0xE7,0xE7,0xE7};
 8000546:	f04f 33e7 	mov.w	r3, #3890735079	; 0xe7e7e7e7
 800054a:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f000 fdcf 	bl	80010f8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &W_TX_ADDRESS, 1 , 1000);
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	2201      	movs	r2, #1
 8000560:	491f      	ldr	r1, [pc, #124]	; (80005e0 <TX_radio+0xac>)
 8000562:	4820      	ldr	r0, [pc, #128]	; (80005e4 <TX_radio+0xb0>)
 8000564:	f002 f8e7 	bl	8002736 <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &add, 4 , 1000);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	2204      	movs	r2, #4
 8000570:	481c      	ldr	r0, [pc, #112]	; (80005e4 <TX_radio+0xb0>)
 8000572:	f002 f8e0 	bl	8002736 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f000 fdba 	bl	80010f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fdb3 	bl	80010f8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &W_TX_PAYLOAD, 1 , 1000);
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	2201      	movs	r2, #1
 8000598:	4913      	ldr	r1, [pc, #76]	; (80005e8 <TX_radio+0xb4>)
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <TX_radio+0xb0>)
 800059c:	f002 f8cb 	bl	8002736 <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &tx_data, 1 , 1000);
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	2201      	movs	r2, #1
 80005a6:	4911      	ldr	r1, [pc, #68]	; (80005ec <TX_radio+0xb8>)
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <TX_radio+0xb0>)
 80005aa:	f002 f8c4 	bl	8002736 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fd9e 	bl	80010f8 <HAL_GPIO_WritePin>
	read_reg();
 80005bc:	f7ff ff86 	bl	80004cc <read_reg>

	set_TxRx_mode();
 80005c0:	f7ff ff04 	bl	80003cc <set_TxRx_mode>

	while( !is_Data_Ready() );
 80005c4:	bf00      	nop
 80005c6:	f7ff fee5 	bl	8000394 <is_Data_Ready>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0fa      	beq.n	80005c6 <TX_radio+0x92>

	HAL_Delay(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 fafd 	bl	8000bd0 <HAL_Delay>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000001 	.word	0x20000001
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000005 	.word	0x20000005

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fa86 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f820 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f7ff fe38 	bl	8000270 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000600:	f000 f878 	bl	80006f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f9e0 	bl	80009c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi1);
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <main+0x44>)
 800060a:	f001 fff1 	bl	80025f0 <HAL_SPI_Init>
//  read_reg();
//  set_TxRx_mode();
//  set_Rx_mode();


  set_Channel();
 800060e:	f7ff ff19 	bl	8000444 <set_Channel>
  set_Rx_mode();
 8000612:	f7ff fef3 	bl	80003fc <set_Rx_mode>
//	  if( HAL_GPIO_ReadPin(Data_ready_GPIO_Port, Data_ready_Pin) == GPIO_PIN_SET )
//		  printf("Data Ready \r\n");
//	  //read_reg();
//	  TX_radio();

	set_TxRx_mode();
 8000616:	f7ff fed9 	bl	80003cc <set_TxRx_mode>
	if( HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin) == GPIO_PIN_SET )
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <main+0x48>)
 800061e:	f000 fd53 	bl	80010c8 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d101      	bne.n	800062c <main+0x3c>
	  TX_radio();
 8000628:	f7ff ff84 	bl	8000534 <TX_radio>

	  HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 facf 	bl	8000bd0 <HAL_Delay>
	set_TxRx_mode();
 8000632:	e7f0      	b.n	8000616 <main+0x26>
 8000634:	200000a4 	.word	0x200000a4
 8000638:	48000400 	.word	0x48000400

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	; 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000646:	2228      	movs	r2, #40	; 0x28
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fa82 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fd4a 	bl	8001128 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800069a:	f000 f826 	bl	80006ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc3d 	bl	8001f38 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c4:	f000 f811 	bl	80006ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fe66 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006de:	f000 f804 	bl	80006ea <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3758      	adds	r7, #88	; 0x58
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ee:	b672      	cpsid	i
}
 80006f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x8>

080006f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_SPI1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_SPI1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_SPI1_Init+0x74>)
 8000700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_SPI1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI1_Init+0x74>)
 800070e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000712:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0x74>)
 8000722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000726:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI1_Init+0x74>)
 8000742:	2207      	movs	r2, #7
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI1_Init+0x74>)
 800074e:	2208      	movs	r2, #8
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_SPI1_Init+0x74>)
 8000754:	f001 ff4c 	bl	80025f0 <HAL_SPI_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f7ff ffc4 	bl	80006ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000a4 	.word	0x200000a4
 800076c:	40013000 	.word	0x40013000

08000770 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_SPI_MspInit+0x7c>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d127      	bne.n	80007e2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_SPI_MspInit+0x80>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <HAL_SPI_MspInit+0x80>)
 8000798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_SPI_MspInit+0x80>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_SPI_MspInit+0x80>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_SPI_MspInit+0x80>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_SPI_MspInit+0x80>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007c2:	2338      	movs	r3, #56	; 0x38
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d2:	2305      	movs	r3, #5
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_SPI_MspInit+0x84>)
 80007de:	f000 fb01 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40013000 	.word	0x40013000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000400 	.word	0x48000400

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x44>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f980 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e00a      	b.n	80008bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008a6:	f3af 8000 	nop.w
 80008aa:	4601      	mov	r1, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf0      	blt.n	80008a6 <_read+0x12>
	}

return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
	return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f6:	605a      	str	r2, [r3, #4]
	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_isatty>:

int _isatty(int file)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	return 1;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f003 f8ca 	bl	8003b00 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20003000 	.word	0x20003000
 8000998:	00000400 	.word	0x00000400
 800099c:	20000098 	.word	0x20000098
 80009a0:	200001a0 	.word	0x200001a0

080009a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART1_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a0c:	f002 fcf8 	bl	8003400 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f7ff fe68 	bl	80006ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000108 	.word	0x20000108
 8000a24:	40013800 	.word	0x40013800

08000a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x80>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d129      	bne.n	8000a9e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f000 f9a3 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	40021000 	.word	0x40021000

08000ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ada:	f7ff ff63 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f003 f815 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae2:	f7ff fd85 	bl	80005f0 <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000af4:	08004b7c 	.word	0x08004b7c
  ldr r2, =_sbss
 8000af8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000afc:	200001a0 	.word	0x200001a0

08000b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x28>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x28>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f931 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe6a 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40022000 	.word	0x40022000

08000b30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f93b 	bl	8000dca <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f911 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000010 	.word	0x20000010
 8000b8c:	2000000c 	.word	0x2000000c

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	2000018c 	.word	0x2000018c

08000bb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000018c 	.word	0x2000018c

08000bd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000010 	.word	0x20000010

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e14e      	b.n	8001092 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8140 	beq.w	800108c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d00b      	beq.n	8000e2c <HAL_GPIO_Init+0x48>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 0201 	and.w	r2, r3, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0xea>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0203 	and.w	r2, r3, #3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 809a 	beq.w	800108c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b55      	ldr	r3, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a54      	ldr	r2, [pc, #336]	; (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f70:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f9a:	d013      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e0>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <HAL_GPIO_Init+0x2d4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1dc>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_GPIO_Init+0x2d8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0x1d8>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a44      	ldr	r2, [pc, #272]	; (80010c0 <HAL_GPIO_Init+0x2dc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_GPIO_Init+0x1d4>
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e006      	b.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000fb8:	2305      	movs	r3, #5
 8000fba:	e004      	b.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e002      	b.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	f002 0203 	and.w	r2, r2, #3
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd6:	4937      	ldr	r1, [pc, #220]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001008:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001032:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa22 f303 	lsr.w	r3, r2, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	f47f aea9 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	48000400 	.word	0x48000400
 80010bc:	48000800 	.word	0x48000800
 80010c0:	48000c00 	.word	0x48000c00
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800112e:	af00      	add	r7, sp, #0
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	f000 bef4 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 816a 	beq.w	8001426 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001152:	4bb3      	ldr	r3, [pc, #716]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d00c      	beq.n	8001178 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800115e:	4bb0      	ldr	r3, [pc, #704]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d159      	bne.n	800121e <HAL_RCC_OscConfig+0xf6>
 800116a:	4bad      	ldr	r3, [pc, #692]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d152      	bne.n	800121e <HAL_RCC_OscConfig+0xf6>
 8001178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800118c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x82>
 80011a4:	4b9e      	ldr	r3, [pc, #632]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0xae>
 80011aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011d2:	4b93      	ldr	r3, [pc, #588]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80011de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011e2:	fa92 f2a2 	rbit	r2, r2
 80011e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80011ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f002 021f 	and.w	r2, r2, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 810c 	beq.w	8001424 <HAL_RCC_OscConfig+0x2fc>
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 8106 	bne.w	8001424 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f000 be86 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d106      	bne.n	8001238 <HAL_RCC_OscConfig+0x110>
 800122a:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7c      	ldr	r2, [pc, #496]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e030      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x134>
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a76      	ldr	r2, [pc, #472]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a73      	ldr	r2, [pc, #460]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01e      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x15a>
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e00b      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a66      	ldr	r2, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a63      	ldr	r2, [pc, #396]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f023 020f 	bic.w	r2, r3, #15
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	495d      	ldr	r1, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d059      	beq.n	800136c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc7e 	bl	8000bb8 <HAL_GetTick>
 80012bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fc79 	bl	8000bb8 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d902      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f000 be29 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 80012d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x1e2>
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x20e>
 800130a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800131e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001322:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001326:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800133a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800133e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001342:	fa92 f2a2 	rbit	r2, r2
 8001346:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800134a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800134e:	fab2 f282 	clz	r2, r2
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	f042 0220 	orr.w	r2, r2, #32
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	f002 021f 	and.w	r2, r2, #31
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ab      	beq.n	80012c2 <HAL_RCC_OscConfig+0x19a>
 800136a:	e05c      	b.n	8001426 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc24 	bl	8000bb8 <HAL_GetTick>
 8001370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fc1f 	bl	8000bb8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d902      	bls.n	800138c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	f000 bdcf 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 800138c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001390:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x296>
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x2c2>
 80013be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013f6:	fa92 f2a2 	rbit	r2, r2
 80013fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001402:	fab2 f282 	clz	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f042 0220 	orr.w	r2, r2, #32
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f002 021f 	and.w	r2, r2, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ab      	bne.n	8001376 <HAL_RCC_OscConfig+0x24e>
 800141e:	e002      	b.n	8001426 <HAL_RCC_OscConfig+0x2fe>
 8001420:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 816f 	beq.w	8001714 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001436:	4bd0      	ldr	r3, [pc, #832]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001442:	4bcd      	ldr	r3, [pc, #820]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d16c      	bne.n	8001528 <HAL_RCC_OscConfig+0x400>
 800144e:	4bca      	ldr	r3, [pc, #808]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d166      	bne.n	8001528 <HAL_RCC_OscConfig+0x400>
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800146c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x362>
 8001484:	4bbc      	ldr	r3, [pc, #752]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	e013      	b.n	80014b2 <HAL_RCC_OscConfig+0x38a>
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014ae:	4bb2      	ldr	r3, [pc, #712]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2202      	movs	r2, #2
 80014b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014bc:	fa92 f2a2 	rbit	r2, r2
 80014c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80014c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014c8:	fab2 f282 	clz	r2, r2
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	f042 0220 	orr.w	r2, r2, #32
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	f002 021f 	and.w	r2, r2, #31
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 bd1b 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	21f8      	movs	r1, #248	; 0xf8
 8001504:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800150c:	fa91 f1a1 	rbit	r1, r1
 8001510:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001514:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001518:	fab1 f181 	clz	r1, r1
 800151c:	b2c9      	uxtb	r1, r1
 800151e:	408b      	lsls	r3, r1
 8001520:	4995      	ldr	r1, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e0f5      	b.n	8001714 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8085 	beq.w	800163e <HAL_RCC_OscConfig+0x516>
 8001534:	2301      	movs	r3, #1
 8001536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001546:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb2a 	bl	8000bb8 <HAL_GetTick>
 8001564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fb25 	bl	8000bb8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d902      	bls.n	8001580 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	f000 bcd5 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001592:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x488>
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0x4b0>
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2202      	movs	r2, #2
 80015da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015e2:	fa92 f2a2 	rbit	r2, r2
 80015e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015ee:	fab2 f282 	clz	r2, r2
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f042 0220 	orr.w	r2, r2, #32
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f002 021f 	and.w	r2, r2, #31
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0af      	beq.n	800156a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	21f8      	movs	r1, #248	; 0xf8
 800161a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001622:	fa91 f1a1 	rbit	r1, r1
 8001626:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800162a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800162e:	fab1 f181 	clz	r1, r1
 8001632:	b2c9      	uxtb	r1, r1
 8001634:	408b      	lsls	r3, r1
 8001636:	4950      	ldr	r1, [pc, #320]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e06a      	b.n	8001714 <HAL_RCC_OscConfig+0x5ec>
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001650:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	461a      	mov	r2, r3
 8001666:	2300      	movs	r3, #0
 8001668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff faa5 	bl	8000bb8 <HAL_GetTick>
 800166e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff faa0 	bl	8000bb8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bc50 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800169c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x592>
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <HAL_RCC_OscConfig+0x5ba>
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2202      	movs	r2, #2
 80016e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ec:	fa92 f2a2 	rbit	r2, r2
 80016f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1af      	bne.n	8001674 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80da 	beq.w	80018d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d069      	beq.n	8001802 <HAL_RCC_OscConfig+0x6da>
 800172e:	2301      	movs	r3, #1
 8001730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x654>)
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	461a      	mov	r2, r3
 8001754:	2301      	movs	r3, #1
 8001756:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fa2e 	bl	8000bb8 <HAL_GetTick>
 800175c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001760:	e00e      	b.n	8001780 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fa29 	bl	8000bb8 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d906      	bls.n	8001780 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e3d9      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	10908120 	.word	0x10908120
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001792:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80017c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ca:	2102      	movs	r1, #2
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f1a3 	rbit	r1, r3
 80017d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017dc:	6019      	str	r1, [r3, #0]
  return result;
 80017de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0b0      	beq.n	8001762 <HAL_RCC_OscConfig+0x63a>
 8001800:	e06a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7b0>
 8001802:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001818:	601a      	str	r2, [r3, #0]
  return result;
 800181a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800181e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x934>)
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f9c0 	bl	8000bb8 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff f9bb 	bl	8000bb8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e36b      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001852:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f2a3 	rbit	r2, r3
 800187c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001898:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018a2:	2102      	movs	r1, #2
 80018a4:	6019      	str	r1, [r3, #0]
 80018a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f1a3 	rbit	r1, r3
 80018b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018b4:	6019      	str	r1, [r3, #0]
  return result;
 80018b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1b2      	bne.n	800183e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8158 	beq.w	8001b98 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11a      	bne.n	8001962 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001938:	f7ff f93e 	bl	8000bb8 <HAL_GetTick>
 800193c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff f939 	bl	8000bb8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e2e9      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ef      	beq.n	8001942 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x852>
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e02f      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x876>
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001996:	f023 0304 	bic.w	r3, r3, #4
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e01d      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x89a>
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e00b      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d06b      	beq.n	8001abc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff f8e8 	bl	8000bb8 <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f8e3 	bl	8000bb8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e291      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001a06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a34:	601a      	str	r2, [r3, #0]
  return result;
 8001a36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_OscConfig+0x93c>
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x958>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	10908120 	.word	0x10908120
 8001a60:	40007000 	.word	0x40007000
 8001a64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a68:	2202      	movs	r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4bbb      	ldr	r3, [pc, #748]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a84:	2102      	movs	r1, #2
 8001a86:	6011      	str	r1, [r2, #0]
 8001a88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	fa92 f1a2 	rbit	r1, r2
 8001a92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a96:	6011      	str	r1, [r2, #0]
  return result;
 8001a98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d099      	beq.n	80019ee <HAL_RCC_OscConfig+0x8c6>
 8001aba:	e063      	b.n	8001b84 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff f87c 	bl	8000bb8 <HAL_GetTick>
 8001ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7ff f877 	bl	8000bb8 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e225      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001ade:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001afa:	2202      	movs	r2, #2
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b0c:	601a      	str	r2, [r3, #0]
  return result;
 8001b0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0xa06>
 8001b28:	4b90      	ldr	r3, [pc, #576]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	e00d      	b.n	8001b4a <HAL_RCC_OscConfig+0xa22>
 8001b2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b4e:	2102      	movs	r1, #2
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1a0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a76      	ldr	r2, [pc, #472]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 81c2 	beq.w	8001f28 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f000 819c 	beq.w	8001eea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	f040 8114 	bne.w	8001de6 <HAL_RCC_OscConfig+0xcbe>
 8001bbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bd6:	601a      	str	r2, [r3, #0]
  return result;
 8001bd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ffe0 	bl	8000bb8 <HAL_GetTick>
 8001bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe ffdb 	bl	8000bb8 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e18b      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001c12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0xb24>
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e01b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb5c>
 8001c4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fa92 f1a2 	rbit	r1, r2
 8001c98:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c9c:	6011      	str	r1, [r2, #0]
  return result;
 8001c9e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d19e      	bne.n	8001bfe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	4925      	ldr	r1, [pc, #148]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cf4:	601a      	str	r2, [r3, #0]
  return result;
 8001cf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cfa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2301      	movs	r3, #1
 8001d10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe ff51 	bl	8000bb8 <HAL_GetTick>
 8001d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe ff4c 	bl	8000bb8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0fc      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d48:	601a      	str	r2, [r3, #0]
  return result;
 8001d4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0xc48>
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e01e      	b.n	8001da8 <HAL_RCC_OscConfig+0xc80>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db0:	6011      	str	r1, [r2, #0]
 8001db2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fa92 f1a2 	rbit	r1, r2
 8001dbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dc0:	6011      	str	r1, [r2, #0]
  return result;
 8001dc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d09b      	beq.n	8001d1c <HAL_RCC_OscConfig+0xbf4>
 8001de4:	e0a0      	b.n	8001f28 <HAL_RCC_OscConfig+0xe00>
 8001de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	461a      	mov	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7fe fecc 	bl	8000bb8 <HAL_GetTick>
 8001e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe fec7 	bl	8000bb8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e077      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0xd4c>
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0xd84>
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fa92 f1a2 	rbit	r1, r2
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	6011      	str	r1, [r2, #0]
  return result;
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d19e      	bne.n	8001e26 <HAL_RCC_OscConfig+0xcfe>
 8001ee8:	e01e      	b.n	8001f28 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09e      	sub	sp, #120	; 0x78
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e162      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	498b      	ldr	r1, [pc, #556]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e14a      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	497f      	ldr	r1, [pc, #508]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80dc 	beq.w	8002164 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d13c      	bne.n	800202e <HAL_RCC_ClockConfig+0xf6>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_ClockConfig+0xa6>
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	e00f      	b.n	8001ffe <HAL_RCC_ClockConfig+0xc6>
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	65ba      	str	r2, [r7, #88]	; 0x58
 8002004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800200c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d17b      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0f3      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d13c      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x178>
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x128>
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00f      	b.n	8002080 <HAL_RCC_ClockConfig+0x148>
 8002060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
 8002074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	63ba      	str	r2, [r7, #56]	; 0x38
 8002086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800208e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b2      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 80020b0:	2302      	movs	r3, #2
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x1a0>
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1bc>
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	2302      	movs	r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2202      	movs	r2, #2
 80020f6:	61ba      	str	r2, [r7, #24]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	617a      	str	r2, [r7, #20]
  return result;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0220 	orr.w	r2, r2, #32
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e079      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fd40 	bl	8000bb8 <HAL_GetTick>
 8002138:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fd3c 	bl	8000bb8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e061      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d214      	bcs.n	800219c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e040      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4912      	ldr	r1, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021da:	f000 f829 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021de:	4601      	mov	r1, r0
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	60fa      	str	r2, [r7, #12]
  return result;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	40d3      	lsrs	r3, r2
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x2ec>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x2f0>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCC_ClockConfig+0x2f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fc8e 	bl	8000b30 <HAL_InitTick>
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3778      	adds	r7, #120	; 0x78
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	08004aa4 	.word	0x08004aa4
 8002228:	20000008 	.word	0x20000008
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	; 0x2c
 8002234:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e03c      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	e03c      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800226c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002270:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	607a      	str	r2, [r7, #4]
  return result;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	220f      	movs	r2, #15
 8002294:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	60fa      	str	r2, [r7, #12]
  return result;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	40d3      	lsrs	r3, r2
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e004      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	e002      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022dc:	623b      	str	r3, [r7, #32]
      break;
 80022de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	372c      	adds	r7, #44	; 0x2c
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	007a1200 	.word	0x007a1200
 80022f8:	08004abc 	.word	0x08004abc
 80022fc:	08004acc 	.word	0x08004acc
 8002300:	003d0900 	.word	0x003d0900

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002322:	f7ff ffef 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002326:	4601      	mov	r1, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002330:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002334:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	603a      	str	r2, [r7, #0]
  return result;
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_GetPCLK1Freq+0x40>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08004ab4 	.word	0x08004ab4

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002366:	f7ff ffcd 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002374:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	603a      	str	r2, [r7, #0]
  return result;
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	08004ab4 	.word	0x08004ab4

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b092      	sub	sp, #72	; 0x48
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80cd 	beq.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c8:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b83      	ldr	r3, [pc, #524]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4a82      	ldr	r2, [pc, #520]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	61d3      	str	r3, [r2, #28]
 80023e0:	4b80      	ldr	r3, [pc, #512]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b7a      	ldr	r3, [pc, #488]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a79      	ldr	r2, [pc, #484]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe fbd5 	bl	8000bb8 <HAL_GetTick>
 800240e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fbd1 	bl	8000bb8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0db      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002430:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d07d      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800244a:	429a      	cmp	r2, r3
 800244c:	d076      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	2301      	movs	r3, #1
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024a0:	4a50      	ldr	r2, [pc, #320]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d045      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fb82 	bl	8000bb8 <HAL_GetTick>
 80024b4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe fb7e 	bl	8000bb8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e086      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80024ce:	2302      	movs	r3, #2
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	61fb      	str	r3, [r7, #28]
  return result;
 80024e6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d102      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	e007      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2202      	movs	r2, #2
 8002514:	613a      	str	r2, [r7, #16]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	fa92 f2a2 	rbit	r2, r2
 800251c:	60fa      	str	r2, [r7, #12]
  return result;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	fab2 f282 	clz	r2, r2
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f002 021f 	and.w	r2, r2, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0bd      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4926      	ldr	r1, [pc, #152]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254a:	4313      	orrs	r3, r2
 800254c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800254e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	491a      	ldr	r1, [pc, #104]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f023 0210 	bic.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4912      	ldr	r1, [pc, #72]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	490b      	ldr	r1, [pc, #44]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3748      	adds	r7, #72	; 0x48
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
 80025ec:	10908100 	.word	0x10908100

080025f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e095      	b.n	800272e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002612:	d009      	beq.n	8002628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
 800261a:	e005      	b.n	8002628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe f894 	bl	8000770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002668:	d902      	bls.n	8002670 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e002      	b.n	8002676 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002674:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800267e:	d007      	beq.n	8002690 <HAL_SPI_Init+0xa0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002688:	d002      	beq.n	8002690 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	ea42 0103 	orr.w	r1, r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	f003 0204 	and.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800270c:	ea42 0103 	orr.w	r1, r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b088      	sub	sp, #32
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_SPI_Transmit+0x22>
 8002754:	2302      	movs	r3, #2
 8002756:	e158      	b.n	8002a0a <HAL_SPI_Transmit+0x2d4>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002760:	f7fe fa2a 	bl	8000bb8 <HAL_GetTick>
 8002764:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d002      	beq.n	800277c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	77fb      	strb	r3, [r7, #31]
    goto error;
 800277a:	e13d      	b.n	80029f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_SPI_Transmit+0x52>
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800278c:	e134      	b.n	80029f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2203      	movs	r2, #3
 8002792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d8:	d10f      	bne.n	80027fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d007      	beq.n	8002818 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002820:	d94b      	bls.n	80028ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_SPI_Transmit+0xfa>
 800282a:	8afb      	ldrh	r3, [r7, #22]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d13e      	bne.n	80028ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	1c9a      	adds	r2, r3, #2
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002854:	e02b      	b.n	80028ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b02      	cmp	r3, #2
 8002862:	d112      	bne.n	800288a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	1c9a      	adds	r2, r3, #2
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002888:	e011      	b.n	80028ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800288a:	f7fe f995 	bl	8000bb8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d803      	bhi.n	80028a2 <HAL_SPI_Transmit+0x16c>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d102      	bne.n	80028a8 <HAL_SPI_Transmit+0x172>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028ac:	e0a4      	b.n	80029f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ce      	bne.n	8002856 <HAL_SPI_Transmit+0x120>
 80028b8:	e07c      	b.n	80029b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_Transmit+0x192>
 80028c2:	8afb      	ldrh	r3, [r7, #22]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d170      	bne.n	80029aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d912      	bls.n	80028f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	1c9a      	adds	r2, r3, #2
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b02      	subs	r3, #2
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f6:	e058      	b.n	80029aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800291e:	e044      	b.n	80029aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d12b      	bne.n	8002986 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d912      	bls.n	800295e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b02      	subs	r3, #2
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800295c:	e025      	b.n	80029aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002984:	e011      	b.n	80029aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002986:	f7fe f917 	bl	8000bb8 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d803      	bhi.n	800299e <HAL_SPI_Transmit+0x268>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_Transmit+0x26e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029a8:	e026      	b.n	80029f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1b5      	bne.n	8002920 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fcdb 	bl	8003374 <SPI_EndRxTxTransaction>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e000      	b.n	80029f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80029f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b088      	sub	sp, #32
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2e:	d112      	bne.n	8002a56 <HAL_SPI_Receive+0x44>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10e      	bne.n	8002a56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f910 	bl	8002c72 <HAL_SPI_TransmitReceive>
 8002a52:	4603      	mov	r3, r0
 8002a54:	e109      	b.n	8002c6a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_SPI_Receive+0x52>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e102      	b.n	8002c6a <HAL_SPI_Receive+0x258>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6c:	f7fe f8a4 	bl	8000bb8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a82:	e0e9      	b.n	8002c58 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_Receive+0x7e>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a94:	e0e0      	b.n	8002c58 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ae0:	d908      	bls.n	8002af4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	e007      	b.n	8002b04 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0c:	d10f      	bne.n	8002b2e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d007      	beq.n	8002b4c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b54:	d867      	bhi.n	8002c26 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b56:	e030      	b.n	8002bba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d117      	bne.n	8002b96 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f103 020c 	add.w	r2, r3, #12
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002b94:	e011      	b.n	8002bba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b96:	f7fe f80f 	bl	8000bb8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d803      	bhi.n	8002bae <HAL_SPI_Receive+0x19c>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d102      	bne.n	8002bb4 <HAL_SPI_Receive+0x1a2>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bb8:	e04e      	b.n	8002c58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1c8      	bne.n	8002b58 <HAL_SPI_Receive+0x146>
 8002bc6:	e034      	b.n	8002c32 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d115      	bne.n	8002c02 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	b292      	uxth	r2, r2
 8002be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c00:	e011      	b.n	8002c26 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c02:	f7fd ffd9 	bl	8000bb8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d803      	bhi.n	8002c1a <HAL_SPI_Receive+0x208>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d102      	bne.n	8002c20 <HAL_SPI_Receive+0x20e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c24:	e018      	b.n	8002c58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ca      	bne.n	8002bc8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fb44 	bl	80032c4 <SPI_EndRxTransaction>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
 8002c54:	e000      	b.n	8002c58 <HAL_SPI_Receive+0x246>
  }

error :
 8002c56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	; 0x28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x26>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e1fb      	b.n	8003090 <HAL_SPI_TransmitReceive+0x41e>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ca0:	f7fd ff8a 	bl	8000bb8 <HAL_GetTick>
 8002ca4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cbc:	7efb      	ldrb	r3, [r7, #27]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0x6e>
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc8:	d106      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x66>
 8002cd2:	7efb      	ldrb	r3, [r7, #27]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d003      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cde:	e1cd      	b.n	800307c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_SPI_TransmitReceive+0x80>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_SPI_TransmitReceive+0x80>
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cf8:	e1c0      	b.n	800307c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2205      	movs	r2, #5
 8002d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	887a      	ldrh	r2, [r7, #2]
 8002d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	887a      	ldrh	r2, [r7, #2]
 8002d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	887a      	ldrh	r2, [r7, #2]
 8002d3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d50:	d802      	bhi.n	8002d58 <HAL_SPI_TransmitReceive+0xe6>
 8002d52:	8a3b      	ldrh	r3, [r7, #16]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d908      	bls.n	8002d6a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	e007      	b.n	8002d7a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d007      	beq.n	8002d98 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002da0:	d97c      	bls.n	8002e9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x13e>
 8002daa:	8a7b      	ldrh	r3, [r7, #18]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d169      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	1c9a      	adds	r2, r3, #2
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd4:	e056      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d11b      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x1aa>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x1aa>
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d113      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d11c      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x1f2>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	b292      	uxth	r2, r2
 8002e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e60:	2301      	movs	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e64:	f7fd fea8 	bl	8000bb8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d807      	bhi.n	8002e84 <HAL_SPI_TransmitReceive+0x212>
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d003      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e82:	e0fb      	b.n	800307c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1a3      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x164>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d19d      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x164>
 8002e9a:	e0df      	b.n	800305c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x23a>
 8002ea4:	8a7b      	ldrh	r3, [r7, #18]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	f040 80cb 	bne.w	8003042 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d912      	bls.n	8002edc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b02      	subs	r3, #2
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eda:	e0b2      	b.n	8003042 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f02:	e09e      	b.n	8003042 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d134      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x30a>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d02f      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x30a>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d12c      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d912      	bls.n	8002f52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b02      	subs	r3, #2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f50:	e012      	b.n	8002f78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d148      	bne.n	800301c <HAL_SPI_TransmitReceive+0x3aa>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d042      	beq.n	800301c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d923      	bls.n	8002fea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	b292      	uxth	r2, r2
 8002fae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b02      	subs	r3, #2
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d81f      	bhi.n	8003018 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	e016      	b.n	8003018 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f103 020c 	add.w	r2, r3, #12
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003018:	2301      	movs	r3, #1
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800301c:	f7fd fdcc 	bl	8000bb8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003028:	429a      	cmp	r2, r3
 800302a:	d803      	bhi.n	8003034 <HAL_SPI_TransmitReceive+0x3c2>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d102      	bne.n	800303a <HAL_SPI_TransmitReceive+0x3c8>
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003040:	e01c      	b.n	800307c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f af5b 	bne.w	8002f04 <HAL_SPI_TransmitReceive+0x292>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	f47f af54 	bne.w	8002f04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f987 	bl	8003374 <SPI_EndRxTxTransaction>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	661a      	str	r2, [r3, #96]	; 0x60
 8003078:	e000      	b.n	800307c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800307a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800308c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003090:	4618      	mov	r0, r3
 8003092:	3728      	adds	r7, #40	; 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a8:	f7fd fd86 	bl	8000bb8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b8:	f7fd fd7e 	bl	8000bb8 <HAL_GetTick>
 80030bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030be:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	0d1b      	lsrs	r3, r3, #20
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	e054      	b.n	800317a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d050      	beq.n	800317a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d8:	f7fd fd6e 	bl	8000bb8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d902      	bls.n	80030ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d13d      	bne.n	800316a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003106:	d111      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	d004      	beq.n	800311c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d107      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003134:	d10f      	bne.n	8003156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e017      	b.n	800319a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3b01      	subs	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4013      	ands	r3, r2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	429a      	cmp	r2, r3
 8003196:	d19b      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000008 	.word	0x20000008

080031a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031b6:	f7fd fcff 	bl	8000bb8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c6:	f7fd fcf7 	bl	8000bb8 <HAL_GetTick>
 80031ca:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031cc:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00da      	lsls	r2, r3, #3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	0d1b      	lsrs	r3, r3, #20
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80031e4:	e05f      	b.n	80032a6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031ec:	d106      	bne.n	80031fc <SPI_WaitFifoStateUntilTimeout+0x54>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d050      	beq.n	80032a6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003204:	f7fd fcd8 	bl	8000bb8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	429a      	cmp	r2, r3
 8003212:	d902      	bls.n	800321a <SPI_WaitFifoStateUntilTimeout+0x72>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d13d      	bne.n	8003296 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003232:	d111      	bne.n	8003258 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323c:	d004      	beq.n	8003248 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d107      	bne.n	8003258 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003260:	d10f      	bne.n	8003282 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e010      	b.n	80032b8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d197      	bne.n	80031e6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000008 	.word	0x20000008

080032c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d8:	d111      	bne.n	80032fe <SPI_EndRxTransaction+0x3a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e2:	d004      	beq.n	80032ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ec:	d107      	bne.n	80032fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff fec5 	bl	8003098 <SPI_WaitFlagStateUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e023      	b.n	800336c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332c:	d11d      	bne.n	800336a <SPI_EndRxTransaction+0xa6>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003336:	d004      	beq.n	8003342 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003340:	d113      	bne.n	800336a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff ff2a 	bl	80031a8 <SPI_WaitFifoStateUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e000      	b.n	800336c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2200      	movs	r2, #0
 8003388:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff ff0b 	bl	80031a8 <SPI_WaitFifoStateUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e027      	b.n	80033f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fe70 	bl	8003098 <SPI_WaitFlagStateUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e014      	b.n	80033f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fee4 	bl	80031a8 <SPI_WaitFifoStateUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e000      	b.n	80033f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fb00 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8c0 	bl	80035c4 <UART_SetConfig>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9ea 	bl	8003830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa71 	bl	8003974 <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 8082 	bne.w	80035ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_UART_Transmit+0x26>
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07a      	b.n	80035bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UART_Transmit+0x38>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e073      	b.n	80035bc <HAL_UART_Transmit+0x120>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ea:	f7fd fb65 	bl	8000bb8 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d108      	bne.n	800351c <HAL_UART_Transmit+0x80>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e003      	b.n	8003524 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800352c:	e02d      	b.n	800358a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fa64 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e039      	b.n	80035bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	881a      	ldrh	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355a:	b292      	uxth	r2, r2
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	3302      	adds	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e008      	b.n	8003578 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b292      	uxth	r2, r2
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa30 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e005      	b.n	80035bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b8a      	ldr	r3, [pc, #552]	; (8003818 <UART_SetConfig+0x254>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a78      	ldr	r2, [pc, #480]	; (800381c <UART_SetConfig+0x258>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d120      	bne.n	8003682 <UART_SetConfig+0xbe>
 8003640:	4b77      	ldr	r3, [pc, #476]	; (8003820 <UART_SetConfig+0x25c>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d817      	bhi.n	800367c <UART_SetConfig+0xb8>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x90>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003665 	.word	0x08003665
 8003658:	08003671 	.word	0x08003671
 800365c:	08003677 	.word	0x08003677
 8003660:	0800366b 	.word	0x0800366b
 8003664:	2300      	movs	r3, #0
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e01d      	b.n	80036a6 <UART_SetConfig+0xe2>
 800366a:	2302      	movs	r3, #2
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e01a      	b.n	80036a6 <UART_SetConfig+0xe2>
 8003670:	2304      	movs	r3, #4
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e017      	b.n	80036a6 <UART_SetConfig+0xe2>
 8003676:	2308      	movs	r3, #8
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e014      	b.n	80036a6 <UART_SetConfig+0xe2>
 800367c:	2310      	movs	r3, #16
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e011      	b.n	80036a6 <UART_SetConfig+0xe2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a67      	ldr	r2, [pc, #412]	; (8003824 <UART_SetConfig+0x260>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <UART_SetConfig+0xce>
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e009      	b.n	80036a6 <UART_SetConfig+0xe2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a64      	ldr	r2, [pc, #400]	; (8003828 <UART_SetConfig+0x264>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d102      	bne.n	80036a2 <UART_SetConfig+0xde>
 800369c:	2300      	movs	r3, #0
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e001      	b.n	80036a6 <UART_SetConfig+0xe2>
 80036a2:	2310      	movs	r3, #16
 80036a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ae:	d15b      	bne.n	8003768 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d827      	bhi.n	8003706 <UART_SetConfig+0x142>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <UART_SetConfig+0xf8>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	080036e9 	.word	0x080036e9
 80036c4:	080036f1 	.word	0x080036f1
 80036c8:	08003707 	.word	0x08003707
 80036cc:	080036f7 	.word	0x080036f7
 80036d0:	08003707 	.word	0x08003707
 80036d4:	08003707 	.word	0x08003707
 80036d8:	08003707 	.word	0x08003707
 80036dc:	080036ff 	.word	0x080036ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe fe1c 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 80036e4:	61b8      	str	r0, [r7, #24]
        break;
 80036e6:	e013      	b.n	8003710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe fe3a 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80036ec:	61b8      	str	r0, [r7, #24]
        break;
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b4e      	ldr	r3, [pc, #312]	; (800382c <UART_SetConfig+0x268>)
 80036f2:	61bb      	str	r3, [r7, #24]
        break;
 80036f4:	e00c      	b.n	8003710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7fe fd9b 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80036fa:	61b8      	str	r0, [r7, #24]
        break;
 80036fc:	e008      	b.n	8003710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003702:	61bb      	str	r3, [r7, #24]
        break;
 8003704:	e004      	b.n	8003710 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	77bb      	strb	r3, [r7, #30]
        break;
 800370e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d074      	beq.n	8003800 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	005a      	lsls	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	b29b      	uxth	r3, r3
 800372c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d916      	bls.n	8003762 <UART_SetConfig+0x19e>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d212      	bcs.n	8003762 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f023 030f 	bic.w	r3, r3, #15
 8003744:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	b29b      	uxth	r3, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	b29a      	uxth	r2, r3
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	4313      	orrs	r3, r2
 8003756:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	89fa      	ldrh	r2, [r7, #14]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	e04e      	b.n	8003800 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	77bb      	strb	r3, [r7, #30]
 8003766:	e04b      	b.n	8003800 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003768:	7ffb      	ldrb	r3, [r7, #31]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d827      	bhi.n	80037be <UART_SetConfig+0x1fa>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x1b0>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003799 	.word	0x08003799
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a9 	.word	0x080037a9
 8003780:	080037bf 	.word	0x080037bf
 8003784:	080037af 	.word	0x080037af
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037bf 	.word	0x080037bf
 8003790:	080037bf 	.word	0x080037bf
 8003794:	080037b7 	.word	0x080037b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe fdc0 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800379c:	61b8      	str	r0, [r7, #24]
        break;
 800379e:	e013      	b.n	80037c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7fe fdde 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 80037a4:	61b8      	str	r0, [r7, #24]
        break;
 80037a6:	e00f      	b.n	80037c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <UART_SetConfig+0x268>)
 80037aa:	61bb      	str	r3, [r7, #24]
        break;
 80037ac:	e00c      	b.n	80037c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ae:	f7fe fd3f 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80037b2:	61b8      	str	r0, [r7, #24]
        break;
 80037b4:	e008      	b.n	80037c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	61bb      	str	r3, [r7, #24]
        break;
 80037bc:	e004      	b.n	80037c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	77bb      	strb	r3, [r7, #30]
        break;
 80037c6:	bf00      	nop
    }

    if (pclk != 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	085a      	lsrs	r2, r3, #1
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	441a      	add	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d908      	bls.n	80037fc <UART_SetConfig+0x238>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d204      	bcs.n	80037fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	e001      	b.n	8003800 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800380c:	7fbb      	ldrb	r3, [r7, #30]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	efff69f3 	.word	0xefff69f3
 800381c:	40013800 	.word	0x40013800
 8003820:	40021000 	.word	0x40021000
 8003824:	40004400 	.word	0x40004400
 8003828:	40004800 	.word	0x40004800
 800382c:	007a1200 	.word	0x007a1200

08003830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01a      	beq.n	8003946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392e:	d10a      	bne.n	8003946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af02      	add	r7, sp, #8
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003984:	f7fd f918 	bl	8000bb8 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d10e      	bne.n	80039b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f82d 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e023      	b.n	80039fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d10e      	bne.n	80039e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f817 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e00d      	b.n	80039fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	e05e      	b.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d05a      	beq.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fd f8ca 	bl	8000bb8 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11b      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e043      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02c      	beq.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8a:	d124      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e00f      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d091      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <__errno>:
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <__errno+0x8>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000014 	.word	0x20000014

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4d0d      	ldr	r5, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	2600      	movs	r6, #0
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	4d0b      	ldr	r5, [pc, #44]	; (8003b4c <__libc_init_array+0x40>)
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	; (8003b50 <__libc_init_array+0x44>)
 8003b20:	f000 ff76 	bl	8004a10 <_init>
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	2600      	movs	r6, #0
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08004b74 	.word	0x08004b74
 8003b48:	08004b74 	.word	0x08004b74
 8003b4c:	08004b74 	.word	0x08004b74
 8003b50:	08004b78 	.word	0x08004b78

08003b54 <memset>:
 8003b54:	4402      	add	r2, r0
 8003b56:	4603      	mov	r3, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <iprintf>:
 8003b64:	b40f      	push	{r0, r1, r2, r3}
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <iprintf+0x2c>)
 8003b68:	b513      	push	{r0, r1, r4, lr}
 8003b6a:	681c      	ldr	r4, [r3, #0]
 8003b6c:	b124      	cbz	r4, 8003b78 <iprintf+0x14>
 8003b6e:	69a3      	ldr	r3, [r4, #24]
 8003b70:	b913      	cbnz	r3, 8003b78 <iprintf+0x14>
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 f866 	bl	8003c44 <__sinit>
 8003b78:	ab05      	add	r3, sp, #20
 8003b7a:	9a04      	ldr	r2, [sp, #16]
 8003b7c:	68a1      	ldr	r1, [r4, #8]
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	4620      	mov	r0, r4
 8003b82:	f000 f983 	bl	8003e8c <_vfiprintf_r>
 8003b86:	b002      	add	sp, #8
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8c:	b004      	add	sp, #16
 8003b8e:	4770      	bx	lr
 8003b90:	20000014 	.word	0x20000014

08003b94 <std>:
 8003b94:	2300      	movs	r3, #0
 8003b96:	b510      	push	{r4, lr}
 8003b98:	4604      	mov	r4, r0
 8003b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ba2:	6083      	str	r3, [r0, #8]
 8003ba4:	8181      	strh	r1, [r0, #12]
 8003ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ba8:	81c2      	strh	r2, [r0, #14]
 8003baa:	6183      	str	r3, [r0, #24]
 8003bac:	4619      	mov	r1, r3
 8003bae:	2208      	movs	r2, #8
 8003bb0:	305c      	adds	r0, #92	; 0x5c
 8003bb2:	f7ff ffcf 	bl	8003b54 <memset>
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <std+0x38>)
 8003bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <std+0x3c>)
 8003bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <std+0x40>)
 8003bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <std+0x44>)
 8003bc4:	6224      	str	r4, [r4, #32]
 8003bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	bf00      	nop
 8003bcc:	08004435 	.word	0x08004435
 8003bd0:	08004457 	.word	0x08004457
 8003bd4:	0800448f 	.word	0x0800448f
 8003bd8:	080044b3 	.word	0x080044b3

08003bdc <_cleanup_r>:
 8003bdc:	4901      	ldr	r1, [pc, #4]	; (8003be4 <_cleanup_r+0x8>)
 8003bde:	f000 b8af 	b.w	8003d40 <_fwalk_reent>
 8003be2:	bf00      	nop
 8003be4:	0800478d 	.word	0x0800478d

08003be8 <__sfmoreglue>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	1e4a      	subs	r2, r1, #1
 8003bec:	2568      	movs	r5, #104	; 0x68
 8003bee:	4355      	muls	r5, r2
 8003bf0:	460e      	mov	r6, r1
 8003bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bf6:	f000 f8c5 	bl	8003d84 <_malloc_r>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	b140      	cbz	r0, 8003c10 <__sfmoreglue+0x28>
 8003bfe:	2100      	movs	r1, #0
 8003c00:	e9c0 1600 	strd	r1, r6, [r0]
 8003c04:	300c      	adds	r0, #12
 8003c06:	60a0      	str	r0, [r4, #8]
 8003c08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c0c:	f7ff ffa2 	bl	8003b54 <memset>
 8003c10:	4620      	mov	r0, r4
 8003c12:	bd70      	pop	{r4, r5, r6, pc}

08003c14 <__sfp_lock_acquire>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__sfp_lock_acquire+0x8>)
 8003c16:	f000 b8b3 	b.w	8003d80 <__retarget_lock_acquire_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000198 	.word	0x20000198

08003c20 <__sfp_lock_release>:
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <__sfp_lock_release+0x8>)
 8003c22:	f000 b8ae 	b.w	8003d82 <__retarget_lock_release_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000198 	.word	0x20000198

08003c2c <__sinit_lock_acquire>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__sinit_lock_acquire+0x8>)
 8003c2e:	f000 b8a7 	b.w	8003d80 <__retarget_lock_acquire_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000193 	.word	0x20000193

08003c38 <__sinit_lock_release>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__sinit_lock_release+0x8>)
 8003c3a:	f000 b8a2 	b.w	8003d82 <__retarget_lock_release_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000193 	.word	0x20000193

08003c44 <__sinit>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	4604      	mov	r4, r0
 8003c48:	f7ff fff0 	bl	8003c2c <__sinit_lock_acquire>
 8003c4c:	69a3      	ldr	r3, [r4, #24]
 8003c4e:	b11b      	cbz	r3, 8003c58 <__sinit+0x14>
 8003c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c54:	f7ff bff0 	b.w	8003c38 <__sinit_lock_release>
 8003c58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <__sinit+0x68>)
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <__sinit+0x6c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	bf04      	itt	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	61a3      	streq	r3, [r4, #24]
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f000 f820 	bl	8003cb4 <__sfp>
 8003c74:	6060      	str	r0, [r4, #4]
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 f81c 	bl	8003cb4 <__sfp>
 8003c7c:	60a0      	str	r0, [r4, #8]
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 f818 	bl	8003cb4 <__sfp>
 8003c84:	2200      	movs	r2, #0
 8003c86:	60e0      	str	r0, [r4, #12]
 8003c88:	2104      	movs	r1, #4
 8003c8a:	6860      	ldr	r0, [r4, #4]
 8003c8c:	f7ff ff82 	bl	8003b94 <std>
 8003c90:	68a0      	ldr	r0, [r4, #8]
 8003c92:	2201      	movs	r2, #1
 8003c94:	2109      	movs	r1, #9
 8003c96:	f7ff ff7d 	bl	8003b94 <std>
 8003c9a:	68e0      	ldr	r0, [r4, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	2112      	movs	r1, #18
 8003ca0:	f7ff ff78 	bl	8003b94 <std>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	61a3      	str	r3, [r4, #24]
 8003ca8:	e7d2      	b.n	8003c50 <__sinit+0xc>
 8003caa:	bf00      	nop
 8003cac:	08004adc 	.word	0x08004adc
 8003cb0:	08003bdd 	.word	0x08003bdd

08003cb4 <__sfp>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	4607      	mov	r7, r0
 8003cb8:	f7ff ffac 	bl	8003c14 <__sfp_lock_acquire>
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <__sfp+0x84>)
 8003cbe:	681e      	ldr	r6, [r3, #0]
 8003cc0:	69b3      	ldr	r3, [r6, #24]
 8003cc2:	b913      	cbnz	r3, 8003cca <__sfp+0x16>
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f7ff ffbd 	bl	8003c44 <__sinit>
 8003cca:	3648      	adds	r6, #72	; 0x48
 8003ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	d503      	bpl.n	8003cdc <__sfp+0x28>
 8003cd4:	6833      	ldr	r3, [r6, #0]
 8003cd6:	b30b      	cbz	r3, 8003d1c <__sfp+0x68>
 8003cd8:	6836      	ldr	r6, [r6, #0]
 8003cda:	e7f7      	b.n	8003ccc <__sfp+0x18>
 8003cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ce0:	b9d5      	cbnz	r5, 8003d18 <__sfp+0x64>
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <__sfp+0x88>)
 8003ce4:	60e3      	str	r3, [r4, #12]
 8003ce6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cea:	6665      	str	r5, [r4, #100]	; 0x64
 8003cec:	f000 f847 	bl	8003d7e <__retarget_lock_init_recursive>
 8003cf0:	f7ff ff96 	bl	8003c20 <__sfp_lock_release>
 8003cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003cfc:	6025      	str	r5, [r4, #0]
 8003cfe:	61a5      	str	r5, [r4, #24]
 8003d00:	2208      	movs	r2, #8
 8003d02:	4629      	mov	r1, r5
 8003d04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d08:	f7ff ff24 	bl	8003b54 <memset>
 8003d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d14:	4620      	mov	r0, r4
 8003d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d18:	3468      	adds	r4, #104	; 0x68
 8003d1a:	e7d9      	b.n	8003cd0 <__sfp+0x1c>
 8003d1c:	2104      	movs	r1, #4
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7ff ff62 	bl	8003be8 <__sfmoreglue>
 8003d24:	4604      	mov	r4, r0
 8003d26:	6030      	str	r0, [r6, #0]
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d1d5      	bne.n	8003cd8 <__sfp+0x24>
 8003d2c:	f7ff ff78 	bl	8003c20 <__sfp_lock_release>
 8003d30:	230c      	movs	r3, #12
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	e7ee      	b.n	8003d14 <__sfp+0x60>
 8003d36:	bf00      	nop
 8003d38:	08004adc 	.word	0x08004adc
 8003d3c:	ffff0001 	.word	0xffff0001

08003d40 <_fwalk_reent>:
 8003d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d44:	4606      	mov	r6, r0
 8003d46:	4688      	mov	r8, r1
 8003d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d4c:	2700      	movs	r7, #0
 8003d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d52:	f1b9 0901 	subs.w	r9, r9, #1
 8003d56:	d505      	bpl.n	8003d64 <_fwalk_reent+0x24>
 8003d58:	6824      	ldr	r4, [r4, #0]
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	d1f7      	bne.n	8003d4e <_fwalk_reent+0xe>
 8003d5e:	4638      	mov	r0, r7
 8003d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d64:	89ab      	ldrh	r3, [r5, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d907      	bls.n	8003d7a <_fwalk_reent+0x3a>
 8003d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	d003      	beq.n	8003d7a <_fwalk_reent+0x3a>
 8003d72:	4629      	mov	r1, r5
 8003d74:	4630      	mov	r0, r6
 8003d76:	47c0      	blx	r8
 8003d78:	4307      	orrs	r7, r0
 8003d7a:	3568      	adds	r5, #104	; 0x68
 8003d7c:	e7e9      	b.n	8003d52 <_fwalk_reent+0x12>

08003d7e <__retarget_lock_init_recursive>:
 8003d7e:	4770      	bx	lr

08003d80 <__retarget_lock_acquire_recursive>:
 8003d80:	4770      	bx	lr

08003d82 <__retarget_lock_release_recursive>:
 8003d82:	4770      	bx	lr

08003d84 <_malloc_r>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	1ccd      	adds	r5, r1, #3
 8003d88:	f025 0503 	bic.w	r5, r5, #3
 8003d8c:	3508      	adds	r5, #8
 8003d8e:	2d0c      	cmp	r5, #12
 8003d90:	bf38      	it	cc
 8003d92:	250c      	movcc	r5, #12
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	4606      	mov	r6, r0
 8003d98:	db01      	blt.n	8003d9e <_malloc_r+0x1a>
 8003d9a:	42a9      	cmp	r1, r5
 8003d9c:	d903      	bls.n	8003da6 <_malloc_r+0x22>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	6033      	str	r3, [r6, #0]
 8003da2:	2000      	movs	r0, #0
 8003da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da6:	f000 fda3 	bl	80048f0 <__malloc_lock>
 8003daa:	4921      	ldr	r1, [pc, #132]	; (8003e30 <_malloc_r+0xac>)
 8003dac:	680a      	ldr	r2, [r1, #0]
 8003dae:	4614      	mov	r4, r2
 8003db0:	b99c      	cbnz	r4, 8003dda <_malloc_r+0x56>
 8003db2:	4f20      	ldr	r7, [pc, #128]	; (8003e34 <_malloc_r+0xb0>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b923      	cbnz	r3, 8003dc2 <_malloc_r+0x3e>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f000 fb2a 	bl	8004414 <_sbrk_r>
 8003dc0:	6038      	str	r0, [r7, #0]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f000 fb25 	bl	8004414 <_sbrk_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d123      	bne.n	8003e16 <_malloc_r+0x92>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f000 fd92 	bl	80048fc <__malloc_unlock>
 8003dd8:	e7e3      	b.n	8003da2 <_malloc_r+0x1e>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	1b5b      	subs	r3, r3, r5
 8003dde:	d417      	bmi.n	8003e10 <_malloc_r+0x8c>
 8003de0:	2b0b      	cmp	r3, #11
 8003de2:	d903      	bls.n	8003dec <_malloc_r+0x68>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	441c      	add	r4, r3
 8003de8:	6025      	str	r5, [r4, #0]
 8003dea:	e004      	b.n	8003df6 <_malloc_r+0x72>
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	42a2      	cmp	r2, r4
 8003df0:	bf0c      	ite	eq
 8003df2:	600b      	streq	r3, [r1, #0]
 8003df4:	6053      	strne	r3, [r2, #4]
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 fd80 	bl	80048fc <__malloc_unlock>
 8003dfc:	f104 000b 	add.w	r0, r4, #11
 8003e00:	1d23      	adds	r3, r4, #4
 8003e02:	f020 0007 	bic.w	r0, r0, #7
 8003e06:	1ac2      	subs	r2, r0, r3
 8003e08:	d0cc      	beq.n	8003da4 <_malloc_r+0x20>
 8003e0a:	1a1b      	subs	r3, r3, r0
 8003e0c:	50a3      	str	r3, [r4, r2]
 8003e0e:	e7c9      	b.n	8003da4 <_malloc_r+0x20>
 8003e10:	4622      	mov	r2, r4
 8003e12:	6864      	ldr	r4, [r4, #4]
 8003e14:	e7cc      	b.n	8003db0 <_malloc_r+0x2c>
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d0e3      	beq.n	8003de8 <_malloc_r+0x64>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4630      	mov	r0, r6
 8003e24:	f000 faf6 	bl	8004414 <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1dd      	bne.n	8003de8 <_malloc_r+0x64>
 8003e2c:	e7cf      	b.n	8003dce <_malloc_r+0x4a>
 8003e2e:	bf00      	nop
 8003e30:	2000009c 	.word	0x2000009c
 8003e34:	200000a0 	.word	0x200000a0

08003e38 <__sfputc_r>:
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	b410      	push	{r4}
 8003e40:	6093      	str	r3, [r2, #8]
 8003e42:	da08      	bge.n	8003e56 <__sfputc_r+0x1e>
 8003e44:	6994      	ldr	r4, [r2, #24]
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	db01      	blt.n	8003e4e <__sfputc_r+0x16>
 8003e4a:	290a      	cmp	r1, #10
 8003e4c:	d103      	bne.n	8003e56 <__sfputc_r+0x1e>
 8003e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e52:	f000 bb33 	b.w	80044bc <__swbuf_r>
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	1c58      	adds	r0, r3, #1
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	7019      	strb	r1, [r3, #0]
 8003e5e:	4608      	mov	r0, r1
 8003e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <__sfputs_r>:
 8003e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e68:	4606      	mov	r6, r0
 8003e6a:	460f      	mov	r7, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	18d5      	adds	r5, r2, r3
 8003e70:	42ac      	cmp	r4, r5
 8003e72:	d101      	bne.n	8003e78 <__sfputs_r+0x12>
 8003e74:	2000      	movs	r0, #0
 8003e76:	e007      	b.n	8003e88 <__sfputs_r+0x22>
 8003e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f7ff ffda 	bl	8003e38 <__sfputc_r>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d1f3      	bne.n	8003e70 <__sfputs_r+0xa>
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e8c <_vfiprintf_r>:
 8003e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	460d      	mov	r5, r1
 8003e92:	b09d      	sub	sp, #116	; 0x74
 8003e94:	4614      	mov	r4, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	4606      	mov	r6, r0
 8003e9a:	b118      	cbz	r0, 8003ea4 <_vfiprintf_r+0x18>
 8003e9c:	6983      	ldr	r3, [r0, #24]
 8003e9e:	b90b      	cbnz	r3, 8003ea4 <_vfiprintf_r+0x18>
 8003ea0:	f7ff fed0 	bl	8003c44 <__sinit>
 8003ea4:	4b89      	ldr	r3, [pc, #548]	; (80040cc <_vfiprintf_r+0x240>)
 8003ea6:	429d      	cmp	r5, r3
 8003ea8:	d11b      	bne.n	8003ee2 <_vfiprintf_r+0x56>
 8003eaa:	6875      	ldr	r5, [r6, #4]
 8003eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eae:	07d9      	lsls	r1, r3, #31
 8003eb0:	d405      	bmi.n	8003ebe <_vfiprintf_r+0x32>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	059a      	lsls	r2, r3, #22
 8003eb6:	d402      	bmi.n	8003ebe <_vfiprintf_r+0x32>
 8003eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eba:	f7ff ff61 	bl	8003d80 <__retarget_lock_acquire_recursive>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	071b      	lsls	r3, r3, #28
 8003ec2:	d501      	bpl.n	8003ec8 <_vfiprintf_r+0x3c>
 8003ec4:	692b      	ldr	r3, [r5, #16]
 8003ec6:	b9eb      	cbnz	r3, 8003f04 <_vfiprintf_r+0x78>
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 fb5a 	bl	8004584 <__swsetup_r>
 8003ed0:	b1c0      	cbz	r0, 8003f04 <_vfiprintf_r+0x78>
 8003ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed4:	07dc      	lsls	r4, r3, #31
 8003ed6:	d50e      	bpl.n	8003ef6 <_vfiprintf_r+0x6a>
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	b01d      	add	sp, #116	; 0x74
 8003ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee2:	4b7b      	ldr	r3, [pc, #492]	; (80040d0 <_vfiprintf_r+0x244>)
 8003ee4:	429d      	cmp	r5, r3
 8003ee6:	d101      	bne.n	8003eec <_vfiprintf_r+0x60>
 8003ee8:	68b5      	ldr	r5, [r6, #8]
 8003eea:	e7df      	b.n	8003eac <_vfiprintf_r+0x20>
 8003eec:	4b79      	ldr	r3, [pc, #484]	; (80040d4 <_vfiprintf_r+0x248>)
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	bf08      	it	eq
 8003ef2:	68f5      	ldreq	r5, [r6, #12]
 8003ef4:	e7da      	b.n	8003eac <_vfiprintf_r+0x20>
 8003ef6:	89ab      	ldrh	r3, [r5, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d4ed      	bmi.n	8003ed8 <_vfiprintf_r+0x4c>
 8003efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003efe:	f7ff ff40 	bl	8003d82 <__retarget_lock_release_recursive>
 8003f02:	e7e9      	b.n	8003ed8 <_vfiprintf_r+0x4c>
 8003f04:	2300      	movs	r3, #0
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	2320      	movs	r3, #32
 8003f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f12:	2330      	movs	r3, #48	; 0x30
 8003f14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040d8 <_vfiprintf_r+0x24c>
 8003f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f1c:	f04f 0901 	mov.w	r9, #1
 8003f20:	4623      	mov	r3, r4
 8003f22:	469a      	mov	sl, r3
 8003f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f28:	b10a      	cbz	r2, 8003f2e <_vfiprintf_r+0xa2>
 8003f2a:	2a25      	cmp	r2, #37	; 0x25
 8003f2c:	d1f9      	bne.n	8003f22 <_vfiprintf_r+0x96>
 8003f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f32:	d00b      	beq.n	8003f4c <_vfiprintf_r+0xc0>
 8003f34:	465b      	mov	r3, fp
 8003f36:	4622      	mov	r2, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ff93 	bl	8003e66 <__sfputs_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	f000 80aa 	beq.w	800409a <_vfiprintf_r+0x20e>
 8003f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f48:	445a      	add	r2, fp
 8003f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a2 	beq.w	800409a <_vfiprintf_r+0x20e>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f60:	f10a 0a01 	add.w	sl, sl, #1
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f6e:	4654      	mov	r4, sl
 8003f70:	2205      	movs	r2, #5
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	4858      	ldr	r0, [pc, #352]	; (80040d8 <_vfiprintf_r+0x24c>)
 8003f78:	f7fc f92a 	bl	80001d0 <memchr>
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	b9d8      	cbnz	r0, 8003fb8 <_vfiprintf_r+0x12c>
 8003f80:	06d1      	lsls	r1, r2, #27
 8003f82:	bf44      	itt	mi
 8003f84:	2320      	movmi	r3, #32
 8003f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8a:	0713      	lsls	r3, r2, #28
 8003f8c:	bf44      	itt	mi
 8003f8e:	232b      	movmi	r3, #43	; 0x2b
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f94:	f89a 3000 	ldrb.w	r3, [sl]
 8003f98:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9a:	d015      	beq.n	8003fc8 <_vfiprintf_r+0x13c>
 8003f9c:	9a07      	ldr	r2, [sp, #28]
 8003f9e:	4654      	mov	r4, sl
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f04f 0c0a 	mov.w	ip, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fac:	3b30      	subs	r3, #48	; 0x30
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d94e      	bls.n	8004050 <_vfiprintf_r+0x1c4>
 8003fb2:	b1b0      	cbz	r0, 8003fe2 <_vfiprintf_r+0x156>
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	e014      	b.n	8003fe2 <_vfiprintf_r+0x156>
 8003fb8:	eba0 0308 	sub.w	r3, r0, r8
 8003fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	46a2      	mov	sl, r4
 8003fc6:	e7d2      	b.n	8003f6e <_vfiprintf_r+0xe2>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9103      	str	r1, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfbb      	ittet	lt
 8003fd4:	425b      	neglt	r3, r3
 8003fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fda:	9307      	strge	r3, [sp, #28]
 8003fdc:	9307      	strlt	r3, [sp, #28]
 8003fde:	bfb8      	it	lt
 8003fe0:	9204      	strlt	r2, [sp, #16]
 8003fe2:	7823      	ldrb	r3, [r4, #0]
 8003fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe6:	d10c      	bne.n	8004002 <_vfiprintf_r+0x176>
 8003fe8:	7863      	ldrb	r3, [r4, #1]
 8003fea:	2b2a      	cmp	r3, #42	; 0x2a
 8003fec:	d135      	bne.n	800405a <_vfiprintf_r+0x1ce>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	9203      	str	r2, [sp, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bfb8      	it	lt
 8003ffa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ffe:	3402      	adds	r4, #2
 8004000:	9305      	str	r3, [sp, #20]
 8004002:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040e8 <_vfiprintf_r+0x25c>
 8004006:	7821      	ldrb	r1, [r4, #0]
 8004008:	2203      	movs	r2, #3
 800400a:	4650      	mov	r0, sl
 800400c:	f7fc f8e0 	bl	80001d0 <memchr>
 8004010:	b140      	cbz	r0, 8004024 <_vfiprintf_r+0x198>
 8004012:	2340      	movs	r3, #64	; 0x40
 8004014:	eba0 000a 	sub.w	r0, r0, sl
 8004018:	fa03 f000 	lsl.w	r0, r3, r0
 800401c:	9b04      	ldr	r3, [sp, #16]
 800401e:	4303      	orrs	r3, r0
 8004020:	3401      	adds	r4, #1
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004028:	482c      	ldr	r0, [pc, #176]	; (80040dc <_vfiprintf_r+0x250>)
 800402a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800402e:	2206      	movs	r2, #6
 8004030:	f7fc f8ce 	bl	80001d0 <memchr>
 8004034:	2800      	cmp	r0, #0
 8004036:	d03f      	beq.n	80040b8 <_vfiprintf_r+0x22c>
 8004038:	4b29      	ldr	r3, [pc, #164]	; (80040e0 <_vfiprintf_r+0x254>)
 800403a:	bb1b      	cbnz	r3, 8004084 <_vfiprintf_r+0x1f8>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	3307      	adds	r3, #7
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	3308      	adds	r3, #8
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404a:	443b      	add	r3, r7
 800404c:	9309      	str	r3, [sp, #36]	; 0x24
 800404e:	e767      	b.n	8003f20 <_vfiprintf_r+0x94>
 8004050:	fb0c 3202 	mla	r2, ip, r2, r3
 8004054:	460c      	mov	r4, r1
 8004056:	2001      	movs	r0, #1
 8004058:	e7a5      	b.n	8003fa6 <_vfiprintf_r+0x11a>
 800405a:	2300      	movs	r3, #0
 800405c:	3401      	adds	r4, #1
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	4619      	mov	r1, r3
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4620      	mov	r0, r4
 8004068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800406c:	3a30      	subs	r2, #48	; 0x30
 800406e:	2a09      	cmp	r2, #9
 8004070:	d903      	bls.n	800407a <_vfiprintf_r+0x1ee>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0c5      	beq.n	8004002 <_vfiprintf_r+0x176>
 8004076:	9105      	str	r1, [sp, #20]
 8004078:	e7c3      	b.n	8004002 <_vfiprintf_r+0x176>
 800407a:	fb0c 2101 	mla	r1, ip, r1, r2
 800407e:	4604      	mov	r4, r0
 8004080:	2301      	movs	r3, #1
 8004082:	e7f0      	b.n	8004066 <_vfiprintf_r+0x1da>
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <_vfiprintf_r+0x258>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4630      	mov	r0, r6
 8004090:	f3af 8000 	nop.w
 8004094:	4607      	mov	r7, r0
 8004096:	1c78      	adds	r0, r7, #1
 8004098:	d1d6      	bne.n	8004048 <_vfiprintf_r+0x1bc>
 800409a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409c:	07d9      	lsls	r1, r3, #31
 800409e:	d405      	bmi.n	80040ac <_vfiprintf_r+0x220>
 80040a0:	89ab      	ldrh	r3, [r5, #12]
 80040a2:	059a      	lsls	r2, r3, #22
 80040a4:	d402      	bmi.n	80040ac <_vfiprintf_r+0x220>
 80040a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a8:	f7ff fe6b 	bl	8003d82 <__retarget_lock_release_recursive>
 80040ac:	89ab      	ldrh	r3, [r5, #12]
 80040ae:	065b      	lsls	r3, r3, #25
 80040b0:	f53f af12 	bmi.w	8003ed8 <_vfiprintf_r+0x4c>
 80040b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b6:	e711      	b.n	8003edc <_vfiprintf_r+0x50>
 80040b8:	ab03      	add	r3, sp, #12
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	462a      	mov	r2, r5
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <_vfiprintf_r+0x258>)
 80040c0:	a904      	add	r1, sp, #16
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 f880 	bl	80041c8 <_printf_i>
 80040c8:	e7e4      	b.n	8004094 <_vfiprintf_r+0x208>
 80040ca:	bf00      	nop
 80040cc:	08004b00 	.word	0x08004b00
 80040d0:	08004b20 	.word	0x08004b20
 80040d4:	08004ae0 	.word	0x08004ae0
 80040d8:	08004b40 	.word	0x08004b40
 80040dc:	08004b4a 	.word	0x08004b4a
 80040e0:	00000000 	.word	0x00000000
 80040e4:	08003e67 	.word	0x08003e67
 80040e8:	08004b46 	.word	0x08004b46

080040ec <_printf_common>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	4616      	mov	r6, r2
 80040f2:	4699      	mov	r9, r3
 80040f4:	688a      	ldr	r2, [r1, #8]
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bfb8      	it	lt
 8004100:	4613      	movlt	r3, r2
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004108:	4607      	mov	r7, r0
 800410a:	460c      	mov	r4, r1
 800410c:	b10a      	cbz	r2, 8004112 <_printf_common+0x26>
 800410e:	3301      	adds	r3, #1
 8004110:	6033      	str	r3, [r6, #0]
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	0699      	lsls	r1, r3, #26
 8004116:	bf42      	ittt	mi
 8004118:	6833      	ldrmi	r3, [r6, #0]
 800411a:	3302      	addmi	r3, #2
 800411c:	6033      	strmi	r3, [r6, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	f015 0506 	ands.w	r5, r5, #6
 8004124:	d106      	bne.n	8004134 <_printf_common+0x48>
 8004126:	f104 0a19 	add.w	sl, r4, #25
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	42ab      	cmp	r3, r5
 8004132:	dc26      	bgt.n	8004182 <_printf_common+0x96>
 8004134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004138:	1e13      	subs	r3, r2, #0
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	bf18      	it	ne
 800413e:	2301      	movne	r3, #1
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	d42b      	bmi.n	800419c <_printf_common+0xb0>
 8004144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004148:	4649      	mov	r1, r9
 800414a:	4638      	mov	r0, r7
 800414c:	47c0      	blx	r8
 800414e:	3001      	adds	r0, #1
 8004150:	d01e      	beq.n	8004190 <_printf_common+0xa4>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	68e5      	ldr	r5, [r4, #12]
 8004156:	6832      	ldr	r2, [r6, #0]
 8004158:	f003 0306 	and.w	r3, r3, #6
 800415c:	2b04      	cmp	r3, #4
 800415e:	bf08      	it	eq
 8004160:	1aad      	subeq	r5, r5, r2
 8004162:	68a3      	ldr	r3, [r4, #8]
 8004164:	6922      	ldr	r2, [r4, #16]
 8004166:	bf0c      	ite	eq
 8004168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800416c:	2500      	movne	r5, #0
 800416e:	4293      	cmp	r3, r2
 8004170:	bfc4      	itt	gt
 8004172:	1a9b      	subgt	r3, r3, r2
 8004174:	18ed      	addgt	r5, r5, r3
 8004176:	2600      	movs	r6, #0
 8004178:	341a      	adds	r4, #26
 800417a:	42b5      	cmp	r5, r6
 800417c:	d11a      	bne.n	80041b4 <_printf_common+0xc8>
 800417e:	2000      	movs	r0, #0
 8004180:	e008      	b.n	8004194 <_printf_common+0xa8>
 8004182:	2301      	movs	r3, #1
 8004184:	4652      	mov	r2, sl
 8004186:	4649      	mov	r1, r9
 8004188:	4638      	mov	r0, r7
 800418a:	47c0      	blx	r8
 800418c:	3001      	adds	r0, #1
 800418e:	d103      	bne.n	8004198 <_printf_common+0xac>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	3501      	adds	r5, #1
 800419a:	e7c6      	b.n	800412a <_printf_common+0x3e>
 800419c:	18e1      	adds	r1, r4, r3
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	2030      	movs	r0, #48	; 0x30
 80041a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a6:	4422      	add	r2, r4
 80041a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041b0:	3302      	adds	r3, #2
 80041b2:	e7c7      	b.n	8004144 <_printf_common+0x58>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4622      	mov	r2, r4
 80041b8:	4649      	mov	r1, r9
 80041ba:	4638      	mov	r0, r7
 80041bc:	47c0      	blx	r8
 80041be:	3001      	adds	r0, #1
 80041c0:	d0e6      	beq.n	8004190 <_printf_common+0xa4>
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7d9      	b.n	800417a <_printf_common+0x8e>
	...

080041c8 <_printf_i>:
 80041c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	460c      	mov	r4, r1
 80041ce:	4691      	mov	r9, r2
 80041d0:	7e27      	ldrb	r7, [r4, #24]
 80041d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041d4:	2f78      	cmp	r7, #120	; 0x78
 80041d6:	4680      	mov	r8, r0
 80041d8:	469a      	mov	sl, r3
 80041da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041de:	d807      	bhi.n	80041f0 <_printf_i+0x28>
 80041e0:	2f62      	cmp	r7, #98	; 0x62
 80041e2:	d80a      	bhi.n	80041fa <_printf_i+0x32>
 80041e4:	2f00      	cmp	r7, #0
 80041e6:	f000 80d8 	beq.w	800439a <_printf_i+0x1d2>
 80041ea:	2f58      	cmp	r7, #88	; 0x58
 80041ec:	f000 80a3 	beq.w	8004336 <_printf_i+0x16e>
 80041f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f8:	e03a      	b.n	8004270 <_printf_i+0xa8>
 80041fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041fe:	2b15      	cmp	r3, #21
 8004200:	d8f6      	bhi.n	80041f0 <_printf_i+0x28>
 8004202:	a001      	add	r0, pc, #4	; (adr r0, 8004208 <_printf_i+0x40>)
 8004204:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004208:	08004261 	.word	0x08004261
 800420c:	08004275 	.word	0x08004275
 8004210:	080041f1 	.word	0x080041f1
 8004214:	080041f1 	.word	0x080041f1
 8004218:	080041f1 	.word	0x080041f1
 800421c:	080041f1 	.word	0x080041f1
 8004220:	08004275 	.word	0x08004275
 8004224:	080041f1 	.word	0x080041f1
 8004228:	080041f1 	.word	0x080041f1
 800422c:	080041f1 	.word	0x080041f1
 8004230:	080041f1 	.word	0x080041f1
 8004234:	08004381 	.word	0x08004381
 8004238:	080042a5 	.word	0x080042a5
 800423c:	08004363 	.word	0x08004363
 8004240:	080041f1 	.word	0x080041f1
 8004244:	080041f1 	.word	0x080041f1
 8004248:	080043a3 	.word	0x080043a3
 800424c:	080041f1 	.word	0x080041f1
 8004250:	080042a5 	.word	0x080042a5
 8004254:	080041f1 	.word	0x080041f1
 8004258:	080041f1 	.word	0x080041f1
 800425c:	0800436b 	.word	0x0800436b
 8004260:	680b      	ldr	r3, [r1, #0]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	600a      	str	r2, [r1, #0]
 8004268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800426c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004270:	2301      	movs	r3, #1
 8004272:	e0a3      	b.n	80043bc <_printf_i+0x1f4>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	6808      	ldr	r0, [r1, #0]
 8004278:	062e      	lsls	r6, r5, #24
 800427a:	f100 0304 	add.w	r3, r0, #4
 800427e:	d50a      	bpl.n	8004296 <_printf_i+0xce>
 8004280:	6805      	ldr	r5, [r0, #0]
 8004282:	600b      	str	r3, [r1, #0]
 8004284:	2d00      	cmp	r5, #0
 8004286:	da03      	bge.n	8004290 <_printf_i+0xc8>
 8004288:	232d      	movs	r3, #45	; 0x2d
 800428a:	426d      	negs	r5, r5
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004290:	485e      	ldr	r0, [pc, #376]	; (800440c <_printf_i+0x244>)
 8004292:	230a      	movs	r3, #10
 8004294:	e019      	b.n	80042ca <_printf_i+0x102>
 8004296:	f015 0f40 	tst.w	r5, #64	; 0x40
 800429a:	6805      	ldr	r5, [r0, #0]
 800429c:	600b      	str	r3, [r1, #0]
 800429e:	bf18      	it	ne
 80042a0:	b22d      	sxthne	r5, r5
 80042a2:	e7ef      	b.n	8004284 <_printf_i+0xbc>
 80042a4:	680b      	ldr	r3, [r1, #0]
 80042a6:	6825      	ldr	r5, [r4, #0]
 80042a8:	1d18      	adds	r0, r3, #4
 80042aa:	6008      	str	r0, [r1, #0]
 80042ac:	0628      	lsls	r0, r5, #24
 80042ae:	d501      	bpl.n	80042b4 <_printf_i+0xec>
 80042b0:	681d      	ldr	r5, [r3, #0]
 80042b2:	e002      	b.n	80042ba <_printf_i+0xf2>
 80042b4:	0669      	lsls	r1, r5, #25
 80042b6:	d5fb      	bpl.n	80042b0 <_printf_i+0xe8>
 80042b8:	881d      	ldrh	r5, [r3, #0]
 80042ba:	4854      	ldr	r0, [pc, #336]	; (800440c <_printf_i+0x244>)
 80042bc:	2f6f      	cmp	r7, #111	; 0x6f
 80042be:	bf0c      	ite	eq
 80042c0:	2308      	moveq	r3, #8
 80042c2:	230a      	movne	r3, #10
 80042c4:	2100      	movs	r1, #0
 80042c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ca:	6866      	ldr	r6, [r4, #4]
 80042cc:	60a6      	str	r6, [r4, #8]
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	bfa2      	ittt	ge
 80042d2:	6821      	ldrge	r1, [r4, #0]
 80042d4:	f021 0104 	bicge.w	r1, r1, #4
 80042d8:	6021      	strge	r1, [r4, #0]
 80042da:	b90d      	cbnz	r5, 80042e0 <_printf_i+0x118>
 80042dc:	2e00      	cmp	r6, #0
 80042de:	d04d      	beq.n	800437c <_printf_i+0x1b4>
 80042e0:	4616      	mov	r6, r2
 80042e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042e6:	fb03 5711 	mls	r7, r3, r1, r5
 80042ea:	5dc7      	ldrb	r7, [r0, r7]
 80042ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042f0:	462f      	mov	r7, r5
 80042f2:	42bb      	cmp	r3, r7
 80042f4:	460d      	mov	r5, r1
 80042f6:	d9f4      	bls.n	80042e2 <_printf_i+0x11a>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d10b      	bne.n	8004314 <_printf_i+0x14c>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	07df      	lsls	r7, r3, #31
 8004300:	d508      	bpl.n	8004314 <_printf_i+0x14c>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	6861      	ldr	r1, [r4, #4]
 8004306:	4299      	cmp	r1, r3
 8004308:	bfde      	ittt	le
 800430a:	2330      	movle	r3, #48	; 0x30
 800430c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004310:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004314:	1b92      	subs	r2, r2, r6
 8004316:	6122      	str	r2, [r4, #16]
 8004318:	f8cd a000 	str.w	sl, [sp]
 800431c:	464b      	mov	r3, r9
 800431e:	aa03      	add	r2, sp, #12
 8004320:	4621      	mov	r1, r4
 8004322:	4640      	mov	r0, r8
 8004324:	f7ff fee2 	bl	80040ec <_printf_common>
 8004328:	3001      	adds	r0, #1
 800432a:	d14c      	bne.n	80043c6 <_printf_i+0x1fe>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	b004      	add	sp, #16
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	4835      	ldr	r0, [pc, #212]	; (800440c <_printf_i+0x244>)
 8004338:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	680e      	ldr	r6, [r1, #0]
 8004340:	061f      	lsls	r7, r3, #24
 8004342:	f856 5b04 	ldr.w	r5, [r6], #4
 8004346:	600e      	str	r6, [r1, #0]
 8004348:	d514      	bpl.n	8004374 <_printf_i+0x1ac>
 800434a:	07d9      	lsls	r1, r3, #31
 800434c:	bf44      	itt	mi
 800434e:	f043 0320 	orrmi.w	r3, r3, #32
 8004352:	6023      	strmi	r3, [r4, #0]
 8004354:	b91d      	cbnz	r5, 800435e <_printf_i+0x196>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f023 0320 	bic.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	2310      	movs	r3, #16
 8004360:	e7b0      	b.n	80042c4 <_printf_i+0xfc>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f043 0320 	orr.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	2378      	movs	r3, #120	; 0x78
 800436c:	4828      	ldr	r0, [pc, #160]	; (8004410 <_printf_i+0x248>)
 800436e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004372:	e7e3      	b.n	800433c <_printf_i+0x174>
 8004374:	065e      	lsls	r6, r3, #25
 8004376:	bf48      	it	mi
 8004378:	b2ad      	uxthmi	r5, r5
 800437a:	e7e6      	b.n	800434a <_printf_i+0x182>
 800437c:	4616      	mov	r6, r2
 800437e:	e7bb      	b.n	80042f8 <_printf_i+0x130>
 8004380:	680b      	ldr	r3, [r1, #0]
 8004382:	6826      	ldr	r6, [r4, #0]
 8004384:	6960      	ldr	r0, [r4, #20]
 8004386:	1d1d      	adds	r5, r3, #4
 8004388:	600d      	str	r5, [r1, #0]
 800438a:	0635      	lsls	r5, r6, #24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1cc>
 8004390:	6018      	str	r0, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1d2>
 8004394:	0671      	lsls	r1, r6, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x1c8>
 8004398:	8018      	strh	r0, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	4616      	mov	r6, r2
 80043a0:	e7ba      	b.n	8004318 <_printf_i+0x150>
 80043a2:	680b      	ldr	r3, [r1, #0]
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	600a      	str	r2, [r1, #0]
 80043a8:	681e      	ldr	r6, [r3, #0]
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7fb ff0e 	bl	80001d0 <memchr>
 80043b4:	b108      	cbz	r0, 80043ba <_printf_i+0x1f2>
 80043b6:	1b80      	subs	r0, r0, r6
 80043b8:	6060      	str	r0, [r4, #4]
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	2300      	movs	r3, #0
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c4:	e7a8      	b.n	8004318 <_printf_i+0x150>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	4632      	mov	r2, r6
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	47d0      	blx	sl
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0ab      	beq.n	800432c <_printf_i+0x164>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	d413      	bmi.n	8004402 <_printf_i+0x23a>
 80043da:	68e0      	ldr	r0, [r4, #12]
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	4298      	cmp	r0, r3
 80043e0:	bfb8      	it	lt
 80043e2:	4618      	movlt	r0, r3
 80043e4:	e7a4      	b.n	8004330 <_printf_i+0x168>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4632      	mov	r2, r6
 80043ea:	4649      	mov	r1, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	47d0      	blx	sl
 80043f0:	3001      	adds	r0, #1
 80043f2:	d09b      	beq.n	800432c <_printf_i+0x164>
 80043f4:	3501      	adds	r5, #1
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	9903      	ldr	r1, [sp, #12]
 80043fa:	1a5b      	subs	r3, r3, r1
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dcf2      	bgt.n	80043e6 <_printf_i+0x21e>
 8004400:	e7eb      	b.n	80043da <_printf_i+0x212>
 8004402:	2500      	movs	r5, #0
 8004404:	f104 0619 	add.w	r6, r4, #25
 8004408:	e7f5      	b.n	80043f6 <_printf_i+0x22e>
 800440a:	bf00      	nop
 800440c:	08004b51 	.word	0x08004b51
 8004410:	08004b62 	.word	0x08004b62

08004414 <_sbrk_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4d06      	ldr	r5, [pc, #24]	; (8004430 <_sbrk_r+0x1c>)
 8004418:	2300      	movs	r3, #0
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fc fa8a 	bl	8000938 <_sbrk>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_sbrk_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_sbrk_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	2000019c 	.word	0x2000019c

08004434 <__sread>:
 8004434:	b510      	push	{r4, lr}
 8004436:	460c      	mov	r4, r1
 8004438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443c:	f000 fab4 	bl	80049a8 <_read_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	bfab      	itete	ge
 8004444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004446:	89a3      	ldrhlt	r3, [r4, #12]
 8004448:	181b      	addge	r3, r3, r0
 800444a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800444e:	bfac      	ite	ge
 8004450:	6563      	strge	r3, [r4, #84]	; 0x54
 8004452:	81a3      	strhlt	r3, [r4, #12]
 8004454:	bd10      	pop	{r4, pc}

08004456 <__swrite>:
 8004456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445a:	461f      	mov	r7, r3
 800445c:	898b      	ldrh	r3, [r1, #12]
 800445e:	05db      	lsls	r3, r3, #23
 8004460:	4605      	mov	r5, r0
 8004462:	460c      	mov	r4, r1
 8004464:	4616      	mov	r6, r2
 8004466:	d505      	bpl.n	8004474 <__swrite+0x1e>
 8004468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446c:	2302      	movs	r3, #2
 800446e:	2200      	movs	r2, #0
 8004470:	f000 f9c8 	bl	8004804 <_lseek_r>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800447a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	4632      	mov	r2, r6
 8004482:	463b      	mov	r3, r7
 8004484:	4628      	mov	r0, r5
 8004486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800448a:	f000 b869 	b.w	8004560 <_write_r>

0800448e <__sseek>:
 800448e:	b510      	push	{r4, lr}
 8004490:	460c      	mov	r4, r1
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 f9b5 	bl	8004804 <_lseek_r>
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	bf15      	itete	ne
 80044a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80044a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044aa:	81a3      	strheq	r3, [r4, #12]
 80044ac:	bf18      	it	ne
 80044ae:	81a3      	strhne	r3, [r4, #12]
 80044b0:	bd10      	pop	{r4, pc}

080044b2 <__sclose>:
 80044b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b6:	f000 b8d3 	b.w	8004660 <_close_r>
	...

080044bc <__swbuf_r>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	460e      	mov	r6, r1
 80044c0:	4614      	mov	r4, r2
 80044c2:	4605      	mov	r5, r0
 80044c4:	b118      	cbz	r0, 80044ce <__swbuf_r+0x12>
 80044c6:	6983      	ldr	r3, [r0, #24]
 80044c8:	b90b      	cbnz	r3, 80044ce <__swbuf_r+0x12>
 80044ca:	f7ff fbbb 	bl	8003c44 <__sinit>
 80044ce:	4b21      	ldr	r3, [pc, #132]	; (8004554 <__swbuf_r+0x98>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d12b      	bne.n	800452c <__swbuf_r+0x70>
 80044d4:	686c      	ldr	r4, [r5, #4]
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	071a      	lsls	r2, r3, #28
 80044de:	d52f      	bpl.n	8004540 <__swbuf_r+0x84>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	b36b      	cbz	r3, 8004540 <__swbuf_r+0x84>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	1ac0      	subs	r0, r0, r3
 80044ea:	6963      	ldr	r3, [r4, #20]
 80044ec:	b2f6      	uxtb	r6, r6
 80044ee:	4283      	cmp	r3, r0
 80044f0:	4637      	mov	r7, r6
 80044f2:	dc04      	bgt.n	80044fe <__swbuf_r+0x42>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 f948 	bl	800478c <_fflush_r>
 80044fc:	bb30      	cbnz	r0, 800454c <__swbuf_r+0x90>
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	3b01      	subs	r3, #1
 8004502:	60a3      	str	r3, [r4, #8]
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	6022      	str	r2, [r4, #0]
 800450a:	701e      	strb	r6, [r3, #0]
 800450c:	6963      	ldr	r3, [r4, #20]
 800450e:	3001      	adds	r0, #1
 8004510:	4283      	cmp	r3, r0
 8004512:	d004      	beq.n	800451e <__swbuf_r+0x62>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	07db      	lsls	r3, r3, #31
 8004518:	d506      	bpl.n	8004528 <__swbuf_r+0x6c>
 800451a:	2e0a      	cmp	r6, #10
 800451c:	d104      	bne.n	8004528 <__swbuf_r+0x6c>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 f933 	bl	800478c <_fflush_r>
 8004526:	b988      	cbnz	r0, 800454c <__swbuf_r+0x90>
 8004528:	4638      	mov	r0, r7
 800452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <__swbuf_r+0x9c>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d101      	bne.n	8004536 <__swbuf_r+0x7a>
 8004532:	68ac      	ldr	r4, [r5, #8]
 8004534:	e7cf      	b.n	80044d6 <__swbuf_r+0x1a>
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <__swbuf_r+0xa0>)
 8004538:	429c      	cmp	r4, r3
 800453a:	bf08      	it	eq
 800453c:	68ec      	ldreq	r4, [r5, #12]
 800453e:	e7ca      	b.n	80044d6 <__swbuf_r+0x1a>
 8004540:	4621      	mov	r1, r4
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f81e 	bl	8004584 <__swsetup_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	d0cb      	beq.n	80044e4 <__swbuf_r+0x28>
 800454c:	f04f 37ff 	mov.w	r7, #4294967295
 8004550:	e7ea      	b.n	8004528 <__swbuf_r+0x6c>
 8004552:	bf00      	nop
 8004554:	08004b00 	.word	0x08004b00
 8004558:	08004b20 	.word	0x08004b20
 800455c:	08004ae0 	.word	0x08004ae0

08004560 <_write_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d07      	ldr	r5, [pc, #28]	; (8004580 <_write_r+0x20>)
 8004564:	4604      	mov	r4, r0
 8004566:	4608      	mov	r0, r1
 8004568:	4611      	mov	r1, r2
 800456a:	2200      	movs	r2, #0
 800456c:	602a      	str	r2, [r5, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	f7fb fefc 	bl	800036c <_write>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_write_r+0x1e>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_write_r+0x1e>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	2000019c 	.word	0x2000019c

08004584 <__swsetup_r>:
 8004584:	4b32      	ldr	r3, [pc, #200]	; (8004650 <__swsetup_r+0xcc>)
 8004586:	b570      	push	{r4, r5, r6, lr}
 8004588:	681d      	ldr	r5, [r3, #0]
 800458a:	4606      	mov	r6, r0
 800458c:	460c      	mov	r4, r1
 800458e:	b125      	cbz	r5, 800459a <__swsetup_r+0x16>
 8004590:	69ab      	ldr	r3, [r5, #24]
 8004592:	b913      	cbnz	r3, 800459a <__swsetup_r+0x16>
 8004594:	4628      	mov	r0, r5
 8004596:	f7ff fb55 	bl	8003c44 <__sinit>
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <__swsetup_r+0xd0>)
 800459c:	429c      	cmp	r4, r3
 800459e:	d10f      	bne.n	80045c0 <__swsetup_r+0x3c>
 80045a0:	686c      	ldr	r4, [r5, #4]
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045a8:	0719      	lsls	r1, r3, #28
 80045aa:	d42c      	bmi.n	8004606 <__swsetup_r+0x82>
 80045ac:	06dd      	lsls	r5, r3, #27
 80045ae:	d411      	bmi.n	80045d4 <__swsetup_r+0x50>
 80045b0:	2309      	movs	r3, #9
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295
 80045be:	e03e      	b.n	800463e <__swsetup_r+0xba>
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <__swsetup_r+0xd4>)
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d101      	bne.n	80045ca <__swsetup_r+0x46>
 80045c6:	68ac      	ldr	r4, [r5, #8]
 80045c8:	e7eb      	b.n	80045a2 <__swsetup_r+0x1e>
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <__swsetup_r+0xd8>)
 80045cc:	429c      	cmp	r4, r3
 80045ce:	bf08      	it	eq
 80045d0:	68ec      	ldreq	r4, [r5, #12]
 80045d2:	e7e6      	b.n	80045a2 <__swsetup_r+0x1e>
 80045d4:	0758      	lsls	r0, r3, #29
 80045d6:	d512      	bpl.n	80045fe <__swsetup_r+0x7a>
 80045d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045da:	b141      	cbz	r1, 80045ee <__swsetup_r+0x6a>
 80045dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045e0:	4299      	cmp	r1, r3
 80045e2:	d002      	beq.n	80045ea <__swsetup_r+0x66>
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f98f 	bl	8004908 <_free_r>
 80045ea:	2300      	movs	r3, #0
 80045ec:	6363      	str	r3, [r4, #52]	; 0x34
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045f4:	81a3      	strh	r3, [r4, #12]
 80045f6:	2300      	movs	r3, #0
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f043 0308 	orr.w	r3, r3, #8
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	b94b      	cbnz	r3, 800461e <__swsetup_r+0x9a>
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d003      	beq.n	800461e <__swsetup_r+0x9a>
 8004616:	4621      	mov	r1, r4
 8004618:	4630      	mov	r0, r6
 800461a:	f000 f929 	bl	8004870 <__smakebuf_r>
 800461e:	89a0      	ldrh	r0, [r4, #12]
 8004620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004624:	f010 0301 	ands.w	r3, r0, #1
 8004628:	d00a      	beq.n	8004640 <__swsetup_r+0xbc>
 800462a:	2300      	movs	r3, #0
 800462c:	60a3      	str	r3, [r4, #8]
 800462e:	6963      	ldr	r3, [r4, #20]
 8004630:	425b      	negs	r3, r3
 8004632:	61a3      	str	r3, [r4, #24]
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	b943      	cbnz	r3, 800464a <__swsetup_r+0xc6>
 8004638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800463c:	d1ba      	bne.n	80045b4 <__swsetup_r+0x30>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	0781      	lsls	r1, r0, #30
 8004642:	bf58      	it	pl
 8004644:	6963      	ldrpl	r3, [r4, #20]
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	e7f4      	b.n	8004634 <__swsetup_r+0xb0>
 800464a:	2000      	movs	r0, #0
 800464c:	e7f7      	b.n	800463e <__swsetup_r+0xba>
 800464e:	bf00      	nop
 8004650:	20000014 	.word	0x20000014
 8004654:	08004b00 	.word	0x08004b00
 8004658:	08004b20 	.word	0x08004b20
 800465c:	08004ae0 	.word	0x08004ae0

08004660 <_close_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d06      	ldr	r5, [pc, #24]	; (800467c <_close_r+0x1c>)
 8004664:	2300      	movs	r3, #0
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	f7fc f92f 	bl	80008ce <_close>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_close_r+0x1a>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_close_r+0x1a>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	2000019c 	.word	0x2000019c

08004680 <__sflush_r>:
 8004680:	898a      	ldrh	r2, [r1, #12]
 8004682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004686:	4605      	mov	r5, r0
 8004688:	0710      	lsls	r0, r2, #28
 800468a:	460c      	mov	r4, r1
 800468c:	d458      	bmi.n	8004740 <__sflush_r+0xc0>
 800468e:	684b      	ldr	r3, [r1, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	dc05      	bgt.n	80046a0 <__sflush_r+0x20>
 8004694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	dc02      	bgt.n	80046a0 <__sflush_r+0x20>
 800469a:	2000      	movs	r0, #0
 800469c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046a2:	2e00      	cmp	r6, #0
 80046a4:	d0f9      	beq.n	800469a <__sflush_r+0x1a>
 80046a6:	2300      	movs	r3, #0
 80046a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046ac:	682f      	ldr	r7, [r5, #0]
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	d032      	beq.n	8004718 <__sflush_r+0x98>
 80046b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	075a      	lsls	r2, r3, #29
 80046b8:	d505      	bpl.n	80046c6 <__sflush_r+0x46>
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	1ac0      	subs	r0, r0, r3
 80046be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046c0:	b10b      	cbz	r3, 80046c6 <__sflush_r+0x46>
 80046c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046c4:	1ac0      	subs	r0, r0, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	4602      	mov	r2, r0
 80046ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046cc:	6a21      	ldr	r1, [r4, #32]
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b0      	blx	r6
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	d106      	bne.n	80046e6 <__sflush_r+0x66>
 80046d8:	6829      	ldr	r1, [r5, #0]
 80046da:	291d      	cmp	r1, #29
 80046dc:	d82c      	bhi.n	8004738 <__sflush_r+0xb8>
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <__sflush_r+0x108>)
 80046e0:	40ca      	lsrs	r2, r1
 80046e2:	07d6      	lsls	r6, r2, #31
 80046e4:	d528      	bpl.n	8004738 <__sflush_r+0xb8>
 80046e6:	2200      	movs	r2, #0
 80046e8:	6062      	str	r2, [r4, #4]
 80046ea:	04d9      	lsls	r1, r3, #19
 80046ec:	6922      	ldr	r2, [r4, #16]
 80046ee:	6022      	str	r2, [r4, #0]
 80046f0:	d504      	bpl.n	80046fc <__sflush_r+0x7c>
 80046f2:	1c42      	adds	r2, r0, #1
 80046f4:	d101      	bne.n	80046fa <__sflush_r+0x7a>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	b903      	cbnz	r3, 80046fc <__sflush_r+0x7c>
 80046fa:	6560      	str	r0, [r4, #84]	; 0x54
 80046fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046fe:	602f      	str	r7, [r5, #0]
 8004700:	2900      	cmp	r1, #0
 8004702:	d0ca      	beq.n	800469a <__sflush_r+0x1a>
 8004704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004708:	4299      	cmp	r1, r3
 800470a:	d002      	beq.n	8004712 <__sflush_r+0x92>
 800470c:	4628      	mov	r0, r5
 800470e:	f000 f8fb 	bl	8004908 <_free_r>
 8004712:	2000      	movs	r0, #0
 8004714:	6360      	str	r0, [r4, #52]	; 0x34
 8004716:	e7c1      	b.n	800469c <__sflush_r+0x1c>
 8004718:	6a21      	ldr	r1, [r4, #32]
 800471a:	2301      	movs	r3, #1
 800471c:	4628      	mov	r0, r5
 800471e:	47b0      	blx	r6
 8004720:	1c41      	adds	r1, r0, #1
 8004722:	d1c7      	bne.n	80046b4 <__sflush_r+0x34>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0c4      	beq.n	80046b4 <__sflush_r+0x34>
 800472a:	2b1d      	cmp	r3, #29
 800472c:	d001      	beq.n	8004732 <__sflush_r+0xb2>
 800472e:	2b16      	cmp	r3, #22
 8004730:	d101      	bne.n	8004736 <__sflush_r+0xb6>
 8004732:	602f      	str	r7, [r5, #0]
 8004734:	e7b1      	b.n	800469a <__sflush_r+0x1a>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473c:	81a3      	strh	r3, [r4, #12]
 800473e:	e7ad      	b.n	800469c <__sflush_r+0x1c>
 8004740:	690f      	ldr	r7, [r1, #16]
 8004742:	2f00      	cmp	r7, #0
 8004744:	d0a9      	beq.n	800469a <__sflush_r+0x1a>
 8004746:	0793      	lsls	r3, r2, #30
 8004748:	680e      	ldr	r6, [r1, #0]
 800474a:	bf08      	it	eq
 800474c:	694b      	ldreq	r3, [r1, #20]
 800474e:	600f      	str	r7, [r1, #0]
 8004750:	bf18      	it	ne
 8004752:	2300      	movne	r3, #0
 8004754:	eba6 0807 	sub.w	r8, r6, r7
 8004758:	608b      	str	r3, [r1, #8]
 800475a:	f1b8 0f00 	cmp.w	r8, #0
 800475e:	dd9c      	ble.n	800469a <__sflush_r+0x1a>
 8004760:	6a21      	ldr	r1, [r4, #32]
 8004762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004764:	4643      	mov	r3, r8
 8004766:	463a      	mov	r2, r7
 8004768:	4628      	mov	r0, r5
 800476a:	47b0      	blx	r6
 800476c:	2800      	cmp	r0, #0
 800476e:	dc06      	bgt.n	800477e <__sflush_r+0xfe>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	e78e      	b.n	800469c <__sflush_r+0x1c>
 800477e:	4407      	add	r7, r0
 8004780:	eba8 0800 	sub.w	r8, r8, r0
 8004784:	e7e9      	b.n	800475a <__sflush_r+0xda>
 8004786:	bf00      	nop
 8004788:	20400001 	.word	0x20400001

0800478c <_fflush_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	690b      	ldr	r3, [r1, #16]
 8004790:	4605      	mov	r5, r0
 8004792:	460c      	mov	r4, r1
 8004794:	b913      	cbnz	r3, 800479c <_fflush_r+0x10>
 8004796:	2500      	movs	r5, #0
 8004798:	4628      	mov	r0, r5
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	b118      	cbz	r0, 80047a6 <_fflush_r+0x1a>
 800479e:	6983      	ldr	r3, [r0, #24]
 80047a0:	b90b      	cbnz	r3, 80047a6 <_fflush_r+0x1a>
 80047a2:	f7ff fa4f 	bl	8003c44 <__sinit>
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <_fflush_r+0x6c>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	d11b      	bne.n	80047e4 <_fflush_r+0x58>
 80047ac:	686c      	ldr	r4, [r5, #4]
 80047ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0ef      	beq.n	8004796 <_fflush_r+0xa>
 80047b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047b8:	07d0      	lsls	r0, r2, #31
 80047ba:	d404      	bmi.n	80047c6 <_fflush_r+0x3a>
 80047bc:	0599      	lsls	r1, r3, #22
 80047be:	d402      	bmi.n	80047c6 <_fflush_r+0x3a>
 80047c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047c2:	f7ff fadd 	bl	8003d80 <__retarget_lock_acquire_recursive>
 80047c6:	4628      	mov	r0, r5
 80047c8:	4621      	mov	r1, r4
 80047ca:	f7ff ff59 	bl	8004680 <__sflush_r>
 80047ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d0:	07da      	lsls	r2, r3, #31
 80047d2:	4605      	mov	r5, r0
 80047d4:	d4e0      	bmi.n	8004798 <_fflush_r+0xc>
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	059b      	lsls	r3, r3, #22
 80047da:	d4dd      	bmi.n	8004798 <_fflush_r+0xc>
 80047dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047de:	f7ff fad0 	bl	8003d82 <__retarget_lock_release_recursive>
 80047e2:	e7d9      	b.n	8004798 <_fflush_r+0xc>
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <_fflush_r+0x70>)
 80047e6:	429c      	cmp	r4, r3
 80047e8:	d101      	bne.n	80047ee <_fflush_r+0x62>
 80047ea:	68ac      	ldr	r4, [r5, #8]
 80047ec:	e7df      	b.n	80047ae <_fflush_r+0x22>
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <_fflush_r+0x74>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	bf08      	it	eq
 80047f4:	68ec      	ldreq	r4, [r5, #12]
 80047f6:	e7da      	b.n	80047ae <_fflush_r+0x22>
 80047f8:	08004b00 	.word	0x08004b00
 80047fc:	08004b20 	.word	0x08004b20
 8004800:	08004ae0 	.word	0x08004ae0

08004804 <_lseek_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4d07      	ldr	r5, [pc, #28]	; (8004824 <_lseek_r+0x20>)
 8004808:	4604      	mov	r4, r0
 800480a:	4608      	mov	r0, r1
 800480c:	4611      	mov	r1, r2
 800480e:	2200      	movs	r2, #0
 8004810:	602a      	str	r2, [r5, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	f7fc f882 	bl	800091c <_lseek>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_lseek_r+0x1e>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_lseek_r+0x1e>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	2000019c 	.word	0x2000019c

08004828 <__swhatbuf_r>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	460e      	mov	r6, r1
 800482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004830:	2900      	cmp	r1, #0
 8004832:	b096      	sub	sp, #88	; 0x58
 8004834:	4614      	mov	r4, r2
 8004836:	461d      	mov	r5, r3
 8004838:	da07      	bge.n	800484a <__swhatbuf_r+0x22>
 800483a:	2300      	movs	r3, #0
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	89b3      	ldrh	r3, [r6, #12]
 8004840:	061a      	lsls	r2, r3, #24
 8004842:	d410      	bmi.n	8004866 <__swhatbuf_r+0x3e>
 8004844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004848:	e00e      	b.n	8004868 <__swhatbuf_r+0x40>
 800484a:	466a      	mov	r2, sp
 800484c:	f000 f8be 	bl	80049cc <_fstat_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	dbf2      	blt.n	800483a <__swhatbuf_r+0x12>
 8004854:	9a01      	ldr	r2, [sp, #4]
 8004856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800485a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800485e:	425a      	negs	r2, r3
 8004860:	415a      	adcs	r2, r3
 8004862:	602a      	str	r2, [r5, #0]
 8004864:	e7ee      	b.n	8004844 <__swhatbuf_r+0x1c>
 8004866:	2340      	movs	r3, #64	; 0x40
 8004868:	2000      	movs	r0, #0
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	b016      	add	sp, #88	; 0x58
 800486e:	bd70      	pop	{r4, r5, r6, pc}

08004870 <__smakebuf_r>:
 8004870:	898b      	ldrh	r3, [r1, #12]
 8004872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004874:	079d      	lsls	r5, r3, #30
 8004876:	4606      	mov	r6, r0
 8004878:	460c      	mov	r4, r1
 800487a:	d507      	bpl.n	800488c <__smakebuf_r+0x1c>
 800487c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	2301      	movs	r3, #1
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	b002      	add	sp, #8
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	ab01      	add	r3, sp, #4
 800488e:	466a      	mov	r2, sp
 8004890:	f7ff ffca 	bl	8004828 <__swhatbuf_r>
 8004894:	9900      	ldr	r1, [sp, #0]
 8004896:	4605      	mov	r5, r0
 8004898:	4630      	mov	r0, r6
 800489a:	f7ff fa73 	bl	8003d84 <_malloc_r>
 800489e:	b948      	cbnz	r0, 80048b4 <__smakebuf_r+0x44>
 80048a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a4:	059a      	lsls	r2, r3, #22
 80048a6:	d4ef      	bmi.n	8004888 <__smakebuf_r+0x18>
 80048a8:	f023 0303 	bic.w	r3, r3, #3
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	e7e3      	b.n	800487c <__smakebuf_r+0xc>
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <__smakebuf_r+0x7c>)
 80048b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	6020      	str	r0, [r4, #0]
 80048bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	9b00      	ldr	r3, [sp, #0]
 80048c4:	6163      	str	r3, [r4, #20]
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	6120      	str	r0, [r4, #16]
 80048ca:	b15b      	cbz	r3, 80048e4 <__smakebuf_r+0x74>
 80048cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 f88d 	bl	80049f0 <_isatty_r>
 80048d6:	b128      	cbz	r0, 80048e4 <__smakebuf_r+0x74>
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	89a0      	ldrh	r0, [r4, #12]
 80048e6:	4305      	orrs	r5, r0
 80048e8:	81a5      	strh	r5, [r4, #12]
 80048ea:	e7cd      	b.n	8004888 <__smakebuf_r+0x18>
 80048ec:	08003bdd 	.word	0x08003bdd

080048f0 <__malloc_lock>:
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <__malloc_lock+0x8>)
 80048f2:	f7ff ba45 	b.w	8003d80 <__retarget_lock_acquire_recursive>
 80048f6:	bf00      	nop
 80048f8:	20000194 	.word	0x20000194

080048fc <__malloc_unlock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_unlock+0x8>)
 80048fe:	f7ff ba40 	b.w	8003d82 <__retarget_lock_release_recursive>
 8004902:	bf00      	nop
 8004904:	20000194 	.word	0x20000194

08004908 <_free_r>:
 8004908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800490a:	2900      	cmp	r1, #0
 800490c:	d048      	beq.n	80049a0 <_free_r+0x98>
 800490e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004912:	9001      	str	r0, [sp, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f1a1 0404 	sub.w	r4, r1, #4
 800491a:	bfb8      	it	lt
 800491c:	18e4      	addlt	r4, r4, r3
 800491e:	f7ff ffe7 	bl	80048f0 <__malloc_lock>
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <_free_r+0x9c>)
 8004924:	9801      	ldr	r0, [sp, #4]
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	4615      	mov	r5, r2
 800492a:	b933      	cbnz	r3, 800493a <_free_r+0x32>
 800492c:	6063      	str	r3, [r4, #4]
 800492e:	6014      	str	r4, [r2, #0]
 8004930:	b003      	add	sp, #12
 8004932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004936:	f7ff bfe1 	b.w	80048fc <__malloc_unlock>
 800493a:	42a3      	cmp	r3, r4
 800493c:	d90b      	bls.n	8004956 <_free_r+0x4e>
 800493e:	6821      	ldr	r1, [r4, #0]
 8004940:	1862      	adds	r2, r4, r1
 8004942:	4293      	cmp	r3, r2
 8004944:	bf04      	itt	eq
 8004946:	681a      	ldreq	r2, [r3, #0]
 8004948:	685b      	ldreq	r3, [r3, #4]
 800494a:	6063      	str	r3, [r4, #4]
 800494c:	bf04      	itt	eq
 800494e:	1852      	addeq	r2, r2, r1
 8004950:	6022      	streq	r2, [r4, #0]
 8004952:	602c      	str	r4, [r5, #0]
 8004954:	e7ec      	b.n	8004930 <_free_r+0x28>
 8004956:	461a      	mov	r2, r3
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b10b      	cbz	r3, 8004960 <_free_r+0x58>
 800495c:	42a3      	cmp	r3, r4
 800495e:	d9fa      	bls.n	8004956 <_free_r+0x4e>
 8004960:	6811      	ldr	r1, [r2, #0]
 8004962:	1855      	adds	r5, r2, r1
 8004964:	42a5      	cmp	r5, r4
 8004966:	d10b      	bne.n	8004980 <_free_r+0x78>
 8004968:	6824      	ldr	r4, [r4, #0]
 800496a:	4421      	add	r1, r4
 800496c:	1854      	adds	r4, r2, r1
 800496e:	42a3      	cmp	r3, r4
 8004970:	6011      	str	r1, [r2, #0]
 8004972:	d1dd      	bne.n	8004930 <_free_r+0x28>
 8004974:	681c      	ldr	r4, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	6053      	str	r3, [r2, #4]
 800497a:	4421      	add	r1, r4
 800497c:	6011      	str	r1, [r2, #0]
 800497e:	e7d7      	b.n	8004930 <_free_r+0x28>
 8004980:	d902      	bls.n	8004988 <_free_r+0x80>
 8004982:	230c      	movs	r3, #12
 8004984:	6003      	str	r3, [r0, #0]
 8004986:	e7d3      	b.n	8004930 <_free_r+0x28>
 8004988:	6825      	ldr	r5, [r4, #0]
 800498a:	1961      	adds	r1, r4, r5
 800498c:	428b      	cmp	r3, r1
 800498e:	bf04      	itt	eq
 8004990:	6819      	ldreq	r1, [r3, #0]
 8004992:	685b      	ldreq	r3, [r3, #4]
 8004994:	6063      	str	r3, [r4, #4]
 8004996:	bf04      	itt	eq
 8004998:	1949      	addeq	r1, r1, r5
 800499a:	6021      	streq	r1, [r4, #0]
 800499c:	6054      	str	r4, [r2, #4]
 800499e:	e7c7      	b.n	8004930 <_free_r+0x28>
 80049a0:	b003      	add	sp, #12
 80049a2:	bd30      	pop	{r4, r5, pc}
 80049a4:	2000009c 	.word	0x2000009c

080049a8 <_read_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4d07      	ldr	r5, [pc, #28]	; (80049c8 <_read_r+0x20>)
 80049ac:	4604      	mov	r4, r0
 80049ae:	4608      	mov	r0, r1
 80049b0:	4611      	mov	r1, r2
 80049b2:	2200      	movs	r2, #0
 80049b4:	602a      	str	r2, [r5, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f7fb ff6c 	bl	8000894 <_read>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_read_r+0x1e>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_read_r+0x1e>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	2000019c 	.word	0x2000019c

080049cc <_fstat_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d07      	ldr	r5, [pc, #28]	; (80049ec <_fstat_r+0x20>)
 80049d0:	2300      	movs	r3, #0
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	f7fb ff84 	bl	80008e6 <_fstat>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d102      	bne.n	80049e8 <_fstat_r+0x1c>
 80049e2:	682b      	ldr	r3, [r5, #0]
 80049e4:	b103      	cbz	r3, 80049e8 <_fstat_r+0x1c>
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	2000019c 	.word	0x2000019c

080049f0 <_isatty_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <_isatty_r+0x1c>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f7fb ff83 	bl	8000906 <_isatty>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_isatty_r+0x1a>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_isatty_r+0x1a>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	2000019c 	.word	0x2000019c

08004a10 <_init>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	bf00      	nop
 8004a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a16:	bc08      	pop	{r3}
 8004a18:	469e      	mov	lr, r3
 8004a1a:	4770      	bx	lr

08004a1c <_fini>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

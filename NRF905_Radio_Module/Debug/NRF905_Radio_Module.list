
NRF905_Radio_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005518  08005518  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005518  08005518  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  08005594  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005594  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  00030f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000346c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfbb  00000000  00000000  00035540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001255b  00000000  00000000  000524fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a848a  00000000  00000000  00064a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010cee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047fc  00000000  00000000  0010cf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005314 	.word	0x08005314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005314 	.word	0x08005314

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000286:	4b36      	ldr	r3, [pc, #216]	; (8000360 <MX_GPIO_Init+0xf0>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a35      	ldr	r2, [pc, #212]	; (8000360 <MX_GPIO_Init+0xf0>)
 800028c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b33      	ldr	r3, [pc, #204]	; (8000360 <MX_GPIO_Init+0xf0>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029e:	4b30      	ldr	r3, [pc, #192]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a2f      	ldr	r2, [pc, #188]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a29      	ldr	r2, [pc, #164]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b27      	ldr	r3, [pc, #156]	; (8000360 <MX_GPIO_Init+0xf0>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_Pin|Tx_Pin|CE_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	21c2      	movs	r1, #194	; 0xc2
 80002d2:	4824      	ldr	r0, [pc, #144]	; (8000364 <MX_GPIO_Init+0xf4>)
 80002d4:	f001 f82a 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f001 f823 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Address_match_Pin|Data_ready_Pin;
 80002e6:	2303      	movs	r3, #3
 80002e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	4619      	mov	r1, r3
 80002f8:	481b      	ldr	r0, [pc, #108]	; (8000368 <MX_GPIO_Init+0xf8>)
 80002fa:	f000 fe8d 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_Pin|Tx_Pin|CE_Pin;
 80002fe:	23c2      	movs	r3, #194	; 0xc2
 8000300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	4619      	mov	r1, r3
 8000314:	4813      	ldr	r0, [pc, #76]	; (8000364 <MX_GPIO_Init+0xf4>)
 8000316:	f000 fe7f 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Carrier_detect_Pin;
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Carrier_detect_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 030c 	add.w	r3, r7, #12
 800032c:	4619      	mov	r1, r3
 800032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000332:	f000 fe71 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800033a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4619      	mov	r1, r3
 800034e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000352:	f000 fe61 	bl	8001018 <HAL_GPIO_Init>

}
 8000356:	bf00      	nop
 8000358:	3720      	adds	r7, #32
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000
 8000364:	48000400 	.word	0x48000400
 8000368:	48001400 	.word	0x48001400

0800036c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1 , ptr , len , 50);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	b29a      	uxth	r2, r3
 800037c:	2332      	movs	r3, #50	; 0x32
 800037e:	68b9      	ldr	r1, [r7, #8]
 8000380:	4803      	ldr	r0, [pc, #12]	; (8000390 <_write+0x24>)
 8000382:	f003 fc97 	bl	8003cb4 <HAL_UART_Transmit>
  return len;
 8000386:	687b      	ldr	r3, [r7, #4]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000014c 	.word	0x2000014c

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000398:	f000 fcce 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f854 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f7ff ff66 	bl	8000270 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003a4:	f000 fa4c 	bl	8000840 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003a8:	f000 fc28 	bl	8000bfc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80003ac:	f000 fbb2 	bl	8000b14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi1);
 80003b0:	481d      	ldr	r0, [pc, #116]	; (8000428 <main+0x94>)
 80003b2:	f002 fa37 	bl	8002824 <HAL_SPI_Init>
  HAL_TIM_Base_Start(&htim1);
 80003b6:	481d      	ldr	r0, [pc, #116]	; (800042c <main+0x98>)
 80003b8:	f003 f994 	bl	80036e4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("INIT \r\n" );
 80003bc:	481c      	ldr	r0, [pc, #112]	; (8000430 <main+0x9c>)
 80003be:	f004 f863 	bl	8004488 <puts>

  set_RX_Payload_width(0x01);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 f8ca 	bl	800055c <set_RX_Payload_width>
  set_TX_Payload_width(0x01);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 f8f5 	bl	80005b8 <set_TX_Payload_width>
  read_reg(R_CONFIG);
 80003ce:	2010      	movs	r0, #16
 80003d0:	f000 f98a 	bl	80006e8 <read_reg>
  set_Channel();
 80003d4:	f000 f95a 	bl	800068c <set_Channel>
  set_Standby_mode();
 80003d8:	f000 f91c 	bl	8000614 <set_Standby_mode>
  while (1)
  {

		if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin) == GPIO_PIN_SET )
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 ff8a 	bl	80012fc <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d102      	bne.n	80003f4 <main+0x60>
		printf("Carrier Detect \r\n");
 80003ee:	4811      	ldr	r0, [pc, #68]	; (8000434 <main+0xa0>)
 80003f0:	f004 f84a 	bl	8004488 <puts>
		if( HAL_GPIO_ReadPin(Address_match_GPIO_Port, Address_match_Pin) == GPIO_PIN_SET )
 80003f4:	2101      	movs	r1, #1
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <main+0xa4>)
 80003f8:	f000 ff80 	bl	80012fc <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d102      	bne.n	8000408 <main+0x74>
		printf("Address Match \r\n");
 8000402:	480e      	ldr	r0, [pc, #56]	; (800043c <main+0xa8>)
 8000404:	f004 f840 	bl	8004488 <puts>
		if( HAL_GPIO_ReadPin(Data_ready_GPIO_Port, Data_ready_Pin) == GPIO_PIN_SET )
 8000408:	2102      	movs	r1, #2
 800040a:	480b      	ldr	r0, [pc, #44]	; (8000438 <main+0xa4>)
 800040c:	f000 ff76 	bl	80012fc <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d102      	bne.n	800041c <main+0x88>
		printf("Data Ready \r\n");
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <main+0xac>)
 8000418:	f004 f836 	bl	8004488 <puts>


		TX_radio(tx_data);
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <main+0xb0>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f9a1 	bl	8000768 <TX_radio>
		if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin) == GPIO_PIN_SET )
 8000426:	e7d9      	b.n	80003dc <main+0x48>
 8000428:	2000009c 	.word	0x2000009c
 800042c:	20000100 	.word	0x20000100
 8000430:	0800532c 	.word	0x0800532c
 8000434:	08005334 	.word	0x08005334
 8000438:	48001400 	.word	0x48001400
 800043c:	08005348 	.word	0x08005348
 8000440:	08005358 	.word	0x08005358
 8000444:	20000000 	.word	0x20000000

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b096      	sub	sp, #88	; 0x58
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000452:	2228      	movs	r2, #40	; 0x28
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f003 ff88 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	f107 031c 	add.w	r3, r7, #28
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
 800047a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800047c:	2302      	movs	r3, #2
 800047e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	2301      	movs	r3, #1
 8000482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000484:	2310      	movs	r3, #16
 8000486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800048c:	2300      	movs	r3, #0
 800048e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000490:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000494:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800049a:	4618      	mov	r0, r3
 800049c:	f000 ff5e 	bl	800135c <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80004a6:	f000 f829 	bl	80004fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2302      	movs	r3, #2
 80004b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 fe51 	bl	800216c <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004d0:	f000 f814 	bl	80004fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80004d4:	f241 0301 	movw	r3, #4097	; 0x1001
 80004d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4618      	mov	r0, r3
 80004e6:	f002 f877 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004f0:	f000 f804 	bl	80004fc <Error_Handler>
  }
}
 80004f4:	bf00      	nop
 80004f6:	3758      	adds	r7, #88	; 0x58
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <delay_us>:

#include "nrf905.h"



void delay_us (uint16_t us){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <delay_us+0x30>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800051a:	bf00      	nop
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <delay_us+0x30>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3f9      	bcc.n	800051c <delay_us+0x14>
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000100 	.word	0x20000100

0800053c <is_Data_Ready>:
	printf("Received ----> %d \r\n" , rx_data );

	PWR_OFF();
}

uint8_t is_Data_Ready(){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(Data_ready_GPIO_Port, Data_ready_Pin)== GPIO_PIN_SET )
 8000540:	2102      	movs	r1, #2
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <is_Data_Ready+0x1c>)
 8000544:	f000 feda 	bl	80012fc <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d101      	bne.n	8000552 <is_Data_Ready+0x16>
		return 1;
 800054e:	2301      	movs	r3, #1
 8000550:	e000      	b.n	8000554 <is_Data_Ready+0x18>
	else
		return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48001400 	.word	0x48001400

0800055c <set_RX_Payload_width>:
		return 1;
	else
		return 0;
}

void set_RX_Payload_width(uint8_t width){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	PWR_OFF();
 8000566:	f000 f885 	bl	8000674 <PWR_OFF>
	uint8_t add = 0x03 ;
 800056a:	2303      	movs	r3, #3
 800056c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fed8 	bl	800132c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &add , 1 , 1000);
 800057c:	f107 010f 	add.w	r1, r7, #15
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	2201      	movs	r2, #1
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <set_RX_Payload_width+0x58>)
 8000588:	f002 f9ef 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &width, 1 , 1000);
 800058c:	1df9      	adds	r1, r7, #7
 800058e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000592:	2201      	movs	r2, #1
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <set_RX_Payload_width+0x58>)
 8000596:	f002 f9e8 	bl	800296a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f000 fec2 	bl	800132c <HAL_GPIO_WritePin>

	PWR_ON();
 80005a8:	f000 f858 	bl	800065c <PWR_ON>
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000009c 	.word	0x2000009c

080005b8 <set_TX_Payload_width>:

void set_TX_Payload_width(uint8_t width){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	PWR_OFF();
 80005c2:	f000 f857 	bl	8000674 <PWR_OFF>
	uint8_t add = 0x04 ;
 80005c6:	2304      	movs	r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f000 feaa 	bl	800132c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &add , 1 , 1000);
 80005d8:	f107 010f 	add.w	r1, r7, #15
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	2201      	movs	r2, #1
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <set_TX_Payload_width+0x58>)
 80005e4:	f002 f9c1 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &width, 1 , 1000);
 80005e8:	1df9      	adds	r1, r7, #7
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	2201      	movs	r2, #1
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <set_TX_Payload_width+0x58>)
 80005f2:	f002 f9ba 	bl	800296a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f000 fe94 	bl	800132c <HAL_GPIO_WritePin>

	PWR_ON();
 8000604:	f000 f82a 	bl	800065c <PWR_ON>
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000009c 	.word	0x2000009c

08000614 <set_Standby_mode>:

void set_Standby_mode(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <set_Standby_mode+0x14>)
 800061e:	f000 fe85 	bl	800132c <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <set_TxRx_mode>:

void set_TxRx_mode(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <set_TxRx_mode+0x14>)
 8000636:	f000 fe79 	bl	800132c <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	48000400 	.word	0x48000400

08000644 <set_Tx_mode>:

void set_Tx_mode(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <set_Tx_mode+0x14>)
 800064e:	f000 fe6d 	bl	800132c <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	48000400 	.word	0x48000400

0800065c <PWR_ON>:

void set_Rx_mode(){
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_RESET);
}

void PWR_ON(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <PWR_ON+0x14>)
 8000666:	f000 fe61 	bl	800132c <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	48000400 	.word	0x48000400

08000674 <PWR_OFF>:

void PWR_OFF(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2102      	movs	r1, #2
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <PWR_OFF+0x14>)
 800067e:	f000 fe55 	bl	800132c <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000400 	.word	0x48000400

0800068c <set_Channel>:
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);

	PWR_ON();
}

void set_Channel(){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	PWR_OFF();
 8000692:	f7ff ffef 	bl	8000674 <PWR_OFF>

	uint8_t channel_add=0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
	uint8_t setCHANNEL = ( CHANNEL_CONFIG | (PA_PWR_10dbm<<2) | HFREQ_PLL );
 800069a:	238c      	movs	r3, #140	; 0x8c
 800069c:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f000 fe40 	bl	800132c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &setCHANNEL , 1 , 1000);
 80006ac:	1db9      	adds	r1, r7, #6
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	2201      	movs	r2, #1
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <set_Channel+0x58>)
 80006b6:	f002 f958 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, CH_NO, 1 , 1000);
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	2201      	movs	r2, #1
 80006c0:	2176      	movs	r1, #118	; 0x76
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <set_Channel+0x58>)
 80006c4:	f002 f951 	bl	800296a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f000 fe2b 	bl	800132c <HAL_GPIO_WritePin>

	PWR_ON();
 80006d6:	f7ff ffc1 	bl	800065c <PWR_ON>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000009c 	.word	0x2000009c

080006e8 <read_reg>:

void read_reg(uint8_t reg){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	uint8_t read=reg;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	73fb      	strb	r3, [r7, #15]
	//read = 0x24;
	uint8_t data=0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	73bb      	strb	r3, [r7, #14]

	PWR_OFF();
 80006fa:	f7ff ffbb 	bl	8000674 <PWR_OFF>
	//set_Rx_mode();
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f000 fe10 	bl	800132c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &read, 1 , 1000);
 800070c:	f107 010f 	add.w	r1, r7, #15
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	2201      	movs	r2, #1
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <read_reg+0x74>)
 8000718:	f002 f927 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Receive( &hspi1, &data, 1 , 1000);
 800071c:	f107 010e 	add.w	r1, r7, #14
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	2201      	movs	r2, #1
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <read_reg+0x74>)
 8000728:	f002 fa8d 	bl	8002c46 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 fdf9 	bl	800132c <HAL_GPIO_WritePin>

	printf("Read -> %d \r\n" , read );
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4619      	mov	r1, r3
 800073e:	4808      	ldr	r0, [pc, #32]	; (8000760 <read_reg+0x78>)
 8000740:	f003 fe1c 	bl	800437c <iprintf>
	printf("Register -> %d \r\n" , data );
 8000744:	7bbb      	ldrb	r3, [r7, #14]
 8000746:	4619      	mov	r1, r3
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <read_reg+0x7c>)
 800074a:	f003 fe17 	bl	800437c <iprintf>

	PWR_ON();
 800074e:	f7ff ff85 	bl	800065c <PWR_ON>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000009c 	.word	0x2000009c
 8000760:	08005380 	.word	0x08005380
 8000764:	08005390 	.word	0x08005390

08000768 <TX_radio>:

	PWR_ON();

}

void TX_radio(uint8_t * tx_data){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	PWR_ON();
 8000770:	f7ff ff74 	bl	800065c <PWR_ON>
	set_Standby_mode();
 8000774:	f7ff ff4e 	bl	8000614 <set_Standby_mode>
	set_Tx_mode();
 8000778:	f7ff ff64 	bl	8000644 <set_Tx_mode>

	uint8_t add[4] = { 0xE7,0xE7,0xE7,0xE7};
 800077c:	f04f 33e7 	mov.w	r3, #3890735079	; 0xe7e7e7e7
 8000780:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 fdce 	bl	800132c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, W_TX_ADDRESS, 1 , 1000);
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	2201      	movs	r2, #1
 8000796:	2122      	movs	r1, #34	; 0x22
 8000798:	4828      	ldr	r0, [pc, #160]	; (800083c <TX_radio+0xd4>)
 800079a:	f002 f8e6 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &add, 4 , 1000);
 800079e:	f107 010c 	add.w	r1, r7, #12
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	2204      	movs	r2, #4
 80007a8:	4824      	ldr	r0, [pc, #144]	; (800083c <TX_radio+0xd4>)
 80007aa:	f002 f8de 	bl	800296a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f000 fdb8 	bl	800132c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fdb1 	bl	800132c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, W_TX_PAYLOAD, 1 , 1000);
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	2201      	movs	r2, #1
 80007d0:	2120      	movs	r1, #32
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <TX_radio+0xd4>)
 80007d4:	f002 f8c9 	bl	800296a <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &tx_data, 1 , 1000);
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	4816      	ldr	r0, [pc, #88]	; (800083c <TX_radio+0xd4>)
 80007e2:	f002 f8c2 	bl	800296a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fd9c 	bl	800132c <HAL_GPIO_WritePin>

	read_reg(R_TX_ADDRESS);
 80007f4:	2023      	movs	r0, #35	; 0x23
 80007f6:	f7ff ff77 	bl	80006e8 <read_reg>
	read_reg(R_TX_PAYLOAD);
 80007fa:	2021      	movs	r0, #33	; 0x21
 80007fc:	f7ff ff74 	bl	80006e8 <read_reg>
	HAL_Delay(2);
 8000800:	2002      	movs	r0, #2
 8000802:	f000 faff 	bl	8000e04 <HAL_Delay>
	//Clock_disable();
	set_Tx_mode();
 8000806:	f7ff ff1d 	bl	8000644 <set_Tx_mode>
	set_TxRx_mode();
 800080a:	f7ff ff0f 	bl	800062c <set_TxRx_mode>
	delay_us(10);
 800080e:	200a      	movs	r0, #10
 8000810:	f7ff fe7a 	bl	8000508 <delay_us>
	set_Standby_mode();
 8000814:	f7ff fefe 	bl	8000614 <set_Standby_mode>
	delay_us(650);
 8000818:	f240 208a 	movw	r0, #650	; 0x28a
 800081c:	f7ff fe74 	bl	8000508 <delay_us>

	while( !is_Data_Ready() );
 8000820:	bf00      	nop
 8000822:	f7ff fe8b 	bl	800053c <is_Data_Ready>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0fa      	beq.n	8000822 <TX_radio+0xba>

	//Clock_enable();
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fae9 	bl	8000e04 <HAL_Delay>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000009c 	.word	0x2000009c

08000840 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_SPI1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_SPI1_Init+0x74>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x74>)
 800085a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x74>)
 800086e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000872:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x74>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x74>)
 800089a:	2208      	movs	r2, #8
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_SPI1_Init+0x74>)
 80008a0:	f001 ffc0 	bl	8002824 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f7ff fe27 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000009c 	.word	0x2000009c
 80008b8:	40013000 	.word	0x40013000

080008bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_SPI_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d127      	bne.n	800092e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_SPI_MspInit+0x80>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800090e:	2338      	movs	r3, #56	; 0x38
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091e:	2305      	movs	r3, #5
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_SPI_MspInit+0x84>)
 800092a:	f000 fb75 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40013000 	.word	0x40013000
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x44>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_MspInit+0x44>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x44>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x44>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x44>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f9f4 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e00a      	b.n	8000a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009f2:	f3af 8000 	nop.w
 80009f6:	4601      	mov	r1, r0
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf0      	blt.n	80009f2 <_read+0x12>
	}

return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	605a      	str	r2, [r3, #4]
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f003 fc30 	bl	8004318 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20003000 	.word	0x20003000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	200001e8 	.word	0x200001e8

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b34:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <MX_TIM1_Init+0xa4>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b5e:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b60:	f002 fd68 	bl	8003634 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b6a:	f7ff fcc7 	bl	80004fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b7c:	f002 fe06 	bl	800378c <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b86:	f7ff fcb9 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_TIM1_Init+0xa0>)
 8000b9c:	f002 ffce 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ba6:	f7ff fca9 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	40012c00 	.word	0x40012c00

08000bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_TIM_Base_MspInit+0x38>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10b      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	40021000 	.word	0x40021000

08000bfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_USART1_UART_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c08:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART1_UART_Init+0x58>)
 8000c40:	f002 ffea 	bl	8003c18 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f7ff fc57 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000014c 	.word	0x2000014c
 8000c58:	40013800 	.word	0x40013800

08000c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0x80>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d129      	bne.n	8000cd2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f000 f9a3 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013800 	.word	0x40013800
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0e:	f7ff feef 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f003 fb07 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fb3d 	bl	8000394 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d1c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d28:	08005520 	.word	0x08005520
  ldr r2, =_sbss
 8000d2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d30:	200001e4 	.word	0x200001e4

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x28>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f931 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fdf6 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f93b 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f911 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	200001d0 	.word	0x200001d0

08000dec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001d0 	.word	0x200001d0

08000e04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff5c 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffb0 	bl	8000f6c <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e14e      	b.n	80012c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8140 	beq.w	80012c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00b      	beq.n	8001060 <HAL_GPIO_Init+0x48>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001054:	2b11      	cmp	r3, #17
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0xea>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 809a 	beq.w	80012c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1e0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <HAL_GPIO_Init+0x2d4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_GPIO_Init+0x2d8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1d8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a44      	ldr	r2, [pc, #272]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011ec:	2305      	movs	r3, #5
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f aea9 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001348:	e002      	b.n	8001350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001362:	af00      	add	r7, sp, #0
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	f000 bef4 	b.w	800215e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 816a 	beq.w	800165a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001386:	4bb3      	ldr	r3, [pc, #716]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00c      	beq.n	80013ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001392:	4bb0      	ldr	r3, [pc, #704]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b08      	cmp	r3, #8
 800139c:	d159      	bne.n	8001452 <HAL_RCC_OscConfig+0xf6>
 800139e:	4bad      	ldr	r3, [pc, #692]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d152      	bne.n	8001452 <HAL_RCC_OscConfig+0xf6>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x82>
 80013d8:	4b9e      	ldr	r3, [pc, #632]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0xae>
 80013de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001406:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001412:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800141e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 810c 	beq.w	8001658 <HAL_RCC_OscConfig+0x2fc>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8106 	bne.w	8001658 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	f000 be86 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x110>
 800145e:	4b7d      	ldr	r3, [pc, #500]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7c      	ldr	r2, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e030      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x134>
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a76      	ldr	r2, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x15a>
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6c      	ldr	r2, [pc, #432]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a69      	ldr	r2, [pc, #420]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a66      	ldr	r2, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a63      	ldr	r2, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f023 020f 	bic.w	r2, r3, #15
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	495d      	ldr	r1, [pc, #372]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d059      	beq.n	80015a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc7e 	bl	8000dec <HAL_GetTick>
 80014f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f6:	f7ff fc79 	bl	8000dec <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d902      	bls.n	800150c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	f000 be29 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 800150c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001510:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001520:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x1e2>
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x20e>
 800153e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001542:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001556:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800155a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800156e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001572:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001576:	fa92 f2a2 	rbit	r2, r2
 800157a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800157e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001582:	fab2 f282 	clz	r2, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f002 021f 	and.w	r2, r2, #31
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ab      	beq.n	80014f6 <HAL_RCC_OscConfig+0x19a>
 800159e:	e05c      	b.n	800165a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc24 	bl	8000dec <HAL_GetTick>
 80015a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015aa:	f7ff fc1f 	bl	8000dec <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d902      	bls.n	80015c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f000 bdcf 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80015c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0x296>
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x2c2>
 80015f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800160e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001626:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001632:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001636:	fab2 f282 	clz	r2, r2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ab      	bne.n	80015aa <HAL_RCC_OscConfig+0x24e>
 8001652:	e002      	b.n	800165a <HAL_RCC_OscConfig+0x2fe>
 8001654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 816f 	beq.w	8001948 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166a:	4bd0      	ldr	r3, [pc, #832]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001676:	4bcd      	ldr	r3, [pc, #820]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d16c      	bne.n	800175c <HAL_RCC_OscConfig+0x400>
 8001682:	4bca      	ldr	r3, [pc, #808]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d166      	bne.n	800175c <HAL_RCC_OscConfig+0x400>
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x362>
 80016b8:	4bbc      	ldr	r3, [pc, #752]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x38a>
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016e2:	4bb2      	ldr	r3, [pc, #712]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2202      	movs	r2, #2
 80016e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x3cc>
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f000 bd1b 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	21f8      	movs	r1, #248	; 0xf8
 8001738:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001740:	fa91 f1a1 	rbit	r1, r1
 8001744:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001748:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800174c:	fab1 f181 	clz	r1, r1
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	408b      	lsls	r3, r1
 8001754:	4995      	ldr	r1, [pc, #596]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e0f5      	b.n	8001948 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8085 	beq.w	8001872 <HAL_RCC_OscConfig+0x516>
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800177a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	461a      	mov	r2, r3
 8001790:	2301      	movs	r3, #1
 8001792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb2a 	bl	8000dec <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fb25 	bl	8000dec <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d902      	bls.n	80017b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f000 bcd5 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x488>
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e013      	b.n	800180c <HAL_RCC_OscConfig+0x4b0>
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2202      	movs	r2, #2
 800180e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001812:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001816:	fa92 f2a2 	rbit	r2, r2
 800181a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800181e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0af      	beq.n	800179e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	21f8      	movs	r1, #248	; 0xf8
 800184e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001856:	fa91 f1a1 	rbit	r1, r1
 800185a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800185e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001862:	fab1 f181 	clz	r1, r1
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	4950      	ldr	r1, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e06a      	b.n	8001948 <HAL_RCC_OscConfig+0x5ec>
 8001872:	2301      	movs	r3, #1
 8001874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001884:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001892:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	461a      	mov	r2, r3
 800189a:	2300      	movs	r3, #0
 800189c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff faa5 	bl	8000dec <HAL_GetTick>
 80018a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff faa0 	bl	8000dec <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d902      	bls.n	80018be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f000 bc50 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x592>
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e013      	b.n	8001916 <HAL_RCC_OscConfig+0x5ba>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001906:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2202      	movs	r2, #2
 8001918:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800191c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001920:	fa92 f2a2 	rbit	r2, r2
 8001924:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001928:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1af      	bne.n	80018a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80da 	beq.w	8001b0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d069      	beq.n	8001a36 <HAL_RCC_OscConfig+0x6da>
 8001962:	2301      	movs	r3, #1
 8001964:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x654>)
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2301      	movs	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fa2e 	bl	8000dec <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fa29 	bl	8000dec <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d906      	bls.n	80019b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e3d9      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	10908120 	.word	0x10908120
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4ba5      	ldr	r3, [pc, #660]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 80019f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019fe:	2102      	movs	r1, #2
 8001a00:	6019      	str	r1, [r3, #0]
 8001a02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f1a3 	rbit	r1, r3
 8001a0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a10:	6019      	str	r1, [r3, #0]
  return result;
 8001a12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0b0      	beq.n	8001996 <HAL_RCC_OscConfig+0x63a>
 8001a34:	e06a      	b.n	8001b0c <HAL_RCC_OscConfig+0x7b0>
 8001a36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a4c:	601a      	str	r2, [r3, #0]
  return result;
 8001a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <HAL_RCC_OscConfig+0x934>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff f9c0 	bl	8000dec <HAL_GetTick>
 8001a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff f9bb 	bl	8000dec <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e36b      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001acc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	6019      	str	r1, [r3, #0]
 8001ada:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f1a3 	rbit	r1, r3
 8001ae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ae8:	6019      	str	r1, [r3, #0]
  return result;
 8001aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1b2      	bne.n	8001a72 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8158 	beq.w	8001dcc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d112      	bne.n	8001b54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f93e 	bl	8000dec <HAL_GetTick>
 8001b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff f939 	bl	8000dec <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e2e9      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ef      	beq.n	8001b76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x852>
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a39      	ldr	r2, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e02f      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x876>
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e01d      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x89a>
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d06b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff f8e8 	bl	8000dec <HAL_GetTick>
 8001c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff f8e3 	bl	8000dec <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e291      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001c3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x93c>
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	e014      	b.n	8001cb4 <HAL_RCC_OscConfig+0x958>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	10908120 	.word	0x10908120
 8001c94:	40007000 	.word	0x40007000
 8001c98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4bbb      	ldr	r3, [pc, #748]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cb8:	2102      	movs	r1, #2
 8001cba:	6011      	str	r1, [r2, #0]
 8001cbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	fa92 f1a2 	rbit	r1, r2
 8001cc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cca:	6011      	str	r1, [r2, #0]
  return result;
 8001ccc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fab2 f282 	clz	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d099      	beq.n	8001c22 <HAL_RCC_OscConfig+0x8c6>
 8001cee:	e063      	b.n	8001db8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f87c 	bl	8000dec <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff f877 	bl	8000dec <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e225      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0xa06>
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	e00d      	b.n	8001d7e <HAL_RCC_OscConfig+0xa22>
 8001d62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d82:	2102      	movs	r1, #2
 8001d84:	6011      	str	r1, [r2, #0]
 8001d86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fa92 f1a2 	rbit	r1, r2
 8001d90:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d94:	6011      	str	r1, [r2, #0]
  return result;
 8001d96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1a0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a76      	ldr	r2, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 81c2 	beq.w	800215c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	f000 819c 	beq.w	800211e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	f040 8114 	bne.w	800201a <HAL_RCC_OscConfig+0xcbe>
 8001df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e0a:	601a      	str	r2, [r3, #0]
  return result;
 8001e0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	461a      	mov	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe ffe0 	bl	8000dec <HAL_GetTick>
 8001e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe ffdb 	bl	8000dec <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e18b      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001e46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_OscConfig+0xb24>
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb5c>
 8001e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec0:	6011      	str	r1, [r2, #0]
 8001ec2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fa92 f1a2 	rbit	r1, r2
 8001ecc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d19e      	bne.n	8001e32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	4925      	ldr	r1, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f28:	601a      	str	r2, [r3, #0]
  return result;
 8001f2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	461a      	mov	r2, r3
 8001f42:	2301      	movs	r3, #1
 8001f44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe ff51 	bl	8000dec <HAL_GetTick>
 8001f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe ff4c 	bl	8000dec <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0fc      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001f64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7c:	601a      	str	r2, [r3, #0]
  return result;
 8001f7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xc48>
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e01e      	b.n	8001fdc <HAL_RCC_OscConfig+0xc80>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe4:	6011      	str	r1, [r2, #0]
 8001fe6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fa92 f1a2 	rbit	r1, r2
 8001ff0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ff4:	6011      	str	r1, [r2, #0]
  return result;
 8001ff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d09b      	beq.n	8001f50 <HAL_RCC_OscConfig+0xbf4>
 8002018:	e0a0      	b.n	800215c <HAL_RCC_OscConfig+0xe00>
 800201a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800201e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002032:	601a      	str	r2, [r3, #0]
  return result;
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fecc 	bl	8000dec <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fec7 	bl	8000dec <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e077      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 800206e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0xd4c>
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0xd84>
 80020a8:	f107 0320 	add.w	r3, r7, #32
 80020ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f107 0318 	add.w	r3, r7, #24
 80020c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f107 0210 	add.w	r2, r7, #16
 80020e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020e8:	6011      	str	r1, [r2, #0]
 80020ea:	f107 0210 	add.w	r2, r7, #16
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	fa92 f1a2 	rbit	r1, r2
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	6011      	str	r1, [r2, #0]
  return result;
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d19e      	bne.n	800205a <HAL_RCC_OscConfig+0xcfe>
 800211c:	e01e      	b.n	800215c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002134:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	429a      	cmp	r2, r3
 8002144:	d108      	bne.n	8002158 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800214a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b09e      	sub	sp, #120	; 0x78
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e162      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	498b      	ldr	r1, [pc, #556]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e14a      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	497f      	ldr	r1, [pc, #508]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80dc 	beq.w	8002398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d13c      	bne.n	8002262 <HAL_RCC_ClockConfig+0xf6>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <HAL_RCC_ClockConfig+0xa6>
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e00f      	b.n	8002232 <HAL_RCC_ClockConfig+0xc6>
 8002212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	663b      	str	r3, [r7, #96]	; 0x60
 8002226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002236:	65ba      	str	r2, [r7, #88]	; 0x58
 8002238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	f002 021f 	and.w	r2, r2, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d17b      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0f3      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d13c      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x178>
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_ClockConfig+0x128>
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_ClockConfig+0x148>
 8002294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	647b      	str	r3, [r7, #68]	; 0x44
 80022a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
 80022a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b0:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80022ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022bc:	fa92 f2a2 	rbit	r2, r2
 80022c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d13a      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b2      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
 80022e4:	2302      	movs	r3, #2
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_RCC_ClockConfig+0x1a0>
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e00d      	b.n	8002328 <HAL_RCC_ClockConfig+0x1bc>
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2202      	movs	r2, #2
 800232a:	61ba      	str	r2, [r7, #24]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	617a      	str	r2, [r7, #20]
  return result;
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e079      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	491a      	ldr	r1, [pc, #104]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7fe fd40 	bl	8000dec <HAL_GetTick>
 800236c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe fd3c 	bl	8000dec <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e061      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d214      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4906      	ldr	r1, [pc, #24]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e040      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	491a      	ldr	r1, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4912      	ldr	r1, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800240e:	f000 f829 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	22f0      	movs	r2, #240	; 0xf0
 800241e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	60fa      	str	r2, [r7, #12]
  return result;
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	40d3      	lsrs	r3, r2
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x2ec>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	fa21 f303 	lsr.w	r3, r1, r3
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_RCC_ClockConfig+0x2f0>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_RCC_ClockConfig+0x2f4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fc8e 	bl	8000d64 <HAL_InitTick>
  
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3778      	adds	r7, #120	; 0x78
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	08005448 	.word	0x08005448
 800245c:	20000004 	.word	0x20000004
 8002460:	20000008 	.word	0x20000008

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e03c      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002496:	623b      	str	r3, [r7, #32]
      break;
 8002498:	e03c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	607a      	str	r2, [r7, #4]
  return result;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	220f      	movs	r2, #15
 80024c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	60fa      	str	r2, [r7, #12]
  return result;
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	40d3      	lsrs	r3, r2
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	e004      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	623b      	str	r3, [r7, #32]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002510:	623b      	str	r3, [r7, #32]
      break;
 8002512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002514:	6a3b      	ldr	r3, [r7, #32]
}
 8002516:	4618      	mov	r0, r3
 8002518:	372c      	adds	r7, #44	; 0x2c
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	08005460 	.word	0x08005460
 8002530:	08005470 	.word	0x08005470
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002556:	f7ff ffef 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	fa92 f2a2 	rbit	r2, r2
 8002570:	603a      	str	r2, [r7, #0]
  return result;
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	40d3      	lsrs	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08005458 	.word	0x08005458

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800259a:	f7ff ffcd 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800259e:	4601      	mov	r1, r0
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	603a      	str	r2, [r7, #0]
  return result;
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	40d3      	lsrs	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08005458 	.word	0x08005458

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b092      	sub	sp, #72	; 0x48
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80cd 	beq.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fc:	4b86      	ldr	r3, [pc, #536]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10e      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b83      	ldr	r3, [pc, #524]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	4a82      	ldr	r2, [pc, #520]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	61d3      	str	r3, [r2, #28]
 8002614:	4b80      	ldr	r3, [pc, #512]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002632:	4b7a      	ldr	r3, [pc, #488]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7fe fbd5 	bl	8000dec <HAL_GetTick>
 8002642:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	e008      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe fbd1 	bl	8000dec <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0db      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	4b70      	ldr	r3, [pc, #448]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002664:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d07d      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800267e:	429a      	cmp	r2, r3
 8002680:	d076      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002682:	4b65      	ldr	r3, [pc, #404]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b5e      	ldr	r3, [pc, #376]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	2301      	movs	r3, #1
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b55      	ldr	r3, [pc, #340]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	461a      	mov	r2, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d045      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fb82 	bl	8000dec <HAL_GetTick>
 80026e8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fb7e 	bl	8000dec <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e086      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002702:	2302      	movs	r3, #2
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	61fb      	str	r3, [r7, #28]
  return result;
 800271a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d102      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002730:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	e007      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2202      	movs	r2, #2
 8002748:	613a      	str	r2, [r7, #16]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	fa92 f2a2 	rbit	r2, r2
 8002750:	60fa      	str	r2, [r7, #12]
  return result;
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f002 021f 	and.w	r2, r2, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0bd      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4926      	ldr	r1, [pc, #152]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800277e:	4313      	orrs	r3, r2
 8002780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002782:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a22      	ldr	r2, [pc, #136]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	491a      	ldr	r1, [pc, #104]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f023 0210 	bic.w	r2, r3, #16
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4912      	ldr	r1, [pc, #72]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	490b      	ldr	r1, [pc, #44]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800280a:	4313      	orrs	r3, r2
 800280c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3748      	adds	r7, #72	; 0x48
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	10908100 	.word	0x10908100

08002824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e095      	b.n	8002962 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002846:	d009      	beq.n	800285c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
 800284e:	e005      	b.n	800285c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe f820 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800289c:	d902      	bls.n	80028a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e002      	b.n	80028aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028b2:	d007      	beq.n	80028c4 <HAL_SPI_Init+0xa0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028bc:	d002      	beq.n	80028c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	ea42 0103 	orr.w	r1, r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	f003 0204 	and.w	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002940:	ea42 0103 	orr.w	r1, r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b088      	sub	sp, #32
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_SPI_Transmit+0x22>
 8002988:	2302      	movs	r3, #2
 800298a:	e158      	b.n	8002c3e <HAL_SPI_Transmit+0x2d4>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002994:	f7fe fa2a 	bl	8000dec <HAL_GetTick>
 8002998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ae:	e13d      	b.n	8002c2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0x52>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c0:	e134      	b.n	8002c2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a54:	d94b      	bls.n	8002aee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0xfa>
 8002a5e:	8afb      	ldrh	r3, [r7, #22]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d13e      	bne.n	8002ae2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a88:	e02b      	b.n	8002ae2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d112      	bne.n	8002abe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002abc:	e011      	b.n	8002ae2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002abe:	f7fe f995 	bl	8000dec <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d803      	bhi.n	8002ad6 <HAL_SPI_Transmit+0x16c>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x172>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae0:	e0a4      	b.n	8002c2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ce      	bne.n	8002a8a <HAL_SPI_Transmit+0x120>
 8002aec:	e07c      	b.n	8002be8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Transmit+0x192>
 8002af6:	8afb      	ldrh	r3, [r7, #22]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d170      	bne.n	8002bde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d912      	bls.n	8002b2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	1c9a      	adds	r2, r3, #2
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b02      	subs	r3, #2
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b2a:	e058      	b.n	8002bde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b52:	e044      	b.n	8002bde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d12b      	bne.n	8002bba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d912      	bls.n	8002b92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	1c9a      	adds	r2, r3, #2
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b02      	subs	r3, #2
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b90:	e025      	b.n	8002bde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bb8:	e011      	b.n	8002bde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bba:	f7fe f917 	bl	8000dec <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d803      	bhi.n	8002bd2 <HAL_SPI_Transmit+0x268>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d102      	bne.n	8002bd8 <HAL_SPI_Transmit+0x26e>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bdc:	e026      	b.n	8002c2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1b5      	bne.n	8002b54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fcdb 	bl	80035a8 <SPI_EndRxTxTransaction>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e000      	b.n	8002c2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c62:	d112      	bne.n	8002c8a <HAL_SPI_Receive+0x44>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10e      	bne.n	8002c8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f910 	bl	8002ea6 <HAL_SPI_TransmitReceive>
 8002c86:	4603      	mov	r3, r0
 8002c88:	e109      	b.n	8002e9e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_SPI_Receive+0x52>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e102      	b.n	8002e9e <HAL_SPI_Receive+0x258>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ca0:	f7fe f8a4 	bl	8000dec <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d002      	beq.n	8002cb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cb6:	e0e9      	b.n	8002e8c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Receive+0x7e>
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cc8:	e0e0      	b.n	8002e8c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d14:	d908      	bls.n	8002d28 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e007      	b.n	8002d38 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d40:	d10f      	bne.n	8002d62 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d007      	beq.n	8002d80 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d88:	d867      	bhi.n	8002e5a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d8a:	e030      	b.n	8002dee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d117      	bne.n	8002dca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f103 020c 	add.w	r2, r3, #12
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	7812      	ldrb	r2, [r2, #0]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002dc8:	e011      	b.n	8002dee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dca:	f7fe f80f 	bl	8000dec <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d803      	bhi.n	8002de2 <HAL_SPI_Receive+0x19c>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d102      	bne.n	8002de8 <HAL_SPI_Receive+0x1a2>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dec:	e04e      	b.n	8002e8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1c8      	bne.n	8002d8c <HAL_SPI_Receive+0x146>
 8002dfa:	e034      	b.n	8002e66 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d115      	bne.n	8002e36 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	b292      	uxth	r2, r2
 8002e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e34:	e011      	b.n	8002e5a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e36:	f7fd ffd9 	bl	8000dec <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d803      	bhi.n	8002e4e <HAL_SPI_Receive+0x208>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d102      	bne.n	8002e54 <HAL_SPI_Receive+0x20e>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e58:	e018      	b.n	8002e8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ca      	bne.n	8002dfc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	6839      	ldr	r1, [r7, #0]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fb44 	bl	80034f8 <SPI_EndRxTransaction>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
 8002e88:	e000      	b.n	8002e8c <HAL_SPI_Receive+0x246>
  }

error :
 8002e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b08a      	sub	sp, #40	; 0x28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x26>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e1fb      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x41e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed4:	f7fd ff8a 	bl	8000dec <HAL_GetTick>
 8002ed8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ee0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002eec:	887b      	ldrh	r3, [r7, #2]
 8002eee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ef0:	7efb      	ldrb	r3, [r7, #27]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d00e      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x6e>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efc:	d106      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x66>
 8002f06:	7efb      	ldrb	r3, [r7, #27]
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d003      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f12:	e1cd      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0x80>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_TransmitReceive+0x80>
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f2c:	e1c0      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d003      	beq.n	8002f42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	887a      	ldrh	r2, [r7, #2]
 8002f52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	887a      	ldrh	r2, [r7, #2]
 8002f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	887a      	ldrh	r2, [r7, #2]
 8002f6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f84:	d802      	bhi.n	8002f8c <HAL_SPI_TransmitReceive+0xe6>
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d908      	bls.n	8002f9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	e007      	b.n	8002fae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d007      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fd4:	d97c      	bls.n	80030d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x13e>
 8002fde:	8a7b      	ldrh	r3, [r7, #18]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d169      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003008:	e056      	b.n	80030b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d11b      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x1aa>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x1aa>
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	2b01      	cmp	r3, #1
 8003026:	d113      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d11c      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x1f2>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	b292      	uxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003098:	f7fd fea8 	bl	8000dec <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d807      	bhi.n	80030b8 <HAL_SPI_TransmitReceive+0x212>
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d003      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030b6:	e0fb      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1a3      	bne.n	800300a <HAL_SPI_TransmitReceive+0x164>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d19d      	bne.n	800300a <HAL_SPI_TransmitReceive+0x164>
 80030ce:	e0df      	b.n	8003290 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0x23a>
 80030d8:	8a7b      	ldrh	r3, [r7, #18]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 80cb 	bne.w	8003276 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d912      	bls.n	8003110 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	1c9a      	adds	r2, r3, #2
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b02      	subs	r3, #2
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800310e:	e0b2      	b.n	8003276 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003136:	e09e      	b.n	8003276 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d134      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x30a>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02f      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x30a>
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2b01      	cmp	r3, #1
 8003154:	d12c      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d912      	bls.n	8003186 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b02      	subs	r3, #2
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003184:	e012      	b.n	80031ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d148      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x3aa>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d042      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d923      	bls.n	800321e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	b292      	uxth	r2, r2
 80031e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	1c9a      	adds	r2, r3, #2
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b02      	subs	r3, #2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d81f      	bhi.n	800324c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	e016      	b.n	800324c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f103 020c 	add.w	r2, r3, #12
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800324c:	2301      	movs	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003250:	f7fd fdcc 	bl	8000dec <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325c:	429a      	cmp	r2, r3
 800325e:	d803      	bhi.n	8003268 <HAL_SPI_TransmitReceive+0x3c2>
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d102      	bne.n	800326e <HAL_SPI_TransmitReceive+0x3c8>
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003274:	e01c      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f47f af5b 	bne.w	8003138 <HAL_SPI_TransmitReceive+0x292>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f af54 	bne.w	8003138 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f987 	bl	80035a8 <SPI_EndRxTxTransaction>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	661a      	str	r2, [r3, #96]	; 0x60
 80032ac:	e000      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80032ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032dc:	f7fd fd86 	bl	8000dec <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ec:	f7fd fd7e 	bl	8000dec <HAL_GetTick>
 80032f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	015b      	lsls	r3, r3, #5
 80032f8:	0d1b      	lsrs	r3, r3, #20
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003302:	e054      	b.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d050      	beq.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800330c:	f7fd fd6e 	bl	8000dec <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	429a      	cmp	r2, r3
 800331a:	d902      	bls.n	8003322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d13d      	bne.n	800339e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333a:	d111      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d004      	beq.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d107      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d10f      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e017      	b.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d19b      	bne.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000004 	.word	0x20000004

080033dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033ea:	f7fd fcff 	bl	8000dec <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033fa:	f7fd fcf7 	bl	8000dec <HAL_GetTick>
 80033fe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003400:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00da      	lsls	r2, r3, #3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	0d1b      	lsrs	r3, r3, #20
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003418:	e05f      	b.n	80034da <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003420:	d106      	bne.n	8003430 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d050      	beq.n	80034da <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003438:	f7fd fcd8 	bl	8000dec <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	429a      	cmp	r2, r3
 8003446:	d902      	bls.n	800344e <SPI_WaitFifoStateUntilTimeout+0x72>
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d13d      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800345c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003466:	d111      	bne.n	800348c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003470:	d004      	beq.n	800347c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d107      	bne.n	800348c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003494:	d10f      	bne.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e010      	b.n	80034ec <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d197      	bne.n	800341a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000004 	.word	0x20000004

080034f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800350c:	d111      	bne.n	8003532 <SPI_EndRxTransaction+0x3a>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003516:	d004      	beq.n	8003522 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003520:	d107      	bne.n	8003532 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff fec5 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e023      	b.n	80035a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003560:	d11d      	bne.n	800359e <SPI_EndRxTransaction+0xa6>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356a:	d004      	beq.n	8003576 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d113      	bne.n	800359e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff ff2a 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e000      	b.n	80035a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff0b 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e027      	b.n	800362c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2200      	movs	r2, #0
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff fe70 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e014      	b.n	800362c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff fee4 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e000      	b.n	800362c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e049      	b.n	80036da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd faae 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 f950 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d001      	beq.n	80036fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e038      	b.n	800376e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_TIM_Base_Start+0x98>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_TIM_Base_Start+0x48>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d009      	beq.n	800372c <HAL_TIM_Base_Start+0x48>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_TIM_Base_Start+0x9c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_TIM_Base_Start+0x48>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_TIM_Base_Start+0xa0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d115      	bne.n	8003758 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_TIM_Base_Start+0xa4>)
 8003734:	4013      	ands	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d015      	beq.n	800376a <HAL_TIM_Base_Start+0x86>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d011      	beq.n	800376a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	e008      	b.n	800376a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e000      	b.n	800376c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40014000 	.word	0x40014000
 8003788:	00010007 	.word	0x00010007

0800378c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_ConfigClockSource+0x18>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0b5      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x184>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e0:	d03e      	beq.n	8003860 <HAL_TIM_ConfigClockSource+0xd4>
 80037e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e6:	f200 8087 	bhi.w	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	f000 8085 	beq.w	80038fc <HAL_TIM_ConfigClockSource+0x170>
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f6:	d87f      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 80037f8:	2b70      	cmp	r3, #112	; 0x70
 80037fa:	d01a      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0xa6>
 80037fc:	2b70      	cmp	r3, #112	; 0x70
 80037fe:	d87b      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003800:	2b60      	cmp	r3, #96	; 0x60
 8003802:	d050      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003804:	2b60      	cmp	r3, #96	; 0x60
 8003806:	d877      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b50      	cmp	r3, #80	; 0x50
 800380a:	d03c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0xfa>
 800380c:	2b50      	cmp	r3, #80	; 0x50
 800380e:	d873      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d058      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d86f      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d064      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x15a>
 800381c:	2b30      	cmp	r3, #48	; 0x30
 800381e:	d86b      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d060      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d867      	bhi.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05c      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	2b10      	cmp	r3, #16
 800382e:	d05a      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003830:	e062      	b.n	80038f8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6899      	ldr	r1, [r3, #8]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f000 f95b 	bl	8003afc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003854:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	609a      	str	r2, [r3, #8]
      break;
 800385e:	e04e      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6899      	ldr	r1, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f000 f944 	bl	8003afc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003882:	609a      	str	r2, [r3, #8]
      break;
 8003884:	e03b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	461a      	mov	r2, r3
 8003894:	f000 f8b8 	bl	8003a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2150      	movs	r1, #80	; 0x50
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f911 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 80038a4:	e02b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 f8d7 	bl	8003a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2160      	movs	r1, #96	; 0x60
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f901 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 80038c4:	e01b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 f898 	bl	8003a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2140      	movs	r1, #64	; 0x40
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f8f1 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 80038e4:	e00b      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f000 f8e8 	bl	8003ac6 <TIM_ITRx_SetConfig>
        break;
 80038f6:	e002      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
      break;
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x172>
      break;
 80038fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a32      	ldr	r2, [pc, #200]	; (80039f4 <TIM_Base_SetConfig+0xdc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_Base_SetConfig+0x28>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0x28>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <TIM_Base_SetConfig+0xe0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <TIM_Base_SetConfig+0xdc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <TIM_Base_SetConfig+0x6a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d00f      	beq.n	8003982 <TIM_Base_SetConfig+0x6a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <TIM_Base_SetConfig+0xe0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0x6a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a23      	ldr	r2, [pc, #140]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0x6a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <TIM_Base_SetConfig+0xe8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0x6a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <TIM_Base_SetConfig+0xec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <TIM_Base_SetConfig+0xdc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_Base_SetConfig+0xc0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <TIM_Base_SetConfig+0xe4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_Base_SetConfig+0xc0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <TIM_Base_SetConfig+0xe8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xc0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <TIM_Base_SetConfig+0xec>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40014400 	.word	0x40014400
 8003a04:	40014800 	.word	0x40014800

08003a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0201 	bic.w	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 030a 	bic.w	r3, r3, #10
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b087      	sub	sp, #28
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f043 0307 	orr.w	r3, r3, #7
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	021a      	lsls	r2, r3, #8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e054      	b.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d009      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10c      	bne.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40014000 	.word	0x40014000

08003c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e040      	b.n	8003cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f80e 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8c0 	bl	8003ddc <UART_SetConfig>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e022      	b.n	8003cac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9ea 	bl	8004048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fa71 	bl	800418c <UART_CheckIdleState>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	f040 8082 	bne.w	8003dd2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_UART_Transmit+0x26>
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07a      	b.n	8003dd4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_UART_Transmit+0x38>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e073      	b.n	8003dd4 <HAL_UART_Transmit+0x120>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2221      	movs	r2, #33	; 0x21
 8003d00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fd f873 	bl	8000dec <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d108      	bne.n	8003d34 <HAL_UART_Transmit+0x80>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e003      	b.n	8003d3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d44:	e02d      	b.n	8003da2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fa64 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e039      	b.n	8003dd4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d72:	b292      	uxth	r2, r2
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	3302      	adds	r3, #2
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e008      	b.n	8003d90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	b292      	uxth	r2, r2
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1cb      	bne.n	8003d46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	2140      	movs	r1, #64	; 0x40
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa30 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e005      	b.n	8003dd4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <UART_SetConfig+0x254>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	6979      	ldr	r1, [r7, #20]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a78      	ldr	r2, [pc, #480]	; (8004034 <UART_SetConfig+0x258>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d120      	bne.n	8003e9a <UART_SetConfig+0xbe>
 8003e58:	4b77      	ldr	r3, [pc, #476]	; (8004038 <UART_SetConfig+0x25c>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d817      	bhi.n	8003e94 <UART_SetConfig+0xb8>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <UART_SetConfig+0x90>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e89 	.word	0x08003e89
 8003e74:	08003e8f 	.word	0x08003e8f
 8003e78:	08003e83 	.word	0x08003e83
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e01d      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003e82:	2302      	movs	r3, #2
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e01a      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e017      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e014      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003e94:	2310      	movs	r3, #16
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e011      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a67      	ldr	r2, [pc, #412]	; (800403c <UART_SetConfig+0x260>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d102      	bne.n	8003eaa <UART_SetConfig+0xce>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e009      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a64      	ldr	r2, [pc, #400]	; (8004040 <UART_SetConfig+0x264>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d102      	bne.n	8003eba <UART_SetConfig+0xde>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e001      	b.n	8003ebe <UART_SetConfig+0xe2>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec6:	d15b      	bne.n	8003f80 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d827      	bhi.n	8003f1e <UART_SetConfig+0x142>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0xf8>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f1f 	.word	0x08003f1f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003f1f 	.word	0x08003f1f
 8003ef0:	08003f1f 	.word	0x08003f1f
 8003ef4:	08003f17 	.word	0x08003f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7fe fb2a 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003efc:	61b8      	str	r0, [r7, #24]
        break;
 8003efe:	e013      	b.n	8003f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f00:	f7fe fb48 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8003f04:	61b8      	str	r0, [r7, #24]
        break;
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f08:	4b4e      	ldr	r3, [pc, #312]	; (8004044 <UART_SetConfig+0x268>)
 8003f0a:	61bb      	str	r3, [r7, #24]
        break;
 8003f0c:	e00c      	b.n	8003f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0e:	f7fe faa9 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003f12:	61b8      	str	r0, [r7, #24]
        break;
 8003f14:	e008      	b.n	8003f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e004      	b.n	8003f28 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	77bb      	strb	r3, [r7, #30]
        break;
 8003f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d074      	beq.n	8004018 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	005a      	lsls	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d916      	bls.n	8003f7a <UART_SetConfig+0x19e>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d212      	bcs.n	8003f7a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f023 030f 	bic.w	r3, r3, #15
 8003f5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	89fa      	ldrh	r2, [r7, #14]
 8003f76:	60da      	str	r2, [r3, #12]
 8003f78:	e04e      	b.n	8004018 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77bb      	strb	r3, [r7, #30]
 8003f7e:	e04b      	b.n	8004018 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d827      	bhi.n	8003fd6 <UART_SetConfig+0x1fa>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0x1b0>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fd7 	.word	0x08003fd7
 8003f9c:	08003fc7 	.word	0x08003fc7
 8003fa0:	08003fd7 	.word	0x08003fd7
 8003fa4:	08003fd7 	.word	0x08003fd7
 8003fa8:	08003fd7 	.word	0x08003fd7
 8003fac:	08003fcf 	.word	0x08003fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe face 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61b8      	str	r0, [r7, #24]
        break;
 8003fb6:	e013      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb8:	f7fe faec 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8003fbc:	61b8      	str	r0, [r7, #24]
        break;
 8003fbe:	e00f      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc0:	4b20      	ldr	r3, [pc, #128]	; (8004044 <UART_SetConfig+0x268>)
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e00c      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc6:	f7fe fa4d 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003fca:	61b8      	str	r0, [r7, #24]
        break;
 8003fcc:	e008      	b.n	8003fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e004      	b.n	8003fe0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	77bb      	strb	r3, [r7, #30]
        break;
 8003fde:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	d908      	bls.n	8004014 <UART_SetConfig+0x238>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004008:	d204      	bcs.n	8004014 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e001      	b.n	8004018 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004024:	7fbb      	ldrb	r3, [r7, #30]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	efff69f3 	.word	0xefff69f3
 8004034:	40013800 	.word	0x40013800
 8004038:	40021000 	.word	0x40021000
 800403c:	40004400 	.word	0x40004400
 8004040:	40004800 	.word	0x40004800
 8004044:	007a1200 	.word	0x007a1200

08004048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01a      	beq.n	800415e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004146:	d10a      	bne.n	800415e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800419c:	f7fc fe26 	bl	8000dec <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d10e      	bne.n	80041ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f82d 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e023      	b.n	8004216 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d10e      	bne.n	80041fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f817 	bl	800421e <UART_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e00d      	b.n	8004216 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	4613      	mov	r3, r2
 800422c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422e:	e05e      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d05a      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fc fdd8 	bl	8000dec <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <UART_WaitOnFlagUntilTimeout+0x30>
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11b      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800425c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e043      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02c      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a2:	d124      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d091      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <__errno>:
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <__errno+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000010 	.word	0x20000010

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4d0d      	ldr	r5, [pc, #52]	; (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2600      	movs	r6, #0
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4d0b      	ldr	r5, [pc, #44]	; (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <__libc_init_array+0x44>)
 8004338:	f000 ffec 	bl	8005314 <_init>
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2600      	movs	r6, #0
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	08005518 	.word	0x08005518
 8004360:	08005518 	.word	0x08005518
 8004364:	08005518 	.word	0x08005518
 8004368:	0800551c 	.word	0x0800551c

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <iprintf>:
 800437c:	b40f      	push	{r0, r1, r2, r3}
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <iprintf+0x2c>)
 8004380:	b513      	push	{r0, r1, r4, lr}
 8004382:	681c      	ldr	r4, [r3, #0]
 8004384:	b124      	cbz	r4, 8004390 <iprintf+0x14>
 8004386:	69a3      	ldr	r3, [r4, #24]
 8004388:	b913      	cbnz	r3, 8004390 <iprintf+0x14>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 fa5e 	bl	800484c <__sinit>
 8004390:	ab05      	add	r3, sp, #20
 8004392:	9a04      	ldr	r2, [sp, #16]
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	4620      	mov	r0, r4
 800439a:	f000 fc2f 	bl	8004bfc <_vfiprintf_r>
 800439e:	b002      	add	sp, #8
 80043a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a4:	b004      	add	sp, #16
 80043a6:	4770      	bx	lr
 80043a8:	20000010 	.word	0x20000010

080043ac <_puts_r>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	460e      	mov	r6, r1
 80043b0:	4605      	mov	r5, r0
 80043b2:	b118      	cbz	r0, 80043bc <_puts_r+0x10>
 80043b4:	6983      	ldr	r3, [r0, #24]
 80043b6:	b90b      	cbnz	r3, 80043bc <_puts_r+0x10>
 80043b8:	f000 fa48 	bl	800484c <__sinit>
 80043bc:	69ab      	ldr	r3, [r5, #24]
 80043be:	68ac      	ldr	r4, [r5, #8]
 80043c0:	b913      	cbnz	r3, 80043c8 <_puts_r+0x1c>
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 fa42 	bl	800484c <__sinit>
 80043c8:	4b2c      	ldr	r3, [pc, #176]	; (800447c <_puts_r+0xd0>)
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d120      	bne.n	8004410 <_puts_r+0x64>
 80043ce:	686c      	ldr	r4, [r5, #4]
 80043d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d2:	07db      	lsls	r3, r3, #31
 80043d4:	d405      	bmi.n	80043e2 <_puts_r+0x36>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	0598      	lsls	r0, r3, #22
 80043da:	d402      	bmi.n	80043e2 <_puts_r+0x36>
 80043dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043de:	f000 fad3 	bl	8004988 <__retarget_lock_acquire_recursive>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	0719      	lsls	r1, r3, #28
 80043e6:	d51d      	bpl.n	8004424 <_puts_r+0x78>
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	b1db      	cbz	r3, 8004424 <_puts_r+0x78>
 80043ec:	3e01      	subs	r6, #1
 80043ee:	68a3      	ldr	r3, [r4, #8]
 80043f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043f4:	3b01      	subs	r3, #1
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	bb39      	cbnz	r1, 800444a <_puts_r+0x9e>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da38      	bge.n	8004470 <_puts_r+0xc4>
 80043fe:	4622      	mov	r2, r4
 8004400:	210a      	movs	r1, #10
 8004402:	4628      	mov	r0, r5
 8004404:	f000 f848 	bl	8004498 <__swbuf_r>
 8004408:	3001      	adds	r0, #1
 800440a:	d011      	beq.n	8004430 <_puts_r+0x84>
 800440c:	250a      	movs	r5, #10
 800440e:	e011      	b.n	8004434 <_puts_r+0x88>
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <_puts_r+0xd4>)
 8004412:	429c      	cmp	r4, r3
 8004414:	d101      	bne.n	800441a <_puts_r+0x6e>
 8004416:	68ac      	ldr	r4, [r5, #8]
 8004418:	e7da      	b.n	80043d0 <_puts_r+0x24>
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <_puts_r+0xd8>)
 800441c:	429c      	cmp	r4, r3
 800441e:	bf08      	it	eq
 8004420:	68ec      	ldreq	r4, [r5, #12]
 8004422:	e7d5      	b.n	80043d0 <_puts_r+0x24>
 8004424:	4621      	mov	r1, r4
 8004426:	4628      	mov	r0, r5
 8004428:	f000 f888 	bl	800453c <__swsetup_r>
 800442c:	2800      	cmp	r0, #0
 800442e:	d0dd      	beq.n	80043ec <_puts_r+0x40>
 8004430:	f04f 35ff 	mov.w	r5, #4294967295
 8004434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004436:	07da      	lsls	r2, r3, #31
 8004438:	d405      	bmi.n	8004446 <_puts_r+0x9a>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	059b      	lsls	r3, r3, #22
 800443e:	d402      	bmi.n	8004446 <_puts_r+0x9a>
 8004440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004442:	f000 faa2 	bl	800498a <__retarget_lock_release_recursive>
 8004446:	4628      	mov	r0, r5
 8004448:	bd70      	pop	{r4, r5, r6, pc}
 800444a:	2b00      	cmp	r3, #0
 800444c:	da04      	bge.n	8004458 <_puts_r+0xac>
 800444e:	69a2      	ldr	r2, [r4, #24]
 8004450:	429a      	cmp	r2, r3
 8004452:	dc06      	bgt.n	8004462 <_puts_r+0xb6>
 8004454:	290a      	cmp	r1, #10
 8004456:	d004      	beq.n	8004462 <_puts_r+0xb6>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	6022      	str	r2, [r4, #0]
 800445e:	7019      	strb	r1, [r3, #0]
 8004460:	e7c5      	b.n	80043ee <_puts_r+0x42>
 8004462:	4622      	mov	r2, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f817 	bl	8004498 <__swbuf_r>
 800446a:	3001      	adds	r0, #1
 800446c:	d1bf      	bne.n	80043ee <_puts_r+0x42>
 800446e:	e7df      	b.n	8004430 <_puts_r+0x84>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	250a      	movs	r5, #10
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	6022      	str	r2, [r4, #0]
 8004478:	701d      	strb	r5, [r3, #0]
 800447a:	e7db      	b.n	8004434 <_puts_r+0x88>
 800447c:	080054a4 	.word	0x080054a4
 8004480:	080054c4 	.word	0x080054c4
 8004484:	08005484 	.word	0x08005484

08004488 <puts>:
 8004488:	4b02      	ldr	r3, [pc, #8]	; (8004494 <puts+0xc>)
 800448a:	4601      	mov	r1, r0
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f7ff bf8d 	b.w	80043ac <_puts_r>
 8004492:	bf00      	nop
 8004494:	20000010 	.word	0x20000010

08004498 <__swbuf_r>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	460e      	mov	r6, r1
 800449c:	4614      	mov	r4, r2
 800449e:	4605      	mov	r5, r0
 80044a0:	b118      	cbz	r0, 80044aa <__swbuf_r+0x12>
 80044a2:	6983      	ldr	r3, [r0, #24]
 80044a4:	b90b      	cbnz	r3, 80044aa <__swbuf_r+0x12>
 80044a6:	f000 f9d1 	bl	800484c <__sinit>
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <__swbuf_r+0x98>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d12b      	bne.n	8004508 <__swbuf_r+0x70>
 80044b0:	686c      	ldr	r4, [r5, #4]
 80044b2:	69a3      	ldr	r3, [r4, #24]
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	071a      	lsls	r2, r3, #28
 80044ba:	d52f      	bpl.n	800451c <__swbuf_r+0x84>
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	b36b      	cbz	r3, 800451c <__swbuf_r+0x84>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	1ac0      	subs	r0, r0, r3
 80044c6:	6963      	ldr	r3, [r4, #20]
 80044c8:	b2f6      	uxtb	r6, r6
 80044ca:	4283      	cmp	r3, r0
 80044cc:	4637      	mov	r7, r6
 80044ce:	dc04      	bgt.n	80044da <__swbuf_r+0x42>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f926 	bl	8004724 <_fflush_r>
 80044d8:	bb30      	cbnz	r0, 8004528 <__swbuf_r+0x90>
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60a3      	str	r3, [r4, #8]
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	6022      	str	r2, [r4, #0]
 80044e6:	701e      	strb	r6, [r3, #0]
 80044e8:	6963      	ldr	r3, [r4, #20]
 80044ea:	3001      	adds	r0, #1
 80044ec:	4283      	cmp	r3, r0
 80044ee:	d004      	beq.n	80044fa <__swbuf_r+0x62>
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	07db      	lsls	r3, r3, #31
 80044f4:	d506      	bpl.n	8004504 <__swbuf_r+0x6c>
 80044f6:	2e0a      	cmp	r6, #10
 80044f8:	d104      	bne.n	8004504 <__swbuf_r+0x6c>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f911 	bl	8004724 <_fflush_r>
 8004502:	b988      	cbnz	r0, 8004528 <__swbuf_r+0x90>
 8004504:	4638      	mov	r0, r7
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <__swbuf_r+0x9c>)
 800450a:	429c      	cmp	r4, r3
 800450c:	d101      	bne.n	8004512 <__swbuf_r+0x7a>
 800450e:	68ac      	ldr	r4, [r5, #8]
 8004510:	e7cf      	b.n	80044b2 <__swbuf_r+0x1a>
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <__swbuf_r+0xa0>)
 8004514:	429c      	cmp	r4, r3
 8004516:	bf08      	it	eq
 8004518:	68ec      	ldreq	r4, [r5, #12]
 800451a:	e7ca      	b.n	80044b2 <__swbuf_r+0x1a>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f80c 	bl	800453c <__swsetup_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	d0cb      	beq.n	80044c0 <__swbuf_r+0x28>
 8004528:	f04f 37ff 	mov.w	r7, #4294967295
 800452c:	e7ea      	b.n	8004504 <__swbuf_r+0x6c>
 800452e:	bf00      	nop
 8004530:	080054a4 	.word	0x080054a4
 8004534:	080054c4 	.word	0x080054c4
 8004538:	08005484 	.word	0x08005484

0800453c <__swsetup_r>:
 800453c:	4b32      	ldr	r3, [pc, #200]	; (8004608 <__swsetup_r+0xcc>)
 800453e:	b570      	push	{r4, r5, r6, lr}
 8004540:	681d      	ldr	r5, [r3, #0]
 8004542:	4606      	mov	r6, r0
 8004544:	460c      	mov	r4, r1
 8004546:	b125      	cbz	r5, 8004552 <__swsetup_r+0x16>
 8004548:	69ab      	ldr	r3, [r5, #24]
 800454a:	b913      	cbnz	r3, 8004552 <__swsetup_r+0x16>
 800454c:	4628      	mov	r0, r5
 800454e:	f000 f97d 	bl	800484c <__sinit>
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <__swsetup_r+0xd0>)
 8004554:	429c      	cmp	r4, r3
 8004556:	d10f      	bne.n	8004578 <__swsetup_r+0x3c>
 8004558:	686c      	ldr	r4, [r5, #4]
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004560:	0719      	lsls	r1, r3, #28
 8004562:	d42c      	bmi.n	80045be <__swsetup_r+0x82>
 8004564:	06dd      	lsls	r5, r3, #27
 8004566:	d411      	bmi.n	800458c <__swsetup_r+0x50>
 8004568:	2309      	movs	r3, #9
 800456a:	6033      	str	r3, [r6, #0]
 800456c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	f04f 30ff 	mov.w	r0, #4294967295
 8004576:	e03e      	b.n	80045f6 <__swsetup_r+0xba>
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <__swsetup_r+0xd4>)
 800457a:	429c      	cmp	r4, r3
 800457c:	d101      	bne.n	8004582 <__swsetup_r+0x46>
 800457e:	68ac      	ldr	r4, [r5, #8]
 8004580:	e7eb      	b.n	800455a <__swsetup_r+0x1e>
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <__swsetup_r+0xd8>)
 8004584:	429c      	cmp	r4, r3
 8004586:	bf08      	it	eq
 8004588:	68ec      	ldreq	r4, [r5, #12]
 800458a:	e7e6      	b.n	800455a <__swsetup_r+0x1e>
 800458c:	0758      	lsls	r0, r3, #29
 800458e:	d512      	bpl.n	80045b6 <__swsetup_r+0x7a>
 8004590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004592:	b141      	cbz	r1, 80045a6 <__swsetup_r+0x6a>
 8004594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004598:	4299      	cmp	r1, r3
 800459a:	d002      	beq.n	80045a2 <__swsetup_r+0x66>
 800459c:	4630      	mov	r0, r6
 800459e:	f000 fa59 	bl	8004a54 <_free_r>
 80045a2:	2300      	movs	r3, #0
 80045a4:	6363      	str	r3, [r4, #52]	; 0x34
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	2300      	movs	r3, #0
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	f043 0308 	orr.w	r3, r3, #8
 80045bc:	81a3      	strh	r3, [r4, #12]
 80045be:	6923      	ldr	r3, [r4, #16]
 80045c0:	b94b      	cbnz	r3, 80045d6 <__swsetup_r+0x9a>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045cc:	d003      	beq.n	80045d6 <__swsetup_r+0x9a>
 80045ce:	4621      	mov	r1, r4
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 f9ff 	bl	80049d4 <__smakebuf_r>
 80045d6:	89a0      	ldrh	r0, [r4, #12]
 80045d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045dc:	f010 0301 	ands.w	r3, r0, #1
 80045e0:	d00a      	beq.n	80045f8 <__swsetup_r+0xbc>
 80045e2:	2300      	movs	r3, #0
 80045e4:	60a3      	str	r3, [r4, #8]
 80045e6:	6963      	ldr	r3, [r4, #20]
 80045e8:	425b      	negs	r3, r3
 80045ea:	61a3      	str	r3, [r4, #24]
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	b943      	cbnz	r3, 8004602 <__swsetup_r+0xc6>
 80045f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045f4:	d1ba      	bne.n	800456c <__swsetup_r+0x30>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	0781      	lsls	r1, r0, #30
 80045fa:	bf58      	it	pl
 80045fc:	6963      	ldrpl	r3, [r4, #20]
 80045fe:	60a3      	str	r3, [r4, #8]
 8004600:	e7f4      	b.n	80045ec <__swsetup_r+0xb0>
 8004602:	2000      	movs	r0, #0
 8004604:	e7f7      	b.n	80045f6 <__swsetup_r+0xba>
 8004606:	bf00      	nop
 8004608:	20000010 	.word	0x20000010
 800460c:	080054a4 	.word	0x080054a4
 8004610:	080054c4 	.word	0x080054c4
 8004614:	08005484 	.word	0x08005484

08004618 <__sflush_r>:
 8004618:	898a      	ldrh	r2, [r1, #12]
 800461a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	0710      	lsls	r0, r2, #28
 8004622:	460c      	mov	r4, r1
 8004624:	d458      	bmi.n	80046d8 <__sflush_r+0xc0>
 8004626:	684b      	ldr	r3, [r1, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	dc05      	bgt.n	8004638 <__sflush_r+0x20>
 800462c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	dc02      	bgt.n	8004638 <__sflush_r+0x20>
 8004632:	2000      	movs	r0, #0
 8004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800463a:	2e00      	cmp	r6, #0
 800463c:	d0f9      	beq.n	8004632 <__sflush_r+0x1a>
 800463e:	2300      	movs	r3, #0
 8004640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004644:	682f      	ldr	r7, [r5, #0]
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	d032      	beq.n	80046b0 <__sflush_r+0x98>
 800464a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	075a      	lsls	r2, r3, #29
 8004650:	d505      	bpl.n	800465e <__sflush_r+0x46>
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	1ac0      	subs	r0, r0, r3
 8004656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004658:	b10b      	cbz	r3, 800465e <__sflush_r+0x46>
 800465a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800465c:	1ac0      	subs	r0, r0, r3
 800465e:	2300      	movs	r3, #0
 8004660:	4602      	mov	r2, r0
 8004662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004664:	6a21      	ldr	r1, [r4, #32]
 8004666:	4628      	mov	r0, r5
 8004668:	47b0      	blx	r6
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	d106      	bne.n	800467e <__sflush_r+0x66>
 8004670:	6829      	ldr	r1, [r5, #0]
 8004672:	291d      	cmp	r1, #29
 8004674:	d82c      	bhi.n	80046d0 <__sflush_r+0xb8>
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <__sflush_r+0x108>)
 8004678:	40ca      	lsrs	r2, r1
 800467a:	07d6      	lsls	r6, r2, #31
 800467c:	d528      	bpl.n	80046d0 <__sflush_r+0xb8>
 800467e:	2200      	movs	r2, #0
 8004680:	6062      	str	r2, [r4, #4]
 8004682:	04d9      	lsls	r1, r3, #19
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	6022      	str	r2, [r4, #0]
 8004688:	d504      	bpl.n	8004694 <__sflush_r+0x7c>
 800468a:	1c42      	adds	r2, r0, #1
 800468c:	d101      	bne.n	8004692 <__sflush_r+0x7a>
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	b903      	cbnz	r3, 8004694 <__sflush_r+0x7c>
 8004692:	6560      	str	r0, [r4, #84]	; 0x54
 8004694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004696:	602f      	str	r7, [r5, #0]
 8004698:	2900      	cmp	r1, #0
 800469a:	d0ca      	beq.n	8004632 <__sflush_r+0x1a>
 800469c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d002      	beq.n	80046aa <__sflush_r+0x92>
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f9d5 	bl	8004a54 <_free_r>
 80046aa:	2000      	movs	r0, #0
 80046ac:	6360      	str	r0, [r4, #52]	; 0x34
 80046ae:	e7c1      	b.n	8004634 <__sflush_r+0x1c>
 80046b0:	6a21      	ldr	r1, [r4, #32]
 80046b2:	2301      	movs	r3, #1
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b0      	blx	r6
 80046b8:	1c41      	adds	r1, r0, #1
 80046ba:	d1c7      	bne.n	800464c <__sflush_r+0x34>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0c4      	beq.n	800464c <__sflush_r+0x34>
 80046c2:	2b1d      	cmp	r3, #29
 80046c4:	d001      	beq.n	80046ca <__sflush_r+0xb2>
 80046c6:	2b16      	cmp	r3, #22
 80046c8:	d101      	bne.n	80046ce <__sflush_r+0xb6>
 80046ca:	602f      	str	r7, [r5, #0]
 80046cc:	e7b1      	b.n	8004632 <__sflush_r+0x1a>
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e7ad      	b.n	8004634 <__sflush_r+0x1c>
 80046d8:	690f      	ldr	r7, [r1, #16]
 80046da:	2f00      	cmp	r7, #0
 80046dc:	d0a9      	beq.n	8004632 <__sflush_r+0x1a>
 80046de:	0793      	lsls	r3, r2, #30
 80046e0:	680e      	ldr	r6, [r1, #0]
 80046e2:	bf08      	it	eq
 80046e4:	694b      	ldreq	r3, [r1, #20]
 80046e6:	600f      	str	r7, [r1, #0]
 80046e8:	bf18      	it	ne
 80046ea:	2300      	movne	r3, #0
 80046ec:	eba6 0807 	sub.w	r8, r6, r7
 80046f0:	608b      	str	r3, [r1, #8]
 80046f2:	f1b8 0f00 	cmp.w	r8, #0
 80046f6:	dd9c      	ble.n	8004632 <__sflush_r+0x1a>
 80046f8:	6a21      	ldr	r1, [r4, #32]
 80046fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046fc:	4643      	mov	r3, r8
 80046fe:	463a      	mov	r2, r7
 8004700:	4628      	mov	r0, r5
 8004702:	47b0      	blx	r6
 8004704:	2800      	cmp	r0, #0
 8004706:	dc06      	bgt.n	8004716 <__sflush_r+0xfe>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	e78e      	b.n	8004634 <__sflush_r+0x1c>
 8004716:	4407      	add	r7, r0
 8004718:	eba8 0800 	sub.w	r8, r8, r0
 800471c:	e7e9      	b.n	80046f2 <__sflush_r+0xda>
 800471e:	bf00      	nop
 8004720:	20400001 	.word	0x20400001

08004724 <_fflush_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	690b      	ldr	r3, [r1, #16]
 8004728:	4605      	mov	r5, r0
 800472a:	460c      	mov	r4, r1
 800472c:	b913      	cbnz	r3, 8004734 <_fflush_r+0x10>
 800472e:	2500      	movs	r5, #0
 8004730:	4628      	mov	r0, r5
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	b118      	cbz	r0, 800473e <_fflush_r+0x1a>
 8004736:	6983      	ldr	r3, [r0, #24]
 8004738:	b90b      	cbnz	r3, 800473e <_fflush_r+0x1a>
 800473a:	f000 f887 	bl	800484c <__sinit>
 800473e:	4b14      	ldr	r3, [pc, #80]	; (8004790 <_fflush_r+0x6c>)
 8004740:	429c      	cmp	r4, r3
 8004742:	d11b      	bne.n	800477c <_fflush_r+0x58>
 8004744:	686c      	ldr	r4, [r5, #4]
 8004746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ef      	beq.n	800472e <_fflush_r+0xa>
 800474e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004750:	07d0      	lsls	r0, r2, #31
 8004752:	d404      	bmi.n	800475e <_fflush_r+0x3a>
 8004754:	0599      	lsls	r1, r3, #22
 8004756:	d402      	bmi.n	800475e <_fflush_r+0x3a>
 8004758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800475a:	f000 f915 	bl	8004988 <__retarget_lock_acquire_recursive>
 800475e:	4628      	mov	r0, r5
 8004760:	4621      	mov	r1, r4
 8004762:	f7ff ff59 	bl	8004618 <__sflush_r>
 8004766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004768:	07da      	lsls	r2, r3, #31
 800476a:	4605      	mov	r5, r0
 800476c:	d4e0      	bmi.n	8004730 <_fflush_r+0xc>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	059b      	lsls	r3, r3, #22
 8004772:	d4dd      	bmi.n	8004730 <_fflush_r+0xc>
 8004774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004776:	f000 f908 	bl	800498a <__retarget_lock_release_recursive>
 800477a:	e7d9      	b.n	8004730 <_fflush_r+0xc>
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <_fflush_r+0x70>)
 800477e:	429c      	cmp	r4, r3
 8004780:	d101      	bne.n	8004786 <_fflush_r+0x62>
 8004782:	68ac      	ldr	r4, [r5, #8]
 8004784:	e7df      	b.n	8004746 <_fflush_r+0x22>
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <_fflush_r+0x74>)
 8004788:	429c      	cmp	r4, r3
 800478a:	bf08      	it	eq
 800478c:	68ec      	ldreq	r4, [r5, #12]
 800478e:	e7da      	b.n	8004746 <_fflush_r+0x22>
 8004790:	080054a4 	.word	0x080054a4
 8004794:	080054c4 	.word	0x080054c4
 8004798:	08005484 	.word	0x08005484

0800479c <std>:
 800479c:	2300      	movs	r3, #0
 800479e:	b510      	push	{r4, lr}
 80047a0:	4604      	mov	r4, r0
 80047a2:	e9c0 3300 	strd	r3, r3, [r0]
 80047a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047aa:	6083      	str	r3, [r0, #8]
 80047ac:	8181      	strh	r1, [r0, #12]
 80047ae:	6643      	str	r3, [r0, #100]	; 0x64
 80047b0:	81c2      	strh	r2, [r0, #14]
 80047b2:	6183      	str	r3, [r0, #24]
 80047b4:	4619      	mov	r1, r3
 80047b6:	2208      	movs	r2, #8
 80047b8:	305c      	adds	r0, #92	; 0x5c
 80047ba:	f7ff fdd7 	bl	800436c <memset>
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <std+0x38>)
 80047c0:	6263      	str	r3, [r4, #36]	; 0x24
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <std+0x3c>)
 80047c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <std+0x40>)
 80047c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <std+0x44>)
 80047cc:	6224      	str	r4, [r4, #32]
 80047ce:	6323      	str	r3, [r4, #48]	; 0x30
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	bf00      	nop
 80047d4:	080051a5 	.word	0x080051a5
 80047d8:	080051c7 	.word	0x080051c7
 80047dc:	080051ff 	.word	0x080051ff
 80047e0:	08005223 	.word	0x08005223

080047e4 <_cleanup_r>:
 80047e4:	4901      	ldr	r1, [pc, #4]	; (80047ec <_cleanup_r+0x8>)
 80047e6:	f000 b8af 	b.w	8004948 <_fwalk_reent>
 80047ea:	bf00      	nop
 80047ec:	08004725 	.word	0x08004725

080047f0 <__sfmoreglue>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	1e4a      	subs	r2, r1, #1
 80047f4:	2568      	movs	r5, #104	; 0x68
 80047f6:	4355      	muls	r5, r2
 80047f8:	460e      	mov	r6, r1
 80047fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047fe:	f000 f979 	bl	8004af4 <_malloc_r>
 8004802:	4604      	mov	r4, r0
 8004804:	b140      	cbz	r0, 8004818 <__sfmoreglue+0x28>
 8004806:	2100      	movs	r1, #0
 8004808:	e9c0 1600 	strd	r1, r6, [r0]
 800480c:	300c      	adds	r0, #12
 800480e:	60a0      	str	r0, [r4, #8]
 8004810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004814:	f7ff fdaa 	bl	800436c <memset>
 8004818:	4620      	mov	r0, r4
 800481a:	bd70      	pop	{r4, r5, r6, pc}

0800481c <__sfp_lock_acquire>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__sfp_lock_acquire+0x8>)
 800481e:	f000 b8b3 	b.w	8004988 <__retarget_lock_acquire_recursive>
 8004822:	bf00      	nop
 8004824:	200001dc 	.word	0x200001dc

08004828 <__sfp_lock_release>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__sfp_lock_release+0x8>)
 800482a:	f000 b8ae 	b.w	800498a <__retarget_lock_release_recursive>
 800482e:	bf00      	nop
 8004830:	200001dc 	.word	0x200001dc

08004834 <__sinit_lock_acquire>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__sinit_lock_acquire+0x8>)
 8004836:	f000 b8a7 	b.w	8004988 <__retarget_lock_acquire_recursive>
 800483a:	bf00      	nop
 800483c:	200001d7 	.word	0x200001d7

08004840 <__sinit_lock_release>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__sinit_lock_release+0x8>)
 8004842:	f000 b8a2 	b.w	800498a <__retarget_lock_release_recursive>
 8004846:	bf00      	nop
 8004848:	200001d7 	.word	0x200001d7

0800484c <__sinit>:
 800484c:	b510      	push	{r4, lr}
 800484e:	4604      	mov	r4, r0
 8004850:	f7ff fff0 	bl	8004834 <__sinit_lock_acquire>
 8004854:	69a3      	ldr	r3, [r4, #24]
 8004856:	b11b      	cbz	r3, 8004860 <__sinit+0x14>
 8004858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800485c:	f7ff bff0 	b.w	8004840 <__sinit_lock_release>
 8004860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004864:	6523      	str	r3, [r4, #80]	; 0x50
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <__sinit+0x68>)
 8004868:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <__sinit+0x6c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	62a2      	str	r2, [r4, #40]	; 0x28
 800486e:	42a3      	cmp	r3, r4
 8004870:	bf04      	itt	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	61a3      	streq	r3, [r4, #24]
 8004876:	4620      	mov	r0, r4
 8004878:	f000 f820 	bl	80048bc <__sfp>
 800487c:	6060      	str	r0, [r4, #4]
 800487e:	4620      	mov	r0, r4
 8004880:	f000 f81c 	bl	80048bc <__sfp>
 8004884:	60a0      	str	r0, [r4, #8]
 8004886:	4620      	mov	r0, r4
 8004888:	f000 f818 	bl	80048bc <__sfp>
 800488c:	2200      	movs	r2, #0
 800488e:	60e0      	str	r0, [r4, #12]
 8004890:	2104      	movs	r1, #4
 8004892:	6860      	ldr	r0, [r4, #4]
 8004894:	f7ff ff82 	bl	800479c <std>
 8004898:	68a0      	ldr	r0, [r4, #8]
 800489a:	2201      	movs	r2, #1
 800489c:	2109      	movs	r1, #9
 800489e:	f7ff ff7d 	bl	800479c <std>
 80048a2:	68e0      	ldr	r0, [r4, #12]
 80048a4:	2202      	movs	r2, #2
 80048a6:	2112      	movs	r1, #18
 80048a8:	f7ff ff78 	bl	800479c <std>
 80048ac:	2301      	movs	r3, #1
 80048ae:	61a3      	str	r3, [r4, #24]
 80048b0:	e7d2      	b.n	8004858 <__sinit+0xc>
 80048b2:	bf00      	nop
 80048b4:	08005480 	.word	0x08005480
 80048b8:	080047e5 	.word	0x080047e5

080048bc <__sfp>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	4607      	mov	r7, r0
 80048c0:	f7ff ffac 	bl	800481c <__sfp_lock_acquire>
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <__sfp+0x84>)
 80048c6:	681e      	ldr	r6, [r3, #0]
 80048c8:	69b3      	ldr	r3, [r6, #24]
 80048ca:	b913      	cbnz	r3, 80048d2 <__sfp+0x16>
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7ff ffbd 	bl	800484c <__sinit>
 80048d2:	3648      	adds	r6, #72	; 0x48
 80048d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048d8:	3b01      	subs	r3, #1
 80048da:	d503      	bpl.n	80048e4 <__sfp+0x28>
 80048dc:	6833      	ldr	r3, [r6, #0]
 80048de:	b30b      	cbz	r3, 8004924 <__sfp+0x68>
 80048e0:	6836      	ldr	r6, [r6, #0]
 80048e2:	e7f7      	b.n	80048d4 <__sfp+0x18>
 80048e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048e8:	b9d5      	cbnz	r5, 8004920 <__sfp+0x64>
 80048ea:	4b16      	ldr	r3, [pc, #88]	; (8004944 <__sfp+0x88>)
 80048ec:	60e3      	str	r3, [r4, #12]
 80048ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048f2:	6665      	str	r5, [r4, #100]	; 0x64
 80048f4:	f000 f847 	bl	8004986 <__retarget_lock_init_recursive>
 80048f8:	f7ff ff96 	bl	8004828 <__sfp_lock_release>
 80048fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004904:	6025      	str	r5, [r4, #0]
 8004906:	61a5      	str	r5, [r4, #24]
 8004908:	2208      	movs	r2, #8
 800490a:	4629      	mov	r1, r5
 800490c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004910:	f7ff fd2c 	bl	800436c <memset>
 8004914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800491c:	4620      	mov	r0, r4
 800491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004920:	3468      	adds	r4, #104	; 0x68
 8004922:	e7d9      	b.n	80048d8 <__sfp+0x1c>
 8004924:	2104      	movs	r1, #4
 8004926:	4638      	mov	r0, r7
 8004928:	f7ff ff62 	bl	80047f0 <__sfmoreglue>
 800492c:	4604      	mov	r4, r0
 800492e:	6030      	str	r0, [r6, #0]
 8004930:	2800      	cmp	r0, #0
 8004932:	d1d5      	bne.n	80048e0 <__sfp+0x24>
 8004934:	f7ff ff78 	bl	8004828 <__sfp_lock_release>
 8004938:	230c      	movs	r3, #12
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	e7ee      	b.n	800491c <__sfp+0x60>
 800493e:	bf00      	nop
 8004940:	08005480 	.word	0x08005480
 8004944:	ffff0001 	.word	0xffff0001

08004948 <_fwalk_reent>:
 8004948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800494c:	4606      	mov	r6, r0
 800494e:	4688      	mov	r8, r1
 8004950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004954:	2700      	movs	r7, #0
 8004956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800495a:	f1b9 0901 	subs.w	r9, r9, #1
 800495e:	d505      	bpl.n	800496c <_fwalk_reent+0x24>
 8004960:	6824      	ldr	r4, [r4, #0]
 8004962:	2c00      	cmp	r4, #0
 8004964:	d1f7      	bne.n	8004956 <_fwalk_reent+0xe>
 8004966:	4638      	mov	r0, r7
 8004968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800496c:	89ab      	ldrh	r3, [r5, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d907      	bls.n	8004982 <_fwalk_reent+0x3a>
 8004972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004976:	3301      	adds	r3, #1
 8004978:	d003      	beq.n	8004982 <_fwalk_reent+0x3a>
 800497a:	4629      	mov	r1, r5
 800497c:	4630      	mov	r0, r6
 800497e:	47c0      	blx	r8
 8004980:	4307      	orrs	r7, r0
 8004982:	3568      	adds	r5, #104	; 0x68
 8004984:	e7e9      	b.n	800495a <_fwalk_reent+0x12>

08004986 <__retarget_lock_init_recursive>:
 8004986:	4770      	bx	lr

08004988 <__retarget_lock_acquire_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_release_recursive>:
 800498a:	4770      	bx	lr

0800498c <__swhatbuf_r>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	460e      	mov	r6, r1
 8004990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004994:	2900      	cmp	r1, #0
 8004996:	b096      	sub	sp, #88	; 0x58
 8004998:	4614      	mov	r4, r2
 800499a:	461d      	mov	r5, r3
 800499c:	da07      	bge.n	80049ae <__swhatbuf_r+0x22>
 800499e:	2300      	movs	r3, #0
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	89b3      	ldrh	r3, [r6, #12]
 80049a4:	061a      	lsls	r2, r3, #24
 80049a6:	d410      	bmi.n	80049ca <__swhatbuf_r+0x3e>
 80049a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ac:	e00e      	b.n	80049cc <__swhatbuf_r+0x40>
 80049ae:	466a      	mov	r2, sp
 80049b0:	f000 fc5e 	bl	8005270 <_fstat_r>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	dbf2      	blt.n	800499e <__swhatbuf_r+0x12>
 80049b8:	9a01      	ldr	r2, [sp, #4]
 80049ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049c2:	425a      	negs	r2, r3
 80049c4:	415a      	adcs	r2, r3
 80049c6:	602a      	str	r2, [r5, #0]
 80049c8:	e7ee      	b.n	80049a8 <__swhatbuf_r+0x1c>
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	2000      	movs	r0, #0
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	b016      	add	sp, #88	; 0x58
 80049d2:	bd70      	pop	{r4, r5, r6, pc}

080049d4 <__smakebuf_r>:
 80049d4:	898b      	ldrh	r3, [r1, #12]
 80049d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049d8:	079d      	lsls	r5, r3, #30
 80049da:	4606      	mov	r6, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	d507      	bpl.n	80049f0 <__smakebuf_r+0x1c>
 80049e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	2301      	movs	r3, #1
 80049ea:	6163      	str	r3, [r4, #20]
 80049ec:	b002      	add	sp, #8
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	ab01      	add	r3, sp, #4
 80049f2:	466a      	mov	r2, sp
 80049f4:	f7ff ffca 	bl	800498c <__swhatbuf_r>
 80049f8:	9900      	ldr	r1, [sp, #0]
 80049fa:	4605      	mov	r5, r0
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f879 	bl	8004af4 <_malloc_r>
 8004a02:	b948      	cbnz	r0, 8004a18 <__smakebuf_r+0x44>
 8004a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a08:	059a      	lsls	r2, r3, #22
 8004a0a:	d4ef      	bmi.n	80049ec <__smakebuf_r+0x18>
 8004a0c:	f023 0303 	bic.w	r3, r3, #3
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	81a3      	strh	r3, [r4, #12]
 8004a16:	e7e3      	b.n	80049e0 <__smakebuf_r+0xc>
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <__smakebuf_r+0x7c>)
 8004a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	6020      	str	r0, [r4, #0]
 8004a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a24:	81a3      	strh	r3, [r4, #12]
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	6163      	str	r3, [r4, #20]
 8004a2a:	9b01      	ldr	r3, [sp, #4]
 8004a2c:	6120      	str	r0, [r4, #16]
 8004a2e:	b15b      	cbz	r3, 8004a48 <__smakebuf_r+0x74>
 8004a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 fc2d 	bl	8005294 <_isatty_r>
 8004a3a:	b128      	cbz	r0, 8004a48 <__smakebuf_r+0x74>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	89a0      	ldrh	r0, [r4, #12]
 8004a4a:	4305      	orrs	r5, r0
 8004a4c:	81a5      	strh	r5, [r4, #12]
 8004a4e:	e7cd      	b.n	80049ec <__smakebuf_r+0x18>
 8004a50:	080047e5 	.word	0x080047e5

08004a54 <_free_r>:
 8004a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d048      	beq.n	8004aec <_free_r+0x98>
 8004a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a5e:	9001      	str	r0, [sp, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f1a1 0404 	sub.w	r4, r1, #4
 8004a66:	bfb8      	it	lt
 8004a68:	18e4      	addlt	r4, r4, r3
 8004a6a:	f000 fc35 	bl	80052d8 <__malloc_lock>
 8004a6e:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <_free_r+0x9c>)
 8004a70:	9801      	ldr	r0, [sp, #4]
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	4615      	mov	r5, r2
 8004a76:	b933      	cbnz	r3, 8004a86 <_free_r+0x32>
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	6014      	str	r4, [r2, #0]
 8004a7c:	b003      	add	sp, #12
 8004a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a82:	f000 bc2f 	b.w	80052e4 <__malloc_unlock>
 8004a86:	42a3      	cmp	r3, r4
 8004a88:	d90b      	bls.n	8004aa2 <_free_r+0x4e>
 8004a8a:	6821      	ldr	r1, [r4, #0]
 8004a8c:	1862      	adds	r2, r4, r1
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	bf04      	itt	eq
 8004a92:	681a      	ldreq	r2, [r3, #0]
 8004a94:	685b      	ldreq	r3, [r3, #4]
 8004a96:	6063      	str	r3, [r4, #4]
 8004a98:	bf04      	itt	eq
 8004a9a:	1852      	addeq	r2, r2, r1
 8004a9c:	6022      	streq	r2, [r4, #0]
 8004a9e:	602c      	str	r4, [r5, #0]
 8004aa0:	e7ec      	b.n	8004a7c <_free_r+0x28>
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b10b      	cbz	r3, 8004aac <_free_r+0x58>
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	d9fa      	bls.n	8004aa2 <_free_r+0x4e>
 8004aac:	6811      	ldr	r1, [r2, #0]
 8004aae:	1855      	adds	r5, r2, r1
 8004ab0:	42a5      	cmp	r5, r4
 8004ab2:	d10b      	bne.n	8004acc <_free_r+0x78>
 8004ab4:	6824      	ldr	r4, [r4, #0]
 8004ab6:	4421      	add	r1, r4
 8004ab8:	1854      	adds	r4, r2, r1
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	6011      	str	r1, [r2, #0]
 8004abe:	d1dd      	bne.n	8004a7c <_free_r+0x28>
 8004ac0:	681c      	ldr	r4, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	6053      	str	r3, [r2, #4]
 8004ac6:	4421      	add	r1, r4
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	e7d7      	b.n	8004a7c <_free_r+0x28>
 8004acc:	d902      	bls.n	8004ad4 <_free_r+0x80>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	6003      	str	r3, [r0, #0]
 8004ad2:	e7d3      	b.n	8004a7c <_free_r+0x28>
 8004ad4:	6825      	ldr	r5, [r4, #0]
 8004ad6:	1961      	adds	r1, r4, r5
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	bf04      	itt	eq
 8004adc:	6819      	ldreq	r1, [r3, #0]
 8004ade:	685b      	ldreq	r3, [r3, #4]
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	bf04      	itt	eq
 8004ae4:	1949      	addeq	r1, r1, r5
 8004ae6:	6021      	streq	r1, [r4, #0]
 8004ae8:	6054      	str	r4, [r2, #4]
 8004aea:	e7c7      	b.n	8004a7c <_free_r+0x28>
 8004aec:	b003      	add	sp, #12
 8004aee:	bd30      	pop	{r4, r5, pc}
 8004af0:	20000094 	.word	0x20000094

08004af4 <_malloc_r>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	1ccd      	adds	r5, r1, #3
 8004af8:	f025 0503 	bic.w	r5, r5, #3
 8004afc:	3508      	adds	r5, #8
 8004afe:	2d0c      	cmp	r5, #12
 8004b00:	bf38      	it	cc
 8004b02:	250c      	movcc	r5, #12
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	4606      	mov	r6, r0
 8004b08:	db01      	blt.n	8004b0e <_malloc_r+0x1a>
 8004b0a:	42a9      	cmp	r1, r5
 8004b0c:	d903      	bls.n	8004b16 <_malloc_r+0x22>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	2000      	movs	r0, #0
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b16:	f000 fbdf 	bl	80052d8 <__malloc_lock>
 8004b1a:	4921      	ldr	r1, [pc, #132]	; (8004ba0 <_malloc_r+0xac>)
 8004b1c:	680a      	ldr	r2, [r1, #0]
 8004b1e:	4614      	mov	r4, r2
 8004b20:	b99c      	cbnz	r4, 8004b4a <_malloc_r+0x56>
 8004b22:	4f20      	ldr	r7, [pc, #128]	; (8004ba4 <_malloc_r+0xb0>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	b923      	cbnz	r3, 8004b32 <_malloc_r+0x3e>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f000 fb2a 	bl	8005184 <_sbrk_r>
 8004b30:	6038      	str	r0, [r7, #0]
 8004b32:	4629      	mov	r1, r5
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 fb25 	bl	8005184 <_sbrk_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d123      	bne.n	8004b86 <_malloc_r+0x92>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	6033      	str	r3, [r6, #0]
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 fbce 	bl	80052e4 <__malloc_unlock>
 8004b48:	e7e3      	b.n	8004b12 <_malloc_r+0x1e>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	1b5b      	subs	r3, r3, r5
 8004b4e:	d417      	bmi.n	8004b80 <_malloc_r+0x8c>
 8004b50:	2b0b      	cmp	r3, #11
 8004b52:	d903      	bls.n	8004b5c <_malloc_r+0x68>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	441c      	add	r4, r3
 8004b58:	6025      	str	r5, [r4, #0]
 8004b5a:	e004      	b.n	8004b66 <_malloc_r+0x72>
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	42a2      	cmp	r2, r4
 8004b60:	bf0c      	ite	eq
 8004b62:	600b      	streq	r3, [r1, #0]
 8004b64:	6053      	strne	r3, [r2, #4]
 8004b66:	4630      	mov	r0, r6
 8004b68:	f000 fbbc 	bl	80052e4 <__malloc_unlock>
 8004b6c:	f104 000b 	add.w	r0, r4, #11
 8004b70:	1d23      	adds	r3, r4, #4
 8004b72:	f020 0007 	bic.w	r0, r0, #7
 8004b76:	1ac2      	subs	r2, r0, r3
 8004b78:	d0cc      	beq.n	8004b14 <_malloc_r+0x20>
 8004b7a:	1a1b      	subs	r3, r3, r0
 8004b7c:	50a3      	str	r3, [r4, r2]
 8004b7e:	e7c9      	b.n	8004b14 <_malloc_r+0x20>
 8004b80:	4622      	mov	r2, r4
 8004b82:	6864      	ldr	r4, [r4, #4]
 8004b84:	e7cc      	b.n	8004b20 <_malloc_r+0x2c>
 8004b86:	1cc4      	adds	r4, r0, #3
 8004b88:	f024 0403 	bic.w	r4, r4, #3
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d0e3      	beq.n	8004b58 <_malloc_r+0x64>
 8004b90:	1a21      	subs	r1, r4, r0
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 faf6 	bl	8005184 <_sbrk_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d1dd      	bne.n	8004b58 <_malloc_r+0x64>
 8004b9c:	e7cf      	b.n	8004b3e <_malloc_r+0x4a>
 8004b9e:	bf00      	nop
 8004ba0:	20000094 	.word	0x20000094
 8004ba4:	20000098 	.word	0x20000098

08004ba8 <__sfputc_r>:
 8004ba8:	6893      	ldr	r3, [r2, #8]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	b410      	push	{r4}
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	da08      	bge.n	8004bc6 <__sfputc_r+0x1e>
 8004bb4:	6994      	ldr	r4, [r2, #24]
 8004bb6:	42a3      	cmp	r3, r4
 8004bb8:	db01      	blt.n	8004bbe <__sfputc_r+0x16>
 8004bba:	290a      	cmp	r1, #10
 8004bbc:	d103      	bne.n	8004bc6 <__sfputc_r+0x1e>
 8004bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc2:	f7ff bc69 	b.w	8004498 <__swbuf_r>
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	1c58      	adds	r0, r3, #1
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	7019      	strb	r1, [r3, #0]
 8004bce:	4608      	mov	r0, r1
 8004bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <__sfputs_r>:
 8004bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd8:	4606      	mov	r6, r0
 8004bda:	460f      	mov	r7, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	18d5      	adds	r5, r2, r3
 8004be0:	42ac      	cmp	r4, r5
 8004be2:	d101      	bne.n	8004be8 <__sfputs_r+0x12>
 8004be4:	2000      	movs	r0, #0
 8004be6:	e007      	b.n	8004bf8 <__sfputs_r+0x22>
 8004be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bec:	463a      	mov	r2, r7
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f7ff ffda 	bl	8004ba8 <__sfputc_r>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d1f3      	bne.n	8004be0 <__sfputs_r+0xa>
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bfc <_vfiprintf_r>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	460d      	mov	r5, r1
 8004c02:	b09d      	sub	sp, #116	; 0x74
 8004c04:	4614      	mov	r4, r2
 8004c06:	4698      	mov	r8, r3
 8004c08:	4606      	mov	r6, r0
 8004c0a:	b118      	cbz	r0, 8004c14 <_vfiprintf_r+0x18>
 8004c0c:	6983      	ldr	r3, [r0, #24]
 8004c0e:	b90b      	cbnz	r3, 8004c14 <_vfiprintf_r+0x18>
 8004c10:	f7ff fe1c 	bl	800484c <__sinit>
 8004c14:	4b89      	ldr	r3, [pc, #548]	; (8004e3c <_vfiprintf_r+0x240>)
 8004c16:	429d      	cmp	r5, r3
 8004c18:	d11b      	bne.n	8004c52 <_vfiprintf_r+0x56>
 8004c1a:	6875      	ldr	r5, [r6, #4]
 8004c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c1e:	07d9      	lsls	r1, r3, #31
 8004c20:	d405      	bmi.n	8004c2e <_vfiprintf_r+0x32>
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	059a      	lsls	r2, r3, #22
 8004c26:	d402      	bmi.n	8004c2e <_vfiprintf_r+0x32>
 8004c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2a:	f7ff fead 	bl	8004988 <__retarget_lock_acquire_recursive>
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	071b      	lsls	r3, r3, #28
 8004c32:	d501      	bpl.n	8004c38 <_vfiprintf_r+0x3c>
 8004c34:	692b      	ldr	r3, [r5, #16]
 8004c36:	b9eb      	cbnz	r3, 8004c74 <_vfiprintf_r+0x78>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7ff fc7e 	bl	800453c <__swsetup_r>
 8004c40:	b1c0      	cbz	r0, 8004c74 <_vfiprintf_r+0x78>
 8004c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c44:	07dc      	lsls	r4, r3, #31
 8004c46:	d50e      	bpl.n	8004c66 <_vfiprintf_r+0x6a>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	b01d      	add	sp, #116	; 0x74
 8004c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c52:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <_vfiprintf_r+0x244>)
 8004c54:	429d      	cmp	r5, r3
 8004c56:	d101      	bne.n	8004c5c <_vfiprintf_r+0x60>
 8004c58:	68b5      	ldr	r5, [r6, #8]
 8004c5a:	e7df      	b.n	8004c1c <_vfiprintf_r+0x20>
 8004c5c:	4b79      	ldr	r3, [pc, #484]	; (8004e44 <_vfiprintf_r+0x248>)
 8004c5e:	429d      	cmp	r5, r3
 8004c60:	bf08      	it	eq
 8004c62:	68f5      	ldreq	r5, [r6, #12]
 8004c64:	e7da      	b.n	8004c1c <_vfiprintf_r+0x20>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	0598      	lsls	r0, r3, #22
 8004c6a:	d4ed      	bmi.n	8004c48 <_vfiprintf_r+0x4c>
 8004c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c6e:	f7ff fe8c 	bl	800498a <__retarget_lock_release_recursive>
 8004c72:	e7e9      	b.n	8004c48 <_vfiprintf_r+0x4c>
 8004c74:	2300      	movs	r3, #0
 8004c76:	9309      	str	r3, [sp, #36]	; 0x24
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c82:	2330      	movs	r3, #48	; 0x30
 8004c84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e48 <_vfiprintf_r+0x24c>
 8004c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c8c:	f04f 0901 	mov.w	r9, #1
 8004c90:	4623      	mov	r3, r4
 8004c92:	469a      	mov	sl, r3
 8004c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c98:	b10a      	cbz	r2, 8004c9e <_vfiprintf_r+0xa2>
 8004c9a:	2a25      	cmp	r2, #37	; 0x25
 8004c9c:	d1f9      	bne.n	8004c92 <_vfiprintf_r+0x96>
 8004c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8004ca2:	d00b      	beq.n	8004cbc <_vfiprintf_r+0xc0>
 8004ca4:	465b      	mov	r3, fp
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7ff ff93 	bl	8004bd6 <__sfputs_r>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f000 80aa 	beq.w	8004e0a <_vfiprintf_r+0x20e>
 8004cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cb8:	445a      	add	r2, fp
 8004cba:	9209      	str	r2, [sp, #36]	; 0x24
 8004cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80a2 	beq.w	8004e0a <_vfiprintf_r+0x20e>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd0:	f10a 0a01 	add.w	sl, sl, #1
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	9307      	str	r3, [sp, #28]
 8004cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8004cde:	4654      	mov	r4, sl
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce6:	4858      	ldr	r0, [pc, #352]	; (8004e48 <_vfiprintf_r+0x24c>)
 8004ce8:	f7fb fa72 	bl	80001d0 <memchr>
 8004cec:	9a04      	ldr	r2, [sp, #16]
 8004cee:	b9d8      	cbnz	r0, 8004d28 <_vfiprintf_r+0x12c>
 8004cf0:	06d1      	lsls	r1, r2, #27
 8004cf2:	bf44      	itt	mi
 8004cf4:	2320      	movmi	r3, #32
 8004cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cfa:	0713      	lsls	r3, r2, #28
 8004cfc:	bf44      	itt	mi
 8004cfe:	232b      	movmi	r3, #43	; 0x2b
 8004d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d04:	f89a 3000 	ldrb.w	r3, [sl]
 8004d08:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0a:	d015      	beq.n	8004d38 <_vfiprintf_r+0x13c>
 8004d0c:	9a07      	ldr	r2, [sp, #28]
 8004d0e:	4654      	mov	r4, sl
 8004d10:	2000      	movs	r0, #0
 8004d12:	f04f 0c0a 	mov.w	ip, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d1c:	3b30      	subs	r3, #48	; 0x30
 8004d1e:	2b09      	cmp	r3, #9
 8004d20:	d94e      	bls.n	8004dc0 <_vfiprintf_r+0x1c4>
 8004d22:	b1b0      	cbz	r0, 8004d52 <_vfiprintf_r+0x156>
 8004d24:	9207      	str	r2, [sp, #28]
 8004d26:	e014      	b.n	8004d52 <_vfiprintf_r+0x156>
 8004d28:	eba0 0308 	sub.w	r3, r0, r8
 8004d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	9304      	str	r3, [sp, #16]
 8004d34:	46a2      	mov	sl, r4
 8004d36:	e7d2      	b.n	8004cde <_vfiprintf_r+0xe2>
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	1d19      	adds	r1, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	9103      	str	r1, [sp, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bfbb      	ittet	lt
 8004d44:	425b      	neglt	r3, r3
 8004d46:	f042 0202 	orrlt.w	r2, r2, #2
 8004d4a:	9307      	strge	r3, [sp, #28]
 8004d4c:	9307      	strlt	r3, [sp, #28]
 8004d4e:	bfb8      	it	lt
 8004d50:	9204      	strlt	r2, [sp, #16]
 8004d52:	7823      	ldrb	r3, [r4, #0]
 8004d54:	2b2e      	cmp	r3, #46	; 0x2e
 8004d56:	d10c      	bne.n	8004d72 <_vfiprintf_r+0x176>
 8004d58:	7863      	ldrb	r3, [r4, #1]
 8004d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d5c:	d135      	bne.n	8004dca <_vfiprintf_r+0x1ce>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	9203      	str	r2, [sp, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfb8      	it	lt
 8004d6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d6e:	3402      	adds	r4, #2
 8004d70:	9305      	str	r3, [sp, #20]
 8004d72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e58 <_vfiprintf_r+0x25c>
 8004d76:	7821      	ldrb	r1, [r4, #0]
 8004d78:	2203      	movs	r2, #3
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	f7fb fa28 	bl	80001d0 <memchr>
 8004d80:	b140      	cbz	r0, 8004d94 <_vfiprintf_r+0x198>
 8004d82:	2340      	movs	r3, #64	; 0x40
 8004d84:	eba0 000a 	sub.w	r0, r0, sl
 8004d88:	fa03 f000 	lsl.w	r0, r3, r0
 8004d8c:	9b04      	ldr	r3, [sp, #16]
 8004d8e:	4303      	orrs	r3, r0
 8004d90:	3401      	adds	r4, #1
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d98:	482c      	ldr	r0, [pc, #176]	; (8004e4c <_vfiprintf_r+0x250>)
 8004d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d9e:	2206      	movs	r2, #6
 8004da0:	f7fb fa16 	bl	80001d0 <memchr>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d03f      	beq.n	8004e28 <_vfiprintf_r+0x22c>
 8004da8:	4b29      	ldr	r3, [pc, #164]	; (8004e50 <_vfiprintf_r+0x254>)
 8004daa:	bb1b      	cbnz	r3, 8004df4 <_vfiprintf_r+0x1f8>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	3307      	adds	r3, #7
 8004db0:	f023 0307 	bic.w	r3, r3, #7
 8004db4:	3308      	adds	r3, #8
 8004db6:	9303      	str	r3, [sp, #12]
 8004db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dba:	443b      	add	r3, r7
 8004dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dbe:	e767      	b.n	8004c90 <_vfiprintf_r+0x94>
 8004dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	e7a5      	b.n	8004d16 <_vfiprintf_r+0x11a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	3401      	adds	r4, #1
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f04f 0c0a 	mov.w	ip, #10
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ddc:	3a30      	subs	r2, #48	; 0x30
 8004dde:	2a09      	cmp	r2, #9
 8004de0:	d903      	bls.n	8004dea <_vfiprintf_r+0x1ee>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0c5      	beq.n	8004d72 <_vfiprintf_r+0x176>
 8004de6:	9105      	str	r1, [sp, #20]
 8004de8:	e7c3      	b.n	8004d72 <_vfiprintf_r+0x176>
 8004dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dee:	4604      	mov	r4, r0
 8004df0:	2301      	movs	r3, #1
 8004df2:	e7f0      	b.n	8004dd6 <_vfiprintf_r+0x1da>
 8004df4:	ab03      	add	r3, sp, #12
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	462a      	mov	r2, r5
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <_vfiprintf_r+0x258>)
 8004dfc:	a904      	add	r1, sp, #16
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f3af 8000 	nop.w
 8004e04:	4607      	mov	r7, r0
 8004e06:	1c78      	adds	r0, r7, #1
 8004e08:	d1d6      	bne.n	8004db8 <_vfiprintf_r+0x1bc>
 8004e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e0c:	07d9      	lsls	r1, r3, #31
 8004e0e:	d405      	bmi.n	8004e1c <_vfiprintf_r+0x220>
 8004e10:	89ab      	ldrh	r3, [r5, #12]
 8004e12:	059a      	lsls	r2, r3, #22
 8004e14:	d402      	bmi.n	8004e1c <_vfiprintf_r+0x220>
 8004e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e18:	f7ff fdb7 	bl	800498a <__retarget_lock_release_recursive>
 8004e1c:	89ab      	ldrh	r3, [r5, #12]
 8004e1e:	065b      	lsls	r3, r3, #25
 8004e20:	f53f af12 	bmi.w	8004c48 <_vfiprintf_r+0x4c>
 8004e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e26:	e711      	b.n	8004c4c <_vfiprintf_r+0x50>
 8004e28:	ab03      	add	r3, sp, #12
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <_vfiprintf_r+0x258>)
 8004e30:	a904      	add	r1, sp, #16
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f880 	bl	8004f38 <_printf_i>
 8004e38:	e7e4      	b.n	8004e04 <_vfiprintf_r+0x208>
 8004e3a:	bf00      	nop
 8004e3c:	080054a4 	.word	0x080054a4
 8004e40:	080054c4 	.word	0x080054c4
 8004e44:	08005484 	.word	0x08005484
 8004e48:	080054e4 	.word	0x080054e4
 8004e4c:	080054ee 	.word	0x080054ee
 8004e50:	00000000 	.word	0x00000000
 8004e54:	08004bd7 	.word	0x08004bd7
 8004e58:	080054ea 	.word	0x080054ea

08004e5c <_printf_common>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	4616      	mov	r6, r2
 8004e62:	4699      	mov	r9, r3
 8004e64:	688a      	ldr	r2, [r1, #8]
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	bfb8      	it	lt
 8004e70:	4613      	movlt	r3, r2
 8004e72:	6033      	str	r3, [r6, #0]
 8004e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e78:	4607      	mov	r7, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	b10a      	cbz	r2, 8004e82 <_printf_common+0x26>
 8004e7e:	3301      	adds	r3, #1
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	0699      	lsls	r1, r3, #26
 8004e86:	bf42      	ittt	mi
 8004e88:	6833      	ldrmi	r3, [r6, #0]
 8004e8a:	3302      	addmi	r3, #2
 8004e8c:	6033      	strmi	r3, [r6, #0]
 8004e8e:	6825      	ldr	r5, [r4, #0]
 8004e90:	f015 0506 	ands.w	r5, r5, #6
 8004e94:	d106      	bne.n	8004ea4 <_printf_common+0x48>
 8004e96:	f104 0a19 	add.w	sl, r4, #25
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	6832      	ldr	r2, [r6, #0]
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dc26      	bgt.n	8004ef2 <_printf_common+0x96>
 8004ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea8:	1e13      	subs	r3, r2, #0
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	bf18      	it	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	0692      	lsls	r2, r2, #26
 8004eb2:	d42b      	bmi.n	8004f0c <_printf_common+0xb0>
 8004eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb8:	4649      	mov	r1, r9
 8004eba:	4638      	mov	r0, r7
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d01e      	beq.n	8004f00 <_printf_common+0xa4>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	68e5      	ldr	r5, [r4, #12]
 8004ec6:	6832      	ldr	r2, [r6, #0]
 8004ec8:	f003 0306 	and.w	r3, r3, #6
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	bf08      	it	eq
 8004ed0:	1aad      	subeq	r5, r5, r2
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	bf0c      	ite	eq
 8004ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004edc:	2500      	movne	r5, #0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	bfc4      	itt	gt
 8004ee2:	1a9b      	subgt	r3, r3, r2
 8004ee4:	18ed      	addgt	r5, r5, r3
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	341a      	adds	r4, #26
 8004eea:	42b5      	cmp	r5, r6
 8004eec:	d11a      	bne.n	8004f24 <_printf_common+0xc8>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e008      	b.n	8004f04 <_printf_common+0xa8>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4652      	mov	r2, sl
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4638      	mov	r0, r7
 8004efa:	47c0      	blx	r8
 8004efc:	3001      	adds	r0, #1
 8004efe:	d103      	bne.n	8004f08 <_printf_common+0xac>
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f08:	3501      	adds	r5, #1
 8004f0a:	e7c6      	b.n	8004e9a <_printf_common+0x3e>
 8004f0c:	18e1      	adds	r1, r4, r3
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	2030      	movs	r0, #48	; 0x30
 8004f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f16:	4422      	add	r2, r4
 8004f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f20:	3302      	adds	r3, #2
 8004f22:	e7c7      	b.n	8004eb4 <_printf_common+0x58>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4622      	mov	r2, r4
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d0e6      	beq.n	8004f00 <_printf_common+0xa4>
 8004f32:	3601      	adds	r6, #1
 8004f34:	e7d9      	b.n	8004eea <_printf_common+0x8e>
	...

08004f38 <_printf_i>:
 8004f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	4691      	mov	r9, r2
 8004f40:	7e27      	ldrb	r7, [r4, #24]
 8004f42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f44:	2f78      	cmp	r7, #120	; 0x78
 8004f46:	4680      	mov	r8, r0
 8004f48:	469a      	mov	sl, r3
 8004f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4e:	d807      	bhi.n	8004f60 <_printf_i+0x28>
 8004f50:	2f62      	cmp	r7, #98	; 0x62
 8004f52:	d80a      	bhi.n	8004f6a <_printf_i+0x32>
 8004f54:	2f00      	cmp	r7, #0
 8004f56:	f000 80d8 	beq.w	800510a <_printf_i+0x1d2>
 8004f5a:	2f58      	cmp	r7, #88	; 0x58
 8004f5c:	f000 80a3 	beq.w	80050a6 <_printf_i+0x16e>
 8004f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f68:	e03a      	b.n	8004fe0 <_printf_i+0xa8>
 8004f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f6e:	2b15      	cmp	r3, #21
 8004f70:	d8f6      	bhi.n	8004f60 <_printf_i+0x28>
 8004f72:	a001      	add	r0, pc, #4	; (adr r0, 8004f78 <_printf_i+0x40>)
 8004f74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f78:	08004fd1 	.word	0x08004fd1
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004f61 	.word	0x08004f61
 8004f84:	08004f61 	.word	0x08004f61
 8004f88:	08004f61 	.word	0x08004f61
 8004f8c:	08004f61 	.word	0x08004f61
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004f61 	.word	0x08004f61
 8004f98:	08004f61 	.word	0x08004f61
 8004f9c:	08004f61 	.word	0x08004f61
 8004fa0:	08004f61 	.word	0x08004f61
 8004fa4:	080050f1 	.word	0x080050f1
 8004fa8:	08005015 	.word	0x08005015
 8004fac:	080050d3 	.word	0x080050d3
 8004fb0:	08004f61 	.word	0x08004f61
 8004fb4:	08004f61 	.word	0x08004f61
 8004fb8:	08005113 	.word	0x08005113
 8004fbc:	08004f61 	.word	0x08004f61
 8004fc0:	08005015 	.word	0x08005015
 8004fc4:	08004f61 	.word	0x08004f61
 8004fc8:	08004f61 	.word	0x08004f61
 8004fcc:	080050db 	.word	0x080050db
 8004fd0:	680b      	ldr	r3, [r1, #0]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	600a      	str	r2, [r1, #0]
 8004fd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0a3      	b.n	800512c <_printf_i+0x1f4>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	6808      	ldr	r0, [r1, #0]
 8004fe8:	062e      	lsls	r6, r5, #24
 8004fea:	f100 0304 	add.w	r3, r0, #4
 8004fee:	d50a      	bpl.n	8005006 <_printf_i+0xce>
 8004ff0:	6805      	ldr	r5, [r0, #0]
 8004ff2:	600b      	str	r3, [r1, #0]
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	da03      	bge.n	8005000 <_printf_i+0xc8>
 8004ff8:	232d      	movs	r3, #45	; 0x2d
 8004ffa:	426d      	negs	r5, r5
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005000:	485e      	ldr	r0, [pc, #376]	; (800517c <_printf_i+0x244>)
 8005002:	230a      	movs	r3, #10
 8005004:	e019      	b.n	800503a <_printf_i+0x102>
 8005006:	f015 0f40 	tst.w	r5, #64	; 0x40
 800500a:	6805      	ldr	r5, [r0, #0]
 800500c:	600b      	str	r3, [r1, #0]
 800500e:	bf18      	it	ne
 8005010:	b22d      	sxthne	r5, r5
 8005012:	e7ef      	b.n	8004ff4 <_printf_i+0xbc>
 8005014:	680b      	ldr	r3, [r1, #0]
 8005016:	6825      	ldr	r5, [r4, #0]
 8005018:	1d18      	adds	r0, r3, #4
 800501a:	6008      	str	r0, [r1, #0]
 800501c:	0628      	lsls	r0, r5, #24
 800501e:	d501      	bpl.n	8005024 <_printf_i+0xec>
 8005020:	681d      	ldr	r5, [r3, #0]
 8005022:	e002      	b.n	800502a <_printf_i+0xf2>
 8005024:	0669      	lsls	r1, r5, #25
 8005026:	d5fb      	bpl.n	8005020 <_printf_i+0xe8>
 8005028:	881d      	ldrh	r5, [r3, #0]
 800502a:	4854      	ldr	r0, [pc, #336]	; (800517c <_printf_i+0x244>)
 800502c:	2f6f      	cmp	r7, #111	; 0x6f
 800502e:	bf0c      	ite	eq
 8005030:	2308      	moveq	r3, #8
 8005032:	230a      	movne	r3, #10
 8005034:	2100      	movs	r1, #0
 8005036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800503a:	6866      	ldr	r6, [r4, #4]
 800503c:	60a6      	str	r6, [r4, #8]
 800503e:	2e00      	cmp	r6, #0
 8005040:	bfa2      	ittt	ge
 8005042:	6821      	ldrge	r1, [r4, #0]
 8005044:	f021 0104 	bicge.w	r1, r1, #4
 8005048:	6021      	strge	r1, [r4, #0]
 800504a:	b90d      	cbnz	r5, 8005050 <_printf_i+0x118>
 800504c:	2e00      	cmp	r6, #0
 800504e:	d04d      	beq.n	80050ec <_printf_i+0x1b4>
 8005050:	4616      	mov	r6, r2
 8005052:	fbb5 f1f3 	udiv	r1, r5, r3
 8005056:	fb03 5711 	mls	r7, r3, r1, r5
 800505a:	5dc7      	ldrb	r7, [r0, r7]
 800505c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005060:	462f      	mov	r7, r5
 8005062:	42bb      	cmp	r3, r7
 8005064:	460d      	mov	r5, r1
 8005066:	d9f4      	bls.n	8005052 <_printf_i+0x11a>
 8005068:	2b08      	cmp	r3, #8
 800506a:	d10b      	bne.n	8005084 <_printf_i+0x14c>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	07df      	lsls	r7, r3, #31
 8005070:	d508      	bpl.n	8005084 <_printf_i+0x14c>
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	6861      	ldr	r1, [r4, #4]
 8005076:	4299      	cmp	r1, r3
 8005078:	bfde      	ittt	le
 800507a:	2330      	movle	r3, #48	; 0x30
 800507c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005084:	1b92      	subs	r2, r2, r6
 8005086:	6122      	str	r2, [r4, #16]
 8005088:	f8cd a000 	str.w	sl, [sp]
 800508c:	464b      	mov	r3, r9
 800508e:	aa03      	add	r2, sp, #12
 8005090:	4621      	mov	r1, r4
 8005092:	4640      	mov	r0, r8
 8005094:	f7ff fee2 	bl	8004e5c <_printf_common>
 8005098:	3001      	adds	r0, #1
 800509a:	d14c      	bne.n	8005136 <_printf_i+0x1fe>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	b004      	add	sp, #16
 80050a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a6:	4835      	ldr	r0, [pc, #212]	; (800517c <_printf_i+0x244>)
 80050a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	680e      	ldr	r6, [r1, #0]
 80050b0:	061f      	lsls	r7, r3, #24
 80050b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80050b6:	600e      	str	r6, [r1, #0]
 80050b8:	d514      	bpl.n	80050e4 <_printf_i+0x1ac>
 80050ba:	07d9      	lsls	r1, r3, #31
 80050bc:	bf44      	itt	mi
 80050be:	f043 0320 	orrmi.w	r3, r3, #32
 80050c2:	6023      	strmi	r3, [r4, #0]
 80050c4:	b91d      	cbnz	r5, 80050ce <_printf_i+0x196>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	f023 0320 	bic.w	r3, r3, #32
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	2310      	movs	r3, #16
 80050d0:	e7b0      	b.n	8005034 <_printf_i+0xfc>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f043 0320 	orr.w	r3, r3, #32
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	2378      	movs	r3, #120	; 0x78
 80050dc:	4828      	ldr	r0, [pc, #160]	; (8005180 <_printf_i+0x248>)
 80050de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050e2:	e7e3      	b.n	80050ac <_printf_i+0x174>
 80050e4:	065e      	lsls	r6, r3, #25
 80050e6:	bf48      	it	mi
 80050e8:	b2ad      	uxthmi	r5, r5
 80050ea:	e7e6      	b.n	80050ba <_printf_i+0x182>
 80050ec:	4616      	mov	r6, r2
 80050ee:	e7bb      	b.n	8005068 <_printf_i+0x130>
 80050f0:	680b      	ldr	r3, [r1, #0]
 80050f2:	6826      	ldr	r6, [r4, #0]
 80050f4:	6960      	ldr	r0, [r4, #20]
 80050f6:	1d1d      	adds	r5, r3, #4
 80050f8:	600d      	str	r5, [r1, #0]
 80050fa:	0635      	lsls	r5, r6, #24
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0x1cc>
 8005100:	6018      	str	r0, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0x1d2>
 8005104:	0671      	lsls	r1, r6, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0x1c8>
 8005108:	8018      	strh	r0, [r3, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	4616      	mov	r6, r2
 8005110:	e7ba      	b.n	8005088 <_printf_i+0x150>
 8005112:	680b      	ldr	r3, [r1, #0]
 8005114:	1d1a      	adds	r2, r3, #4
 8005116:	600a      	str	r2, [r1, #0]
 8005118:	681e      	ldr	r6, [r3, #0]
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	2100      	movs	r1, #0
 800511e:	4630      	mov	r0, r6
 8005120:	f7fb f856 	bl	80001d0 <memchr>
 8005124:	b108      	cbz	r0, 800512a <_printf_i+0x1f2>
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	6060      	str	r0, [r4, #4]
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	6123      	str	r3, [r4, #16]
 800512e:	2300      	movs	r3, #0
 8005130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005134:	e7a8      	b.n	8005088 <_printf_i+0x150>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	4632      	mov	r2, r6
 800513a:	4649      	mov	r1, r9
 800513c:	4640      	mov	r0, r8
 800513e:	47d0      	blx	sl
 8005140:	3001      	adds	r0, #1
 8005142:	d0ab      	beq.n	800509c <_printf_i+0x164>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	079b      	lsls	r3, r3, #30
 8005148:	d413      	bmi.n	8005172 <_printf_i+0x23a>
 800514a:	68e0      	ldr	r0, [r4, #12]
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	4298      	cmp	r0, r3
 8005150:	bfb8      	it	lt
 8005152:	4618      	movlt	r0, r3
 8005154:	e7a4      	b.n	80050a0 <_printf_i+0x168>
 8005156:	2301      	movs	r3, #1
 8005158:	4632      	mov	r2, r6
 800515a:	4649      	mov	r1, r9
 800515c:	4640      	mov	r0, r8
 800515e:	47d0      	blx	sl
 8005160:	3001      	adds	r0, #1
 8005162:	d09b      	beq.n	800509c <_printf_i+0x164>
 8005164:	3501      	adds	r5, #1
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	9903      	ldr	r1, [sp, #12]
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	42ab      	cmp	r3, r5
 800516e:	dcf2      	bgt.n	8005156 <_printf_i+0x21e>
 8005170:	e7eb      	b.n	800514a <_printf_i+0x212>
 8005172:	2500      	movs	r5, #0
 8005174:	f104 0619 	add.w	r6, r4, #25
 8005178:	e7f5      	b.n	8005166 <_printf_i+0x22e>
 800517a:	bf00      	nop
 800517c:	080054f5 	.word	0x080054f5
 8005180:	08005506 	.word	0x08005506

08005184 <_sbrk_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d06      	ldr	r5, [pc, #24]	; (80051a0 <_sbrk_r+0x1c>)
 8005188:	2300      	movs	r3, #0
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fb fc78 	bl	8000a84 <_sbrk>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_sbrk_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_sbrk_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	200001e0 	.word	0x200001e0

080051a4 <__sread>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	460c      	mov	r4, r1
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	f000 f8a0 	bl	80052f0 <_read_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	bfab      	itete	ge
 80051b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051b6:	89a3      	ldrhlt	r3, [r4, #12]
 80051b8:	181b      	addge	r3, r3, r0
 80051ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051be:	bfac      	ite	ge
 80051c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80051c2:	81a3      	strhlt	r3, [r4, #12]
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <__swrite>:
 80051c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ca:	461f      	mov	r7, r3
 80051cc:	898b      	ldrh	r3, [r1, #12]
 80051ce:	05db      	lsls	r3, r3, #23
 80051d0:	4605      	mov	r5, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	4616      	mov	r6, r2
 80051d6:	d505      	bpl.n	80051e4 <__swrite+0x1e>
 80051d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051dc:	2302      	movs	r3, #2
 80051de:	2200      	movs	r2, #0
 80051e0:	f000 f868 	bl	80052b4 <_lseek_r>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	4628      	mov	r0, r5
 80051f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	f000 b817 	b.w	800522c <_write_r>

080051fe <__sseek>:
 80051fe:	b510      	push	{r4, lr}
 8005200:	460c      	mov	r4, r1
 8005202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005206:	f000 f855 	bl	80052b4 <_lseek_r>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	bf15      	itete	ne
 8005210:	6560      	strne	r0, [r4, #84]	; 0x54
 8005212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800521a:	81a3      	strheq	r3, [r4, #12]
 800521c:	bf18      	it	ne
 800521e:	81a3      	strhne	r3, [r4, #12]
 8005220:	bd10      	pop	{r4, pc}

08005222 <__sclose>:
 8005222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005226:	f000 b813 	b.w	8005250 <_close_r>
	...

0800522c <_write_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	; (800524c <_write_r+0x20>)
 8005230:	4604      	mov	r4, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	602a      	str	r2, [r5, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fb f896 	bl	800036c <_write>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_write_r+0x1e>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_write_r+0x1e>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	200001e0 	.word	0x200001e0

08005250 <_close_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d06      	ldr	r5, [pc, #24]	; (800526c <_close_r+0x1c>)
 8005254:	2300      	movs	r3, #0
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	f7fb fbdd 	bl	8000a1a <_close>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_close_r+0x1a>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_close_r+0x1a>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	200001e0 	.word	0x200001e0

08005270 <_fstat_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d07      	ldr	r5, [pc, #28]	; (8005290 <_fstat_r+0x20>)
 8005274:	2300      	movs	r3, #0
 8005276:	4604      	mov	r4, r0
 8005278:	4608      	mov	r0, r1
 800527a:	4611      	mov	r1, r2
 800527c:	602b      	str	r3, [r5, #0]
 800527e:	f7fb fbd8 	bl	8000a32 <_fstat>
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	d102      	bne.n	800528c <_fstat_r+0x1c>
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	b103      	cbz	r3, 800528c <_fstat_r+0x1c>
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	bd38      	pop	{r3, r4, r5, pc}
 800528e:	bf00      	nop
 8005290:	200001e0 	.word	0x200001e0

08005294 <_isatty_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_isatty_r+0x1c>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fb fbd7 	bl	8000a52 <_isatty>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_isatty_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_isatty_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	200001e0 	.word	0x200001e0

080052b4 <_lseek_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	; (80052d4 <_lseek_r+0x20>)
 80052b8:	4604      	mov	r4, r0
 80052ba:	4608      	mov	r0, r1
 80052bc:	4611      	mov	r1, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	602a      	str	r2, [r5, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f7fb fbd0 	bl	8000a68 <_lseek>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_lseek_r+0x1e>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_lseek_r+0x1e>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	200001e0 	.word	0x200001e0

080052d8 <__malloc_lock>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__malloc_lock+0x8>)
 80052da:	f7ff bb55 	b.w	8004988 <__retarget_lock_acquire_recursive>
 80052de:	bf00      	nop
 80052e0:	200001d8 	.word	0x200001d8

080052e4 <__malloc_unlock>:
 80052e4:	4801      	ldr	r0, [pc, #4]	; (80052ec <__malloc_unlock+0x8>)
 80052e6:	f7ff bb50 	b.w	800498a <__retarget_lock_release_recursive>
 80052ea:	bf00      	nop
 80052ec:	200001d8 	.word	0x200001d8

080052f0 <_read_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_read_r+0x20>)
 80052f4:	4604      	mov	r4, r0
 80052f6:	4608      	mov	r0, r1
 80052f8:	4611      	mov	r1, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fb fb6e 	bl	80009e0 <_read>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_read_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_read_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	200001e0 	.word	0x200001e0

08005314 <_init>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr

08005320 <_fini>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr


LoRa_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc8  08003fc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd0  08003fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000070  08004048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004048  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4bf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e79  00000000  00000000  0002c55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b21  00000000  00000000  0002f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b539  00000000  00000000  00046101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089150  00000000  00000000  0005163a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cec  00000000  00000000  000da7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ec8 	.word	0x08003ec8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003ec8 	.word	0x08003ec8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0x94>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a1d      	ldr	r2, [pc, #116]	; (800061c <MX_GPIO_Init+0x94>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_GPIO_Init+0x94>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_GPIO_Init+0x94>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a16      	ldr	r2, [pc, #88]	; (800061c <MX_GPIO_Init+0x94>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_GPIO_Init+0x94>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2103      	movs	r1, #3
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <MX_GPIO_Init+0x98>)
 80005dc:	f000 ffb8 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 80005e0:	2303      	movs	r3, #3
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <MX_GPIO_Init+0x98>)
 80005f8:	f000 fe26 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80005fc:	2304      	movs	r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4619      	mov	r1, r3
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_GPIO_Init+0x98>)
 8000610:	f000 fe1a 	bl	8001248 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40020400 	.word	0x40020400

08000624 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2 , ptr , len , 50);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b29a      	uxth	r2, r3
 8000634:	2332      	movs	r3, #50	; 0x32
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <_write+0x24>)
 800063a:	f002 f9e0 	bl	80029fe <HAL_UART_Transmit>
  return len;
 800063e:	687b      	ldr	r3, [r7, #4]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000314 	.word	0x20000314

0800064c <SPI_CS_LOW>:

void SPI_CS_LOW(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <SPI_CS_LOW+0x14>)
 8000656:	f000 ff7b 	bl	8001550 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020400 	.word	0x40020400

08000664 <SPI_CS_HIGH>:

void SPI_CS_HIGH(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2101      	movs	r1, #1
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <SPI_CS_HIGH+0x14>)
 800066e:	f000 ff6f 	bl	8001550 <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020400 	.word	0x40020400

0800067c <Read_Reg>:

unsigned char Read_Reg(unsigned char addr){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = addr & 0x7F;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800068c:	b2db      	uxtb	r3, r3
 800068e:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	SPI_CS_LOW();
 8000690:	f7ff ffdc 	bl	800064c <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , HAL_MAX_DELAY);
 8000694:	f107 010f 	add.w	r1, r7, #15
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	2201      	movs	r2, #1
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <Read_Reg+0x48>)
 80006a0:	f001 fc41 	bl	8001f26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80006a4:	f107 010e 	add.w	r1, r7, #14
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	2201      	movs	r2, #1
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <Read_Reg+0x48>)
 80006b0:	f001 fd75 	bl	800219e <HAL_SPI_Receive>
	SPI_CS_HIGH();
 80006b4:	f7ff ffd6 	bl	8000664 <SPI_CS_HIGH>

	return data;
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200002bc 	.word	0x200002bc

080006c8 <Write_Reg>:

void Write_Reg(unsigned char addr , unsigned char value){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	73fb      	strb	r3, [r7, #15]
	uint8_t Value = value;
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	73bb      	strb	r3, [r7, #14]

	SPI_CS_LOW();
 80006e6:	f7ff ffb1 	bl	800064c <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg,	1 , HAL_MAX_DELAY);
 80006ea:	f107 010f 	add.w	r1, r7, #15
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	2201      	movs	r2, #1
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <Write_Reg+0x50>)
 80006f6:	f001 fc16 	bl	8001f26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &Value,1 , HAL_MAX_DELAY);
 80006fa:	f107 010e 	add.w	r1, r7, #14
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	2201      	movs	r2, #1
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <Write_Reg+0x50>)
 8000706:	f001 fc0e 	bl	8001f26 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800070a:	f7ff ffab 	bl	8000664 <SPI_CS_HIGH>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200002bc 	.word	0x200002bc

0800071c <set_OPMODE>:

void set_OPMODE(uint8_t mode){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, Read_Reg(REG_OPMODE) & ~OPMODE_MASK | mode );
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ffa8 	bl	800067c <Read_Reg>
 800072c:	4603      	mov	r3, r0
 800072e:	b25b      	sxtb	r3, r3
 8000730:	f023 0307 	bic.w	r3, r3, #7
 8000734:	b25a      	sxtb	r2, r3
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	4313      	orrs	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ffc0 	bl	80006c8 <Write_Reg>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <set_LoRa_mode>:

void set_LoRa_mode(){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ffe0 	bl	800071c <set_OPMODE>
	HAL_Delay(15);
 800075c:	200f      	movs	r0, #15
 800075e:	f000 fc69 	bl	8001034 <HAL_Delay>

	uint8_t data = OPMODE_LORA;
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, data);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4619      	mov	r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff ffac 	bl	80006c8 <Write_Reg>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <set_Freq>:

void set_Freq(uint64_t freq){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	e9c7 0100 	strd	r0, r1, [r7]
	set_OPMODE(OPMODE_SLEEP);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ffca 	bl	800071c <set_OPMODE>
	HAL_Delay(15);
 8000788:	200f      	movs	r0, #15
 800078a:	f000 fc53 	bl	8001034 <HAL_Delay>

	uint64_t frf = (( uint64_t)freq <<14 );  // freq *  2^19 / 32
 800078e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000792:	f04f 0200 	mov.w	r2, #0
 8000796:	f04f 0300 	mov.w	r3, #0
 800079a:	038b      	lsls	r3, r1, #14
 800079c:	ea43 4390 	orr.w	r3, r3, r0, lsr #18
 80007a0:	0382      	lsls	r2, r0, #14
 80007a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Write_Reg(REG_FRF_MSB, (uint8_t)(frf>>16) );
 80007a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	0c02      	lsrs	r2, r0, #16
 80007b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007b8:	0c0b      	lsrs	r3, r1, #16
 80007ba:	b2d3      	uxtb	r3, r2
 80007bc:	4619      	mov	r1, r3
 80007be:	2006      	movs	r0, #6
 80007c0:	f7ff ff82 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_FRF_MID, (uint8_t)(frf>>8) );
 80007c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	0a02      	lsrs	r2, r0, #8
 80007d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80007d6:	0a0b      	lsrs	r3, r1, #8
 80007d8:	b2d3      	uxtb	r3, r2
 80007da:	4619      	mov	r1, r3
 80007dc:	2007      	movs	r0, #7
 80007de:	f7ff ff73 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_FRF_LSB, (uint8_t)(frf>>0) );
 80007e2:	7a3b      	ldrb	r3, [r7, #8]
 80007e4:	4619      	mov	r1, r3
 80007e6:	2008      	movs	r0, #8
 80007e8:	f7ff ff6e 	bl	80006c8 <Write_Reg>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <set_config>:

void set_config(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff ff8e 	bl	800071c <set_OPMODE>
	HAL_Delay(15);
 8000800:	200f      	movs	r0, #15
 8000802:	f000 fc17 	bl	8001034 <HAL_Delay>

	set_LoRa_mode();
 8000806:	f7ff ffa3 	bl	8000750 <set_LoRa_mode>

	unsigned char version = Read_Reg(REG_VERSION);
 800080a:	2042      	movs	r0, #66	; 0x42
 800080c:	f7ff ff36 	bl	800067c <Read_Reg>
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]

	printf("%d version \n\r", version);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4619      	mov	r1, r3
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <set_config+0x74>)
 800081a:	f002 fbeb 	bl	8002ff4 <iprintf>

	Write_Reg(REG_SYNC_WORD, 0x34);
 800081e:	2134      	movs	r1, #52	; 0x34
 8000820:	2039      	movs	r0, #57	; 0x39
 8000822:	f7ff ff51 	bl	80006c8 <Write_Reg>
	/*
	Write_Reg(REG_MODEM_CONFIG3,0x04);
	Write_Reg(REG_MODEM_CONFIG,0x72);
	Write_Reg(REG_MODEM_CONFIG2, (0x07<<4) | 0x04);
*/
	Write_Reg(REG_SYMB_TIMEOUT_LSB,0x08);
 8000826:	2108      	movs	r1, #8
 8000828:	201f      	movs	r0, #31
 800082a:	f7ff ff4d 	bl	80006c8 <Write_Reg>

	Write_Reg(REG_MAX_PAYLOAD_LENGTH, 0x80);
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	2023      	movs	r0, #35	; 0x23
 8000832:	f7ff ff49 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, PAYLOAD_LENGTH);
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	2022      	movs	r0, #34	; 0x22
 800083a:	f7ff ff45 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_HOP_PERIOD, 0xFF);
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	2024      	movs	r0, #36	; 0x24
 8000842:	f7ff ff41 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, Read_Reg(REG_FIFO_TX_BASE_AD));
 8000846:	200e      	movs	r0, #14
 8000848:	f7ff ff18 	bl	800067c <Read_Reg>
 800084c:	4603      	mov	r3, r0
 800084e:	4619      	mov	r1, r3
 8000850:	200d      	movs	r0, #13
 8000852:	f7ff ff39 	bl	80006c8 <Write_Reg>

	Write_Reg(REG_LNA, LNA_MAX_GAIN);
 8000856:	2123      	movs	r1, #35	; 0x23
 8000858:	200c      	movs	r0, #12
 800085a:	f7ff ff35 	bl	80006c8 <Write_Reg>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	08003ee0 	.word	0x08003ee0

0800086c <Write_Buf>:
	}

	return 1;
}

void Write_Buf(unsigned char addr, unsigned char *value, unsigned char len) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b0c4      	sub	sp, #272	; 0x110
 8000870:	af00      	add	r7, sp, #0
 8000872:	463b      	mov	r3, r7
 8000874:	6019      	str	r1, [r3, #0]
 8000876:	4611      	mov	r1, r2
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	4602      	mov	r2, r0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	460a      	mov	r2, r1
 8000882:	701a      	strb	r2, [r3, #0]

	uint8_t reg = addr | 0x80;
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t buf[256];
	for (int i = 0; i < len; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000898:	e011      	b.n	80008be <Write_Buf+0x52>
		buf[i] = value[i];
 800089a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800089e:	463a      	mov	r2, r7
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	7819      	ldrb	r1, [r3, #0]
 80008a6:	f107 0208 	add.w	r2, r7, #8
 80008aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008ae:	4413      	add	r3, r2
 80008b0:	460a      	mov	r2, r1
 80008b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80008b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008b8:	3301      	adds	r3, #1
 80008ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008c6:	429a      	cmp	r2, r3
 80008c8:	dbe7      	blt.n	800089a <Write_Buf+0x2e>
	}

	SPI_CS_LOW();
 80008ca:	f7ff febf 	bl	800064c <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 80008ce:	f207 110b 	addw	r1, r7, #267	; 0x10b
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	2201      	movs	r2, #1
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <Write_Buf+0x94>)
 80008da:	f001 fb24 	bl	8001f26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, len, HAL_MAX_DELAY);
 80008de:	1dbb      	adds	r3, r7, #6
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f107 0108 	add.w	r1, r7, #8
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <Write_Buf+0x94>)
 80008ee:	f001 fb1a 	bl	8001f26 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 80008f2:	f7ff feb7 	bl	8000664 <SPI_CS_HIGH>
}
 80008f6:	bf00      	nop
 80008f8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002bc 	.word	0x200002bc

08000904 <Transmit>:

void Transmit(unsigned char *frame, unsigned char datalen) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]

	Write_Reg(REG_HOP_PERIOD,0x00);
 8000910:	2100      	movs	r1, #0
 8000912:	2024      	movs	r0, #36	; 0x24
 8000914:	f7ff fed8 	bl	80006c8 <Write_Reg>
	Write_Reg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8000918:	21f0      	movs	r1, #240	; 0xf0
 800091a:	2040      	movs	r0, #64	; 0x40
 800091c:	f7ff fed4 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS, 0xFF);
 8000920:	21ff      	movs	r1, #255	; 0xff
 8000922:	2012      	movs	r0, #18
 8000924:	f7ff fed0 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS_MASK, ~IRQ_LORA_TXDONE_MASK);
 8000928:	21f7      	movs	r1, #247	; 0xf7
 800092a:	2011      	movs	r0, #17
 800092c:	f7ff fecc 	bl	80006c8 <Write_Reg>

	Write_Reg(REG_FIFO_TX_BASE_AD, 0x00);
 8000930:	2100      	movs	r1, #0
 8000932:	200e      	movs	r0, #14
 8000934:	f7ff fec8 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, 0x00);
 8000938:	2100      	movs	r1, #0
 800093a:	200d      	movs	r0, #13
 800093c:	f7ff fec4 	bl	80006c8 <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, datalen);
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	4619      	mov	r1, r3
 8000944:	2022      	movs	r0, #34	; 0x22
 8000946:	f7ff febf 	bl	80006c8 <Write_Reg>

	Write_Buf(REG_FIFO, frame, datalen);
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	461a      	mov	r2, r3
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff ff8b 	bl	800086c <Write_Buf>
	set_OPMODE(OPMODE_TX);
 8000956:	2003      	movs	r0, #3
 8000958:	f7ff fee0 	bl	800071c <set_OPMODE>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <set_Power>:

void set_Power(int8_t pw) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	if(pw >= 17) {
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b10      	cmp	r3, #16
 8000974:	dd02      	ble.n	800097c <set_Power+0x18>
		pw = 15;
 8000976:	230f      	movs	r3, #15
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e005      	b.n	8000988 <set_Power+0x24>
	} else if(pw < 2) {
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b01      	cmp	r3, #1
 8000982:	dc01      	bgt.n	8000988 <set_Power+0x24>
		pw = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	71fb      	strb	r3, [r7, #7]
	}
	Write_Reg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	b25b      	sxtb	r3, r3
 8000990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000994:	b25b      	sxtb	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	2009      	movs	r0, #9
 800099c:	f7ff fe94 	bl	80006c8 <Write_Reg>
	Write_Reg(RegPaDac, Read_Reg(RegPaDac)|0x4);
 80009a0:	205a      	movs	r0, #90	; 0x5a
 80009a2:	f7ff fe6b 	bl	800067c <Read_Reg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	205a      	movs	r0, #90	; 0x5a
 80009b2:	f7ff fe89 	bl	80006c8 <Write_Reg>

}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f000 fac4 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f858 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f7ff fddc 	bl	8000588 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009d0:	f000 f8b8 	bl	8000b44 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80009d4:	f000 fa20 	bl	8000e18 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("Sending \n\n\n\r");
 80009d8:	4824      	ldr	r0, [pc, #144]	; (8000a6c <main+0xac>)
 80009da:	f002 fb0b 	bl	8002ff4 <iprintf>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2102      	movs	r1, #2
 80009e2:	4823      	ldr	r0, [pc, #140]	; (8000a70 <main+0xb0>)
 80009e4:	f000 fdb4 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009e8:	2064      	movs	r0, #100	; 0x64
 80009ea:	f000 fb23 	bl	8001034 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2102      	movs	r1, #2
 80009f2:	481f      	ldr	r0, [pc, #124]	; (8000a70 <main+0xb0>)
 80009f4:	f000 fdac 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 fb1b 	bl	8001034 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2102      	movs	r1, #2
 8000a02:	481b      	ldr	r0, [pc, #108]	; (8000a70 <main+0xb0>)
 8000a04:	f000 fda4 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f000 fb13 	bl	8001034 <HAL_Delay>

  set_Freq(868);
 8000a0e:	f44f 7059 	mov.w	r0, #868	; 0x364
 8000a12:	f04f 0100 	mov.w	r1, #0
 8000a16:	f7ff feaf 	bl	8000778 <set_Freq>
  set_config();
 8000a1a:	f7ff feeb 	bl	80007f4 <set_config>
  set_LoRa_mode();
 8000a1e:	f7ff fe97 	bl	8000750 <set_LoRa_mode>

  set_OPMODE(OPMODE_STANDBY);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fe7a 	bl	800071c <set_OPMODE>
  Write_Reg(RegPaRamp, (Read_Reg(RegPaRamp)& 0xF0) | 0x80 );
 8000a28:	200a      	movs	r0, #10
 8000a2a:	f7ff fe27 	bl	800067c <Read_Reg>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4619      	mov	r1, r3
 8000a42:	200a      	movs	r0, #10
 8000a44:	f7ff fe40 	bl	80006c8 <Write_Reg>
  set_Power(23);
 8000a48:	2017      	movs	r0, #23
 8000a4a:	f7ff ff8b 	bl	8000964 <set_Power>



  while (1)
  {
	strncpy((char *)hello, "HELO", sizeof(hello));
 8000a4e:	2220      	movs	r2, #32
 8000a50:	4908      	ldr	r1, [pc, #32]	; (8000a74 <main+0xb4>)
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <main+0xb8>)
 8000a54:	f002 fae6 	bl	8003024 <strncpy>
	Transmit(hello, strlen((char*)hello));
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <main+0xb8>)
 8000a5a:	f7ff fbc1 	bl	80001e0 <strlen>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <main+0xb8>)
 8000a66:	f7ff ff4d 	bl	8000904 <Transmit>
  {
 8000a6a:	e7f0      	b.n	8000a4e <main+0x8e>
 8000a6c:	08003f00 	.word	0x08003f00
 8000a70:	40020400 	.word	0x40020400
 8000a74:	08003f10 	.word	0x08003f10
 8000a78:	20000098 	.word	0x20000098

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	; 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 faaa 	bl	8002fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <SystemClock_Config+0xb4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <SystemClock_Config+0xb4>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <SystemClock_Config+0xb4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <SystemClock_Config+0xb8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <SystemClock_Config+0xb8>)
 8000ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <SystemClock_Config+0xb8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fd49 	bl	8001584 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000af8:	f000 f81e 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 ffac 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b22:	f000 f809 	bl	8000b38 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	; 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <MX_SPI1_Init+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b78:	2218      	movs	r2, #24
 8000b7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b90:	220a      	movs	r2, #10
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b96:	f001 f93d 	bl	8001e14 <HAL_SPI_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba0:	f7ff ffca 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200002bc 	.word	0x200002bc
 8000bac:	40013000 	.word	0x40013000

08000bb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_SPI_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c0a:	23e0      	movs	r3, #224	; 0xe0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_SPI_MspInit+0x8c>)
 8000c26:	f000 fb0f 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f98a 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
	}

return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f002 f8ea 	bl	8002f90 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	2000008c 	.word	0x2000008c
 8000df0:	20000370 	.word	0x20000370

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_USART2_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f001 fd88 	bl	8002964 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f7ff fe6d 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000314 	.word	0x20000314
 8000e68:	40004400 	.word	0x40004400

08000e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12b      	bne.n	8000ee6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0x8c>)
 8000ee2:	f000 f9b1 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ff65 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 f837 	bl	8002f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fd47 	bl	80009c0 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f40:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 8000f44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f48:	2000036c 	.word	0x2000036c

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f931 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe5c 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f93b 	bl	800122e <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f911 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000358 	.word	0x20000358

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000358 	.word	0x20000358

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff47 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff5c 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb0 	bl	800119c <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e159      	b.n	8001518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8148 	bne.w	8001512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a2 	beq.w	8001512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x2f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x202>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1fe>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_GPIO_Init+0x2f8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1fa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_GPIO_Init+0x2fc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1f6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_GPIO_Init+0x300>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1f2>
 8001436:	2304      	movs	r3, #4
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143a:	2307      	movs	r3, #7
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x204>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_GPIO_Init+0x304>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x304>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x304>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_GPIO_Init+0x304>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_GPIO_Init+0x304>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f aea2 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e264      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d075      	beq.n	800168e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	4ba3      	ldr	r3, [pc, #652]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4ba0      	ldr	r3, [pc, #640]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d112      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4b9d      	ldr	r3, [pc, #628]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c6:	d10b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4b99      	ldr	r3, [pc, #612]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d05b      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d157      	bne.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e23f      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x74>
 80015ea:	4b91      	ldr	r3, [pc, #580]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a90      	ldr	r2, [pc, #576]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a8a      	ldr	r2, [pc, #552]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a87      	ldr	r2, [pc, #540]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 800161c:	4b84      	ldr	r3, [pc, #528]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a83      	ldr	r2, [pc, #524]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b81      	ldr	r3, [pc, #516]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a80      	ldr	r2, [pc, #512]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcee 	bl	800101c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fcea 	bl	800101c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e204      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xc0>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fcda 	bl	800101c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fcd6 	bl	800101c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1f0      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c4      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4952      	ldr	r1, [pc, #328]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <HAL_RCC_OscConfig+0x2b0>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fc8f 	bl	800101c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fc8b 	bl	800101c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a5      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b43      	ldr	r3, [pc, #268]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4940      	ldr	r1, [pc, #256]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_OscConfig+0x2b0>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fc6e 	bl	800101c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fc6a 	bl	800101c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e184      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d030      	beq.n	80017d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d016      	beq.n	80017a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_RCC_OscConfig+0x2b4>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fc4e 	bl	800101c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fc4a 	bl	800101c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e164      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x200>
 80017a2:	e015      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x2b4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fc37 	bl	800101c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc33 	bl	800101c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e14d      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a0 	beq.w	800191e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x2b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d121      	bne.n	800185e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_RCC_OscConfig+0x2b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_RCC_OscConfig+0x2b8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff fbf9 	bl	800101c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e011      	b.n	8001852 <HAL_RCC_OscConfig+0x2ce>
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
 800183c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001840:	f7ff fbec 	bl	800101c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e106      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <HAL_RCC_OscConfig+0x4e4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x2f0>
 8001866:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a80      	ldr	r2, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x32a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x312>
 800187c:	4b7b      	ldr	r3, [pc, #492]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a7a      	ldr	r2, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	4b78      	ldr	r3, [pc, #480]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a77      	ldr	r2, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x32a>
 8001896:	4b75      	ldr	r3, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a74      	ldr	r2, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a71      	ldr	r2, [pc, #452]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff fbb1 	bl	800101c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fbad 	bl	800101c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0c5      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x33a>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb9b 	bl	800101c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff fb97 	bl	800101c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0af      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b56      	ldr	r3, [pc, #344]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a55      	ldr	r2, [pc, #340]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 809b 	beq.w	8001a5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d05c      	beq.n	80019ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d141      	bne.n	80019c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x4ec>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb6b 	bl	800101c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fb67 	bl	800101c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e081      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	019b      	lsls	r3, r3, #6
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x4ec>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb40 	bl	800101c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fb3c 	bl	800101c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e056      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x41c>
 80019be:	e04e      	b.n	8001a5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x4ec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fb29 	bl	800101c <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fb25 	bl	800101c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e03f      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x44a>
 80019ec:	e037      	b.n	8001a5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e032      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_RCC_OscConfig+0x4e8>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d028      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d121      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d11a      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d111      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470060 	.word	0x42470060

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d90c      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d044      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e067      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4934      	ldr	r1, [pc, #208]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff fa5a 	bl	800101c <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff fa56 	bl	800101c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20c      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f9ba 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08003f18 	.word	0x08003f18
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c46:	2100      	movs	r1, #0
 8001c48:	6079      	str	r1, [r7, #4]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	60f9      	str	r1, [r7, #12]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c52:	2100      	movs	r1, #0
 8001c54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c56:	4952      	ldr	r1, [pc, #328]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c58:	6889      	ldr	r1, [r1, #8]
 8001c5a:	f001 010c 	and.w	r1, r1, #12
 8001c5e:	2908      	cmp	r1, #8
 8001c60:	d00d      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x3e>
 8001c62:	2908      	cmp	r1, #8
 8001c64:	f200 8094 	bhi.w	8001d90 <HAL_RCC_GetSysClockFreq+0x150>
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x32>
 8001c6c:	2904      	cmp	r1, #4
 8001c6e:	d003      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x38>
 8001c70:	e08e      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c74:	60bb      	str	r3, [r7, #8]
       break;
 8001c76:	e08e      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c7a:	60bb      	str	r3, [r7, #8]
      break;
 8001c7c:	e08b      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7e:	4948      	ldr	r1, [pc, #288]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c80:	6849      	ldr	r1, [r1, #4]
 8001c82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c86:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c88:	4945      	ldr	r1, [pc, #276]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c8a:	6849      	ldr	r1, [r1, #4]
 8001c8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001c90:	2900      	cmp	r1, #0
 8001c92:	d024      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c94:	4942      	ldr	r1, [pc, #264]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c96:	6849      	ldr	r1, [r1, #4]
 8001c98:	0989      	lsrs	r1, r1, #6
 8001c9a:	4608      	mov	r0, r1
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ca4:	f04f 0500 	mov.w	r5, #0
 8001ca8:	ea00 0204 	and.w	r2, r0, r4
 8001cac:	ea01 0305 	and.w	r3, r1, r5
 8001cb0:	493d      	ldr	r1, [pc, #244]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001cb2:	fb01 f003 	mul.w	r0, r1, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	fb01 f102 	mul.w	r1, r1, r2
 8001cbc:	1844      	adds	r4, r0, r1
 8001cbe:	493a      	ldr	r1, [pc, #232]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001cc0:	fba2 0101 	umull	r0, r1, r2, r1
 8001cc4:	1863      	adds	r3, r4, r1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	f7fe fade 	bl	8000290 <__aeabi_uldivmod>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e04a      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	ea02 0400 	and.w	r4, r2, r0
 8001cf6:	ea03 0501 	and.w	r5, r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	014b      	lsls	r3, r1, #5
 8001d08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d0c:	0142      	lsls	r2, r0, #5
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	1b00      	subs	r0, r0, r4
 8001d14:	eb61 0105 	sbc.w	r1, r1, r5
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	018b      	lsls	r3, r1, #6
 8001d22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d26:	0182      	lsls	r2, r0, #6
 8001d28:	1a12      	subs	r2, r2, r0
 8001d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	00d9      	lsls	r1, r3, #3
 8001d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d3c:	00d0      	lsls	r0, r2, #3
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	1912      	adds	r2, r2, r4
 8001d44:	eb45 0303 	adc.w	r3, r5, r3
 8001d48:	f04f 0000 	mov.w	r0, #0
 8001d4c:	f04f 0100 	mov.w	r1, #0
 8001d50:	0299      	lsls	r1, r3, #10
 8001d52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d56:	0290      	lsls	r0, r2, #10
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	f7fe fa92 	bl	8000290 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d92:	60bb      	str	r3, [r7, #8]
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	68bb      	ldr	r3, [r7, #8]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	017d7840 	.word	0x017d7840

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	08003f28 	.word	0x08003f28

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffdc 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08003f28 	.word	0x08003f28

08001e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e07b      	b.n	8001f1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d108      	bne.n	8001e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e36:	d009      	beq.n	8001e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
 8001e3e:	e005      	b.n	8001e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fea2 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	ea42 0103 	orr.w	r1, r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	f003 0104 	and.w	r1, r3, #4
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f003 0210 	and.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b088      	sub	sp, #32
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_SPI_Transmit+0x22>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e126      	b.n	8002196 <HAL_SPI_Transmit+0x270>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f50:	f7ff f864 	bl	800101c <HAL_GetTick>
 8001f54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f6a:	e10b      	b.n	8002184 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_SPI_Transmit+0x52>
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f7c:	e102      	b.n	8002184 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2203      	movs	r2, #3
 8001f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	88fa      	ldrh	r2, [r7, #6]
 8001f9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fe4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d007      	beq.n	8002004 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800200c:	d14b      	bne.n	80020a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_SPI_Transmit+0xf6>
 8002016:	8afb      	ldrh	r3, [r7, #22]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d13e      	bne.n	800209a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	1c9a      	adds	r2, r3, #2
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002040:	e02b      	b.n	800209a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b02      	cmp	r3, #2
 800204e:	d112      	bne.n	8002076 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	1c9a      	adds	r2, r3, #2
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	86da      	strh	r2, [r3, #54]	; 0x36
 8002074:	e011      	b.n	800209a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002076:	f7fe ffd1 	bl	800101c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d803      	bhi.n	800208e <HAL_SPI_Transmit+0x168>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d102      	bne.n	8002094 <HAL_SPI_Transmit+0x16e>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002098:	e074      	b.n	8002184 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ce      	bne.n	8002042 <HAL_SPI_Transmit+0x11c>
 80020a4:	e04c      	b.n	8002140 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_SPI_Transmit+0x18e>
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d140      	bne.n	8002136 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020da:	e02c      	b.n	8002136 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d113      	bne.n	8002112 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	330c      	adds	r3, #12
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002110:	e011      	b.n	8002136 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002112:	f7fe ff83 	bl	800101c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d803      	bhi.n	800212a <HAL_SPI_Transmit+0x204>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d102      	bne.n	8002130 <HAL_SPI_Transmit+0x20a>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002134:	e026      	b.n	8002184 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1cd      	bne.n	80020dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fbcb 	bl	80028e0 <SPI_EndRxTxTransaction>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	e000      	b.n	8002184 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002194:	7ffb      	ldrb	r3, [r7, #31]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b088      	sub	sp, #32
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ba:	d112      	bne.n	80021e2 <HAL_SPI_Receive+0x44>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10e      	bne.n	80021e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2204      	movs	r2, #4
 80021c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f8f1 	bl	80023c0 <HAL_SPI_TransmitReceive>
 80021de:	4603      	mov	r3, r0
 80021e0:	e0ea      	b.n	80023b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_SPI_Receive+0x52>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0e3      	b.n	80023b8 <HAL_SPI_Receive+0x21a>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021f8:	f7fe ff10 	bl	800101c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800220e:	e0ca      	b.n	80023a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_SPI_Receive+0x7e>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002220:	e0c1      	b.n	80023a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2204      	movs	r2, #4
 8002226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d10f      	bne.n	800228a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d007      	beq.n	80022a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d162      	bne.n	8002376 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022b0:	e02e      	b.n	8002310 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d115      	bne.n	80022ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f103 020c 	add.w	r2, r3, #12
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ea:	e011      	b.n	8002310 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ec:	f7fe fe96 	bl	800101c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d803      	bhi.n	8002304 <HAL_SPI_Receive+0x166>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d102      	bne.n	800230a <HAL_SPI_Receive+0x16c>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800230e:	e04a      	b.n	80023a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1cb      	bne.n	80022b2 <HAL_SPI_Receive+0x114>
 800231a:	e031      	b.n	8002380 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d113      	bne.n	8002352 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	b292      	uxth	r2, r2
 8002336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002350:	e011      	b.n	8002376 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002352:	f7fe fe63 	bl	800101c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d803      	bhi.n	800236a <HAL_SPI_Receive+0x1cc>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d102      	bne.n	8002370 <HAL_SPI_Receive+0x1d2>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002374:	e017      	b.n	80023a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1cd      	bne.n	800231c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fa45 	bl	8002814 <SPI_EndRxTransaction>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
 80023a2:	e000      	b.n	80023a6 <HAL_SPI_Receive+0x208>
  }

error :
 80023a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ce:	2301      	movs	r3, #1
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_SPI_TransmitReceive+0x26>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e18a      	b.n	80026fc <HAL_SPI_TransmitReceive+0x33c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ee:	f7fe fe15 	bl	800101c <HAL_GetTick>
 80023f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800240c:	2b01      	cmp	r3, #1
 800240e:	d00f      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x70>
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002416:	d107      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x68>
 8002420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002424:	2b04      	cmp	r3, #4
 8002426:	d003      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800242e:	e15b      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x82>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x82>
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002448:	e14e      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b04      	cmp	r3, #4
 8002454:	d003      	beq.n	800245e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2205      	movs	r2, #5
 800245a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	887a      	ldrh	r2, [r7, #2]
 800246e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d007      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ba:	d178      	bne.n	80025ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_SPI_TransmitReceive+0x10a>
 80024c4:	8b7b      	ldrh	r3, [r7, #26]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d166      	bne.n	8002598 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	1c9a      	adds	r2, r3, #2
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ee:	e053      	b.n	8002598 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d11b      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x176>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x176>
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d113      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	1c9a      	adds	r2, r3, #2
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x1b8>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	b292      	uxth	r2, r2
 800255a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	1c9a      	adds	r2, r3, #2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002578:	f7fe fd50 	bl	800101c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002584:	429a      	cmp	r2, r3
 8002586:	d807      	bhi.n	8002598 <HAL_SPI_TransmitReceive+0x1d8>
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d003      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002596:	e0a7      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1a6      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x130>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1a1      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x130>
 80025ac:	e07c      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x1fc>
 80025b6:	8b7b      	ldrh	r3, [r7, #26]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d16b      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e2:	e057      	b.n	8002694 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d11c      	bne.n	800262c <HAL_SPI_TransmitReceive+0x26c>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d017      	beq.n	800262c <HAL_SPI_TransmitReceive+0x26c>
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d114      	bne.n	800262c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d119      	bne.n	800266e <HAL_SPI_TransmitReceive+0x2ae>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d014      	beq.n	800266e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800266a:	2301      	movs	r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800266e:	f7fe fcd5 	bl	800101c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267a:	429a      	cmp	r2, r3
 800267c:	d803      	bhi.n	8002686 <HAL_SPI_TransmitReceive+0x2c6>
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d102      	bne.n	800268c <HAL_SPI_TransmitReceive+0x2cc>
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002692:	e029      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a2      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x224>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d19d      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f917 	bl	80028e0 <SPI_EndRxTxTransaction>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026c4:	e010      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	e000      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3730      	adds	r7, #48	; 0x30
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002714:	f7fe fc82 	bl	800101c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002724:	f7fe fc7a 	bl	800101c <HAL_GetTick>
 8002728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800273a:	e054      	b.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d050      	beq.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002744:	f7fe fc6a 	bl	800101c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d902      	bls.n	800275a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d13d      	bne.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002772:	d111      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277c:	d004      	beq.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d107      	bne.n	8002798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a0:	d10f      	bne.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e017      	b.n	8002806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d19b      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002828:	d111      	bne.n	800284e <SPI_EndRxTransaction+0x3a>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002832:	d004      	beq.n	800283e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d107      	bne.n	800284e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002856:	d12a      	bne.n	80028ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d012      	beq.n	8002888 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff49 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02d      	beq.n	80028d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e026      	b.n	80028d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ff36 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e013      	b.n	80028d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2101      	movs	r1, #1
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff ff23 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e000      	b.n	80028d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <SPI_EndRxTxTransaction+0x7c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <SPI_EndRxTxTransaction+0x80>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0d5b      	lsrs	r3, r3, #21
 80028f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d112      	bne.n	8002932 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff fef4 	bl	8002704 <SPI_WaitFlagStateUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e00f      	b.n	8002952 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3b01      	subs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d0f2      	beq.n	8002932 <SPI_EndRxTxTransaction+0x52>
 800294c:	e000      	b.n	8002950 <SPI_EndRxTxTransaction+0x70>
        break;
 800294e:	bf00      	nop
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000
 8002960:	165e9f81 	.word	0x165e9f81

08002964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e03f      	b.n	80029f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fa6e 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	; 0x24
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f929 	bl	8002c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08a      	sub	sp, #40	; 0x28
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d17c      	bne.n	8002b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_UART_Transmit+0x2c>
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e075      	b.n	8002b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Transmit+0x3e>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e06e      	b.n	8002b1a <HAL_UART_Transmit+0x11c>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fae3 	bl	800101c <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d108      	bne.n	8002a80 <HAL_UART_Transmit+0x82>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e003      	b.n	8002a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a90:	e02a      	b.n	8002ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f840 	bl	8002b22 <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e036      	b.n	8002b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	e007      	b.n	8002ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1cf      	bne.n	8002a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f810 	bl	8002b22 <UART_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e006      	b.n	8002b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b090      	sub	sp, #64	; 0x40
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b32:	e050      	b.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d04c      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b42:	f7fe fa6b 	bl	800101c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d241      	bcs.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b72:	637a      	str	r2, [r7, #52]	; 0x34
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e5      	bne.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	613b      	str	r3, [r7, #16]
   return(result);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba6:	623a      	str	r2, [r7, #32]
 8002ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	69f9      	ldr	r1, [r7, #28]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e00f      	b.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d09f      	beq.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3740      	adds	r7, #64	; 0x40
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c04:	b09f      	sub	sp, #124	; 0x7c
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c16:	68d9      	ldr	r1, [r3, #12]
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	ea40 0301 	orr.w	r3, r0, r1
 8002c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c44:	f021 010c 	bic.w	r1, r1, #12
 8002c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	6999      	ldr	r1, [r3, #24]
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	ea40 0301 	orr.w	r3, r0, r1
 8002c68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4bc5      	ldr	r3, [pc, #788]	; (8002f84 <UART_SetConfig+0x384>)
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d004      	beq.n	8002c7e <UART_SetConfig+0x7e>
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4bc3      	ldr	r3, [pc, #780]	; (8002f88 <UART_SetConfig+0x388>)
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d103      	bne.n	8002c86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c7e:	f7ff f8b5 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002c82:	6778      	str	r0, [r7, #116]	; 0x74
 8002c84:	e002      	b.n	8002c8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c86:	f7ff f89d 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002c8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c94:	f040 80b6 	bne.w	8002e04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	f04f 0500 	mov.w	r5, #0
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	1891      	adds	r1, r2, r2
 8002ca6:	6439      	str	r1, [r7, #64]	; 0x40
 8002ca8:	415b      	adcs	r3, r3
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
 8002cac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cb0:	1912      	adds	r2, r2, r4
 8002cb2:	eb45 0303 	adc.w	r3, r5, r3
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	00d9      	lsls	r1, r3, #3
 8002cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc4:	00d0      	lsls	r0, r2, #3
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	1911      	adds	r1, r2, r4
 8002ccc:	6639      	str	r1, [r7, #96]	; 0x60
 8002cce:	416b      	adcs	r3, r5
 8002cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	1891      	adds	r1, r2, r2
 8002cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ce0:	415b      	adcs	r3, r3
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ce8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002cec:	f7fd fad0 	bl	8000290 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4ba5      	ldr	r3, [pc, #660]	; (8002f8c <UART_SetConfig+0x38c>)
 8002cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	011e      	lsls	r6, r3, #4
 8002cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d00:	461c      	mov	r4, r3
 8002d02:	f04f 0500 	mov.w	r5, #0
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d16:	1912      	adds	r2, r2, r4
 8002d18:	eb45 0303 	adc.w	r3, r5, r3
 8002d1c:	f04f 0000 	mov.w	r0, #0
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	00d9      	lsls	r1, r3, #3
 8002d26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d2a:	00d0      	lsls	r0, r2, #3
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	1911      	adds	r1, r2, r4
 8002d32:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d34:	416b      	adcs	r3, r5
 8002d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d46:	415b      	adcs	r3, r3
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d52:	f7fd fa9d 	bl	8000290 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4b8c      	ldr	r3, [pc, #560]	; (8002f8c <UART_SetConfig+0x38c>)
 8002d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	2164      	movs	r1, #100	; 0x64
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	3332      	adds	r3, #50	; 0x32
 8002d6e:	4a87      	ldr	r2, [pc, #540]	; (8002f8c <UART_SetConfig+0x38c>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d7c:	441e      	add	r6, r3
 8002d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d80:	4618      	mov	r0, r3
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	1894      	adds	r4, r2, r2
 8002d8c:	623c      	str	r4, [r7, #32]
 8002d8e:	415b      	adcs	r3, r3
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d96:	1812      	adds	r2, r2, r0
 8002d98:	eb41 0303 	adc.w	r3, r1, r3
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	f04f 0500 	mov.w	r5, #0
 8002da4:	00dd      	lsls	r5, r3, #3
 8002da6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002daa:	00d4      	lsls	r4, r2, #3
 8002dac:	4622      	mov	r2, r4
 8002dae:	462b      	mov	r3, r5
 8002db0:	1814      	adds	r4, r2, r0
 8002db2:	653c      	str	r4, [r7, #80]	; 0x50
 8002db4:	414b      	adcs	r3, r1
 8002db6:	657b      	str	r3, [r7, #84]	; 0x54
 8002db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	61b9      	str	r1, [r7, #24]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002dd2:	f7fd fa5d 	bl	8000290 <__aeabi_uldivmod>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <UART_SetConfig+0x38c>)
 8002ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2164      	movs	r1, #100	; 0x64
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a67      	ldr	r2, [pc, #412]	; (8002f8c <UART_SetConfig+0x38c>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	f003 0207 	and.w	r2, r3, #7
 8002dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4432      	add	r2, r6
 8002e00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e02:	e0b9      	b.n	8002f78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e06:	461c      	mov	r4, r3
 8002e08:	f04f 0500 	mov.w	r5, #0
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	462b      	mov	r3, r5
 8002e10:	1891      	adds	r1, r2, r2
 8002e12:	6139      	str	r1, [r7, #16]
 8002e14:	415b      	adcs	r3, r3
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e1c:	1912      	adds	r2, r2, r4
 8002e1e:	eb45 0303 	adc.w	r3, r5, r3
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	00d9      	lsls	r1, r3, #3
 8002e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e30:	00d0      	lsls	r0, r2, #3
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	eb12 0804 	adds.w	r8, r2, r4
 8002e3a:	eb43 0905 	adc.w	r9, r3, r5
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	008b      	lsls	r3, r1, #2
 8002e52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e56:	0082      	lsls	r2, r0, #2
 8002e58:	4640      	mov	r0, r8
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	f7fd fa18 	bl	8000290 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <UART_SetConfig+0x38c>)
 8002e66:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	011e      	lsls	r6, r3, #4
 8002e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e70:	4618      	mov	r0, r3
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	1894      	adds	r4, r2, r2
 8002e7c:	60bc      	str	r4, [r7, #8]
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e86:	1812      	adds	r2, r2, r0
 8002e88:	eb41 0303 	adc.w	r3, r1, r3
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	f04f 0500 	mov.w	r5, #0
 8002e94:	00dd      	lsls	r5, r3, #3
 8002e96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e9a:	00d4      	lsls	r4, r2, #3
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	1814      	adds	r4, r2, r0
 8002ea2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ea4:	414b      	adcs	r3, r1
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	008b      	lsls	r3, r1, #2
 8002ebc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ec0:	0082      	lsls	r2, r0, #2
 8002ec2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ec6:	f7fd f9e3 	bl	8000290 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <UART_SetConfig+0x38c>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <UART_SetConfig+0x38c>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eee:	441e      	add	r6, r3
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	1894      	adds	r4, r2, r2
 8002efe:	603c      	str	r4, [r7, #0]
 8002f00:	415b      	adcs	r3, r3
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f08:	1812      	adds	r2, r2, r0
 8002f0a:	eb41 0303 	adc.w	r3, r1, r3
 8002f0e:	f04f 0400 	mov.w	r4, #0
 8002f12:	f04f 0500 	mov.w	r5, #0
 8002f16:	00dd      	lsls	r5, r3, #3
 8002f18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f1c:	00d4      	lsls	r4, r2, #3
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	eb12 0a00 	adds.w	sl, r2, r0
 8002f26:	eb43 0b01 	adc.w	fp, r3, r1
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	008b      	lsls	r3, r1, #2
 8002f3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f42:	0082      	lsls	r2, r0, #2
 8002f44:	4650      	mov	r0, sl
 8002f46:	4659      	mov	r1, fp
 8002f48:	f7fd f9a2 	bl	8000290 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <UART_SetConfig+0x38c>)
 8002f52:	fba3 1302 	umull	r1, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2164      	movs	r1, #100	; 0x64
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	3332      	adds	r3, #50	; 0x32
 8002f64:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <UART_SetConfig+0x38c>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	f003 020f 	and.w	r2, r3, #15
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4432      	add	r2, r6
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	377c      	adds	r7, #124	; 0x7c
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f82:	bf00      	nop
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40011400 	.word	0x40011400
 8002f8c:	51eb851f 	.word	0x51eb851f

08002f90 <__errno>:
 8002f90:	4b01      	ldr	r3, [pc, #4]	; (8002f98 <__errno+0x8>)
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c

08002f9c <__libc_init_array>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4d0d      	ldr	r5, [pc, #52]	; (8002fd4 <__libc_init_array+0x38>)
 8002fa0:	4c0d      	ldr	r4, [pc, #52]	; (8002fd8 <__libc_init_array+0x3c>)
 8002fa2:	1b64      	subs	r4, r4, r5
 8002fa4:	10a4      	asrs	r4, r4, #2
 8002fa6:	2600      	movs	r6, #0
 8002fa8:	42a6      	cmp	r6, r4
 8002faa:	d109      	bne.n	8002fc0 <__libc_init_array+0x24>
 8002fac:	4d0b      	ldr	r5, [pc, #44]	; (8002fdc <__libc_init_array+0x40>)
 8002fae:	4c0c      	ldr	r4, [pc, #48]	; (8002fe0 <__libc_init_array+0x44>)
 8002fb0:	f000 ff8a 	bl	8003ec8 <_init>
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	2600      	movs	r6, #0
 8002fba:	42a6      	cmp	r6, r4
 8002fbc:	d105      	bne.n	8002fca <__libc_init_array+0x2e>
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc4:	4798      	blx	r3
 8002fc6:	3601      	adds	r6, #1
 8002fc8:	e7ee      	b.n	8002fa8 <__libc_init_array+0xc>
 8002fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fce:	4798      	blx	r3
 8002fd0:	3601      	adds	r6, #1
 8002fd2:	e7f2      	b.n	8002fba <__libc_init_array+0x1e>
 8002fd4:	08003fd0 	.word	0x08003fd0
 8002fd8:	08003fd0 	.word	0x08003fd0
 8002fdc:	08003fd0 	.word	0x08003fd0
 8002fe0:	08003fd4 	.word	0x08003fd4

08002fe4 <memset>:
 8002fe4:	4402      	add	r2, r0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <iprintf>:
 8002ff4:	b40f      	push	{r0, r1, r2, r3}
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <iprintf+0x2c>)
 8002ff8:	b513      	push	{r0, r1, r4, lr}
 8002ffa:	681c      	ldr	r4, [r3, #0]
 8002ffc:	b124      	cbz	r4, 8003008 <iprintf+0x14>
 8002ffe:	69a3      	ldr	r3, [r4, #24]
 8003000:	b913      	cbnz	r3, 8003008 <iprintf+0x14>
 8003002:	4620      	mov	r0, r4
 8003004:	f000 f87a 	bl	80030fc <__sinit>
 8003008:	ab05      	add	r3, sp, #20
 800300a:	9a04      	ldr	r2, [sp, #16]
 800300c:	68a1      	ldr	r1, [r4, #8]
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	4620      	mov	r0, r4
 8003012:	f000 f997 	bl	8003344 <_vfiprintf_r>
 8003016:	b002      	add	sp, #8
 8003018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800301c:	b004      	add	sp, #16
 800301e:	4770      	bx	lr
 8003020:	2000000c 	.word	0x2000000c

08003024 <strncpy>:
 8003024:	b510      	push	{r4, lr}
 8003026:	3901      	subs	r1, #1
 8003028:	4603      	mov	r3, r0
 800302a:	b132      	cbz	r2, 800303a <strncpy+0x16>
 800302c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003030:	f803 4b01 	strb.w	r4, [r3], #1
 8003034:	3a01      	subs	r2, #1
 8003036:	2c00      	cmp	r4, #0
 8003038:	d1f7      	bne.n	800302a <strncpy+0x6>
 800303a:	441a      	add	r2, r3
 800303c:	2100      	movs	r1, #0
 800303e:	4293      	cmp	r3, r2
 8003040:	d100      	bne.n	8003044 <strncpy+0x20>
 8003042:	bd10      	pop	{r4, pc}
 8003044:	f803 1b01 	strb.w	r1, [r3], #1
 8003048:	e7f9      	b.n	800303e <strncpy+0x1a>
	...

0800304c <std>:
 800304c:	2300      	movs	r3, #0
 800304e:	b510      	push	{r4, lr}
 8003050:	4604      	mov	r4, r0
 8003052:	e9c0 3300 	strd	r3, r3, [r0]
 8003056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800305a:	6083      	str	r3, [r0, #8]
 800305c:	8181      	strh	r1, [r0, #12]
 800305e:	6643      	str	r3, [r0, #100]	; 0x64
 8003060:	81c2      	strh	r2, [r0, #14]
 8003062:	6183      	str	r3, [r0, #24]
 8003064:	4619      	mov	r1, r3
 8003066:	2208      	movs	r2, #8
 8003068:	305c      	adds	r0, #92	; 0x5c
 800306a:	f7ff ffbb 	bl	8002fe4 <memset>
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <std+0x38>)
 8003070:	6263      	str	r3, [r4, #36]	; 0x24
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <std+0x3c>)
 8003074:	62a3      	str	r3, [r4, #40]	; 0x28
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <std+0x40>)
 8003078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <std+0x44>)
 800307c:	6224      	str	r4, [r4, #32]
 800307e:	6323      	str	r3, [r4, #48]	; 0x30
 8003080:	bd10      	pop	{r4, pc}
 8003082:	bf00      	nop
 8003084:	080038ed 	.word	0x080038ed
 8003088:	0800390f 	.word	0x0800390f
 800308c:	08003947 	.word	0x08003947
 8003090:	0800396b 	.word	0x0800396b

08003094 <_cleanup_r>:
 8003094:	4901      	ldr	r1, [pc, #4]	; (800309c <_cleanup_r+0x8>)
 8003096:	f000 b8af 	b.w	80031f8 <_fwalk_reent>
 800309a:	bf00      	nop
 800309c:	08003c45 	.word	0x08003c45

080030a0 <__sfmoreglue>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	1e4a      	subs	r2, r1, #1
 80030a4:	2568      	movs	r5, #104	; 0x68
 80030a6:	4355      	muls	r5, r2
 80030a8:	460e      	mov	r6, r1
 80030aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030ae:	f000 f8c5 	bl	800323c <_malloc_r>
 80030b2:	4604      	mov	r4, r0
 80030b4:	b140      	cbz	r0, 80030c8 <__sfmoreglue+0x28>
 80030b6:	2100      	movs	r1, #0
 80030b8:	e9c0 1600 	strd	r1, r6, [r0]
 80030bc:	300c      	adds	r0, #12
 80030be:	60a0      	str	r0, [r4, #8]
 80030c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030c4:	f7ff ff8e 	bl	8002fe4 <memset>
 80030c8:	4620      	mov	r0, r4
 80030ca:	bd70      	pop	{r4, r5, r6, pc}

080030cc <__sfp_lock_acquire>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__sfp_lock_acquire+0x8>)
 80030ce:	f000 b8b3 	b.w	8003238 <__retarget_lock_acquire_recursive>
 80030d2:	bf00      	nop
 80030d4:	20000364 	.word	0x20000364

080030d8 <__sfp_lock_release>:
 80030d8:	4801      	ldr	r0, [pc, #4]	; (80030e0 <__sfp_lock_release+0x8>)
 80030da:	f000 b8ae 	b.w	800323a <__retarget_lock_release_recursive>
 80030de:	bf00      	nop
 80030e0:	20000364 	.word	0x20000364

080030e4 <__sinit_lock_acquire>:
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <__sinit_lock_acquire+0x8>)
 80030e6:	f000 b8a7 	b.w	8003238 <__retarget_lock_acquire_recursive>
 80030ea:	bf00      	nop
 80030ec:	2000035f 	.word	0x2000035f

080030f0 <__sinit_lock_release>:
 80030f0:	4801      	ldr	r0, [pc, #4]	; (80030f8 <__sinit_lock_release+0x8>)
 80030f2:	f000 b8a2 	b.w	800323a <__retarget_lock_release_recursive>
 80030f6:	bf00      	nop
 80030f8:	2000035f 	.word	0x2000035f

080030fc <__sinit>:
 80030fc:	b510      	push	{r4, lr}
 80030fe:	4604      	mov	r4, r0
 8003100:	f7ff fff0 	bl	80030e4 <__sinit_lock_acquire>
 8003104:	69a3      	ldr	r3, [r4, #24]
 8003106:	b11b      	cbz	r3, 8003110 <__sinit+0x14>
 8003108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800310c:	f7ff bff0 	b.w	80030f0 <__sinit_lock_release>
 8003110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003114:	6523      	str	r3, [r4, #80]	; 0x50
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <__sinit+0x68>)
 8003118:	4a13      	ldr	r2, [pc, #76]	; (8003168 <__sinit+0x6c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	62a2      	str	r2, [r4, #40]	; 0x28
 800311e:	42a3      	cmp	r3, r4
 8003120:	bf04      	itt	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	61a3      	streq	r3, [r4, #24]
 8003126:	4620      	mov	r0, r4
 8003128:	f000 f820 	bl	800316c <__sfp>
 800312c:	6060      	str	r0, [r4, #4]
 800312e:	4620      	mov	r0, r4
 8003130:	f000 f81c 	bl	800316c <__sfp>
 8003134:	60a0      	str	r0, [r4, #8]
 8003136:	4620      	mov	r0, r4
 8003138:	f000 f818 	bl	800316c <__sfp>
 800313c:	2200      	movs	r2, #0
 800313e:	60e0      	str	r0, [r4, #12]
 8003140:	2104      	movs	r1, #4
 8003142:	6860      	ldr	r0, [r4, #4]
 8003144:	f7ff ff82 	bl	800304c <std>
 8003148:	68a0      	ldr	r0, [r4, #8]
 800314a:	2201      	movs	r2, #1
 800314c:	2109      	movs	r1, #9
 800314e:	f7ff ff7d 	bl	800304c <std>
 8003152:	68e0      	ldr	r0, [r4, #12]
 8003154:	2202      	movs	r2, #2
 8003156:	2112      	movs	r1, #18
 8003158:	f7ff ff78 	bl	800304c <std>
 800315c:	2301      	movs	r3, #1
 800315e:	61a3      	str	r3, [r4, #24]
 8003160:	e7d2      	b.n	8003108 <__sinit+0xc>
 8003162:	bf00      	nop
 8003164:	08003f30 	.word	0x08003f30
 8003168:	08003095 	.word	0x08003095

0800316c <__sfp>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	4607      	mov	r7, r0
 8003170:	f7ff ffac 	bl	80030cc <__sfp_lock_acquire>
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <__sfp+0x84>)
 8003176:	681e      	ldr	r6, [r3, #0]
 8003178:	69b3      	ldr	r3, [r6, #24]
 800317a:	b913      	cbnz	r3, 8003182 <__sfp+0x16>
 800317c:	4630      	mov	r0, r6
 800317e:	f7ff ffbd 	bl	80030fc <__sinit>
 8003182:	3648      	adds	r6, #72	; 0x48
 8003184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003188:	3b01      	subs	r3, #1
 800318a:	d503      	bpl.n	8003194 <__sfp+0x28>
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	b30b      	cbz	r3, 80031d4 <__sfp+0x68>
 8003190:	6836      	ldr	r6, [r6, #0]
 8003192:	e7f7      	b.n	8003184 <__sfp+0x18>
 8003194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003198:	b9d5      	cbnz	r5, 80031d0 <__sfp+0x64>
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <__sfp+0x88>)
 800319c:	60e3      	str	r3, [r4, #12]
 800319e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031a2:	6665      	str	r5, [r4, #100]	; 0x64
 80031a4:	f000 f847 	bl	8003236 <__retarget_lock_init_recursive>
 80031a8:	f7ff ff96 	bl	80030d8 <__sfp_lock_release>
 80031ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031b4:	6025      	str	r5, [r4, #0]
 80031b6:	61a5      	str	r5, [r4, #24]
 80031b8:	2208      	movs	r2, #8
 80031ba:	4629      	mov	r1, r5
 80031bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031c0:	f7ff ff10 	bl	8002fe4 <memset>
 80031c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031cc:	4620      	mov	r0, r4
 80031ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d0:	3468      	adds	r4, #104	; 0x68
 80031d2:	e7d9      	b.n	8003188 <__sfp+0x1c>
 80031d4:	2104      	movs	r1, #4
 80031d6:	4638      	mov	r0, r7
 80031d8:	f7ff ff62 	bl	80030a0 <__sfmoreglue>
 80031dc:	4604      	mov	r4, r0
 80031de:	6030      	str	r0, [r6, #0]
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d1d5      	bne.n	8003190 <__sfp+0x24>
 80031e4:	f7ff ff78 	bl	80030d8 <__sfp_lock_release>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	e7ee      	b.n	80031cc <__sfp+0x60>
 80031ee:	bf00      	nop
 80031f0:	08003f30 	.word	0x08003f30
 80031f4:	ffff0001 	.word	0xffff0001

080031f8 <_fwalk_reent>:
 80031f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031fc:	4606      	mov	r6, r0
 80031fe:	4688      	mov	r8, r1
 8003200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003204:	2700      	movs	r7, #0
 8003206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800320a:	f1b9 0901 	subs.w	r9, r9, #1
 800320e:	d505      	bpl.n	800321c <_fwalk_reent+0x24>
 8003210:	6824      	ldr	r4, [r4, #0]
 8003212:	2c00      	cmp	r4, #0
 8003214:	d1f7      	bne.n	8003206 <_fwalk_reent+0xe>
 8003216:	4638      	mov	r0, r7
 8003218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321c:	89ab      	ldrh	r3, [r5, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d907      	bls.n	8003232 <_fwalk_reent+0x3a>
 8003222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003226:	3301      	adds	r3, #1
 8003228:	d003      	beq.n	8003232 <_fwalk_reent+0x3a>
 800322a:	4629      	mov	r1, r5
 800322c:	4630      	mov	r0, r6
 800322e:	47c0      	blx	r8
 8003230:	4307      	orrs	r7, r0
 8003232:	3568      	adds	r5, #104	; 0x68
 8003234:	e7e9      	b.n	800320a <_fwalk_reent+0x12>

08003236 <__retarget_lock_init_recursive>:
 8003236:	4770      	bx	lr

08003238 <__retarget_lock_acquire_recursive>:
 8003238:	4770      	bx	lr

0800323a <__retarget_lock_release_recursive>:
 800323a:	4770      	bx	lr

0800323c <_malloc_r>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	1ccd      	adds	r5, r1, #3
 8003240:	f025 0503 	bic.w	r5, r5, #3
 8003244:	3508      	adds	r5, #8
 8003246:	2d0c      	cmp	r5, #12
 8003248:	bf38      	it	cc
 800324a:	250c      	movcc	r5, #12
 800324c:	2d00      	cmp	r5, #0
 800324e:	4606      	mov	r6, r0
 8003250:	db01      	blt.n	8003256 <_malloc_r+0x1a>
 8003252:	42a9      	cmp	r1, r5
 8003254:	d903      	bls.n	800325e <_malloc_r+0x22>
 8003256:	230c      	movs	r3, #12
 8003258:	6033      	str	r3, [r6, #0]
 800325a:	2000      	movs	r0, #0
 800325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325e:	f000 fda3 	bl	8003da8 <__malloc_lock>
 8003262:	4921      	ldr	r1, [pc, #132]	; (80032e8 <_malloc_r+0xac>)
 8003264:	680a      	ldr	r2, [r1, #0]
 8003266:	4614      	mov	r4, r2
 8003268:	b99c      	cbnz	r4, 8003292 <_malloc_r+0x56>
 800326a:	4f20      	ldr	r7, [pc, #128]	; (80032ec <_malloc_r+0xb0>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b923      	cbnz	r3, 800327a <_malloc_r+0x3e>
 8003270:	4621      	mov	r1, r4
 8003272:	4630      	mov	r0, r6
 8003274:	f000 fb2a 	bl	80038cc <_sbrk_r>
 8003278:	6038      	str	r0, [r7, #0]
 800327a:	4629      	mov	r1, r5
 800327c:	4630      	mov	r0, r6
 800327e:	f000 fb25 	bl	80038cc <_sbrk_r>
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	d123      	bne.n	80032ce <_malloc_r+0x92>
 8003286:	230c      	movs	r3, #12
 8003288:	6033      	str	r3, [r6, #0]
 800328a:	4630      	mov	r0, r6
 800328c:	f000 fd92 	bl	8003db4 <__malloc_unlock>
 8003290:	e7e3      	b.n	800325a <_malloc_r+0x1e>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	1b5b      	subs	r3, r3, r5
 8003296:	d417      	bmi.n	80032c8 <_malloc_r+0x8c>
 8003298:	2b0b      	cmp	r3, #11
 800329a:	d903      	bls.n	80032a4 <_malloc_r+0x68>
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	441c      	add	r4, r3
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	e004      	b.n	80032ae <_malloc_r+0x72>
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	42a2      	cmp	r2, r4
 80032a8:	bf0c      	ite	eq
 80032aa:	600b      	streq	r3, [r1, #0]
 80032ac:	6053      	strne	r3, [r2, #4]
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 fd80 	bl	8003db4 <__malloc_unlock>
 80032b4:	f104 000b 	add.w	r0, r4, #11
 80032b8:	1d23      	adds	r3, r4, #4
 80032ba:	f020 0007 	bic.w	r0, r0, #7
 80032be:	1ac2      	subs	r2, r0, r3
 80032c0:	d0cc      	beq.n	800325c <_malloc_r+0x20>
 80032c2:	1a1b      	subs	r3, r3, r0
 80032c4:	50a3      	str	r3, [r4, r2]
 80032c6:	e7c9      	b.n	800325c <_malloc_r+0x20>
 80032c8:	4622      	mov	r2, r4
 80032ca:	6864      	ldr	r4, [r4, #4]
 80032cc:	e7cc      	b.n	8003268 <_malloc_r+0x2c>
 80032ce:	1cc4      	adds	r4, r0, #3
 80032d0:	f024 0403 	bic.w	r4, r4, #3
 80032d4:	42a0      	cmp	r0, r4
 80032d6:	d0e3      	beq.n	80032a0 <_malloc_r+0x64>
 80032d8:	1a21      	subs	r1, r4, r0
 80032da:	4630      	mov	r0, r6
 80032dc:	f000 faf6 	bl	80038cc <_sbrk_r>
 80032e0:	3001      	adds	r0, #1
 80032e2:	d1dd      	bne.n	80032a0 <_malloc_r+0x64>
 80032e4:	e7cf      	b.n	8003286 <_malloc_r+0x4a>
 80032e6:	bf00      	nop
 80032e8:	20000090 	.word	0x20000090
 80032ec:	20000094 	.word	0x20000094

080032f0 <__sfputc_r>:
 80032f0:	6893      	ldr	r3, [r2, #8]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	b410      	push	{r4}
 80032f8:	6093      	str	r3, [r2, #8]
 80032fa:	da08      	bge.n	800330e <__sfputc_r+0x1e>
 80032fc:	6994      	ldr	r4, [r2, #24]
 80032fe:	42a3      	cmp	r3, r4
 8003300:	db01      	blt.n	8003306 <__sfputc_r+0x16>
 8003302:	290a      	cmp	r1, #10
 8003304:	d103      	bne.n	800330e <__sfputc_r+0x1e>
 8003306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800330a:	f000 bb33 	b.w	8003974 <__swbuf_r>
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	1c58      	adds	r0, r3, #1
 8003312:	6010      	str	r0, [r2, #0]
 8003314:	7019      	strb	r1, [r3, #0]
 8003316:	4608      	mov	r0, r1
 8003318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800331c:	4770      	bx	lr

0800331e <__sfputs_r>:
 800331e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003320:	4606      	mov	r6, r0
 8003322:	460f      	mov	r7, r1
 8003324:	4614      	mov	r4, r2
 8003326:	18d5      	adds	r5, r2, r3
 8003328:	42ac      	cmp	r4, r5
 800332a:	d101      	bne.n	8003330 <__sfputs_r+0x12>
 800332c:	2000      	movs	r0, #0
 800332e:	e007      	b.n	8003340 <__sfputs_r+0x22>
 8003330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003334:	463a      	mov	r2, r7
 8003336:	4630      	mov	r0, r6
 8003338:	f7ff ffda 	bl	80032f0 <__sfputc_r>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d1f3      	bne.n	8003328 <__sfputs_r+0xa>
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003344 <_vfiprintf_r>:
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	460d      	mov	r5, r1
 800334a:	b09d      	sub	sp, #116	; 0x74
 800334c:	4614      	mov	r4, r2
 800334e:	4698      	mov	r8, r3
 8003350:	4606      	mov	r6, r0
 8003352:	b118      	cbz	r0, 800335c <_vfiprintf_r+0x18>
 8003354:	6983      	ldr	r3, [r0, #24]
 8003356:	b90b      	cbnz	r3, 800335c <_vfiprintf_r+0x18>
 8003358:	f7ff fed0 	bl	80030fc <__sinit>
 800335c:	4b89      	ldr	r3, [pc, #548]	; (8003584 <_vfiprintf_r+0x240>)
 800335e:	429d      	cmp	r5, r3
 8003360:	d11b      	bne.n	800339a <_vfiprintf_r+0x56>
 8003362:	6875      	ldr	r5, [r6, #4]
 8003364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003366:	07d9      	lsls	r1, r3, #31
 8003368:	d405      	bmi.n	8003376 <_vfiprintf_r+0x32>
 800336a:	89ab      	ldrh	r3, [r5, #12]
 800336c:	059a      	lsls	r2, r3, #22
 800336e:	d402      	bmi.n	8003376 <_vfiprintf_r+0x32>
 8003370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003372:	f7ff ff61 	bl	8003238 <__retarget_lock_acquire_recursive>
 8003376:	89ab      	ldrh	r3, [r5, #12]
 8003378:	071b      	lsls	r3, r3, #28
 800337a:	d501      	bpl.n	8003380 <_vfiprintf_r+0x3c>
 800337c:	692b      	ldr	r3, [r5, #16]
 800337e:	b9eb      	cbnz	r3, 80033bc <_vfiprintf_r+0x78>
 8003380:	4629      	mov	r1, r5
 8003382:	4630      	mov	r0, r6
 8003384:	f000 fb5a 	bl	8003a3c <__swsetup_r>
 8003388:	b1c0      	cbz	r0, 80033bc <_vfiprintf_r+0x78>
 800338a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800338c:	07dc      	lsls	r4, r3, #31
 800338e:	d50e      	bpl.n	80033ae <_vfiprintf_r+0x6a>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	b01d      	add	sp, #116	; 0x74
 8003396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339a:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <_vfiprintf_r+0x244>)
 800339c:	429d      	cmp	r5, r3
 800339e:	d101      	bne.n	80033a4 <_vfiprintf_r+0x60>
 80033a0:	68b5      	ldr	r5, [r6, #8]
 80033a2:	e7df      	b.n	8003364 <_vfiprintf_r+0x20>
 80033a4:	4b79      	ldr	r3, [pc, #484]	; (800358c <_vfiprintf_r+0x248>)
 80033a6:	429d      	cmp	r5, r3
 80033a8:	bf08      	it	eq
 80033aa:	68f5      	ldreq	r5, [r6, #12]
 80033ac:	e7da      	b.n	8003364 <_vfiprintf_r+0x20>
 80033ae:	89ab      	ldrh	r3, [r5, #12]
 80033b0:	0598      	lsls	r0, r3, #22
 80033b2:	d4ed      	bmi.n	8003390 <_vfiprintf_r+0x4c>
 80033b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033b6:	f7ff ff40 	bl	800323a <__retarget_lock_release_recursive>
 80033ba:	e7e9      	b.n	8003390 <_vfiprintf_r+0x4c>
 80033bc:	2300      	movs	r3, #0
 80033be:	9309      	str	r3, [sp, #36]	; 0x24
 80033c0:	2320      	movs	r3, #32
 80033c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ca:	2330      	movs	r3, #48	; 0x30
 80033cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003590 <_vfiprintf_r+0x24c>
 80033d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033d4:	f04f 0901 	mov.w	r9, #1
 80033d8:	4623      	mov	r3, r4
 80033da:	469a      	mov	sl, r3
 80033dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033e0:	b10a      	cbz	r2, 80033e6 <_vfiprintf_r+0xa2>
 80033e2:	2a25      	cmp	r2, #37	; 0x25
 80033e4:	d1f9      	bne.n	80033da <_vfiprintf_r+0x96>
 80033e6:	ebba 0b04 	subs.w	fp, sl, r4
 80033ea:	d00b      	beq.n	8003404 <_vfiprintf_r+0xc0>
 80033ec:	465b      	mov	r3, fp
 80033ee:	4622      	mov	r2, r4
 80033f0:	4629      	mov	r1, r5
 80033f2:	4630      	mov	r0, r6
 80033f4:	f7ff ff93 	bl	800331e <__sfputs_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	f000 80aa 	beq.w	8003552 <_vfiprintf_r+0x20e>
 80033fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003400:	445a      	add	r2, fp
 8003402:	9209      	str	r2, [sp, #36]	; 0x24
 8003404:	f89a 3000 	ldrb.w	r3, [sl]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a2 	beq.w	8003552 <_vfiprintf_r+0x20e>
 800340e:	2300      	movs	r3, #0
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003418:	f10a 0a01 	add.w	sl, sl, #1
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	9307      	str	r3, [sp, #28]
 8003420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003424:	931a      	str	r3, [sp, #104]	; 0x68
 8003426:	4654      	mov	r4, sl
 8003428:	2205      	movs	r2, #5
 800342a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800342e:	4858      	ldr	r0, [pc, #352]	; (8003590 <_vfiprintf_r+0x24c>)
 8003430:	f7fc fede 	bl	80001f0 <memchr>
 8003434:	9a04      	ldr	r2, [sp, #16]
 8003436:	b9d8      	cbnz	r0, 8003470 <_vfiprintf_r+0x12c>
 8003438:	06d1      	lsls	r1, r2, #27
 800343a:	bf44      	itt	mi
 800343c:	2320      	movmi	r3, #32
 800343e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003442:	0713      	lsls	r3, r2, #28
 8003444:	bf44      	itt	mi
 8003446:	232b      	movmi	r3, #43	; 0x2b
 8003448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800344c:	f89a 3000 	ldrb.w	r3, [sl]
 8003450:	2b2a      	cmp	r3, #42	; 0x2a
 8003452:	d015      	beq.n	8003480 <_vfiprintf_r+0x13c>
 8003454:	9a07      	ldr	r2, [sp, #28]
 8003456:	4654      	mov	r4, sl
 8003458:	2000      	movs	r0, #0
 800345a:	f04f 0c0a 	mov.w	ip, #10
 800345e:	4621      	mov	r1, r4
 8003460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003464:	3b30      	subs	r3, #48	; 0x30
 8003466:	2b09      	cmp	r3, #9
 8003468:	d94e      	bls.n	8003508 <_vfiprintf_r+0x1c4>
 800346a:	b1b0      	cbz	r0, 800349a <_vfiprintf_r+0x156>
 800346c:	9207      	str	r2, [sp, #28]
 800346e:	e014      	b.n	800349a <_vfiprintf_r+0x156>
 8003470:	eba0 0308 	sub.w	r3, r0, r8
 8003474:	fa09 f303 	lsl.w	r3, r9, r3
 8003478:	4313      	orrs	r3, r2
 800347a:	9304      	str	r3, [sp, #16]
 800347c:	46a2      	mov	sl, r4
 800347e:	e7d2      	b.n	8003426 <_vfiprintf_r+0xe2>
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	1d19      	adds	r1, r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	9103      	str	r1, [sp, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	bfbb      	ittet	lt
 800348c:	425b      	neglt	r3, r3
 800348e:	f042 0202 	orrlt.w	r2, r2, #2
 8003492:	9307      	strge	r3, [sp, #28]
 8003494:	9307      	strlt	r3, [sp, #28]
 8003496:	bfb8      	it	lt
 8003498:	9204      	strlt	r2, [sp, #16]
 800349a:	7823      	ldrb	r3, [r4, #0]
 800349c:	2b2e      	cmp	r3, #46	; 0x2e
 800349e:	d10c      	bne.n	80034ba <_vfiprintf_r+0x176>
 80034a0:	7863      	ldrb	r3, [r4, #1]
 80034a2:	2b2a      	cmp	r3, #42	; 0x2a
 80034a4:	d135      	bne.n	8003512 <_vfiprintf_r+0x1ce>
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	1d1a      	adds	r2, r3, #4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	9203      	str	r2, [sp, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bfb8      	it	lt
 80034b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80034b6:	3402      	adds	r4, #2
 80034b8:	9305      	str	r3, [sp, #20]
 80034ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80035a0 <_vfiprintf_r+0x25c>
 80034be:	7821      	ldrb	r1, [r4, #0]
 80034c0:	2203      	movs	r2, #3
 80034c2:	4650      	mov	r0, sl
 80034c4:	f7fc fe94 	bl	80001f0 <memchr>
 80034c8:	b140      	cbz	r0, 80034dc <_vfiprintf_r+0x198>
 80034ca:	2340      	movs	r3, #64	; 0x40
 80034cc:	eba0 000a 	sub.w	r0, r0, sl
 80034d0:	fa03 f000 	lsl.w	r0, r3, r0
 80034d4:	9b04      	ldr	r3, [sp, #16]
 80034d6:	4303      	orrs	r3, r0
 80034d8:	3401      	adds	r4, #1
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e0:	482c      	ldr	r0, [pc, #176]	; (8003594 <_vfiprintf_r+0x250>)
 80034e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034e6:	2206      	movs	r2, #6
 80034e8:	f7fc fe82 	bl	80001f0 <memchr>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d03f      	beq.n	8003570 <_vfiprintf_r+0x22c>
 80034f0:	4b29      	ldr	r3, [pc, #164]	; (8003598 <_vfiprintf_r+0x254>)
 80034f2:	bb1b      	cbnz	r3, 800353c <_vfiprintf_r+0x1f8>
 80034f4:	9b03      	ldr	r3, [sp, #12]
 80034f6:	3307      	adds	r3, #7
 80034f8:	f023 0307 	bic.w	r3, r3, #7
 80034fc:	3308      	adds	r3, #8
 80034fe:	9303      	str	r3, [sp, #12]
 8003500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003502:	443b      	add	r3, r7
 8003504:	9309      	str	r3, [sp, #36]	; 0x24
 8003506:	e767      	b.n	80033d8 <_vfiprintf_r+0x94>
 8003508:	fb0c 3202 	mla	r2, ip, r2, r3
 800350c:	460c      	mov	r4, r1
 800350e:	2001      	movs	r0, #1
 8003510:	e7a5      	b.n	800345e <_vfiprintf_r+0x11a>
 8003512:	2300      	movs	r3, #0
 8003514:	3401      	adds	r4, #1
 8003516:	9305      	str	r3, [sp, #20]
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 0c0a 	mov.w	ip, #10
 800351e:	4620      	mov	r0, r4
 8003520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003524:	3a30      	subs	r2, #48	; 0x30
 8003526:	2a09      	cmp	r2, #9
 8003528:	d903      	bls.n	8003532 <_vfiprintf_r+0x1ee>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0c5      	beq.n	80034ba <_vfiprintf_r+0x176>
 800352e:	9105      	str	r1, [sp, #20]
 8003530:	e7c3      	b.n	80034ba <_vfiprintf_r+0x176>
 8003532:	fb0c 2101 	mla	r1, ip, r1, r2
 8003536:	4604      	mov	r4, r0
 8003538:	2301      	movs	r3, #1
 800353a:	e7f0      	b.n	800351e <_vfiprintf_r+0x1da>
 800353c:	ab03      	add	r3, sp, #12
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	462a      	mov	r2, r5
 8003542:	4b16      	ldr	r3, [pc, #88]	; (800359c <_vfiprintf_r+0x258>)
 8003544:	a904      	add	r1, sp, #16
 8003546:	4630      	mov	r0, r6
 8003548:	f3af 8000 	nop.w
 800354c:	4607      	mov	r7, r0
 800354e:	1c78      	adds	r0, r7, #1
 8003550:	d1d6      	bne.n	8003500 <_vfiprintf_r+0x1bc>
 8003552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003554:	07d9      	lsls	r1, r3, #31
 8003556:	d405      	bmi.n	8003564 <_vfiprintf_r+0x220>
 8003558:	89ab      	ldrh	r3, [r5, #12]
 800355a:	059a      	lsls	r2, r3, #22
 800355c:	d402      	bmi.n	8003564 <_vfiprintf_r+0x220>
 800355e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003560:	f7ff fe6b 	bl	800323a <__retarget_lock_release_recursive>
 8003564:	89ab      	ldrh	r3, [r5, #12]
 8003566:	065b      	lsls	r3, r3, #25
 8003568:	f53f af12 	bmi.w	8003390 <_vfiprintf_r+0x4c>
 800356c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800356e:	e711      	b.n	8003394 <_vfiprintf_r+0x50>
 8003570:	ab03      	add	r3, sp, #12
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	462a      	mov	r2, r5
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <_vfiprintf_r+0x258>)
 8003578:	a904      	add	r1, sp, #16
 800357a:	4630      	mov	r0, r6
 800357c:	f000 f880 	bl	8003680 <_printf_i>
 8003580:	e7e4      	b.n	800354c <_vfiprintf_r+0x208>
 8003582:	bf00      	nop
 8003584:	08003f54 	.word	0x08003f54
 8003588:	08003f74 	.word	0x08003f74
 800358c:	08003f34 	.word	0x08003f34
 8003590:	08003f94 	.word	0x08003f94
 8003594:	08003f9e 	.word	0x08003f9e
 8003598:	00000000 	.word	0x00000000
 800359c:	0800331f 	.word	0x0800331f
 80035a0:	08003f9a 	.word	0x08003f9a

080035a4 <_printf_common>:
 80035a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a8:	4616      	mov	r6, r2
 80035aa:	4699      	mov	r9, r3
 80035ac:	688a      	ldr	r2, [r1, #8]
 80035ae:	690b      	ldr	r3, [r1, #16]
 80035b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bfb8      	it	lt
 80035b8:	4613      	movlt	r3, r2
 80035ba:	6033      	str	r3, [r6, #0]
 80035bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035c0:	4607      	mov	r7, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	b10a      	cbz	r2, 80035ca <_printf_common+0x26>
 80035c6:	3301      	adds	r3, #1
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	0699      	lsls	r1, r3, #26
 80035ce:	bf42      	ittt	mi
 80035d0:	6833      	ldrmi	r3, [r6, #0]
 80035d2:	3302      	addmi	r3, #2
 80035d4:	6033      	strmi	r3, [r6, #0]
 80035d6:	6825      	ldr	r5, [r4, #0]
 80035d8:	f015 0506 	ands.w	r5, r5, #6
 80035dc:	d106      	bne.n	80035ec <_printf_common+0x48>
 80035de:	f104 0a19 	add.w	sl, r4, #25
 80035e2:	68e3      	ldr	r3, [r4, #12]
 80035e4:	6832      	ldr	r2, [r6, #0]
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	dc26      	bgt.n	800363a <_printf_common+0x96>
 80035ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035f0:	1e13      	subs	r3, r2, #0
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	bf18      	it	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	0692      	lsls	r2, r2, #26
 80035fa:	d42b      	bmi.n	8003654 <_printf_common+0xb0>
 80035fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003600:	4649      	mov	r1, r9
 8003602:	4638      	mov	r0, r7
 8003604:	47c0      	blx	r8
 8003606:	3001      	adds	r0, #1
 8003608:	d01e      	beq.n	8003648 <_printf_common+0xa4>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	68e5      	ldr	r5, [r4, #12]
 800360e:	6832      	ldr	r2, [r6, #0]
 8003610:	f003 0306 	and.w	r3, r3, #6
 8003614:	2b04      	cmp	r3, #4
 8003616:	bf08      	it	eq
 8003618:	1aad      	subeq	r5, r5, r2
 800361a:	68a3      	ldr	r3, [r4, #8]
 800361c:	6922      	ldr	r2, [r4, #16]
 800361e:	bf0c      	ite	eq
 8003620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003624:	2500      	movne	r5, #0
 8003626:	4293      	cmp	r3, r2
 8003628:	bfc4      	itt	gt
 800362a:	1a9b      	subgt	r3, r3, r2
 800362c:	18ed      	addgt	r5, r5, r3
 800362e:	2600      	movs	r6, #0
 8003630:	341a      	adds	r4, #26
 8003632:	42b5      	cmp	r5, r6
 8003634:	d11a      	bne.n	800366c <_printf_common+0xc8>
 8003636:	2000      	movs	r0, #0
 8003638:	e008      	b.n	800364c <_printf_common+0xa8>
 800363a:	2301      	movs	r3, #1
 800363c:	4652      	mov	r2, sl
 800363e:	4649      	mov	r1, r9
 8003640:	4638      	mov	r0, r7
 8003642:	47c0      	blx	r8
 8003644:	3001      	adds	r0, #1
 8003646:	d103      	bne.n	8003650 <_printf_common+0xac>
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003650:	3501      	adds	r5, #1
 8003652:	e7c6      	b.n	80035e2 <_printf_common+0x3e>
 8003654:	18e1      	adds	r1, r4, r3
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	2030      	movs	r0, #48	; 0x30
 800365a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800365e:	4422      	add	r2, r4
 8003660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003668:	3302      	adds	r3, #2
 800366a:	e7c7      	b.n	80035fc <_printf_common+0x58>
 800366c:	2301      	movs	r3, #1
 800366e:	4622      	mov	r2, r4
 8003670:	4649      	mov	r1, r9
 8003672:	4638      	mov	r0, r7
 8003674:	47c0      	blx	r8
 8003676:	3001      	adds	r0, #1
 8003678:	d0e6      	beq.n	8003648 <_printf_common+0xa4>
 800367a:	3601      	adds	r6, #1
 800367c:	e7d9      	b.n	8003632 <_printf_common+0x8e>
	...

08003680 <_printf_i>:
 8003680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	460c      	mov	r4, r1
 8003686:	4691      	mov	r9, r2
 8003688:	7e27      	ldrb	r7, [r4, #24]
 800368a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800368c:	2f78      	cmp	r7, #120	; 0x78
 800368e:	4680      	mov	r8, r0
 8003690:	469a      	mov	sl, r3
 8003692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003696:	d807      	bhi.n	80036a8 <_printf_i+0x28>
 8003698:	2f62      	cmp	r7, #98	; 0x62
 800369a:	d80a      	bhi.n	80036b2 <_printf_i+0x32>
 800369c:	2f00      	cmp	r7, #0
 800369e:	f000 80d8 	beq.w	8003852 <_printf_i+0x1d2>
 80036a2:	2f58      	cmp	r7, #88	; 0x58
 80036a4:	f000 80a3 	beq.w	80037ee <_printf_i+0x16e>
 80036a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036b0:	e03a      	b.n	8003728 <_printf_i+0xa8>
 80036b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036b6:	2b15      	cmp	r3, #21
 80036b8:	d8f6      	bhi.n	80036a8 <_printf_i+0x28>
 80036ba:	a001      	add	r0, pc, #4	; (adr r0, 80036c0 <_printf_i+0x40>)
 80036bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036c0:	08003719 	.word	0x08003719
 80036c4:	0800372d 	.word	0x0800372d
 80036c8:	080036a9 	.word	0x080036a9
 80036cc:	080036a9 	.word	0x080036a9
 80036d0:	080036a9 	.word	0x080036a9
 80036d4:	080036a9 	.word	0x080036a9
 80036d8:	0800372d 	.word	0x0800372d
 80036dc:	080036a9 	.word	0x080036a9
 80036e0:	080036a9 	.word	0x080036a9
 80036e4:	080036a9 	.word	0x080036a9
 80036e8:	080036a9 	.word	0x080036a9
 80036ec:	08003839 	.word	0x08003839
 80036f0:	0800375d 	.word	0x0800375d
 80036f4:	0800381b 	.word	0x0800381b
 80036f8:	080036a9 	.word	0x080036a9
 80036fc:	080036a9 	.word	0x080036a9
 8003700:	0800385b 	.word	0x0800385b
 8003704:	080036a9 	.word	0x080036a9
 8003708:	0800375d 	.word	0x0800375d
 800370c:	080036a9 	.word	0x080036a9
 8003710:	080036a9 	.word	0x080036a9
 8003714:	08003823 	.word	0x08003823
 8003718:	680b      	ldr	r3, [r1, #0]
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	600a      	str	r2, [r1, #0]
 8003720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003728:	2301      	movs	r3, #1
 800372a:	e0a3      	b.n	8003874 <_printf_i+0x1f4>
 800372c:	6825      	ldr	r5, [r4, #0]
 800372e:	6808      	ldr	r0, [r1, #0]
 8003730:	062e      	lsls	r6, r5, #24
 8003732:	f100 0304 	add.w	r3, r0, #4
 8003736:	d50a      	bpl.n	800374e <_printf_i+0xce>
 8003738:	6805      	ldr	r5, [r0, #0]
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	2d00      	cmp	r5, #0
 800373e:	da03      	bge.n	8003748 <_printf_i+0xc8>
 8003740:	232d      	movs	r3, #45	; 0x2d
 8003742:	426d      	negs	r5, r5
 8003744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003748:	485e      	ldr	r0, [pc, #376]	; (80038c4 <_printf_i+0x244>)
 800374a:	230a      	movs	r3, #10
 800374c:	e019      	b.n	8003782 <_printf_i+0x102>
 800374e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003752:	6805      	ldr	r5, [r0, #0]
 8003754:	600b      	str	r3, [r1, #0]
 8003756:	bf18      	it	ne
 8003758:	b22d      	sxthne	r5, r5
 800375a:	e7ef      	b.n	800373c <_printf_i+0xbc>
 800375c:	680b      	ldr	r3, [r1, #0]
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	1d18      	adds	r0, r3, #4
 8003762:	6008      	str	r0, [r1, #0]
 8003764:	0628      	lsls	r0, r5, #24
 8003766:	d501      	bpl.n	800376c <_printf_i+0xec>
 8003768:	681d      	ldr	r5, [r3, #0]
 800376a:	e002      	b.n	8003772 <_printf_i+0xf2>
 800376c:	0669      	lsls	r1, r5, #25
 800376e:	d5fb      	bpl.n	8003768 <_printf_i+0xe8>
 8003770:	881d      	ldrh	r5, [r3, #0]
 8003772:	4854      	ldr	r0, [pc, #336]	; (80038c4 <_printf_i+0x244>)
 8003774:	2f6f      	cmp	r7, #111	; 0x6f
 8003776:	bf0c      	ite	eq
 8003778:	2308      	moveq	r3, #8
 800377a:	230a      	movne	r3, #10
 800377c:	2100      	movs	r1, #0
 800377e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003782:	6866      	ldr	r6, [r4, #4]
 8003784:	60a6      	str	r6, [r4, #8]
 8003786:	2e00      	cmp	r6, #0
 8003788:	bfa2      	ittt	ge
 800378a:	6821      	ldrge	r1, [r4, #0]
 800378c:	f021 0104 	bicge.w	r1, r1, #4
 8003790:	6021      	strge	r1, [r4, #0]
 8003792:	b90d      	cbnz	r5, 8003798 <_printf_i+0x118>
 8003794:	2e00      	cmp	r6, #0
 8003796:	d04d      	beq.n	8003834 <_printf_i+0x1b4>
 8003798:	4616      	mov	r6, r2
 800379a:	fbb5 f1f3 	udiv	r1, r5, r3
 800379e:	fb03 5711 	mls	r7, r3, r1, r5
 80037a2:	5dc7      	ldrb	r7, [r0, r7]
 80037a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037a8:	462f      	mov	r7, r5
 80037aa:	42bb      	cmp	r3, r7
 80037ac:	460d      	mov	r5, r1
 80037ae:	d9f4      	bls.n	800379a <_printf_i+0x11a>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d10b      	bne.n	80037cc <_printf_i+0x14c>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	07df      	lsls	r7, r3, #31
 80037b8:	d508      	bpl.n	80037cc <_printf_i+0x14c>
 80037ba:	6923      	ldr	r3, [r4, #16]
 80037bc:	6861      	ldr	r1, [r4, #4]
 80037be:	4299      	cmp	r1, r3
 80037c0:	bfde      	ittt	le
 80037c2:	2330      	movle	r3, #48	; 0x30
 80037c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037cc:	1b92      	subs	r2, r2, r6
 80037ce:	6122      	str	r2, [r4, #16]
 80037d0:	f8cd a000 	str.w	sl, [sp]
 80037d4:	464b      	mov	r3, r9
 80037d6:	aa03      	add	r2, sp, #12
 80037d8:	4621      	mov	r1, r4
 80037da:	4640      	mov	r0, r8
 80037dc:	f7ff fee2 	bl	80035a4 <_printf_common>
 80037e0:	3001      	adds	r0, #1
 80037e2:	d14c      	bne.n	800387e <_printf_i+0x1fe>
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	b004      	add	sp, #16
 80037ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ee:	4835      	ldr	r0, [pc, #212]	; (80038c4 <_printf_i+0x244>)
 80037f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	680e      	ldr	r6, [r1, #0]
 80037f8:	061f      	lsls	r7, r3, #24
 80037fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80037fe:	600e      	str	r6, [r1, #0]
 8003800:	d514      	bpl.n	800382c <_printf_i+0x1ac>
 8003802:	07d9      	lsls	r1, r3, #31
 8003804:	bf44      	itt	mi
 8003806:	f043 0320 	orrmi.w	r3, r3, #32
 800380a:	6023      	strmi	r3, [r4, #0]
 800380c:	b91d      	cbnz	r5, 8003816 <_printf_i+0x196>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f023 0320 	bic.w	r3, r3, #32
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	2310      	movs	r3, #16
 8003818:	e7b0      	b.n	800377c <_printf_i+0xfc>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	f043 0320 	orr.w	r3, r3, #32
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	2378      	movs	r3, #120	; 0x78
 8003824:	4828      	ldr	r0, [pc, #160]	; (80038c8 <_printf_i+0x248>)
 8003826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800382a:	e7e3      	b.n	80037f4 <_printf_i+0x174>
 800382c:	065e      	lsls	r6, r3, #25
 800382e:	bf48      	it	mi
 8003830:	b2ad      	uxthmi	r5, r5
 8003832:	e7e6      	b.n	8003802 <_printf_i+0x182>
 8003834:	4616      	mov	r6, r2
 8003836:	e7bb      	b.n	80037b0 <_printf_i+0x130>
 8003838:	680b      	ldr	r3, [r1, #0]
 800383a:	6826      	ldr	r6, [r4, #0]
 800383c:	6960      	ldr	r0, [r4, #20]
 800383e:	1d1d      	adds	r5, r3, #4
 8003840:	600d      	str	r5, [r1, #0]
 8003842:	0635      	lsls	r5, r6, #24
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	d501      	bpl.n	800384c <_printf_i+0x1cc>
 8003848:	6018      	str	r0, [r3, #0]
 800384a:	e002      	b.n	8003852 <_printf_i+0x1d2>
 800384c:	0671      	lsls	r1, r6, #25
 800384e:	d5fb      	bpl.n	8003848 <_printf_i+0x1c8>
 8003850:	8018      	strh	r0, [r3, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	6123      	str	r3, [r4, #16]
 8003856:	4616      	mov	r6, r2
 8003858:	e7ba      	b.n	80037d0 <_printf_i+0x150>
 800385a:	680b      	ldr	r3, [r1, #0]
 800385c:	1d1a      	adds	r2, r3, #4
 800385e:	600a      	str	r2, [r1, #0]
 8003860:	681e      	ldr	r6, [r3, #0]
 8003862:	6862      	ldr	r2, [r4, #4]
 8003864:	2100      	movs	r1, #0
 8003866:	4630      	mov	r0, r6
 8003868:	f7fc fcc2 	bl	80001f0 <memchr>
 800386c:	b108      	cbz	r0, 8003872 <_printf_i+0x1f2>
 800386e:	1b80      	subs	r0, r0, r6
 8003870:	6060      	str	r0, [r4, #4]
 8003872:	6863      	ldr	r3, [r4, #4]
 8003874:	6123      	str	r3, [r4, #16]
 8003876:	2300      	movs	r3, #0
 8003878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800387c:	e7a8      	b.n	80037d0 <_printf_i+0x150>
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	4632      	mov	r2, r6
 8003882:	4649      	mov	r1, r9
 8003884:	4640      	mov	r0, r8
 8003886:	47d0      	blx	sl
 8003888:	3001      	adds	r0, #1
 800388a:	d0ab      	beq.n	80037e4 <_printf_i+0x164>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	079b      	lsls	r3, r3, #30
 8003890:	d413      	bmi.n	80038ba <_printf_i+0x23a>
 8003892:	68e0      	ldr	r0, [r4, #12]
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	4298      	cmp	r0, r3
 8003898:	bfb8      	it	lt
 800389a:	4618      	movlt	r0, r3
 800389c:	e7a4      	b.n	80037e8 <_printf_i+0x168>
 800389e:	2301      	movs	r3, #1
 80038a0:	4632      	mov	r2, r6
 80038a2:	4649      	mov	r1, r9
 80038a4:	4640      	mov	r0, r8
 80038a6:	47d0      	blx	sl
 80038a8:	3001      	adds	r0, #1
 80038aa:	d09b      	beq.n	80037e4 <_printf_i+0x164>
 80038ac:	3501      	adds	r5, #1
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	9903      	ldr	r1, [sp, #12]
 80038b2:	1a5b      	subs	r3, r3, r1
 80038b4:	42ab      	cmp	r3, r5
 80038b6:	dcf2      	bgt.n	800389e <_printf_i+0x21e>
 80038b8:	e7eb      	b.n	8003892 <_printf_i+0x212>
 80038ba:	2500      	movs	r5, #0
 80038bc:	f104 0619 	add.w	r6, r4, #25
 80038c0:	e7f5      	b.n	80038ae <_printf_i+0x22e>
 80038c2:	bf00      	nop
 80038c4:	08003fa5 	.word	0x08003fa5
 80038c8:	08003fb6 	.word	0x08003fb6

080038cc <_sbrk_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d06      	ldr	r5, [pc, #24]	; (80038e8 <_sbrk_r+0x1c>)
 80038d0:	2300      	movs	r3, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	f7fd fa56 	bl	8000d88 <_sbrk>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_sbrk_r+0x1a>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_sbrk_r+0x1a>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	20000368 	.word	0x20000368

080038ec <__sread>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	460c      	mov	r4, r1
 80038f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f4:	f000 fab4 	bl	8003e60 <_read_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	bfab      	itete	ge
 80038fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003900:	181b      	addge	r3, r3, r0
 8003902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003906:	bfac      	ite	ge
 8003908:	6563      	strge	r3, [r4, #84]	; 0x54
 800390a:	81a3      	strhlt	r3, [r4, #12]
 800390c:	bd10      	pop	{r4, pc}

0800390e <__swrite>:
 800390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003912:	461f      	mov	r7, r3
 8003914:	898b      	ldrh	r3, [r1, #12]
 8003916:	05db      	lsls	r3, r3, #23
 8003918:	4605      	mov	r5, r0
 800391a:	460c      	mov	r4, r1
 800391c:	4616      	mov	r6, r2
 800391e:	d505      	bpl.n	800392c <__swrite+0x1e>
 8003920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003924:	2302      	movs	r3, #2
 8003926:	2200      	movs	r2, #0
 8003928:	f000 f9c8 	bl	8003cbc <_lseek_r>
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	4632      	mov	r2, r6
 800393a:	463b      	mov	r3, r7
 800393c:	4628      	mov	r0, r5
 800393e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	f000 b869 	b.w	8003a18 <_write_r>

08003946 <__sseek>:
 8003946:	b510      	push	{r4, lr}
 8003948:	460c      	mov	r4, r1
 800394a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394e:	f000 f9b5 	bl	8003cbc <_lseek_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	bf15      	itete	ne
 8003958:	6560      	strne	r0, [r4, #84]	; 0x54
 800395a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800395e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003962:	81a3      	strheq	r3, [r4, #12]
 8003964:	bf18      	it	ne
 8003966:	81a3      	strhne	r3, [r4, #12]
 8003968:	bd10      	pop	{r4, pc}

0800396a <__sclose>:
 800396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396e:	f000 b8d3 	b.w	8003b18 <_close_r>
	...

08003974 <__swbuf_r>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	460e      	mov	r6, r1
 8003978:	4614      	mov	r4, r2
 800397a:	4605      	mov	r5, r0
 800397c:	b118      	cbz	r0, 8003986 <__swbuf_r+0x12>
 800397e:	6983      	ldr	r3, [r0, #24]
 8003980:	b90b      	cbnz	r3, 8003986 <__swbuf_r+0x12>
 8003982:	f7ff fbbb 	bl	80030fc <__sinit>
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <__swbuf_r+0x98>)
 8003988:	429c      	cmp	r4, r3
 800398a:	d12b      	bne.n	80039e4 <__swbuf_r+0x70>
 800398c:	686c      	ldr	r4, [r5, #4]
 800398e:	69a3      	ldr	r3, [r4, #24]
 8003990:	60a3      	str	r3, [r4, #8]
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	071a      	lsls	r2, r3, #28
 8003996:	d52f      	bpl.n	80039f8 <__swbuf_r+0x84>
 8003998:	6923      	ldr	r3, [r4, #16]
 800399a:	b36b      	cbz	r3, 80039f8 <__swbuf_r+0x84>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	1ac0      	subs	r0, r0, r3
 80039a2:	6963      	ldr	r3, [r4, #20]
 80039a4:	b2f6      	uxtb	r6, r6
 80039a6:	4283      	cmp	r3, r0
 80039a8:	4637      	mov	r7, r6
 80039aa:	dc04      	bgt.n	80039b6 <__swbuf_r+0x42>
 80039ac:	4621      	mov	r1, r4
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f948 	bl	8003c44 <_fflush_r>
 80039b4:	bb30      	cbnz	r0, 8003a04 <__swbuf_r+0x90>
 80039b6:	68a3      	ldr	r3, [r4, #8]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	60a3      	str	r3, [r4, #8]
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	6022      	str	r2, [r4, #0]
 80039c2:	701e      	strb	r6, [r3, #0]
 80039c4:	6963      	ldr	r3, [r4, #20]
 80039c6:	3001      	adds	r0, #1
 80039c8:	4283      	cmp	r3, r0
 80039ca:	d004      	beq.n	80039d6 <__swbuf_r+0x62>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	07db      	lsls	r3, r3, #31
 80039d0:	d506      	bpl.n	80039e0 <__swbuf_r+0x6c>
 80039d2:	2e0a      	cmp	r6, #10
 80039d4:	d104      	bne.n	80039e0 <__swbuf_r+0x6c>
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
 80039da:	f000 f933 	bl	8003c44 <_fflush_r>
 80039de:	b988      	cbnz	r0, 8003a04 <__swbuf_r+0x90>
 80039e0:	4638      	mov	r0, r7
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <__swbuf_r+0x9c>)
 80039e6:	429c      	cmp	r4, r3
 80039e8:	d101      	bne.n	80039ee <__swbuf_r+0x7a>
 80039ea:	68ac      	ldr	r4, [r5, #8]
 80039ec:	e7cf      	b.n	800398e <__swbuf_r+0x1a>
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <__swbuf_r+0xa0>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	bf08      	it	eq
 80039f4:	68ec      	ldreq	r4, [r5, #12]
 80039f6:	e7ca      	b.n	800398e <__swbuf_r+0x1a>
 80039f8:	4621      	mov	r1, r4
 80039fa:	4628      	mov	r0, r5
 80039fc:	f000 f81e 	bl	8003a3c <__swsetup_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d0cb      	beq.n	800399c <__swbuf_r+0x28>
 8003a04:	f04f 37ff 	mov.w	r7, #4294967295
 8003a08:	e7ea      	b.n	80039e0 <__swbuf_r+0x6c>
 8003a0a:	bf00      	nop
 8003a0c:	08003f54 	.word	0x08003f54
 8003a10:	08003f74 	.word	0x08003f74
 8003a14:	08003f34 	.word	0x08003f34

08003a18 <_write_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4d07      	ldr	r5, [pc, #28]	; (8003a38 <_write_r+0x20>)
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	4608      	mov	r0, r1
 8003a20:	4611      	mov	r1, r2
 8003a22:	2200      	movs	r2, #0
 8003a24:	602a      	str	r2, [r5, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f7fc fdfc 	bl	8000624 <_write>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d102      	bne.n	8003a36 <_write_r+0x1e>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	b103      	cbz	r3, 8003a36 <_write_r+0x1e>
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	20000368 	.word	0x20000368

08003a3c <__swsetup_r>:
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <__swsetup_r+0xcc>)
 8003a3e:	b570      	push	{r4, r5, r6, lr}
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	4606      	mov	r6, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	b125      	cbz	r5, 8003a52 <__swsetup_r+0x16>
 8003a48:	69ab      	ldr	r3, [r5, #24]
 8003a4a:	b913      	cbnz	r3, 8003a52 <__swsetup_r+0x16>
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f7ff fb55 	bl	80030fc <__sinit>
 8003a52:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <__swsetup_r+0xd0>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	d10f      	bne.n	8003a78 <__swsetup_r+0x3c>
 8003a58:	686c      	ldr	r4, [r5, #4]
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a60:	0719      	lsls	r1, r3, #28
 8003a62:	d42c      	bmi.n	8003abe <__swsetup_r+0x82>
 8003a64:	06dd      	lsls	r5, r3, #27
 8003a66:	d411      	bmi.n	8003a8c <__swsetup_r+0x50>
 8003a68:	2309      	movs	r3, #9
 8003a6a:	6033      	str	r3, [r6, #0]
 8003a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	f04f 30ff 	mov.w	r0, #4294967295
 8003a76:	e03e      	b.n	8003af6 <__swsetup_r+0xba>
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <__swsetup_r+0xd4>)
 8003a7a:	429c      	cmp	r4, r3
 8003a7c:	d101      	bne.n	8003a82 <__swsetup_r+0x46>
 8003a7e:	68ac      	ldr	r4, [r5, #8]
 8003a80:	e7eb      	b.n	8003a5a <__swsetup_r+0x1e>
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <__swsetup_r+0xd8>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	bf08      	it	eq
 8003a88:	68ec      	ldreq	r4, [r5, #12]
 8003a8a:	e7e6      	b.n	8003a5a <__swsetup_r+0x1e>
 8003a8c:	0758      	lsls	r0, r3, #29
 8003a8e:	d512      	bpl.n	8003ab6 <__swsetup_r+0x7a>
 8003a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a92:	b141      	cbz	r1, 8003aa6 <__swsetup_r+0x6a>
 8003a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a98:	4299      	cmp	r1, r3
 8003a9a:	d002      	beq.n	8003aa2 <__swsetup_r+0x66>
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f000 f98f 	bl	8003dc0 <_free_r>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003aac:	81a3      	strh	r3, [r4, #12]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6063      	str	r3, [r4, #4]
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	b94b      	cbnz	r3, 8003ad6 <__swsetup_r+0x9a>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d003      	beq.n	8003ad6 <__swsetup_r+0x9a>
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f000 f929 	bl	8003d28 <__smakebuf_r>
 8003ad6:	89a0      	ldrh	r0, [r4, #12]
 8003ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003adc:	f010 0301 	ands.w	r3, r0, #1
 8003ae0:	d00a      	beq.n	8003af8 <__swsetup_r+0xbc>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60a3      	str	r3, [r4, #8]
 8003ae6:	6963      	ldr	r3, [r4, #20]
 8003ae8:	425b      	negs	r3, r3
 8003aea:	61a3      	str	r3, [r4, #24]
 8003aec:	6923      	ldr	r3, [r4, #16]
 8003aee:	b943      	cbnz	r3, 8003b02 <__swsetup_r+0xc6>
 8003af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003af4:	d1ba      	bne.n	8003a6c <__swsetup_r+0x30>
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	0781      	lsls	r1, r0, #30
 8003afa:	bf58      	it	pl
 8003afc:	6963      	ldrpl	r3, [r4, #20]
 8003afe:	60a3      	str	r3, [r4, #8]
 8003b00:	e7f4      	b.n	8003aec <__swsetup_r+0xb0>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e7f7      	b.n	8003af6 <__swsetup_r+0xba>
 8003b06:	bf00      	nop
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	08003f54 	.word	0x08003f54
 8003b10:	08003f74 	.word	0x08003f74
 8003b14:	08003f34 	.word	0x08003f34

08003b18 <_close_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4d06      	ldr	r5, [pc, #24]	; (8003b34 <_close_r+0x1c>)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f7fd f8fb 	bl	8000d1e <_close>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_close_r+0x1a>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_close_r+0x1a>
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20000368 	.word	0x20000368

08003b38 <__sflush_r>:
 8003b38:	898a      	ldrh	r2, [r1, #12]
 8003b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3e:	4605      	mov	r5, r0
 8003b40:	0710      	lsls	r0, r2, #28
 8003b42:	460c      	mov	r4, r1
 8003b44:	d458      	bmi.n	8003bf8 <__sflush_r+0xc0>
 8003b46:	684b      	ldr	r3, [r1, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dc05      	bgt.n	8003b58 <__sflush_r+0x20>
 8003b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	dc02      	bgt.n	8003b58 <__sflush_r+0x20>
 8003b52:	2000      	movs	r0, #0
 8003b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b5a:	2e00      	cmp	r6, #0
 8003b5c:	d0f9      	beq.n	8003b52 <__sflush_r+0x1a>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b64:	682f      	ldr	r7, [r5, #0]
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	d032      	beq.n	8003bd0 <__sflush_r+0x98>
 8003b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	075a      	lsls	r2, r3, #29
 8003b70:	d505      	bpl.n	8003b7e <__sflush_r+0x46>
 8003b72:	6863      	ldr	r3, [r4, #4]
 8003b74:	1ac0      	subs	r0, r0, r3
 8003b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b78:	b10b      	cbz	r3, 8003b7e <__sflush_r+0x46>
 8003b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b7c:	1ac0      	subs	r0, r0, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	4602      	mov	r2, r0
 8003b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b84:	6a21      	ldr	r1, [r4, #32]
 8003b86:	4628      	mov	r0, r5
 8003b88:	47b0      	blx	r6
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	d106      	bne.n	8003b9e <__sflush_r+0x66>
 8003b90:	6829      	ldr	r1, [r5, #0]
 8003b92:	291d      	cmp	r1, #29
 8003b94:	d82c      	bhi.n	8003bf0 <__sflush_r+0xb8>
 8003b96:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <__sflush_r+0x108>)
 8003b98:	40ca      	lsrs	r2, r1
 8003b9a:	07d6      	lsls	r6, r2, #31
 8003b9c:	d528      	bpl.n	8003bf0 <__sflush_r+0xb8>
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	6062      	str	r2, [r4, #4]
 8003ba2:	04d9      	lsls	r1, r3, #19
 8003ba4:	6922      	ldr	r2, [r4, #16]
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	d504      	bpl.n	8003bb4 <__sflush_r+0x7c>
 8003baa:	1c42      	adds	r2, r0, #1
 8003bac:	d101      	bne.n	8003bb2 <__sflush_r+0x7a>
 8003bae:	682b      	ldr	r3, [r5, #0]
 8003bb0:	b903      	cbnz	r3, 8003bb4 <__sflush_r+0x7c>
 8003bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8003bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bb6:	602f      	str	r7, [r5, #0]
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	d0ca      	beq.n	8003b52 <__sflush_r+0x1a>
 8003bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	d002      	beq.n	8003bca <__sflush_r+0x92>
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f000 f8fb 	bl	8003dc0 <_free_r>
 8003bca:	2000      	movs	r0, #0
 8003bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8003bce:	e7c1      	b.n	8003b54 <__sflush_r+0x1c>
 8003bd0:	6a21      	ldr	r1, [r4, #32]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b0      	blx	r6
 8003bd8:	1c41      	adds	r1, r0, #1
 8003bda:	d1c7      	bne.n	8003b6c <__sflush_r+0x34>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0c4      	beq.n	8003b6c <__sflush_r+0x34>
 8003be2:	2b1d      	cmp	r3, #29
 8003be4:	d001      	beq.n	8003bea <__sflush_r+0xb2>
 8003be6:	2b16      	cmp	r3, #22
 8003be8:	d101      	bne.n	8003bee <__sflush_r+0xb6>
 8003bea:	602f      	str	r7, [r5, #0]
 8003bec:	e7b1      	b.n	8003b52 <__sflush_r+0x1a>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	e7ad      	b.n	8003b54 <__sflush_r+0x1c>
 8003bf8:	690f      	ldr	r7, [r1, #16]
 8003bfa:	2f00      	cmp	r7, #0
 8003bfc:	d0a9      	beq.n	8003b52 <__sflush_r+0x1a>
 8003bfe:	0793      	lsls	r3, r2, #30
 8003c00:	680e      	ldr	r6, [r1, #0]
 8003c02:	bf08      	it	eq
 8003c04:	694b      	ldreq	r3, [r1, #20]
 8003c06:	600f      	str	r7, [r1, #0]
 8003c08:	bf18      	it	ne
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	eba6 0807 	sub.w	r8, r6, r7
 8003c10:	608b      	str	r3, [r1, #8]
 8003c12:	f1b8 0f00 	cmp.w	r8, #0
 8003c16:	dd9c      	ble.n	8003b52 <__sflush_r+0x1a>
 8003c18:	6a21      	ldr	r1, [r4, #32]
 8003c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c1c:	4643      	mov	r3, r8
 8003c1e:	463a      	mov	r2, r7
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b0      	blx	r6
 8003c24:	2800      	cmp	r0, #0
 8003c26:	dc06      	bgt.n	8003c36 <__sflush_r+0xfe>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	e78e      	b.n	8003b54 <__sflush_r+0x1c>
 8003c36:	4407      	add	r7, r0
 8003c38:	eba8 0800 	sub.w	r8, r8, r0
 8003c3c:	e7e9      	b.n	8003c12 <__sflush_r+0xda>
 8003c3e:	bf00      	nop
 8003c40:	20400001 	.word	0x20400001

08003c44 <_fflush_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	690b      	ldr	r3, [r1, #16]
 8003c48:	4605      	mov	r5, r0
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	b913      	cbnz	r3, 8003c54 <_fflush_r+0x10>
 8003c4e:	2500      	movs	r5, #0
 8003c50:	4628      	mov	r0, r5
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	b118      	cbz	r0, 8003c5e <_fflush_r+0x1a>
 8003c56:	6983      	ldr	r3, [r0, #24]
 8003c58:	b90b      	cbnz	r3, 8003c5e <_fflush_r+0x1a>
 8003c5a:	f7ff fa4f 	bl	80030fc <__sinit>
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <_fflush_r+0x6c>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d11b      	bne.n	8003c9c <_fflush_r+0x58>
 8003c64:	686c      	ldr	r4, [r5, #4]
 8003c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ef      	beq.n	8003c4e <_fflush_r+0xa>
 8003c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c70:	07d0      	lsls	r0, r2, #31
 8003c72:	d404      	bmi.n	8003c7e <_fflush_r+0x3a>
 8003c74:	0599      	lsls	r1, r3, #22
 8003c76:	d402      	bmi.n	8003c7e <_fflush_r+0x3a>
 8003c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c7a:	f7ff fadd 	bl	8003238 <__retarget_lock_acquire_recursive>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	4621      	mov	r1, r4
 8003c82:	f7ff ff59 	bl	8003b38 <__sflush_r>
 8003c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c88:	07da      	lsls	r2, r3, #31
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	d4e0      	bmi.n	8003c50 <_fflush_r+0xc>
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	059b      	lsls	r3, r3, #22
 8003c92:	d4dd      	bmi.n	8003c50 <_fflush_r+0xc>
 8003c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c96:	f7ff fad0 	bl	800323a <__retarget_lock_release_recursive>
 8003c9a:	e7d9      	b.n	8003c50 <_fflush_r+0xc>
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <_fflush_r+0x70>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d101      	bne.n	8003ca6 <_fflush_r+0x62>
 8003ca2:	68ac      	ldr	r4, [r5, #8]
 8003ca4:	e7df      	b.n	8003c66 <_fflush_r+0x22>
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <_fflush_r+0x74>)
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	bf08      	it	eq
 8003cac:	68ec      	ldreq	r4, [r5, #12]
 8003cae:	e7da      	b.n	8003c66 <_fflush_r+0x22>
 8003cb0:	08003f54 	.word	0x08003f54
 8003cb4:	08003f74 	.word	0x08003f74
 8003cb8:	08003f34 	.word	0x08003f34

08003cbc <_lseek_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4d07      	ldr	r5, [pc, #28]	; (8003cdc <_lseek_r+0x20>)
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	4608      	mov	r0, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	602a      	str	r2, [r5, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f7fd f84e 	bl	8000d6c <_lseek>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_lseek_r+0x1e>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_lseek_r+0x1e>
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000368 	.word	0x20000368

08003ce0 <__swhatbuf_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	b096      	sub	sp, #88	; 0x58
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	da07      	bge.n	8003d02 <__swhatbuf_r+0x22>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	89b3      	ldrh	r3, [r6, #12]
 8003cf8:	061a      	lsls	r2, r3, #24
 8003cfa:	d410      	bmi.n	8003d1e <__swhatbuf_r+0x3e>
 8003cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d00:	e00e      	b.n	8003d20 <__swhatbuf_r+0x40>
 8003d02:	466a      	mov	r2, sp
 8003d04:	f000 f8be 	bl	8003e84 <_fstat_r>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	dbf2      	blt.n	8003cf2 <__swhatbuf_r+0x12>
 8003d0c:	9a01      	ldr	r2, [sp, #4]
 8003d0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d16:	425a      	negs	r2, r3
 8003d18:	415a      	adcs	r2, r3
 8003d1a:	602a      	str	r2, [r5, #0]
 8003d1c:	e7ee      	b.n	8003cfc <__swhatbuf_r+0x1c>
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	2000      	movs	r0, #0
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	b016      	add	sp, #88	; 0x58
 8003d26:	bd70      	pop	{r4, r5, r6, pc}

08003d28 <__smakebuf_r>:
 8003d28:	898b      	ldrh	r3, [r1, #12]
 8003d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d2c:	079d      	lsls	r5, r3, #30
 8003d2e:	4606      	mov	r6, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	d507      	bpl.n	8003d44 <__smakebuf_r+0x1c>
 8003d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	6123      	str	r3, [r4, #16]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	6163      	str	r3, [r4, #20]
 8003d40:	b002      	add	sp, #8
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	ab01      	add	r3, sp, #4
 8003d46:	466a      	mov	r2, sp
 8003d48:	f7ff ffca 	bl	8003ce0 <__swhatbuf_r>
 8003d4c:	9900      	ldr	r1, [sp, #0]
 8003d4e:	4605      	mov	r5, r0
 8003d50:	4630      	mov	r0, r6
 8003d52:	f7ff fa73 	bl	800323c <_malloc_r>
 8003d56:	b948      	cbnz	r0, 8003d6c <__smakebuf_r+0x44>
 8003d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5c:	059a      	lsls	r2, r3, #22
 8003d5e:	d4ef      	bmi.n	8003d40 <__smakebuf_r+0x18>
 8003d60:	f023 0303 	bic.w	r3, r3, #3
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	e7e3      	b.n	8003d34 <__smakebuf_r+0xc>
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <__smakebuf_r+0x7c>)
 8003d6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	9b00      	ldr	r3, [sp, #0]
 8003d7c:	6163      	str	r3, [r4, #20]
 8003d7e:	9b01      	ldr	r3, [sp, #4]
 8003d80:	6120      	str	r0, [r4, #16]
 8003d82:	b15b      	cbz	r3, 8003d9c <__smakebuf_r+0x74>
 8003d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f000 f88d 	bl	8003ea8 <_isatty_r>
 8003d8e:	b128      	cbz	r0, 8003d9c <__smakebuf_r+0x74>
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	81a3      	strh	r3, [r4, #12]
 8003d9c:	89a0      	ldrh	r0, [r4, #12]
 8003d9e:	4305      	orrs	r5, r0
 8003da0:	81a5      	strh	r5, [r4, #12]
 8003da2:	e7cd      	b.n	8003d40 <__smakebuf_r+0x18>
 8003da4:	08003095 	.word	0x08003095

08003da8 <__malloc_lock>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__malloc_lock+0x8>)
 8003daa:	f7ff ba45 	b.w	8003238 <__retarget_lock_acquire_recursive>
 8003dae:	bf00      	nop
 8003db0:	20000360 	.word	0x20000360

08003db4 <__malloc_unlock>:
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <__malloc_unlock+0x8>)
 8003db6:	f7ff ba40 	b.w	800323a <__retarget_lock_release_recursive>
 8003dba:	bf00      	nop
 8003dbc:	20000360 	.word	0x20000360

08003dc0 <_free_r>:
 8003dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dc2:	2900      	cmp	r1, #0
 8003dc4:	d048      	beq.n	8003e58 <_free_r+0x98>
 8003dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dca:	9001      	str	r0, [sp, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f1a1 0404 	sub.w	r4, r1, #4
 8003dd2:	bfb8      	it	lt
 8003dd4:	18e4      	addlt	r4, r4, r3
 8003dd6:	f7ff ffe7 	bl	8003da8 <__malloc_lock>
 8003dda:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <_free_r+0x9c>)
 8003ddc:	9801      	ldr	r0, [sp, #4]
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	4615      	mov	r5, r2
 8003de2:	b933      	cbnz	r3, 8003df2 <_free_r+0x32>
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	6014      	str	r4, [r2, #0]
 8003de8:	b003      	add	sp, #12
 8003dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dee:	f7ff bfe1 	b.w	8003db4 <__malloc_unlock>
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	d90b      	bls.n	8003e0e <_free_r+0x4e>
 8003df6:	6821      	ldr	r1, [r4, #0]
 8003df8:	1862      	adds	r2, r4, r1
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	bf04      	itt	eq
 8003dfe:	681a      	ldreq	r2, [r3, #0]
 8003e00:	685b      	ldreq	r3, [r3, #4]
 8003e02:	6063      	str	r3, [r4, #4]
 8003e04:	bf04      	itt	eq
 8003e06:	1852      	addeq	r2, r2, r1
 8003e08:	6022      	streq	r2, [r4, #0]
 8003e0a:	602c      	str	r4, [r5, #0]
 8003e0c:	e7ec      	b.n	8003de8 <_free_r+0x28>
 8003e0e:	461a      	mov	r2, r3
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b10b      	cbz	r3, 8003e18 <_free_r+0x58>
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	d9fa      	bls.n	8003e0e <_free_r+0x4e>
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	1855      	adds	r5, r2, r1
 8003e1c:	42a5      	cmp	r5, r4
 8003e1e:	d10b      	bne.n	8003e38 <_free_r+0x78>
 8003e20:	6824      	ldr	r4, [r4, #0]
 8003e22:	4421      	add	r1, r4
 8003e24:	1854      	adds	r4, r2, r1
 8003e26:	42a3      	cmp	r3, r4
 8003e28:	6011      	str	r1, [r2, #0]
 8003e2a:	d1dd      	bne.n	8003de8 <_free_r+0x28>
 8003e2c:	681c      	ldr	r4, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	6053      	str	r3, [r2, #4]
 8003e32:	4421      	add	r1, r4
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	e7d7      	b.n	8003de8 <_free_r+0x28>
 8003e38:	d902      	bls.n	8003e40 <_free_r+0x80>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	6003      	str	r3, [r0, #0]
 8003e3e:	e7d3      	b.n	8003de8 <_free_r+0x28>
 8003e40:	6825      	ldr	r5, [r4, #0]
 8003e42:	1961      	adds	r1, r4, r5
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf04      	itt	eq
 8003e48:	6819      	ldreq	r1, [r3, #0]
 8003e4a:	685b      	ldreq	r3, [r3, #4]
 8003e4c:	6063      	str	r3, [r4, #4]
 8003e4e:	bf04      	itt	eq
 8003e50:	1949      	addeq	r1, r1, r5
 8003e52:	6021      	streq	r1, [r4, #0]
 8003e54:	6054      	str	r4, [r2, #4]
 8003e56:	e7c7      	b.n	8003de8 <_free_r+0x28>
 8003e58:	b003      	add	sp, #12
 8003e5a:	bd30      	pop	{r4, r5, pc}
 8003e5c:	20000090 	.word	0x20000090

08003e60 <_read_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d07      	ldr	r5, [pc, #28]	; (8003e80 <_read_r+0x20>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	4608      	mov	r0, r1
 8003e68:	4611      	mov	r1, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	602a      	str	r2, [r5, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fc ff38 	bl	8000ce4 <_read>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_read_r+0x1e>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_read_r+0x1e>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000368 	.word	0x20000368

08003e84 <_fstat_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d07      	ldr	r5, [pc, #28]	; (8003ea4 <_fstat_r+0x20>)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	f7fc ff50 	bl	8000d36 <_fstat>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d102      	bne.n	8003ea0 <_fstat_r+0x1c>
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	b103      	cbz	r3, 8003ea0 <_fstat_r+0x1c>
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000368 	.word	0x20000368

08003ea8 <_isatty_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d06      	ldr	r5, [pc, #24]	; (8003ec4 <_isatty_r+0x1c>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fc ff4f 	bl	8000d56 <_isatty>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_isatty_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_isatty_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000368 	.word	0x20000368

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr

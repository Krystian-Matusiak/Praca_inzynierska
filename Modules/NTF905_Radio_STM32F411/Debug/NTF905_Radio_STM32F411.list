
NTF905_Radio_STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec8  08003ec8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed0  08003ed0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000074  08003f4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003f4c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a911  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0f  00000000  00000000  0002a9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001697a  00000000  00000000  0002da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5d8  00000000  00000000  0004437a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887c2  00000000  00000000  0004e952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  000d7168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d38 	.word	0x08003d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003d38 	.word	0x08003d38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_GPIO_Init+0xc0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a28      	ldr	r2, [pc, #160]	; (8000638 <MX_GPIO_Init+0xc0>)
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a21      	ldr	r2, [pc, #132]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_Pin|Tx_Pin|CS_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2119      	movs	r1, #25
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <MX_GPIO_Init+0xc4>)
 80005cc:	f000 feba 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <MX_GPIO_Init+0xc8>)
 80005d8:	f000 feb4 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Address_match_Pin|DR_Pin|Carrier_detect_Pin;
 80005dc:	2326      	movs	r3, #38	; 0x26
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <MX_GPIO_Init+0xc4>)
 80005f0:	f000 fd0c 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CE_Pin|Tx_Pin|CS_Pin;
 80005f4:	2319      	movs	r3, #25
 80005f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <MX_GPIO_Init+0xc4>)
 800060c:	f000 fcfe 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_Pin;
 8000610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWR_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_GPIO_Init+0xc8>)
 800062a:	f000 fcef 	bl	800100c <HAL_GPIO_Init>

}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40021000 	.word	0x40021000
 8000640:	40020000 	.word	0x40020000

08000644 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2 , ptr , len , 50);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <_write+0x24>)
 800065a:	f002 f8ca 	bl	80027f2 <HAL_UART_Transmit>
  return len;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000f8 	.word	0x200000f8

0800066c <set_Standby_mode>:
		return 1;
	else
		return 0;
}

void set_Standby_mode(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2108      	movs	r1, #8
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <set_Standby_mode+0x14>)
 8000676:	f000 fe65 	bl	8001344 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <set_Rx_mode>:

void set_Tx_mode(){
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_SET);
}

void set_Rx_mode(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <set_Rx_mode+0x14>)
 800068e:	f000 fe59 	bl	8001344 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <PWR_ON>:

void PWR_ON(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <PWR_ON+0x14>)
 80006a8:	f000 fe4c 	bl	8001344 <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020000 	.word	0x40020000

080006b4 <PWR_OFF>:

void PWR_OFF(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006be:	4802      	ldr	r0, [pc, #8]	; (80006c8 <PWR_OFF+0x14>)
 80006c0:	f000 fe40 	bl	8001344 <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020000 	.word	0x40020000

080006cc <set_Channel>:

void set_Channel(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	PWR_OFF();
 80006d2:	f7ff ffef 	bl	80006b4 <PWR_OFF>

	uint8_t channel_add=0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t setCHANNEL = ( CHANNEL_CONFIG | (PA_PWR_6dbm<<2) | HFREQ_PLL );
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <set_Channel+0x6c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <set_Channel+0x70>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b25a      	sxtb	r2, r3
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <set_Channel+0x74>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	4811      	ldr	r0, [pc, #68]	; (8000744 <set_Channel+0x78>)
 8000700:	f000 fe20 	bl	8001344 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi4, &setCHANNEL , 1 , 1000);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	2201      	movs	r2, #1
 800070c:	480e      	ldr	r0, [pc, #56]	; (8000748 <set_Channel+0x7c>)
 800070e:	f001 fb04 	bl	8001d1a <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi4, &CH_NO, 1 , 1000);
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	2201      	movs	r2, #1
 8000718:	490c      	ldr	r1, [pc, #48]	; (800074c <set_Channel+0x80>)
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <set_Channel+0x7c>)
 800071c:	f001 fafd 	bl	8001d1a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <set_Channel+0x78>)
 8000726:	f000 fe0d 	bl	8001344 <HAL_GPIO_WritePin>

	PWR_ON();
 800072a:	f7ff ffb7 	bl	800069c <PWR_ON>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000002 	.word	0x20000002
 800073c:	20000000 	.word	0x20000000
 8000740:	20000090 	.word	0x20000090
 8000744:	40021000 	.word	0x40021000
 8000748:	200000a0 	.word	0x200000a0
 800074c:	20000001 	.word	0x20000001

08000750 <read_reg>:

void read_reg(){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	uint8_t read=0x81;
 8000756:	2381      	movs	r3, #129	; 0x81
 8000758:	70fb      	strb	r3, [r7, #3]
	//read = 0x24;
	uint8_t data=0;
 800075a:	2300      	movs	r3, #0
 800075c:	70bb      	strb	r3, [r7, #2]
	uint32_t DATA=0;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]

	PWR_OFF();
 8000762:	f7ff ffa7 	bl	80006b4 <PWR_OFF>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	4810      	ldr	r0, [pc, #64]	; (80007ac <read_reg+0x5c>)
 800076c:	f000 fdea 	bl	8001344 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi4, &read, 1 , 1000);
 8000770:	1cf9      	adds	r1, r7, #3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	2201      	movs	r2, #1
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <read_reg+0x60>)
 800077a:	f001 face 	bl	8001d1a <HAL_SPI_Transmit>
	HAL_SPI_Receive( &hspi4, &data, 1 , 1000);
 800077e:	1cb9      	adds	r1, r7, #2
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	2201      	movs	r2, #1
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <read_reg+0x60>)
 8000788:	f001 fc03 	bl	8001f92 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <read_reg+0x5c>)
 8000792:	f000 fdd7 	bl	8001344 <HAL_GPIO_WritePin>

	printf("Register -> %d \r\n" , data);
 8000796:	78bb      	ldrb	r3, [r7, #2]
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <read_reg+0x64>)
 800079c:	f002 fb00 	bl	8002da0 <iprintf>

	PWR_ON();
 80007a0:	f7ff ff7c 	bl	800069c <PWR_ON>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	200000a0 	.word	0x200000a0
 80007b4:	08003d64 	.word	0x08003d64

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 faaa 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f83e 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f7ff fed8 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 fa08 	bl	8000bdc <MX_USART2_UART_Init>
  MX_SPI4_Init();
 80007cc:	f000 f89c 	bl	8000908 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi4);
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <main+0x74>)
 80007d2:	f001 fa19 	bl	8001c08 <HAL_SPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_Channel();
 80007d6:	f7ff ff79 	bl	80006cc <set_Channel>
  set_Rx_mode();
 80007da:	f7ff ff53 	bl	8000684 <set_Rx_mode>
  set_Standby_mode();
 80007de:	f7ff ff45 	bl	800066c <set_Standby_mode>
//	set_TxRx_mode();
//	if( HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin) == GPIO_PIN_SET )
//	  TX_radio();


	  if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin) == GPIO_PIN_SET )
 80007e2:	2102      	movs	r1, #2
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <main+0x78>)
 80007e6:	f000 fd95 	bl	8001314 <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x3e>
		  printf("Carrier Detect \r\n");
 80007f0:	4810      	ldr	r0, [pc, #64]	; (8000834 <main+0x7c>)
 80007f2:	f002 fb5b 	bl	8002eac <puts>
	  if( HAL_GPIO_ReadPin(Address_match_GPIO_Port, Address_match_Pin) == GPIO_PIN_SET )
 80007f6:	2104      	movs	r1, #4
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <main+0x78>)
 80007fa:	f000 fd8b 	bl	8001314 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d102      	bne.n	800080a <main+0x52>
		  printf("Address Match \r\n");
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <main+0x80>)
 8000806:	f002 fb51 	bl	8002eac <puts>
	  if( HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin) == GPIO_PIN_SET )
 800080a:	2120      	movs	r1, #32
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <main+0x78>)
 800080e:	f000 fd81 	bl	8001314 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d102      	bne.n	800081e <main+0x66>
		  printf("Data Ready \r\n");
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <main+0x84>)
 800081a:	f002 fb47 	bl	8002eac <puts>

	  read_reg();
 800081e:	f7ff ff97 	bl	8000750 <read_reg>
	  //read_CONFIG();
//	  for ever {
//
//	  }

	  HAL_Delay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fae8 	bl	8000df8 <HAL_Delay>
	  if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin) == GPIO_PIN_SET )
 8000828:	e7db      	b.n	80007e2 <main+0x2a>
 800082a:	bf00      	nop
 800082c:	200000a0 	.word	0x200000a0
 8000830:	40021000 	.word	0x40021000
 8000834:	08003de4 	.word	0x08003de4
 8000838:	08003df8 	.word	0x08003df8
 800083c:	08003e08 	.word	0x08003e08

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	; 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fa9e 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SystemClock_Config+0xb4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SystemClock_Config+0xb4>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <SystemClock_Config+0xb4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <SystemClock_Config+0xb8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <SystemClock_Config+0xb8>)
 800088a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <SystemClock_Config+0xb8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fd61 	bl	8001378 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008bc:	f000 f81e 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 ffc3 	bl	8001868 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008e8:	f000 f808 	bl	80008fc <Error_Handler>
  }
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	; 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI4_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI4_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI4_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI4_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI4_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI4_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI4_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI4_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI4_Init+0x64>)
 800093c:	2230      	movs	r2, #48	; 0x30
 800093e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI4_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI4_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI4_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI4_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI4_Init+0x64>)
 800095a:	f001 f955 	bl	8001c08 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000964:	f7ff ffca 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000a0 	.word	0x200000a0
 8000970:	40013400 	.word	0x40013400

08000974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12c      	bne.n	80009f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_SPI_MspInit+0x88>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_SPI_MspInit+0x88>)
 80009a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_SPI_MspInit+0x88>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_SPI_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_SPI_MspInit+0x88>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_SPI_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE6     ------> SPI4_MOSI
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 80009ce:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80009e0:	2305      	movs	r3, #5
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_SPI_MspInit+0x8c>)
 80009ec:	f000 fb0e 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40013400 	.word	0x40013400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f98a 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e00a      	b.n	8000ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aba:	f3af 8000 	nop.w
 8000abe:	4601      	mov	r1, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf0      	blt.n	8000aba <_read+0x12>
	}

return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f002 f8de 	bl	8002d3c <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000094 	.word	0x20000094
 8000bb4:	20000150 	.word	0x20000150

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_USART2_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f001 fda0 	bl	8002758 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f7ff fe6d 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000f8 	.word	0x200000f8
 8000c2c:	40004400 	.word	0x40004400

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f000 f9b1 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ff65 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 f82b 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fd61 	bl	80007b8 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d04:	08003ed8 	.word	0x08003ed8
  ldr r2, =_sbss
 8000d08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d0c:	20000150 	.word	0x20000150

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f931 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe5c 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f93b 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f911 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	2000013c 	.word	0x2000013c

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000013c 	.word	0x2000013c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff47 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff5c 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffb0 	bl	8000f60 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e159      	b.n	80012dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 8148 	bne.w	80012d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	2b02      	cmp	r3, #2
 800105c:	d130      	bne.n	80010c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d017      	beq.n	80010fc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a2 	beq.w	80012d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x2ec>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x2f0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x202>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2f4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x1fe>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a47      	ldr	r2, [pc, #284]	; (8001304 <HAL_GPIO_Init+0x2f8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x1fa>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a46      	ldr	r2, [pc, #280]	; (8001308 <HAL_GPIO_Init+0x2fc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x1f6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a45      	ldr	r2, [pc, #276]	; (800130c <HAL_GPIO_Init+0x300>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x1f2>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x204>
 80011fe:	2307      	movs	r3, #7
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x204>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x204>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x204>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x204>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2ec>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_GPIO_Init+0x304>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x304>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_GPIO_Init+0x304>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127c:	4a24      	ldr	r2, [pc, #144]	; (8001310 <HAL_GPIO_Init+0x304>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_GPIO_Init+0x304>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f aea2 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e264      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d075      	beq.n	8001482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001396:	4ba3      	ldr	r3, [pc, #652]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00c      	beq.n	80013bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a2:	4ba0      	ldr	r3, [pc, #640]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d112      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b9d      	ldr	r3, [pc, #628]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4b99      	ldr	r3, [pc, #612]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d05b      	beq.n	8001480 <HAL_RCC_OscConfig+0x108>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d157      	bne.n	8001480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e23f      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x74>
 80013de:	4b91      	ldr	r3, [pc, #580]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a90      	ldr	r2, [pc, #576]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xb0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x98>
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xb0>
 8001410:	4b84      	ldr	r3, [pc, #528]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a83      	ldr	r2, [pc, #524]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a80      	ldr	r2, [pc, #512]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fcd6 	bl	8000de0 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fcd2 	bl	8000de0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e204      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xc0>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fcc2 	bl	8000de0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fcbe 	bl	8000de0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1f0      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0xe8>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d063      	beq.n	8001556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148e:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x152>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1c4      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b56      	ldr	r3, [pc, #344]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4952      	ldr	r1, [pc, #328]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e03a      	b.n	8001556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <HAL_RCC_OscConfig+0x2b0>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc77 	bl	8000de0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc73 	bl	8000de0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1a5      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4940      	ldr	r1, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_OscConfig+0x2b0>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc56 	bl	8000de0 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fc52 	bl	8000de0 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e184      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x2b4>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fc36 	bl	8000de0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fc32 	bl	8000de0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e164      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x200>
 8001596:	e015      	b.n	80015c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_OscConfig+0x2b4>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fc1f 	bl	8000de0 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc1b 	bl	8000de0 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e14d      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a0 	beq.w	8001712 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x2b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d121      	bne.n	8001652 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_RCC_OscConfig+0x2b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_RCC_OscConfig+0x2b8>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fbe1 	bl	8000de0 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e011      	b.n	8001646 <HAL_RCC_OscConfig+0x2ce>
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	42470000 	.word	0x42470000
 800162c:	42470e80 	.word	0x42470e80
 8001630:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff fbd4 	bl	8000de0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e106      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b85      	ldr	r3, [pc, #532]	; (800185c <HAL_RCC_OscConfig+0x4e4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x2f0>
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a80      	ldr	r2, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x32a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x312>
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	4a77      	ldr	r2, [pc, #476]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6713      	str	r3, [r2, #112]	; 0x70
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x32a>
 800168a:	4b75      	ldr	r3, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a74      	ldr	r2, [pc, #464]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a71      	ldr	r2, [pc, #452]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb99 	bl	8000de0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb95 	bl	8000de0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0c5      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x33a>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb83 	bl	8000de0 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb7f 	bl	8000de0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0af      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 809b 	beq.w	8001852 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d05c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d141      	bne.n	80017b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fb53 	bl	8000de0 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fb4f 	bl	8000de0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e081      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	019b      	lsls	r3, r3, #6
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	3b01      	subs	r3, #1
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	061b      	lsls	r3, r3, #24
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fb28 	bl	8000de0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fb24 	bl	8000de0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e056      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x41c>
 80017b2:	e04e      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb11 	bl	8000de0 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fb0d 	bl	8000de0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e03f      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x44a>
 80017e0:	e037      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e032      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d028      	beq.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d121      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d11a      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800181e:	4013      	ands	r3, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001824:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001826:	4293      	cmp	r3, r2
 8001828:	d111      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d107      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40007000 	.word	0x40007000
 8001860:	40023800 	.word	0x40023800
 8001864:	42470060 	.word	0x42470060

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0cc      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d90c      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d044      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d119      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e067      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4934      	ldr	r1, [pc, #208]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7ff fa42 	bl	8000de0 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff fa3e 	bl	8000de0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e04f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d20c      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490a      	ldr	r1, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9a2 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08003e18 	.word	0x08003e18
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	20000008 	.word	0x20000008

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6079      	str	r1, [r7, #4]
 8001a3e:	2100      	movs	r1, #0
 8001a40:	60f9      	str	r1, [r7, #12]
 8001a42:	2100      	movs	r1, #0
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a46:	2100      	movs	r1, #0
 8001a48:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4a:	4952      	ldr	r1, [pc, #328]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a4c:	6889      	ldr	r1, [r1, #8]
 8001a4e:	f001 010c 	and.w	r1, r1, #12
 8001a52:	2908      	cmp	r1, #8
 8001a54:	d00d      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x3e>
 8001a56:	2908      	cmp	r1, #8
 8001a58:	f200 8094 	bhi.w	8001b84 <HAL_RCC_GetSysClockFreq+0x150>
 8001a5c:	2900      	cmp	r1, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x32>
 8001a60:	2904      	cmp	r1, #4
 8001a62:	d003      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x38>
 8001a64:	e08e      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a66:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a68:	60bb      	str	r3, [r7, #8]
       break;
 8001a6a:	e08e      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x168>)
 8001a6e:	60bb      	str	r3, [r7, #8]
      break;
 8001a70:	e08b      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a72:	4948      	ldr	r1, [pc, #288]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a74:	6849      	ldr	r1, [r1, #4]
 8001a76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001a7a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7c:	4945      	ldr	r1, [pc, #276]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a7e:	6849      	ldr	r1, [r1, #4]
 8001a80:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001a84:	2900      	cmp	r1, #0
 8001a86:	d024      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a88:	4942      	ldr	r1, [pc, #264]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a8a:	6849      	ldr	r1, [r1, #4]
 8001a8c:	0989      	lsrs	r1, r1, #6
 8001a8e:	4608      	mov	r0, r1
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a98:	f04f 0500 	mov.w	r5, #0
 8001a9c:	ea00 0204 	and.w	r2, r0, r4
 8001aa0:	ea01 0305 	and.w	r3, r1, r5
 8001aa4:	493d      	ldr	r1, [pc, #244]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x168>)
 8001aa6:	fb01 f003 	mul.w	r0, r1, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	fb01 f102 	mul.w	r1, r1, r2
 8001ab0:	1844      	adds	r4, r0, r1
 8001ab2:	493a      	ldr	r1, [pc, #232]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x168>)
 8001ab4:	fba2 0101 	umull	r0, r1, r2, r1
 8001ab8:	1863      	adds	r3, r4, r1
 8001aba:	4619      	mov	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f7fe fbdc 	bl	8000280 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e04a      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	ea02 0400 	and.w	r4, r2, r0
 8001aea:	ea03 0501 	and.w	r5, r3, r1
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	014b      	lsls	r3, r1, #5
 8001afc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b00:	0142      	lsls	r2, r0, #5
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	1b00      	subs	r0, r0, r4
 8001b08:	eb61 0105 	sbc.w	r1, r1, r5
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	018b      	lsls	r3, r1, #6
 8001b16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b1a:	0182      	lsls	r2, r0, #6
 8001b1c:	1a12      	subs	r2, r2, r0
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	00d9      	lsls	r1, r3, #3
 8001b2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b30:	00d0      	lsls	r0, r2, #3
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	1912      	adds	r2, r2, r4
 8001b38:	eb45 0303 	adc.w	r3, r5, r3
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	0299      	lsls	r1, r3, #10
 8001b46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b4a:	0290      	lsls	r0, r2, #10
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	f7fe fb90 	bl	8000280 <__aeabi_uldivmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4613      	mov	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	3301      	adds	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	60bb      	str	r3, [r7, #8]
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b86:	60bb      	str	r3, [r7, #8]
      break;
 8001b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	00f42400 	.word	0x00f42400
 8001b9c:	017d7840 	.word	0x017d7840

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08003e28 	.word	0x08003e28

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be4:	f7ff ffdc 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08003e28 	.word	0x08003e28

08001c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07b      	b.n	8001d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c2a:	d009      	beq.n	8001c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
 8001c32:	e005      	b.n	8001c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fe8a 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	ea42 0103 	orr.w	r1, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	f003 0104 	and.w	r1, r3, #4
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f003 0210 	and.w	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b088      	sub	sp, #32
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_SPI_Transmit+0x22>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e126      	b.n	8001f8a <HAL_SPI_Transmit+0x270>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d44:	f7ff f84c 	bl	8000de0 <HAL_GetTick>
 8001d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d002      	beq.n	8001d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d5e:	e10b      	b.n	8001f78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_SPI_Transmit+0x52>
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d70:	e102      	b.n	8001f78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2203      	movs	r2, #3
 8001d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db8:	d10f      	bne.n	8001dda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d007      	beq.n	8001df8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e00:	d14b      	bne.n	8001e9a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_SPI_Transmit+0xf6>
 8001e0a:	8afb      	ldrh	r3, [r7, #22]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d13e      	bne.n	8001e8e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e34:	e02b      	b.n	8001e8e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d112      	bne.n	8001e6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	1c9a      	adds	r2, r3, #2
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e68:	e011      	b.n	8001e8e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6a:	f7fe ffb9 	bl	8000de0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d803      	bhi.n	8001e82 <HAL_SPI_Transmit+0x168>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d102      	bne.n	8001e88 <HAL_SPI_Transmit+0x16e>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e8c:	e074      	b.n	8001f78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ce      	bne.n	8001e36 <HAL_SPI_Transmit+0x11c>
 8001e98:	e04c      	b.n	8001f34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_SPI_Transmit+0x18e>
 8001ea2:	8afb      	ldrh	r3, [r7, #22]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d140      	bne.n	8001f2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ece:	e02c      	b.n	8001f2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d113      	bne.n	8001f06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f04:	e011      	b.n	8001f2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f06:	f7fe ff6b 	bl	8000de0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d803      	bhi.n	8001f1e <HAL_SPI_Transmit+0x204>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d102      	bne.n	8001f24 <HAL_SPI_Transmit+0x20a>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f28:	e026      	b.n	8001f78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1cd      	bne.n	8001ed0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fbcb 	bl	80026d4 <SPI_EndRxTxTransaction>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10a      	bne.n	8001f68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	77fb      	strb	r3, [r7, #31]
 8001f74:	e000      	b.n	8001f78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b088      	sub	sp, #32
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fae:	d112      	bne.n	8001fd6 <HAL_SPI_Receive+0x44>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10e      	bne.n	8001fd6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f8f1 	bl	80021b4 <HAL_SPI_TransmitReceive>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	e0ea      	b.n	80021ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_SPI_Receive+0x52>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e0e3      	b.n	80021ac <HAL_SPI_Receive+0x21a>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fec:	f7fe fef8 	bl	8000de0 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002002:	e0ca      	b.n	800219a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_Receive+0x7e>
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002014:	e0c1      	b.n	800219a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2204      	movs	r2, #4
 800201a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d10f      	bne.n	800207e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800206c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d007      	beq.n	800209c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d162      	bne.n	800216a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020a4:	e02e      	b.n	8002104 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d115      	bne.n	80020e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f103 020c 	add.w	r2, r3, #12
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020de:	e011      	b.n	8002104 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e0:	f7fe fe7e 	bl	8000de0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d803      	bhi.n	80020f8 <HAL_SPI_Receive+0x166>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f6:	d102      	bne.n	80020fe <HAL_SPI_Receive+0x16c>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002102:	e04a      	b.n	800219a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1cb      	bne.n	80020a6 <HAL_SPI_Receive+0x114>
 800210e:	e031      	b.n	8002174 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d113      	bne.n	8002146 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	b292      	uxth	r2, r2
 800212a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	1c9a      	adds	r2, r3, #2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002144:	e011      	b.n	800216a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002146:	f7fe fe4b 	bl	8000de0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d803      	bhi.n	800215e <HAL_SPI_Receive+0x1cc>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d102      	bne.n	8002164 <HAL_SPI_Receive+0x1d2>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002168:	e017      	b.n	800219a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1cd      	bne.n	8002110 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fa45 	bl	8002608 <SPI_EndRxTransaction>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
 8002196:	e000      	b.n	800219a <HAL_SPI_Receive+0x208>
  }

error :
 8002198:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021c2:	2301      	movs	r3, #1
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_SPI_TransmitReceive+0x26>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e18a      	b.n	80024f0 <HAL_SPI_TransmitReceive+0x33c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021e2:	f7fe fdfd 	bl	8000de0 <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002200:	2b01      	cmp	r3, #1
 8002202:	d00f      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x70>
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800220a:	d107      	bne.n	800221c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_SPI_TransmitReceive+0x68>
 8002214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002218:	2b04      	cmp	r3, #4
 800221a:	d003      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800221c:	2302      	movs	r3, #2
 800221e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002222:	e15b      	b.n	80024dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_SPI_TransmitReceive+0x82>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_SPI_TransmitReceive+0x82>
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800223c:	e14e      	b.n	80024dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b04      	cmp	r3, #4
 8002248:	d003      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	887a      	ldrh	r2, [r7, #2]
 800227a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d007      	beq.n	80022a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ae:	d178      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_SPI_TransmitReceive+0x10a>
 80022b8:	8b7b      	ldrh	r3, [r7, #26]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d166      	bne.n	800238c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	1c9a      	adds	r2, r3, #2
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e2:	e053      	b.n	800238c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d11b      	bne.n	800232a <HAL_SPI_TransmitReceive+0x176>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d016      	beq.n	800232a <HAL_SPI_TransmitReceive+0x176>
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d113      	bne.n	800232a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	881a      	ldrh	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	1c9a      	adds	r2, r3, #2
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d119      	bne.n	800236c <HAL_SPI_TransmitReceive+0x1b8>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	b292      	uxth	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	1c9a      	adds	r2, r3, #2
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002368:	2301      	movs	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800236c:	f7fe fd38 	bl	8000de0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002378:	429a      	cmp	r2, r3
 800237a:	d807      	bhi.n	800238c <HAL_SPI_TransmitReceive+0x1d8>
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d003      	beq.n	800238c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800238a:	e0a7      	b.n	80024dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1a6      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x130>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1a1      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x130>
 80023a0:	e07c      	b.n	800249c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x1fc>
 80023aa:	8b7b      	ldrh	r3, [r7, #26]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d16b      	bne.n	8002488 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d6:	e057      	b.n	8002488 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d11c      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x26c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x26c>
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d114      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d119      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x2ae>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d014      	beq.n	8002462 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800245e:	2301      	movs	r3, #1
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002462:	f7fe fcbd 	bl	8000de0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800246e:	429a      	cmp	r2, r3
 8002470:	d803      	bhi.n	800247a <HAL_SPI_TransmitReceive+0x2c6>
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d102      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x2cc>
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002486:	e029      	b.n	80024dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1a2      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x224>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d19d      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f917 	bl	80026d4 <SPI_EndRxTxTransaction>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d006      	beq.n	80024ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80024b8:	e010      	b.n	80024dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	e000      	b.n	80024dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3730      	adds	r7, #48	; 0x30
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002508:	f7fe fc6a 	bl	8000de0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002518:	f7fe fc62 	bl	8000de0 <HAL_GetTick>
 800251c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	0d1b      	lsrs	r3, r3, #20
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252e:	e054      	b.n	80025da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d050      	beq.n	80025da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002538:	f7fe fc52 	bl	8000de0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	429a      	cmp	r2, r3
 8002546:	d902      	bls.n	800254e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d13d      	bne.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800255c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002566:	d111      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002570:	d004      	beq.n	800257c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d107      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002594:	d10f      	bne.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e017      	b.n	80025fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4013      	ands	r3, r2
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d19b      	bne.n	8002530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000004 	.word	0x20000004

08002608 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261c:	d111      	bne.n	8002642 <SPI_EndRxTransaction+0x3a>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002626:	d004      	beq.n	8002632 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002630:	d107      	bne.n	8002642 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264a:	d12a      	bne.n	80026a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002654:	d012      	beq.n	800267c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff ff49 	bl	80024f8 <SPI_WaitFlagStateUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02d      	beq.n	80026c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e026      	b.n	80026ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	2101      	movs	r1, #1
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff36 	bl	80024f8 <SPI_WaitFlagStateUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e013      	b.n	80026ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2101      	movs	r1, #1
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff ff23 	bl	80024f8 <SPI_WaitFlagStateUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e000      	b.n	80026ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <SPI_EndRxTxTransaction+0x7c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <SPI_EndRxTxTransaction+0x80>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0d5b      	lsrs	r3, r3, #21
 80026ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fe:	d112      	bne.n	8002726 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff fef4 	bl	80024f8 <SPI_WaitFlagStateUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e00f      	b.n	8002746 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3b01      	subs	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d0f2      	beq.n	8002726 <SPI_EndRxTxTransaction+0x52>
 8002740:	e000      	b.n	8002744 <SPI_EndRxTxTransaction+0x70>
        break;
 8002742:	bf00      	nop
  }

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000004 	.word	0x20000004
 8002754:	165e9f81 	.word	0x165e9f81

08002758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e03f      	b.n	80027ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fa56 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f905 	bl	80029ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b08a      	sub	sp, #40	; 0x28
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	d17c      	bne.n	800290c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_UART_Transmit+0x2c>
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e075      	b.n	800290e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_UART_Transmit+0x3e>
 800282c:	2302      	movs	r3, #2
 800282e:	e06e      	b.n	800290e <HAL_UART_Transmit+0x11c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002846:	f7fe facb 	bl	8000de0 <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	88fa      	ldrh	r2, [r7, #6]
 8002856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d108      	bne.n	8002874 <HAL_UART_Transmit+0x82>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e003      	b.n	800287c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002884:	e02a      	b.n	80028dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f840 	bl	8002916 <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e036      	b.n	800290e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3302      	adds	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e007      	b.n	80028ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	3301      	adds	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1cf      	bne.n	8002886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f810 	bl	8002916 <UART_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e006      	b.n	800290e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3720      	adds	r7, #32
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4613      	mov	r3, r2
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002926:	e02c      	b.n	8002982 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d028      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <UART_WaitOnFlagUntilTimeout+0x30>
 8002936:	f7fe fa53 	bl	8000de0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	429a      	cmp	r2, r3
 8002944:	d21d      	bcs.n	8002982 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002954:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e00f      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	429a      	cmp	r2, r3
 800299e:	d0c3      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b0:	b09f      	sub	sp, #124	; 0x7c
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c2:	68d9      	ldr	r1, [r3, #12]
 80029c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	ea40 0301 	orr.w	r3, r0, r1
 80029cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	431a      	orrs	r2, r3
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80029e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029f0:	f021 010c 	bic.w	r1, r1, #12
 80029f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029fa:	430b      	orrs	r3, r1
 80029fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0a:	6999      	ldr	r1, [r3, #24]
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	ea40 0301 	orr.w	r3, r0, r1
 8002a14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4bc5      	ldr	r3, [pc, #788]	; (8002d30 <UART_SetConfig+0x384>)
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d004      	beq.n	8002a2a <UART_SetConfig+0x7e>
 8002a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4bc3      	ldr	r3, [pc, #780]	; (8002d34 <UART_SetConfig+0x388>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d103      	bne.n	8002a32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a2a:	f7ff f8d9 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 8002a2e:	6778      	str	r0, [r7, #116]	; 0x74
 8002a30:	e002      	b.n	8002a38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a32:	f7ff f8c1 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8002a36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a40:	f040 80b6 	bne.w	8002bb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a46:	461c      	mov	r4, r3
 8002a48:	f04f 0500 	mov.w	r5, #0
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	462b      	mov	r3, r5
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	6439      	str	r1, [r7, #64]	; 0x40
 8002a54:	415b      	adcs	r3, r3
 8002a56:	647b      	str	r3, [r7, #68]	; 0x44
 8002a58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a5c:	1912      	adds	r2, r2, r4
 8002a5e:	eb45 0303 	adc.w	r3, r5, r3
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	00d9      	lsls	r1, r3, #3
 8002a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a70:	00d0      	lsls	r0, r2, #3
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	1911      	adds	r1, r2, r4
 8002a78:	6639      	str	r1, [r7, #96]	; 0x60
 8002a7a:	416b      	adcs	r3, r5
 8002a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a98:	f7fd fbf2 	bl	8000280 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4ba5      	ldr	r3, [pc, #660]	; (8002d38 <UART_SetConfig+0x38c>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011e      	lsls	r6, r3, #4
 8002aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aac:	461c      	mov	r4, r3
 8002aae:	f04f 0500 	mov.w	r5, #0
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	1891      	adds	r1, r2, r2
 8002ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8002aba:	415b      	adcs	r3, r3
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
 8002abe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	eb45 0303 	adc.w	r3, r5, r3
 8002ac8:	f04f 0000 	mov.w	r0, #0
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	00d9      	lsls	r1, r3, #3
 8002ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad6:	00d0      	lsls	r0, r2, #3
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	1911      	adds	r1, r2, r4
 8002ade:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ae0:	416b      	adcs	r3, r5
 8002ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	1891      	adds	r1, r2, r2
 8002af0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002af2:	415b      	adcs	r3, r3
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002afe:	f7fd fbbf 	bl	8000280 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <UART_SetConfig+0x38c>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	4a87      	ldr	r2, [pc, #540]	; (8002d38 <UART_SetConfig+0x38c>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b28:	441e      	add	r6, r3
 8002b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	1894      	adds	r4, r2, r2
 8002b38:	623c      	str	r4, [r7, #32]
 8002b3a:	415b      	adcs	r3, r3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b42:	1812      	adds	r2, r2, r0
 8002b44:	eb41 0303 	adc.w	r3, r1, r3
 8002b48:	f04f 0400 	mov.w	r4, #0
 8002b4c:	f04f 0500 	mov.w	r5, #0
 8002b50:	00dd      	lsls	r5, r3, #3
 8002b52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b56:	00d4      	lsls	r4, r2, #3
 8002b58:	4622      	mov	r2, r4
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	1814      	adds	r4, r2, r0
 8002b5e:	653c      	str	r4, [r7, #80]	; 0x50
 8002b60:	414b      	adcs	r3, r1
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	1891      	adds	r1, r2, r2
 8002b70:	61b9      	str	r1, [r7, #24]
 8002b72:	415b      	adcs	r3, r3
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b7e:	f7fd fb7f 	bl	8000280 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <UART_SetConfig+0x38c>)
 8002b88:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	2164      	movs	r1, #100	; 0x64
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3332      	adds	r3, #50	; 0x32
 8002b9a:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <UART_SetConfig+0x38c>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	f003 0207 	and.w	r2, r3, #7
 8002ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4432      	add	r2, r6
 8002bac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bae:	e0b9      	b.n	8002d24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb2:	461c      	mov	r4, r3
 8002bb4:	f04f 0500 	mov.w	r5, #0
 8002bb8:	4622      	mov	r2, r4
 8002bba:	462b      	mov	r3, r5
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	6139      	str	r1, [r7, #16]
 8002bc0:	415b      	adcs	r3, r3
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bc8:	1912      	adds	r2, r2, r4
 8002bca:	eb45 0303 	adc.w	r3, r5, r3
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	00d9      	lsls	r1, r3, #3
 8002bd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bdc:	00d0      	lsls	r0, r2, #3
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	eb12 0804 	adds.w	r8, r2, r4
 8002be6:	eb43 0905 	adc.w	r9, r3, r5
 8002bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	008b      	lsls	r3, r1, #2
 8002bfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c02:	0082      	lsls	r2, r0, #2
 8002c04:	4640      	mov	r0, r8
 8002c06:	4649      	mov	r1, r9
 8002c08:	f7fd fb3a 	bl	8000280 <__aeabi_uldivmod>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <UART_SetConfig+0x38c>)
 8002c12:	fba3 2302 	umull	r2, r3, r3, r2
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	011e      	lsls	r6, r3, #4
 8002c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	1894      	adds	r4, r2, r2
 8002c28:	60bc      	str	r4, [r7, #8]
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c32:	1812      	adds	r2, r2, r0
 8002c34:	eb41 0303 	adc.w	r3, r1, r3
 8002c38:	f04f 0400 	mov.w	r4, #0
 8002c3c:	f04f 0500 	mov.w	r5, #0
 8002c40:	00dd      	lsls	r5, r3, #3
 8002c42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c46:	00d4      	lsls	r4, r2, #3
 8002c48:	4622      	mov	r2, r4
 8002c4a:	462b      	mov	r3, r5
 8002c4c:	1814      	adds	r4, r2, r0
 8002c4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c50:	414b      	adcs	r3, r1
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	008b      	lsls	r3, r1, #2
 8002c68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c6c:	0082      	lsls	r2, r0, #2
 8002c6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c72:	f7fd fb05 	bl	8000280 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <UART_SetConfig+0x38c>)
 8002c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	2164      	movs	r1, #100	; 0x64
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	3332      	adds	r3, #50	; 0x32
 8002c8e:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <UART_SetConfig+0x38c>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9a:	441e      	add	r6, r3
 8002c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	1894      	adds	r4, r2, r2
 8002caa:	603c      	str	r4, [r7, #0]
 8002cac:	415b      	adcs	r3, r3
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb4:	1812      	adds	r2, r2, r0
 8002cb6:	eb41 0303 	adc.w	r3, r1, r3
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	f04f 0500 	mov.w	r5, #0
 8002cc2:	00dd      	lsls	r5, r3, #3
 8002cc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cc8:	00d4      	lsls	r4, r2, #3
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	eb12 0a00 	adds.w	sl, r2, r0
 8002cd2:	eb43 0b01 	adc.w	fp, r3, r1
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	008b      	lsls	r3, r1, #2
 8002cea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cee:	0082      	lsls	r2, r0, #2
 8002cf0:	4650      	mov	r0, sl
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	f7fd fac4 	bl	8000280 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <UART_SetConfig+0x38c>)
 8002cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2164      	movs	r1, #100	; 0x64
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	3332      	adds	r3, #50	; 0x32
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <UART_SetConfig+0x38c>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4432      	add	r2, r6
 8002d22:	609a      	str	r2, [r3, #8]
}
 8002d24:	bf00      	nop
 8002d26:	377c      	adds	r7, #124	; 0x7c
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40011000 	.word	0x40011000
 8002d34:	40011400 	.word	0x40011400
 8002d38:	51eb851f 	.word	0x51eb851f

08002d3c <__errno>:
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <__errno+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000010 	.word	0x20000010

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 ffec 	bl	8003d38 <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08003ed0 	.word	0x08003ed0
 8002d84:	08003ed0 	.word	0x08003ed0
 8002d88:	08003ed0 	.word	0x08003ed0
 8002d8c:	08003ed4 	.word	0x08003ed4

08002d90 <memset>:
 8002d90:	4402      	add	r2, r0
 8002d92:	4603      	mov	r3, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <iprintf>:
 8002da0:	b40f      	push	{r0, r1, r2, r3}
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <iprintf+0x2c>)
 8002da4:	b513      	push	{r0, r1, r4, lr}
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	b124      	cbz	r4, 8002db4 <iprintf+0x14>
 8002daa:	69a3      	ldr	r3, [r4, #24]
 8002dac:	b913      	cbnz	r3, 8002db4 <iprintf+0x14>
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 fa5e 	bl	8003270 <__sinit>
 8002db4:	ab05      	add	r3, sp, #20
 8002db6:	9a04      	ldr	r2, [sp, #16]
 8002db8:	68a1      	ldr	r1, [r4, #8]
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 fc2f 	bl	8003620 <_vfiprintf_r>
 8002dc2:	b002      	add	sp, #8
 8002dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc8:	b004      	add	sp, #16
 8002dca:	4770      	bx	lr
 8002dcc:	20000010 	.word	0x20000010

08002dd0 <_puts_r>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	460e      	mov	r6, r1
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	b118      	cbz	r0, 8002de0 <_puts_r+0x10>
 8002dd8:	6983      	ldr	r3, [r0, #24]
 8002dda:	b90b      	cbnz	r3, 8002de0 <_puts_r+0x10>
 8002ddc:	f000 fa48 	bl	8003270 <__sinit>
 8002de0:	69ab      	ldr	r3, [r5, #24]
 8002de2:	68ac      	ldr	r4, [r5, #8]
 8002de4:	b913      	cbnz	r3, 8002dec <_puts_r+0x1c>
 8002de6:	4628      	mov	r0, r5
 8002de8:	f000 fa42 	bl	8003270 <__sinit>
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <_puts_r+0xd0>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d120      	bne.n	8002e34 <_puts_r+0x64>
 8002df2:	686c      	ldr	r4, [r5, #4]
 8002df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002df6:	07db      	lsls	r3, r3, #31
 8002df8:	d405      	bmi.n	8002e06 <_puts_r+0x36>
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	0598      	lsls	r0, r3, #22
 8002dfe:	d402      	bmi.n	8002e06 <_puts_r+0x36>
 8002e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e02:	f000 fad3 	bl	80033ac <__retarget_lock_acquire_recursive>
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	0719      	lsls	r1, r3, #28
 8002e0a:	d51d      	bpl.n	8002e48 <_puts_r+0x78>
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	b1db      	cbz	r3, 8002e48 <_puts_r+0x78>
 8002e10:	3e01      	subs	r6, #1
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	bb39      	cbnz	r1, 8002e6e <_puts_r+0x9e>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da38      	bge.n	8002e94 <_puts_r+0xc4>
 8002e22:	4622      	mov	r2, r4
 8002e24:	210a      	movs	r1, #10
 8002e26:	4628      	mov	r0, r5
 8002e28:	f000 f848 	bl	8002ebc <__swbuf_r>
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d011      	beq.n	8002e54 <_puts_r+0x84>
 8002e30:	250a      	movs	r5, #10
 8002e32:	e011      	b.n	8002e58 <_puts_r+0x88>
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <_puts_r+0xd4>)
 8002e36:	429c      	cmp	r4, r3
 8002e38:	d101      	bne.n	8002e3e <_puts_r+0x6e>
 8002e3a:	68ac      	ldr	r4, [r5, #8]
 8002e3c:	e7da      	b.n	8002df4 <_puts_r+0x24>
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <_puts_r+0xd8>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	bf08      	it	eq
 8002e44:	68ec      	ldreq	r4, [r5, #12]
 8002e46:	e7d5      	b.n	8002df4 <_puts_r+0x24>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 f888 	bl	8002f60 <__swsetup_r>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d0dd      	beq.n	8002e10 <_puts_r+0x40>
 8002e54:	f04f 35ff 	mov.w	r5, #4294967295
 8002e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e5a:	07da      	lsls	r2, r3, #31
 8002e5c:	d405      	bmi.n	8002e6a <_puts_r+0x9a>
 8002e5e:	89a3      	ldrh	r3, [r4, #12]
 8002e60:	059b      	lsls	r3, r3, #22
 8002e62:	d402      	bmi.n	8002e6a <_puts_r+0x9a>
 8002e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e66:	f000 faa2 	bl	80033ae <__retarget_lock_release_recursive>
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da04      	bge.n	8002e7c <_puts_r+0xac>
 8002e72:	69a2      	ldr	r2, [r4, #24]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	dc06      	bgt.n	8002e86 <_puts_r+0xb6>
 8002e78:	290a      	cmp	r1, #10
 8002e7a:	d004      	beq.n	8002e86 <_puts_r+0xb6>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	6022      	str	r2, [r4, #0]
 8002e82:	7019      	strb	r1, [r3, #0]
 8002e84:	e7c5      	b.n	8002e12 <_puts_r+0x42>
 8002e86:	4622      	mov	r2, r4
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f000 f817 	bl	8002ebc <__swbuf_r>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d1bf      	bne.n	8002e12 <_puts_r+0x42>
 8002e92:	e7df      	b.n	8002e54 <_puts_r+0x84>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	250a      	movs	r5, #10
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	6022      	str	r2, [r4, #0]
 8002e9c:	701d      	strb	r5, [r3, #0]
 8002e9e:	e7db      	b.n	8002e58 <_puts_r+0x88>
 8002ea0:	08003e54 	.word	0x08003e54
 8002ea4:	08003e74 	.word	0x08003e74
 8002ea8:	08003e34 	.word	0x08003e34

08002eac <puts>:
 8002eac:	4b02      	ldr	r3, [pc, #8]	; (8002eb8 <puts+0xc>)
 8002eae:	4601      	mov	r1, r0
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f7ff bf8d 	b.w	8002dd0 <_puts_r>
 8002eb6:	bf00      	nop
 8002eb8:	20000010 	.word	0x20000010

08002ebc <__swbuf_r>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	460e      	mov	r6, r1
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	b118      	cbz	r0, 8002ece <__swbuf_r+0x12>
 8002ec6:	6983      	ldr	r3, [r0, #24]
 8002ec8:	b90b      	cbnz	r3, 8002ece <__swbuf_r+0x12>
 8002eca:	f000 f9d1 	bl	8003270 <__sinit>
 8002ece:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <__swbuf_r+0x98>)
 8002ed0:	429c      	cmp	r4, r3
 8002ed2:	d12b      	bne.n	8002f2c <__swbuf_r+0x70>
 8002ed4:	686c      	ldr	r4, [r5, #4]
 8002ed6:	69a3      	ldr	r3, [r4, #24]
 8002ed8:	60a3      	str	r3, [r4, #8]
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	071a      	lsls	r2, r3, #28
 8002ede:	d52f      	bpl.n	8002f40 <__swbuf_r+0x84>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	b36b      	cbz	r3, 8002f40 <__swbuf_r+0x84>
 8002ee4:	6923      	ldr	r3, [r4, #16]
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	1ac0      	subs	r0, r0, r3
 8002eea:	6963      	ldr	r3, [r4, #20]
 8002eec:	b2f6      	uxtb	r6, r6
 8002eee:	4283      	cmp	r3, r0
 8002ef0:	4637      	mov	r7, r6
 8002ef2:	dc04      	bgt.n	8002efe <__swbuf_r+0x42>
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f000 f926 	bl	8003148 <_fflush_r>
 8002efc:	bb30      	cbnz	r0, 8002f4c <__swbuf_r+0x90>
 8002efe:	68a3      	ldr	r3, [r4, #8]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60a3      	str	r3, [r4, #8]
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	6022      	str	r2, [r4, #0]
 8002f0a:	701e      	strb	r6, [r3, #0]
 8002f0c:	6963      	ldr	r3, [r4, #20]
 8002f0e:	3001      	adds	r0, #1
 8002f10:	4283      	cmp	r3, r0
 8002f12:	d004      	beq.n	8002f1e <__swbuf_r+0x62>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	07db      	lsls	r3, r3, #31
 8002f18:	d506      	bpl.n	8002f28 <__swbuf_r+0x6c>
 8002f1a:	2e0a      	cmp	r6, #10
 8002f1c:	d104      	bne.n	8002f28 <__swbuf_r+0x6c>
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4628      	mov	r0, r5
 8002f22:	f000 f911 	bl	8003148 <_fflush_r>
 8002f26:	b988      	cbnz	r0, 8002f4c <__swbuf_r+0x90>
 8002f28:	4638      	mov	r0, r7
 8002f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <__swbuf_r+0x9c>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d101      	bne.n	8002f36 <__swbuf_r+0x7a>
 8002f32:	68ac      	ldr	r4, [r5, #8]
 8002f34:	e7cf      	b.n	8002ed6 <__swbuf_r+0x1a>
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <__swbuf_r+0xa0>)
 8002f38:	429c      	cmp	r4, r3
 8002f3a:	bf08      	it	eq
 8002f3c:	68ec      	ldreq	r4, [r5, #12]
 8002f3e:	e7ca      	b.n	8002ed6 <__swbuf_r+0x1a>
 8002f40:	4621      	mov	r1, r4
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 f80c 	bl	8002f60 <__swsetup_r>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d0cb      	beq.n	8002ee4 <__swbuf_r+0x28>
 8002f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8002f50:	e7ea      	b.n	8002f28 <__swbuf_r+0x6c>
 8002f52:	bf00      	nop
 8002f54:	08003e54 	.word	0x08003e54
 8002f58:	08003e74 	.word	0x08003e74
 8002f5c:	08003e34 	.word	0x08003e34

08002f60 <__swsetup_r>:
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <__swsetup_r+0xcc>)
 8002f62:	b570      	push	{r4, r5, r6, lr}
 8002f64:	681d      	ldr	r5, [r3, #0]
 8002f66:	4606      	mov	r6, r0
 8002f68:	460c      	mov	r4, r1
 8002f6a:	b125      	cbz	r5, 8002f76 <__swsetup_r+0x16>
 8002f6c:	69ab      	ldr	r3, [r5, #24]
 8002f6e:	b913      	cbnz	r3, 8002f76 <__swsetup_r+0x16>
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 f97d 	bl	8003270 <__sinit>
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <__swsetup_r+0xd0>)
 8002f78:	429c      	cmp	r4, r3
 8002f7a:	d10f      	bne.n	8002f9c <__swsetup_r+0x3c>
 8002f7c:	686c      	ldr	r4, [r5, #4]
 8002f7e:	89a3      	ldrh	r3, [r4, #12]
 8002f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f84:	0719      	lsls	r1, r3, #28
 8002f86:	d42c      	bmi.n	8002fe2 <__swsetup_r+0x82>
 8002f88:	06dd      	lsls	r5, r3, #27
 8002f8a:	d411      	bmi.n	8002fb0 <__swsetup_r+0x50>
 8002f8c:	2309      	movs	r3, #9
 8002f8e:	6033      	str	r3, [r6, #0]
 8002f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	e03e      	b.n	800301a <__swsetup_r+0xba>
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <__swsetup_r+0xd4>)
 8002f9e:	429c      	cmp	r4, r3
 8002fa0:	d101      	bne.n	8002fa6 <__swsetup_r+0x46>
 8002fa2:	68ac      	ldr	r4, [r5, #8]
 8002fa4:	e7eb      	b.n	8002f7e <__swsetup_r+0x1e>
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <__swsetup_r+0xd8>)
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	bf08      	it	eq
 8002fac:	68ec      	ldreq	r4, [r5, #12]
 8002fae:	e7e6      	b.n	8002f7e <__swsetup_r+0x1e>
 8002fb0:	0758      	lsls	r0, r3, #29
 8002fb2:	d512      	bpl.n	8002fda <__swsetup_r+0x7a>
 8002fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb6:	b141      	cbz	r1, 8002fca <__swsetup_r+0x6a>
 8002fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fbc:	4299      	cmp	r1, r3
 8002fbe:	d002      	beq.n	8002fc6 <__swsetup_r+0x66>
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f000 fa59 	bl	8003478 <_free_r>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6063      	str	r3, [r4, #4]
 8002fd6:	6923      	ldr	r3, [r4, #16]
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	81a3      	strh	r3, [r4, #12]
 8002fe2:	6923      	ldr	r3, [r4, #16]
 8002fe4:	b94b      	cbnz	r3, 8002ffa <__swsetup_r+0x9a>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	d003      	beq.n	8002ffa <__swsetup_r+0x9a>
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f000 f9ff 	bl	80033f8 <__smakebuf_r>
 8002ffa:	89a0      	ldrh	r0, [r4, #12]
 8002ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003000:	f010 0301 	ands.w	r3, r0, #1
 8003004:	d00a      	beq.n	800301c <__swsetup_r+0xbc>
 8003006:	2300      	movs	r3, #0
 8003008:	60a3      	str	r3, [r4, #8]
 800300a:	6963      	ldr	r3, [r4, #20]
 800300c:	425b      	negs	r3, r3
 800300e:	61a3      	str	r3, [r4, #24]
 8003010:	6923      	ldr	r3, [r4, #16]
 8003012:	b943      	cbnz	r3, 8003026 <__swsetup_r+0xc6>
 8003014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003018:	d1ba      	bne.n	8002f90 <__swsetup_r+0x30>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	0781      	lsls	r1, r0, #30
 800301e:	bf58      	it	pl
 8003020:	6963      	ldrpl	r3, [r4, #20]
 8003022:	60a3      	str	r3, [r4, #8]
 8003024:	e7f4      	b.n	8003010 <__swsetup_r+0xb0>
 8003026:	2000      	movs	r0, #0
 8003028:	e7f7      	b.n	800301a <__swsetup_r+0xba>
 800302a:	bf00      	nop
 800302c:	20000010 	.word	0x20000010
 8003030:	08003e54 	.word	0x08003e54
 8003034:	08003e74 	.word	0x08003e74
 8003038:	08003e34 	.word	0x08003e34

0800303c <__sflush_r>:
 800303c:	898a      	ldrh	r2, [r1, #12]
 800303e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003042:	4605      	mov	r5, r0
 8003044:	0710      	lsls	r0, r2, #28
 8003046:	460c      	mov	r4, r1
 8003048:	d458      	bmi.n	80030fc <__sflush_r+0xc0>
 800304a:	684b      	ldr	r3, [r1, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	dc05      	bgt.n	800305c <__sflush_r+0x20>
 8003050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	dc02      	bgt.n	800305c <__sflush_r+0x20>
 8003056:	2000      	movs	r0, #0
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800305e:	2e00      	cmp	r6, #0
 8003060:	d0f9      	beq.n	8003056 <__sflush_r+0x1a>
 8003062:	2300      	movs	r3, #0
 8003064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003068:	682f      	ldr	r7, [r5, #0]
 800306a:	602b      	str	r3, [r5, #0]
 800306c:	d032      	beq.n	80030d4 <__sflush_r+0x98>
 800306e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	075a      	lsls	r2, r3, #29
 8003074:	d505      	bpl.n	8003082 <__sflush_r+0x46>
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	1ac0      	subs	r0, r0, r3
 800307a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800307c:	b10b      	cbz	r3, 8003082 <__sflush_r+0x46>
 800307e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003080:	1ac0      	subs	r0, r0, r3
 8003082:	2300      	movs	r3, #0
 8003084:	4602      	mov	r2, r0
 8003086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003088:	6a21      	ldr	r1, [r4, #32]
 800308a:	4628      	mov	r0, r5
 800308c:	47b0      	blx	r6
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	d106      	bne.n	80030a2 <__sflush_r+0x66>
 8003094:	6829      	ldr	r1, [r5, #0]
 8003096:	291d      	cmp	r1, #29
 8003098:	d82c      	bhi.n	80030f4 <__sflush_r+0xb8>
 800309a:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <__sflush_r+0x108>)
 800309c:	40ca      	lsrs	r2, r1
 800309e:	07d6      	lsls	r6, r2, #31
 80030a0:	d528      	bpl.n	80030f4 <__sflush_r+0xb8>
 80030a2:	2200      	movs	r2, #0
 80030a4:	6062      	str	r2, [r4, #4]
 80030a6:	04d9      	lsls	r1, r3, #19
 80030a8:	6922      	ldr	r2, [r4, #16]
 80030aa:	6022      	str	r2, [r4, #0]
 80030ac:	d504      	bpl.n	80030b8 <__sflush_r+0x7c>
 80030ae:	1c42      	adds	r2, r0, #1
 80030b0:	d101      	bne.n	80030b6 <__sflush_r+0x7a>
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	b903      	cbnz	r3, 80030b8 <__sflush_r+0x7c>
 80030b6:	6560      	str	r0, [r4, #84]	; 0x54
 80030b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ba:	602f      	str	r7, [r5, #0]
 80030bc:	2900      	cmp	r1, #0
 80030be:	d0ca      	beq.n	8003056 <__sflush_r+0x1a>
 80030c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030c4:	4299      	cmp	r1, r3
 80030c6:	d002      	beq.n	80030ce <__sflush_r+0x92>
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 f9d5 	bl	8003478 <_free_r>
 80030ce:	2000      	movs	r0, #0
 80030d0:	6360      	str	r0, [r4, #52]	; 0x34
 80030d2:	e7c1      	b.n	8003058 <__sflush_r+0x1c>
 80030d4:	6a21      	ldr	r1, [r4, #32]
 80030d6:	2301      	movs	r3, #1
 80030d8:	4628      	mov	r0, r5
 80030da:	47b0      	blx	r6
 80030dc:	1c41      	adds	r1, r0, #1
 80030de:	d1c7      	bne.n	8003070 <__sflush_r+0x34>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0c4      	beq.n	8003070 <__sflush_r+0x34>
 80030e6:	2b1d      	cmp	r3, #29
 80030e8:	d001      	beq.n	80030ee <__sflush_r+0xb2>
 80030ea:	2b16      	cmp	r3, #22
 80030ec:	d101      	bne.n	80030f2 <__sflush_r+0xb6>
 80030ee:	602f      	str	r7, [r5, #0]
 80030f0:	e7b1      	b.n	8003056 <__sflush_r+0x1a>
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	e7ad      	b.n	8003058 <__sflush_r+0x1c>
 80030fc:	690f      	ldr	r7, [r1, #16]
 80030fe:	2f00      	cmp	r7, #0
 8003100:	d0a9      	beq.n	8003056 <__sflush_r+0x1a>
 8003102:	0793      	lsls	r3, r2, #30
 8003104:	680e      	ldr	r6, [r1, #0]
 8003106:	bf08      	it	eq
 8003108:	694b      	ldreq	r3, [r1, #20]
 800310a:	600f      	str	r7, [r1, #0]
 800310c:	bf18      	it	ne
 800310e:	2300      	movne	r3, #0
 8003110:	eba6 0807 	sub.w	r8, r6, r7
 8003114:	608b      	str	r3, [r1, #8]
 8003116:	f1b8 0f00 	cmp.w	r8, #0
 800311a:	dd9c      	ble.n	8003056 <__sflush_r+0x1a>
 800311c:	6a21      	ldr	r1, [r4, #32]
 800311e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003120:	4643      	mov	r3, r8
 8003122:	463a      	mov	r2, r7
 8003124:	4628      	mov	r0, r5
 8003126:	47b0      	blx	r6
 8003128:	2800      	cmp	r0, #0
 800312a:	dc06      	bgt.n	800313a <__sflush_r+0xfe>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	e78e      	b.n	8003058 <__sflush_r+0x1c>
 800313a:	4407      	add	r7, r0
 800313c:	eba8 0800 	sub.w	r8, r8, r0
 8003140:	e7e9      	b.n	8003116 <__sflush_r+0xda>
 8003142:	bf00      	nop
 8003144:	20400001 	.word	0x20400001

08003148 <_fflush_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	690b      	ldr	r3, [r1, #16]
 800314c:	4605      	mov	r5, r0
 800314e:	460c      	mov	r4, r1
 8003150:	b913      	cbnz	r3, 8003158 <_fflush_r+0x10>
 8003152:	2500      	movs	r5, #0
 8003154:	4628      	mov	r0, r5
 8003156:	bd38      	pop	{r3, r4, r5, pc}
 8003158:	b118      	cbz	r0, 8003162 <_fflush_r+0x1a>
 800315a:	6983      	ldr	r3, [r0, #24]
 800315c:	b90b      	cbnz	r3, 8003162 <_fflush_r+0x1a>
 800315e:	f000 f887 	bl	8003270 <__sinit>
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <_fflush_r+0x6c>)
 8003164:	429c      	cmp	r4, r3
 8003166:	d11b      	bne.n	80031a0 <_fflush_r+0x58>
 8003168:	686c      	ldr	r4, [r5, #4]
 800316a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ef      	beq.n	8003152 <_fflush_r+0xa>
 8003172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003174:	07d0      	lsls	r0, r2, #31
 8003176:	d404      	bmi.n	8003182 <_fflush_r+0x3a>
 8003178:	0599      	lsls	r1, r3, #22
 800317a:	d402      	bmi.n	8003182 <_fflush_r+0x3a>
 800317c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317e:	f000 f915 	bl	80033ac <__retarget_lock_acquire_recursive>
 8003182:	4628      	mov	r0, r5
 8003184:	4621      	mov	r1, r4
 8003186:	f7ff ff59 	bl	800303c <__sflush_r>
 800318a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800318c:	07da      	lsls	r2, r3, #31
 800318e:	4605      	mov	r5, r0
 8003190:	d4e0      	bmi.n	8003154 <_fflush_r+0xc>
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	059b      	lsls	r3, r3, #22
 8003196:	d4dd      	bmi.n	8003154 <_fflush_r+0xc>
 8003198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800319a:	f000 f908 	bl	80033ae <__retarget_lock_release_recursive>
 800319e:	e7d9      	b.n	8003154 <_fflush_r+0xc>
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <_fflush_r+0x70>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	d101      	bne.n	80031aa <_fflush_r+0x62>
 80031a6:	68ac      	ldr	r4, [r5, #8]
 80031a8:	e7df      	b.n	800316a <_fflush_r+0x22>
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <_fflush_r+0x74>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	bf08      	it	eq
 80031b0:	68ec      	ldreq	r4, [r5, #12]
 80031b2:	e7da      	b.n	800316a <_fflush_r+0x22>
 80031b4:	08003e54 	.word	0x08003e54
 80031b8:	08003e74 	.word	0x08003e74
 80031bc:	08003e34 	.word	0x08003e34

080031c0 <std>:
 80031c0:	2300      	movs	r3, #0
 80031c2:	b510      	push	{r4, lr}
 80031c4:	4604      	mov	r4, r0
 80031c6:	e9c0 3300 	strd	r3, r3, [r0]
 80031ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ce:	6083      	str	r3, [r0, #8]
 80031d0:	8181      	strh	r1, [r0, #12]
 80031d2:	6643      	str	r3, [r0, #100]	; 0x64
 80031d4:	81c2      	strh	r2, [r0, #14]
 80031d6:	6183      	str	r3, [r0, #24]
 80031d8:	4619      	mov	r1, r3
 80031da:	2208      	movs	r2, #8
 80031dc:	305c      	adds	r0, #92	; 0x5c
 80031de:	f7ff fdd7 	bl	8002d90 <memset>
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <std+0x38>)
 80031e4:	6263      	str	r3, [r4, #36]	; 0x24
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <std+0x3c>)
 80031e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <std+0x40>)
 80031ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <std+0x44>)
 80031f0:	6224      	str	r4, [r4, #32]
 80031f2:	6323      	str	r3, [r4, #48]	; 0x30
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	bf00      	nop
 80031f8:	08003bc9 	.word	0x08003bc9
 80031fc:	08003beb 	.word	0x08003beb
 8003200:	08003c23 	.word	0x08003c23
 8003204:	08003c47 	.word	0x08003c47

08003208 <_cleanup_r>:
 8003208:	4901      	ldr	r1, [pc, #4]	; (8003210 <_cleanup_r+0x8>)
 800320a:	f000 b8af 	b.w	800336c <_fwalk_reent>
 800320e:	bf00      	nop
 8003210:	08003149 	.word	0x08003149

08003214 <__sfmoreglue>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	1e4a      	subs	r2, r1, #1
 8003218:	2568      	movs	r5, #104	; 0x68
 800321a:	4355      	muls	r5, r2
 800321c:	460e      	mov	r6, r1
 800321e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003222:	f000 f979 	bl	8003518 <_malloc_r>
 8003226:	4604      	mov	r4, r0
 8003228:	b140      	cbz	r0, 800323c <__sfmoreglue+0x28>
 800322a:	2100      	movs	r1, #0
 800322c:	e9c0 1600 	strd	r1, r6, [r0]
 8003230:	300c      	adds	r0, #12
 8003232:	60a0      	str	r0, [r4, #8]
 8003234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003238:	f7ff fdaa 	bl	8002d90 <memset>
 800323c:	4620      	mov	r0, r4
 800323e:	bd70      	pop	{r4, r5, r6, pc}

08003240 <__sfp_lock_acquire>:
 8003240:	4801      	ldr	r0, [pc, #4]	; (8003248 <__sfp_lock_acquire+0x8>)
 8003242:	f000 b8b3 	b.w	80033ac <__retarget_lock_acquire_recursive>
 8003246:	bf00      	nop
 8003248:	20000148 	.word	0x20000148

0800324c <__sfp_lock_release>:
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <__sfp_lock_release+0x8>)
 800324e:	f000 b8ae 	b.w	80033ae <__retarget_lock_release_recursive>
 8003252:	bf00      	nop
 8003254:	20000148 	.word	0x20000148

08003258 <__sinit_lock_acquire>:
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <__sinit_lock_acquire+0x8>)
 800325a:	f000 b8a7 	b.w	80033ac <__retarget_lock_acquire_recursive>
 800325e:	bf00      	nop
 8003260:	20000143 	.word	0x20000143

08003264 <__sinit_lock_release>:
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <__sinit_lock_release+0x8>)
 8003266:	f000 b8a2 	b.w	80033ae <__retarget_lock_release_recursive>
 800326a:	bf00      	nop
 800326c:	20000143 	.word	0x20000143

08003270 <__sinit>:
 8003270:	b510      	push	{r4, lr}
 8003272:	4604      	mov	r4, r0
 8003274:	f7ff fff0 	bl	8003258 <__sinit_lock_acquire>
 8003278:	69a3      	ldr	r3, [r4, #24]
 800327a:	b11b      	cbz	r3, 8003284 <__sinit+0x14>
 800327c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003280:	f7ff bff0 	b.w	8003264 <__sinit_lock_release>
 8003284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003288:	6523      	str	r3, [r4, #80]	; 0x50
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <__sinit+0x68>)
 800328c:	4a13      	ldr	r2, [pc, #76]	; (80032dc <__sinit+0x6c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	62a2      	str	r2, [r4, #40]	; 0x28
 8003292:	42a3      	cmp	r3, r4
 8003294:	bf04      	itt	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	61a3      	streq	r3, [r4, #24]
 800329a:	4620      	mov	r0, r4
 800329c:	f000 f820 	bl	80032e0 <__sfp>
 80032a0:	6060      	str	r0, [r4, #4]
 80032a2:	4620      	mov	r0, r4
 80032a4:	f000 f81c 	bl	80032e0 <__sfp>
 80032a8:	60a0      	str	r0, [r4, #8]
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 f818 	bl	80032e0 <__sfp>
 80032b0:	2200      	movs	r2, #0
 80032b2:	60e0      	str	r0, [r4, #12]
 80032b4:	2104      	movs	r1, #4
 80032b6:	6860      	ldr	r0, [r4, #4]
 80032b8:	f7ff ff82 	bl	80031c0 <std>
 80032bc:	68a0      	ldr	r0, [r4, #8]
 80032be:	2201      	movs	r2, #1
 80032c0:	2109      	movs	r1, #9
 80032c2:	f7ff ff7d 	bl	80031c0 <std>
 80032c6:	68e0      	ldr	r0, [r4, #12]
 80032c8:	2202      	movs	r2, #2
 80032ca:	2112      	movs	r1, #18
 80032cc:	f7ff ff78 	bl	80031c0 <std>
 80032d0:	2301      	movs	r3, #1
 80032d2:	61a3      	str	r3, [r4, #24]
 80032d4:	e7d2      	b.n	800327c <__sinit+0xc>
 80032d6:	bf00      	nop
 80032d8:	08003e30 	.word	0x08003e30
 80032dc:	08003209 	.word	0x08003209

080032e0 <__sfp>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	4607      	mov	r7, r0
 80032e4:	f7ff ffac 	bl	8003240 <__sfp_lock_acquire>
 80032e8:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <__sfp+0x84>)
 80032ea:	681e      	ldr	r6, [r3, #0]
 80032ec:	69b3      	ldr	r3, [r6, #24]
 80032ee:	b913      	cbnz	r3, 80032f6 <__sfp+0x16>
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7ff ffbd 	bl	8003270 <__sinit>
 80032f6:	3648      	adds	r6, #72	; 0x48
 80032f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	d503      	bpl.n	8003308 <__sfp+0x28>
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	b30b      	cbz	r3, 8003348 <__sfp+0x68>
 8003304:	6836      	ldr	r6, [r6, #0]
 8003306:	e7f7      	b.n	80032f8 <__sfp+0x18>
 8003308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800330c:	b9d5      	cbnz	r5, 8003344 <__sfp+0x64>
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <__sfp+0x88>)
 8003310:	60e3      	str	r3, [r4, #12]
 8003312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003316:	6665      	str	r5, [r4, #100]	; 0x64
 8003318:	f000 f847 	bl	80033aa <__retarget_lock_init_recursive>
 800331c:	f7ff ff96 	bl	800324c <__sfp_lock_release>
 8003320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003328:	6025      	str	r5, [r4, #0]
 800332a:	61a5      	str	r5, [r4, #24]
 800332c:	2208      	movs	r2, #8
 800332e:	4629      	mov	r1, r5
 8003330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003334:	f7ff fd2c 	bl	8002d90 <memset>
 8003338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800333c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003340:	4620      	mov	r0, r4
 8003342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003344:	3468      	adds	r4, #104	; 0x68
 8003346:	e7d9      	b.n	80032fc <__sfp+0x1c>
 8003348:	2104      	movs	r1, #4
 800334a:	4638      	mov	r0, r7
 800334c:	f7ff ff62 	bl	8003214 <__sfmoreglue>
 8003350:	4604      	mov	r4, r0
 8003352:	6030      	str	r0, [r6, #0]
 8003354:	2800      	cmp	r0, #0
 8003356:	d1d5      	bne.n	8003304 <__sfp+0x24>
 8003358:	f7ff ff78 	bl	800324c <__sfp_lock_release>
 800335c:	230c      	movs	r3, #12
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	e7ee      	b.n	8003340 <__sfp+0x60>
 8003362:	bf00      	nop
 8003364:	08003e30 	.word	0x08003e30
 8003368:	ffff0001 	.word	0xffff0001

0800336c <_fwalk_reent>:
 800336c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003370:	4606      	mov	r6, r0
 8003372:	4688      	mov	r8, r1
 8003374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003378:	2700      	movs	r7, #0
 800337a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800337e:	f1b9 0901 	subs.w	r9, r9, #1
 8003382:	d505      	bpl.n	8003390 <_fwalk_reent+0x24>
 8003384:	6824      	ldr	r4, [r4, #0]
 8003386:	2c00      	cmp	r4, #0
 8003388:	d1f7      	bne.n	800337a <_fwalk_reent+0xe>
 800338a:	4638      	mov	r0, r7
 800338c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003390:	89ab      	ldrh	r3, [r5, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d907      	bls.n	80033a6 <_fwalk_reent+0x3a>
 8003396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800339a:	3301      	adds	r3, #1
 800339c:	d003      	beq.n	80033a6 <_fwalk_reent+0x3a>
 800339e:	4629      	mov	r1, r5
 80033a0:	4630      	mov	r0, r6
 80033a2:	47c0      	blx	r8
 80033a4:	4307      	orrs	r7, r0
 80033a6:	3568      	adds	r5, #104	; 0x68
 80033a8:	e7e9      	b.n	800337e <_fwalk_reent+0x12>

080033aa <__retarget_lock_init_recursive>:
 80033aa:	4770      	bx	lr

080033ac <__retarget_lock_acquire_recursive>:
 80033ac:	4770      	bx	lr

080033ae <__retarget_lock_release_recursive>:
 80033ae:	4770      	bx	lr

080033b0 <__swhatbuf_r>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	460e      	mov	r6, r1
 80033b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b8:	2900      	cmp	r1, #0
 80033ba:	b096      	sub	sp, #88	; 0x58
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	da07      	bge.n	80033d2 <__swhatbuf_r+0x22>
 80033c2:	2300      	movs	r3, #0
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	89b3      	ldrh	r3, [r6, #12]
 80033c8:	061a      	lsls	r2, r3, #24
 80033ca:	d410      	bmi.n	80033ee <__swhatbuf_r+0x3e>
 80033cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d0:	e00e      	b.n	80033f0 <__swhatbuf_r+0x40>
 80033d2:	466a      	mov	r2, sp
 80033d4:	f000 fc5e 	bl	8003c94 <_fstat_r>
 80033d8:	2800      	cmp	r0, #0
 80033da:	dbf2      	blt.n	80033c2 <__swhatbuf_r+0x12>
 80033dc:	9a01      	ldr	r2, [sp, #4]
 80033de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033e6:	425a      	negs	r2, r3
 80033e8:	415a      	adcs	r2, r3
 80033ea:	602a      	str	r2, [r5, #0]
 80033ec:	e7ee      	b.n	80033cc <__swhatbuf_r+0x1c>
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	2000      	movs	r0, #0
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	b016      	add	sp, #88	; 0x58
 80033f6:	bd70      	pop	{r4, r5, r6, pc}

080033f8 <__smakebuf_r>:
 80033f8:	898b      	ldrh	r3, [r1, #12]
 80033fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033fc:	079d      	lsls	r5, r3, #30
 80033fe:	4606      	mov	r6, r0
 8003400:	460c      	mov	r4, r1
 8003402:	d507      	bpl.n	8003414 <__smakebuf_r+0x1c>
 8003404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	2301      	movs	r3, #1
 800340e:	6163      	str	r3, [r4, #20]
 8003410:	b002      	add	sp, #8
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	ab01      	add	r3, sp, #4
 8003416:	466a      	mov	r2, sp
 8003418:	f7ff ffca 	bl	80033b0 <__swhatbuf_r>
 800341c:	9900      	ldr	r1, [sp, #0]
 800341e:	4605      	mov	r5, r0
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f879 	bl	8003518 <_malloc_r>
 8003426:	b948      	cbnz	r0, 800343c <__smakebuf_r+0x44>
 8003428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342c:	059a      	lsls	r2, r3, #22
 800342e:	d4ef      	bmi.n	8003410 <__smakebuf_r+0x18>
 8003430:	f023 0303 	bic.w	r3, r3, #3
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	81a3      	strh	r3, [r4, #12]
 800343a:	e7e3      	b.n	8003404 <__smakebuf_r+0xc>
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <__smakebuf_r+0x7c>)
 800343e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	6020      	str	r0, [r4, #0]
 8003444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	9b00      	ldr	r3, [sp, #0]
 800344c:	6163      	str	r3, [r4, #20]
 800344e:	9b01      	ldr	r3, [sp, #4]
 8003450:	6120      	str	r0, [r4, #16]
 8003452:	b15b      	cbz	r3, 800346c <__smakebuf_r+0x74>
 8003454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003458:	4630      	mov	r0, r6
 800345a:	f000 fc2d 	bl	8003cb8 <_isatty_r>
 800345e:	b128      	cbz	r0, 800346c <__smakebuf_r+0x74>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	81a3      	strh	r3, [r4, #12]
 800346c:	89a0      	ldrh	r0, [r4, #12]
 800346e:	4305      	orrs	r5, r0
 8003470:	81a5      	strh	r5, [r4, #12]
 8003472:	e7cd      	b.n	8003410 <__smakebuf_r+0x18>
 8003474:	08003209 	.word	0x08003209

08003478 <_free_r>:
 8003478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800347a:	2900      	cmp	r1, #0
 800347c:	d048      	beq.n	8003510 <_free_r+0x98>
 800347e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003482:	9001      	str	r0, [sp, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f1a1 0404 	sub.w	r4, r1, #4
 800348a:	bfb8      	it	lt
 800348c:	18e4      	addlt	r4, r4, r3
 800348e:	f000 fc35 	bl	8003cfc <__malloc_lock>
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <_free_r+0x9c>)
 8003494:	9801      	ldr	r0, [sp, #4]
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	4615      	mov	r5, r2
 800349a:	b933      	cbnz	r3, 80034aa <_free_r+0x32>
 800349c:	6063      	str	r3, [r4, #4]
 800349e:	6014      	str	r4, [r2, #0]
 80034a0:	b003      	add	sp, #12
 80034a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034a6:	f000 bc2f 	b.w	8003d08 <__malloc_unlock>
 80034aa:	42a3      	cmp	r3, r4
 80034ac:	d90b      	bls.n	80034c6 <_free_r+0x4e>
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	1862      	adds	r2, r4, r1
 80034b2:	4293      	cmp	r3, r2
 80034b4:	bf04      	itt	eq
 80034b6:	681a      	ldreq	r2, [r3, #0]
 80034b8:	685b      	ldreq	r3, [r3, #4]
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	bf04      	itt	eq
 80034be:	1852      	addeq	r2, r2, r1
 80034c0:	6022      	streq	r2, [r4, #0]
 80034c2:	602c      	str	r4, [r5, #0]
 80034c4:	e7ec      	b.n	80034a0 <_free_r+0x28>
 80034c6:	461a      	mov	r2, r3
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b10b      	cbz	r3, 80034d0 <_free_r+0x58>
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	d9fa      	bls.n	80034c6 <_free_r+0x4e>
 80034d0:	6811      	ldr	r1, [r2, #0]
 80034d2:	1855      	adds	r5, r2, r1
 80034d4:	42a5      	cmp	r5, r4
 80034d6:	d10b      	bne.n	80034f0 <_free_r+0x78>
 80034d8:	6824      	ldr	r4, [r4, #0]
 80034da:	4421      	add	r1, r4
 80034dc:	1854      	adds	r4, r2, r1
 80034de:	42a3      	cmp	r3, r4
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	d1dd      	bne.n	80034a0 <_free_r+0x28>
 80034e4:	681c      	ldr	r4, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	6053      	str	r3, [r2, #4]
 80034ea:	4421      	add	r1, r4
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	e7d7      	b.n	80034a0 <_free_r+0x28>
 80034f0:	d902      	bls.n	80034f8 <_free_r+0x80>
 80034f2:	230c      	movs	r3, #12
 80034f4:	6003      	str	r3, [r0, #0]
 80034f6:	e7d3      	b.n	80034a0 <_free_r+0x28>
 80034f8:	6825      	ldr	r5, [r4, #0]
 80034fa:	1961      	adds	r1, r4, r5
 80034fc:	428b      	cmp	r3, r1
 80034fe:	bf04      	itt	eq
 8003500:	6819      	ldreq	r1, [r3, #0]
 8003502:	685b      	ldreq	r3, [r3, #4]
 8003504:	6063      	str	r3, [r4, #4]
 8003506:	bf04      	itt	eq
 8003508:	1949      	addeq	r1, r1, r5
 800350a:	6021      	streq	r1, [r4, #0]
 800350c:	6054      	str	r4, [r2, #4]
 800350e:	e7c7      	b.n	80034a0 <_free_r+0x28>
 8003510:	b003      	add	sp, #12
 8003512:	bd30      	pop	{r4, r5, pc}
 8003514:	20000098 	.word	0x20000098

08003518 <_malloc_r>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	1ccd      	adds	r5, r1, #3
 800351c:	f025 0503 	bic.w	r5, r5, #3
 8003520:	3508      	adds	r5, #8
 8003522:	2d0c      	cmp	r5, #12
 8003524:	bf38      	it	cc
 8003526:	250c      	movcc	r5, #12
 8003528:	2d00      	cmp	r5, #0
 800352a:	4606      	mov	r6, r0
 800352c:	db01      	blt.n	8003532 <_malloc_r+0x1a>
 800352e:	42a9      	cmp	r1, r5
 8003530:	d903      	bls.n	800353a <_malloc_r+0x22>
 8003532:	230c      	movs	r3, #12
 8003534:	6033      	str	r3, [r6, #0]
 8003536:	2000      	movs	r0, #0
 8003538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353a:	f000 fbdf 	bl	8003cfc <__malloc_lock>
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <_malloc_r+0xac>)
 8003540:	680a      	ldr	r2, [r1, #0]
 8003542:	4614      	mov	r4, r2
 8003544:	b99c      	cbnz	r4, 800356e <_malloc_r+0x56>
 8003546:	4f20      	ldr	r7, [pc, #128]	; (80035c8 <_malloc_r+0xb0>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b923      	cbnz	r3, 8003556 <_malloc_r+0x3e>
 800354c:	4621      	mov	r1, r4
 800354e:	4630      	mov	r0, r6
 8003550:	f000 fb2a 	bl	8003ba8 <_sbrk_r>
 8003554:	6038      	str	r0, [r7, #0]
 8003556:	4629      	mov	r1, r5
 8003558:	4630      	mov	r0, r6
 800355a:	f000 fb25 	bl	8003ba8 <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d123      	bne.n	80035aa <_malloc_r+0x92>
 8003562:	230c      	movs	r3, #12
 8003564:	6033      	str	r3, [r6, #0]
 8003566:	4630      	mov	r0, r6
 8003568:	f000 fbce 	bl	8003d08 <__malloc_unlock>
 800356c:	e7e3      	b.n	8003536 <_malloc_r+0x1e>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	1b5b      	subs	r3, r3, r5
 8003572:	d417      	bmi.n	80035a4 <_malloc_r+0x8c>
 8003574:	2b0b      	cmp	r3, #11
 8003576:	d903      	bls.n	8003580 <_malloc_r+0x68>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	441c      	add	r4, r3
 800357c:	6025      	str	r5, [r4, #0]
 800357e:	e004      	b.n	800358a <_malloc_r+0x72>
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	42a2      	cmp	r2, r4
 8003584:	bf0c      	ite	eq
 8003586:	600b      	streq	r3, [r1, #0]
 8003588:	6053      	strne	r3, [r2, #4]
 800358a:	4630      	mov	r0, r6
 800358c:	f000 fbbc 	bl	8003d08 <__malloc_unlock>
 8003590:	f104 000b 	add.w	r0, r4, #11
 8003594:	1d23      	adds	r3, r4, #4
 8003596:	f020 0007 	bic.w	r0, r0, #7
 800359a:	1ac2      	subs	r2, r0, r3
 800359c:	d0cc      	beq.n	8003538 <_malloc_r+0x20>
 800359e:	1a1b      	subs	r3, r3, r0
 80035a0:	50a3      	str	r3, [r4, r2]
 80035a2:	e7c9      	b.n	8003538 <_malloc_r+0x20>
 80035a4:	4622      	mov	r2, r4
 80035a6:	6864      	ldr	r4, [r4, #4]
 80035a8:	e7cc      	b.n	8003544 <_malloc_r+0x2c>
 80035aa:	1cc4      	adds	r4, r0, #3
 80035ac:	f024 0403 	bic.w	r4, r4, #3
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d0e3      	beq.n	800357c <_malloc_r+0x64>
 80035b4:	1a21      	subs	r1, r4, r0
 80035b6:	4630      	mov	r0, r6
 80035b8:	f000 faf6 	bl	8003ba8 <_sbrk_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	d1dd      	bne.n	800357c <_malloc_r+0x64>
 80035c0:	e7cf      	b.n	8003562 <_malloc_r+0x4a>
 80035c2:	bf00      	nop
 80035c4:	20000098 	.word	0x20000098
 80035c8:	2000009c 	.word	0x2000009c

080035cc <__sfputc_r>:
 80035cc:	6893      	ldr	r3, [r2, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	b410      	push	{r4}
 80035d4:	6093      	str	r3, [r2, #8]
 80035d6:	da08      	bge.n	80035ea <__sfputc_r+0x1e>
 80035d8:	6994      	ldr	r4, [r2, #24]
 80035da:	42a3      	cmp	r3, r4
 80035dc:	db01      	blt.n	80035e2 <__sfputc_r+0x16>
 80035de:	290a      	cmp	r1, #10
 80035e0:	d103      	bne.n	80035ea <__sfputc_r+0x1e>
 80035e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e6:	f7ff bc69 	b.w	8002ebc <__swbuf_r>
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	1c58      	adds	r0, r3, #1
 80035ee:	6010      	str	r0, [r2, #0]
 80035f0:	7019      	strb	r1, [r3, #0]
 80035f2:	4608      	mov	r0, r1
 80035f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <__sfputs_r>:
 80035fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fc:	4606      	mov	r6, r0
 80035fe:	460f      	mov	r7, r1
 8003600:	4614      	mov	r4, r2
 8003602:	18d5      	adds	r5, r2, r3
 8003604:	42ac      	cmp	r4, r5
 8003606:	d101      	bne.n	800360c <__sfputs_r+0x12>
 8003608:	2000      	movs	r0, #0
 800360a:	e007      	b.n	800361c <__sfputs_r+0x22>
 800360c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003610:	463a      	mov	r2, r7
 8003612:	4630      	mov	r0, r6
 8003614:	f7ff ffda 	bl	80035cc <__sfputc_r>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d1f3      	bne.n	8003604 <__sfputs_r+0xa>
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003620 <_vfiprintf_r>:
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	460d      	mov	r5, r1
 8003626:	b09d      	sub	sp, #116	; 0x74
 8003628:	4614      	mov	r4, r2
 800362a:	4698      	mov	r8, r3
 800362c:	4606      	mov	r6, r0
 800362e:	b118      	cbz	r0, 8003638 <_vfiprintf_r+0x18>
 8003630:	6983      	ldr	r3, [r0, #24]
 8003632:	b90b      	cbnz	r3, 8003638 <_vfiprintf_r+0x18>
 8003634:	f7ff fe1c 	bl	8003270 <__sinit>
 8003638:	4b89      	ldr	r3, [pc, #548]	; (8003860 <_vfiprintf_r+0x240>)
 800363a:	429d      	cmp	r5, r3
 800363c:	d11b      	bne.n	8003676 <_vfiprintf_r+0x56>
 800363e:	6875      	ldr	r5, [r6, #4]
 8003640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003642:	07d9      	lsls	r1, r3, #31
 8003644:	d405      	bmi.n	8003652 <_vfiprintf_r+0x32>
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	059a      	lsls	r2, r3, #22
 800364a:	d402      	bmi.n	8003652 <_vfiprintf_r+0x32>
 800364c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800364e:	f7ff fead 	bl	80033ac <__retarget_lock_acquire_recursive>
 8003652:	89ab      	ldrh	r3, [r5, #12]
 8003654:	071b      	lsls	r3, r3, #28
 8003656:	d501      	bpl.n	800365c <_vfiprintf_r+0x3c>
 8003658:	692b      	ldr	r3, [r5, #16]
 800365a:	b9eb      	cbnz	r3, 8003698 <_vfiprintf_r+0x78>
 800365c:	4629      	mov	r1, r5
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff fc7e 	bl	8002f60 <__swsetup_r>
 8003664:	b1c0      	cbz	r0, 8003698 <_vfiprintf_r+0x78>
 8003666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003668:	07dc      	lsls	r4, r3, #31
 800366a:	d50e      	bpl.n	800368a <_vfiprintf_r+0x6a>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	b01d      	add	sp, #116	; 0x74
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	4b7b      	ldr	r3, [pc, #492]	; (8003864 <_vfiprintf_r+0x244>)
 8003678:	429d      	cmp	r5, r3
 800367a:	d101      	bne.n	8003680 <_vfiprintf_r+0x60>
 800367c:	68b5      	ldr	r5, [r6, #8]
 800367e:	e7df      	b.n	8003640 <_vfiprintf_r+0x20>
 8003680:	4b79      	ldr	r3, [pc, #484]	; (8003868 <_vfiprintf_r+0x248>)
 8003682:	429d      	cmp	r5, r3
 8003684:	bf08      	it	eq
 8003686:	68f5      	ldreq	r5, [r6, #12]
 8003688:	e7da      	b.n	8003640 <_vfiprintf_r+0x20>
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	0598      	lsls	r0, r3, #22
 800368e:	d4ed      	bmi.n	800366c <_vfiprintf_r+0x4c>
 8003690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003692:	f7ff fe8c 	bl	80033ae <__retarget_lock_release_recursive>
 8003696:	e7e9      	b.n	800366c <_vfiprintf_r+0x4c>
 8003698:	2300      	movs	r3, #0
 800369a:	9309      	str	r3, [sp, #36]	; 0x24
 800369c:	2320      	movs	r3, #32
 800369e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a6:	2330      	movs	r3, #48	; 0x30
 80036a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800386c <_vfiprintf_r+0x24c>
 80036ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036b0:	f04f 0901 	mov.w	r9, #1
 80036b4:	4623      	mov	r3, r4
 80036b6:	469a      	mov	sl, r3
 80036b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036bc:	b10a      	cbz	r2, 80036c2 <_vfiprintf_r+0xa2>
 80036be:	2a25      	cmp	r2, #37	; 0x25
 80036c0:	d1f9      	bne.n	80036b6 <_vfiprintf_r+0x96>
 80036c2:	ebba 0b04 	subs.w	fp, sl, r4
 80036c6:	d00b      	beq.n	80036e0 <_vfiprintf_r+0xc0>
 80036c8:	465b      	mov	r3, fp
 80036ca:	4622      	mov	r2, r4
 80036cc:	4629      	mov	r1, r5
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7ff ff93 	bl	80035fa <__sfputs_r>
 80036d4:	3001      	adds	r0, #1
 80036d6:	f000 80aa 	beq.w	800382e <_vfiprintf_r+0x20e>
 80036da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036dc:	445a      	add	r2, fp
 80036de:	9209      	str	r2, [sp, #36]	; 0x24
 80036e0:	f89a 3000 	ldrb.w	r3, [sl]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a2 	beq.w	800382e <_vfiprintf_r+0x20e>
 80036ea:	2300      	movs	r3, #0
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f4:	f10a 0a01 	add.w	sl, sl, #1
 80036f8:	9304      	str	r3, [sp, #16]
 80036fa:	9307      	str	r3, [sp, #28]
 80036fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003700:	931a      	str	r3, [sp, #104]	; 0x68
 8003702:	4654      	mov	r4, sl
 8003704:	2205      	movs	r2, #5
 8003706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370a:	4858      	ldr	r0, [pc, #352]	; (800386c <_vfiprintf_r+0x24c>)
 800370c:	f7fc fd68 	bl	80001e0 <memchr>
 8003710:	9a04      	ldr	r2, [sp, #16]
 8003712:	b9d8      	cbnz	r0, 800374c <_vfiprintf_r+0x12c>
 8003714:	06d1      	lsls	r1, r2, #27
 8003716:	bf44      	itt	mi
 8003718:	2320      	movmi	r3, #32
 800371a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800371e:	0713      	lsls	r3, r2, #28
 8003720:	bf44      	itt	mi
 8003722:	232b      	movmi	r3, #43	; 0x2b
 8003724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003728:	f89a 3000 	ldrb.w	r3, [sl]
 800372c:	2b2a      	cmp	r3, #42	; 0x2a
 800372e:	d015      	beq.n	800375c <_vfiprintf_r+0x13c>
 8003730:	9a07      	ldr	r2, [sp, #28]
 8003732:	4654      	mov	r4, sl
 8003734:	2000      	movs	r0, #0
 8003736:	f04f 0c0a 	mov.w	ip, #10
 800373a:	4621      	mov	r1, r4
 800373c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003740:	3b30      	subs	r3, #48	; 0x30
 8003742:	2b09      	cmp	r3, #9
 8003744:	d94e      	bls.n	80037e4 <_vfiprintf_r+0x1c4>
 8003746:	b1b0      	cbz	r0, 8003776 <_vfiprintf_r+0x156>
 8003748:	9207      	str	r2, [sp, #28]
 800374a:	e014      	b.n	8003776 <_vfiprintf_r+0x156>
 800374c:	eba0 0308 	sub.w	r3, r0, r8
 8003750:	fa09 f303 	lsl.w	r3, r9, r3
 8003754:	4313      	orrs	r3, r2
 8003756:	9304      	str	r3, [sp, #16]
 8003758:	46a2      	mov	sl, r4
 800375a:	e7d2      	b.n	8003702 <_vfiprintf_r+0xe2>
 800375c:	9b03      	ldr	r3, [sp, #12]
 800375e:	1d19      	adds	r1, r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	9103      	str	r1, [sp, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	bfbb      	ittet	lt
 8003768:	425b      	neglt	r3, r3
 800376a:	f042 0202 	orrlt.w	r2, r2, #2
 800376e:	9307      	strge	r3, [sp, #28]
 8003770:	9307      	strlt	r3, [sp, #28]
 8003772:	bfb8      	it	lt
 8003774:	9204      	strlt	r2, [sp, #16]
 8003776:	7823      	ldrb	r3, [r4, #0]
 8003778:	2b2e      	cmp	r3, #46	; 0x2e
 800377a:	d10c      	bne.n	8003796 <_vfiprintf_r+0x176>
 800377c:	7863      	ldrb	r3, [r4, #1]
 800377e:	2b2a      	cmp	r3, #42	; 0x2a
 8003780:	d135      	bne.n	80037ee <_vfiprintf_r+0x1ce>
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	9203      	str	r2, [sp, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003792:	3402      	adds	r4, #2
 8003794:	9305      	str	r3, [sp, #20]
 8003796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800387c <_vfiprintf_r+0x25c>
 800379a:	7821      	ldrb	r1, [r4, #0]
 800379c:	2203      	movs	r2, #3
 800379e:	4650      	mov	r0, sl
 80037a0:	f7fc fd1e 	bl	80001e0 <memchr>
 80037a4:	b140      	cbz	r0, 80037b8 <_vfiprintf_r+0x198>
 80037a6:	2340      	movs	r3, #64	; 0x40
 80037a8:	eba0 000a 	sub.w	r0, r0, sl
 80037ac:	fa03 f000 	lsl.w	r0, r3, r0
 80037b0:	9b04      	ldr	r3, [sp, #16]
 80037b2:	4303      	orrs	r3, r0
 80037b4:	3401      	adds	r4, #1
 80037b6:	9304      	str	r3, [sp, #16]
 80037b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037bc:	482c      	ldr	r0, [pc, #176]	; (8003870 <_vfiprintf_r+0x250>)
 80037be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037c2:	2206      	movs	r2, #6
 80037c4:	f7fc fd0c 	bl	80001e0 <memchr>
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d03f      	beq.n	800384c <_vfiprintf_r+0x22c>
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <_vfiprintf_r+0x254>)
 80037ce:	bb1b      	cbnz	r3, 8003818 <_vfiprintf_r+0x1f8>
 80037d0:	9b03      	ldr	r3, [sp, #12]
 80037d2:	3307      	adds	r3, #7
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	3308      	adds	r3, #8
 80037da:	9303      	str	r3, [sp, #12]
 80037dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037de:	443b      	add	r3, r7
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	e767      	b.n	80036b4 <_vfiprintf_r+0x94>
 80037e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e8:	460c      	mov	r4, r1
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7a5      	b.n	800373a <_vfiprintf_r+0x11a>
 80037ee:	2300      	movs	r3, #0
 80037f0:	3401      	adds	r4, #1
 80037f2:	9305      	str	r3, [sp, #20]
 80037f4:	4619      	mov	r1, r3
 80037f6:	f04f 0c0a 	mov.w	ip, #10
 80037fa:	4620      	mov	r0, r4
 80037fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003800:	3a30      	subs	r2, #48	; 0x30
 8003802:	2a09      	cmp	r2, #9
 8003804:	d903      	bls.n	800380e <_vfiprintf_r+0x1ee>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0c5      	beq.n	8003796 <_vfiprintf_r+0x176>
 800380a:	9105      	str	r1, [sp, #20]
 800380c:	e7c3      	b.n	8003796 <_vfiprintf_r+0x176>
 800380e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003812:	4604      	mov	r4, r0
 8003814:	2301      	movs	r3, #1
 8003816:	e7f0      	b.n	80037fa <_vfiprintf_r+0x1da>
 8003818:	ab03      	add	r3, sp, #12
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	462a      	mov	r2, r5
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <_vfiprintf_r+0x258>)
 8003820:	a904      	add	r1, sp, #16
 8003822:	4630      	mov	r0, r6
 8003824:	f3af 8000 	nop.w
 8003828:	4607      	mov	r7, r0
 800382a:	1c78      	adds	r0, r7, #1
 800382c:	d1d6      	bne.n	80037dc <_vfiprintf_r+0x1bc>
 800382e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003830:	07d9      	lsls	r1, r3, #31
 8003832:	d405      	bmi.n	8003840 <_vfiprintf_r+0x220>
 8003834:	89ab      	ldrh	r3, [r5, #12]
 8003836:	059a      	lsls	r2, r3, #22
 8003838:	d402      	bmi.n	8003840 <_vfiprintf_r+0x220>
 800383a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800383c:	f7ff fdb7 	bl	80033ae <__retarget_lock_release_recursive>
 8003840:	89ab      	ldrh	r3, [r5, #12]
 8003842:	065b      	lsls	r3, r3, #25
 8003844:	f53f af12 	bmi.w	800366c <_vfiprintf_r+0x4c>
 8003848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800384a:	e711      	b.n	8003670 <_vfiprintf_r+0x50>
 800384c:	ab03      	add	r3, sp, #12
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	462a      	mov	r2, r5
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <_vfiprintf_r+0x258>)
 8003854:	a904      	add	r1, sp, #16
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f880 	bl	800395c <_printf_i>
 800385c:	e7e4      	b.n	8003828 <_vfiprintf_r+0x208>
 800385e:	bf00      	nop
 8003860:	08003e54 	.word	0x08003e54
 8003864:	08003e74 	.word	0x08003e74
 8003868:	08003e34 	.word	0x08003e34
 800386c:	08003e94 	.word	0x08003e94
 8003870:	08003e9e 	.word	0x08003e9e
 8003874:	00000000 	.word	0x00000000
 8003878:	080035fb 	.word	0x080035fb
 800387c:	08003e9a 	.word	0x08003e9a

08003880 <_printf_common>:
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	4616      	mov	r6, r2
 8003886:	4699      	mov	r9, r3
 8003888:	688a      	ldr	r2, [r1, #8]
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003890:	4293      	cmp	r3, r2
 8003892:	bfb8      	it	lt
 8003894:	4613      	movlt	r3, r2
 8003896:	6033      	str	r3, [r6, #0]
 8003898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800389c:	4607      	mov	r7, r0
 800389e:	460c      	mov	r4, r1
 80038a0:	b10a      	cbz	r2, 80038a6 <_printf_common+0x26>
 80038a2:	3301      	adds	r3, #1
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	0699      	lsls	r1, r3, #26
 80038aa:	bf42      	ittt	mi
 80038ac:	6833      	ldrmi	r3, [r6, #0]
 80038ae:	3302      	addmi	r3, #2
 80038b0:	6033      	strmi	r3, [r6, #0]
 80038b2:	6825      	ldr	r5, [r4, #0]
 80038b4:	f015 0506 	ands.w	r5, r5, #6
 80038b8:	d106      	bne.n	80038c8 <_printf_common+0x48>
 80038ba:	f104 0a19 	add.w	sl, r4, #25
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	6832      	ldr	r2, [r6, #0]
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	42ab      	cmp	r3, r5
 80038c6:	dc26      	bgt.n	8003916 <_printf_common+0x96>
 80038c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038cc:	1e13      	subs	r3, r2, #0
 80038ce:	6822      	ldr	r2, [r4, #0]
 80038d0:	bf18      	it	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	0692      	lsls	r2, r2, #26
 80038d6:	d42b      	bmi.n	8003930 <_printf_common+0xb0>
 80038d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038dc:	4649      	mov	r1, r9
 80038de:	4638      	mov	r0, r7
 80038e0:	47c0      	blx	r8
 80038e2:	3001      	adds	r0, #1
 80038e4:	d01e      	beq.n	8003924 <_printf_common+0xa4>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	68e5      	ldr	r5, [r4, #12]
 80038ea:	6832      	ldr	r2, [r6, #0]
 80038ec:	f003 0306 	and.w	r3, r3, #6
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	bf08      	it	eq
 80038f4:	1aad      	subeq	r5, r5, r2
 80038f6:	68a3      	ldr	r3, [r4, #8]
 80038f8:	6922      	ldr	r2, [r4, #16]
 80038fa:	bf0c      	ite	eq
 80038fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003900:	2500      	movne	r5, #0
 8003902:	4293      	cmp	r3, r2
 8003904:	bfc4      	itt	gt
 8003906:	1a9b      	subgt	r3, r3, r2
 8003908:	18ed      	addgt	r5, r5, r3
 800390a:	2600      	movs	r6, #0
 800390c:	341a      	adds	r4, #26
 800390e:	42b5      	cmp	r5, r6
 8003910:	d11a      	bne.n	8003948 <_printf_common+0xc8>
 8003912:	2000      	movs	r0, #0
 8003914:	e008      	b.n	8003928 <_printf_common+0xa8>
 8003916:	2301      	movs	r3, #1
 8003918:	4652      	mov	r2, sl
 800391a:	4649      	mov	r1, r9
 800391c:	4638      	mov	r0, r7
 800391e:	47c0      	blx	r8
 8003920:	3001      	adds	r0, #1
 8003922:	d103      	bne.n	800392c <_printf_common+0xac>
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392c:	3501      	adds	r5, #1
 800392e:	e7c6      	b.n	80038be <_printf_common+0x3e>
 8003930:	18e1      	adds	r1, r4, r3
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	2030      	movs	r0, #48	; 0x30
 8003936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800393a:	4422      	add	r2, r4
 800393c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003944:	3302      	adds	r3, #2
 8003946:	e7c7      	b.n	80038d8 <_printf_common+0x58>
 8003948:	2301      	movs	r3, #1
 800394a:	4622      	mov	r2, r4
 800394c:	4649      	mov	r1, r9
 800394e:	4638      	mov	r0, r7
 8003950:	47c0      	blx	r8
 8003952:	3001      	adds	r0, #1
 8003954:	d0e6      	beq.n	8003924 <_printf_common+0xa4>
 8003956:	3601      	adds	r6, #1
 8003958:	e7d9      	b.n	800390e <_printf_common+0x8e>
	...

0800395c <_printf_i>:
 800395c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	460c      	mov	r4, r1
 8003962:	4691      	mov	r9, r2
 8003964:	7e27      	ldrb	r7, [r4, #24]
 8003966:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003968:	2f78      	cmp	r7, #120	; 0x78
 800396a:	4680      	mov	r8, r0
 800396c:	469a      	mov	sl, r3
 800396e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003972:	d807      	bhi.n	8003984 <_printf_i+0x28>
 8003974:	2f62      	cmp	r7, #98	; 0x62
 8003976:	d80a      	bhi.n	800398e <_printf_i+0x32>
 8003978:	2f00      	cmp	r7, #0
 800397a:	f000 80d8 	beq.w	8003b2e <_printf_i+0x1d2>
 800397e:	2f58      	cmp	r7, #88	; 0x58
 8003980:	f000 80a3 	beq.w	8003aca <_printf_i+0x16e>
 8003984:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800398c:	e03a      	b.n	8003a04 <_printf_i+0xa8>
 800398e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003992:	2b15      	cmp	r3, #21
 8003994:	d8f6      	bhi.n	8003984 <_printf_i+0x28>
 8003996:	a001      	add	r0, pc, #4	; (adr r0, 800399c <_printf_i+0x40>)
 8003998:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800399c:	080039f5 	.word	0x080039f5
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	08003985 	.word	0x08003985
 80039a8:	08003985 	.word	0x08003985
 80039ac:	08003985 	.word	0x08003985
 80039b0:	08003985 	.word	0x08003985
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003985 	.word	0x08003985
 80039bc:	08003985 	.word	0x08003985
 80039c0:	08003985 	.word	0x08003985
 80039c4:	08003985 	.word	0x08003985
 80039c8:	08003b15 	.word	0x08003b15
 80039cc:	08003a39 	.word	0x08003a39
 80039d0:	08003af7 	.word	0x08003af7
 80039d4:	08003985 	.word	0x08003985
 80039d8:	08003985 	.word	0x08003985
 80039dc:	08003b37 	.word	0x08003b37
 80039e0:	08003985 	.word	0x08003985
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	08003985 	.word	0x08003985
 80039ec:	08003985 	.word	0x08003985
 80039f0:	08003aff 	.word	0x08003aff
 80039f4:	680b      	ldr	r3, [r1, #0]
 80039f6:	1d1a      	adds	r2, r3, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	600a      	str	r2, [r1, #0]
 80039fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0a3      	b.n	8003b50 <_printf_i+0x1f4>
 8003a08:	6825      	ldr	r5, [r4, #0]
 8003a0a:	6808      	ldr	r0, [r1, #0]
 8003a0c:	062e      	lsls	r6, r5, #24
 8003a0e:	f100 0304 	add.w	r3, r0, #4
 8003a12:	d50a      	bpl.n	8003a2a <_printf_i+0xce>
 8003a14:	6805      	ldr	r5, [r0, #0]
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	da03      	bge.n	8003a24 <_printf_i+0xc8>
 8003a1c:	232d      	movs	r3, #45	; 0x2d
 8003a1e:	426d      	negs	r5, r5
 8003a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a24:	485e      	ldr	r0, [pc, #376]	; (8003ba0 <_printf_i+0x244>)
 8003a26:	230a      	movs	r3, #10
 8003a28:	e019      	b.n	8003a5e <_printf_i+0x102>
 8003a2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a2e:	6805      	ldr	r5, [r0, #0]
 8003a30:	600b      	str	r3, [r1, #0]
 8003a32:	bf18      	it	ne
 8003a34:	b22d      	sxthne	r5, r5
 8003a36:	e7ef      	b.n	8003a18 <_printf_i+0xbc>
 8003a38:	680b      	ldr	r3, [r1, #0]
 8003a3a:	6825      	ldr	r5, [r4, #0]
 8003a3c:	1d18      	adds	r0, r3, #4
 8003a3e:	6008      	str	r0, [r1, #0]
 8003a40:	0628      	lsls	r0, r5, #24
 8003a42:	d501      	bpl.n	8003a48 <_printf_i+0xec>
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	e002      	b.n	8003a4e <_printf_i+0xf2>
 8003a48:	0669      	lsls	r1, r5, #25
 8003a4a:	d5fb      	bpl.n	8003a44 <_printf_i+0xe8>
 8003a4c:	881d      	ldrh	r5, [r3, #0]
 8003a4e:	4854      	ldr	r0, [pc, #336]	; (8003ba0 <_printf_i+0x244>)
 8003a50:	2f6f      	cmp	r7, #111	; 0x6f
 8003a52:	bf0c      	ite	eq
 8003a54:	2308      	moveq	r3, #8
 8003a56:	230a      	movne	r3, #10
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a5e:	6866      	ldr	r6, [r4, #4]
 8003a60:	60a6      	str	r6, [r4, #8]
 8003a62:	2e00      	cmp	r6, #0
 8003a64:	bfa2      	ittt	ge
 8003a66:	6821      	ldrge	r1, [r4, #0]
 8003a68:	f021 0104 	bicge.w	r1, r1, #4
 8003a6c:	6021      	strge	r1, [r4, #0]
 8003a6e:	b90d      	cbnz	r5, 8003a74 <_printf_i+0x118>
 8003a70:	2e00      	cmp	r6, #0
 8003a72:	d04d      	beq.n	8003b10 <_printf_i+0x1b4>
 8003a74:	4616      	mov	r6, r2
 8003a76:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a7a:	fb03 5711 	mls	r7, r3, r1, r5
 8003a7e:	5dc7      	ldrb	r7, [r0, r7]
 8003a80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a84:	462f      	mov	r7, r5
 8003a86:	42bb      	cmp	r3, r7
 8003a88:	460d      	mov	r5, r1
 8003a8a:	d9f4      	bls.n	8003a76 <_printf_i+0x11a>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d10b      	bne.n	8003aa8 <_printf_i+0x14c>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	07df      	lsls	r7, r3, #31
 8003a94:	d508      	bpl.n	8003aa8 <_printf_i+0x14c>
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	6861      	ldr	r1, [r4, #4]
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	bfde      	ittt	le
 8003a9e:	2330      	movle	r3, #48	; 0x30
 8003aa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003aa8:	1b92      	subs	r2, r2, r6
 8003aaa:	6122      	str	r2, [r4, #16]
 8003aac:	f8cd a000 	str.w	sl, [sp]
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	aa03      	add	r2, sp, #12
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	f7ff fee2 	bl	8003880 <_printf_common>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d14c      	bne.n	8003b5a <_printf_i+0x1fe>
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	b004      	add	sp, #16
 8003ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aca:	4835      	ldr	r0, [pc, #212]	; (8003ba0 <_printf_i+0x244>)
 8003acc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	680e      	ldr	r6, [r1, #0]
 8003ad4:	061f      	lsls	r7, r3, #24
 8003ad6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ada:	600e      	str	r6, [r1, #0]
 8003adc:	d514      	bpl.n	8003b08 <_printf_i+0x1ac>
 8003ade:	07d9      	lsls	r1, r3, #31
 8003ae0:	bf44      	itt	mi
 8003ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae6:	6023      	strmi	r3, [r4, #0]
 8003ae8:	b91d      	cbnz	r5, 8003af2 <_printf_i+0x196>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	f023 0320 	bic.w	r3, r3, #32
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	2310      	movs	r3, #16
 8003af4:	e7b0      	b.n	8003a58 <_printf_i+0xfc>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	f043 0320 	orr.w	r3, r3, #32
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	2378      	movs	r3, #120	; 0x78
 8003b00:	4828      	ldr	r0, [pc, #160]	; (8003ba4 <_printf_i+0x248>)
 8003b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b06:	e7e3      	b.n	8003ad0 <_printf_i+0x174>
 8003b08:	065e      	lsls	r6, r3, #25
 8003b0a:	bf48      	it	mi
 8003b0c:	b2ad      	uxthmi	r5, r5
 8003b0e:	e7e6      	b.n	8003ade <_printf_i+0x182>
 8003b10:	4616      	mov	r6, r2
 8003b12:	e7bb      	b.n	8003a8c <_printf_i+0x130>
 8003b14:	680b      	ldr	r3, [r1, #0]
 8003b16:	6826      	ldr	r6, [r4, #0]
 8003b18:	6960      	ldr	r0, [r4, #20]
 8003b1a:	1d1d      	adds	r5, r3, #4
 8003b1c:	600d      	str	r5, [r1, #0]
 8003b1e:	0635      	lsls	r5, r6, #24
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	d501      	bpl.n	8003b28 <_printf_i+0x1cc>
 8003b24:	6018      	str	r0, [r3, #0]
 8003b26:	e002      	b.n	8003b2e <_printf_i+0x1d2>
 8003b28:	0671      	lsls	r1, r6, #25
 8003b2a:	d5fb      	bpl.n	8003b24 <_printf_i+0x1c8>
 8003b2c:	8018      	strh	r0, [r3, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6123      	str	r3, [r4, #16]
 8003b32:	4616      	mov	r6, r2
 8003b34:	e7ba      	b.n	8003aac <_printf_i+0x150>
 8003b36:	680b      	ldr	r3, [r1, #0]
 8003b38:	1d1a      	adds	r2, r3, #4
 8003b3a:	600a      	str	r2, [r1, #0]
 8003b3c:	681e      	ldr	r6, [r3, #0]
 8003b3e:	6862      	ldr	r2, [r4, #4]
 8003b40:	2100      	movs	r1, #0
 8003b42:	4630      	mov	r0, r6
 8003b44:	f7fc fb4c 	bl	80001e0 <memchr>
 8003b48:	b108      	cbz	r0, 8003b4e <_printf_i+0x1f2>
 8003b4a:	1b80      	subs	r0, r0, r6
 8003b4c:	6060      	str	r0, [r4, #4]
 8003b4e:	6863      	ldr	r3, [r4, #4]
 8003b50:	6123      	str	r3, [r4, #16]
 8003b52:	2300      	movs	r3, #0
 8003b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b58:	e7a8      	b.n	8003aac <_printf_i+0x150>
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	4649      	mov	r1, r9
 8003b60:	4640      	mov	r0, r8
 8003b62:	47d0      	blx	sl
 8003b64:	3001      	adds	r0, #1
 8003b66:	d0ab      	beq.n	8003ac0 <_printf_i+0x164>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	079b      	lsls	r3, r3, #30
 8003b6c:	d413      	bmi.n	8003b96 <_printf_i+0x23a>
 8003b6e:	68e0      	ldr	r0, [r4, #12]
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	4298      	cmp	r0, r3
 8003b74:	bfb8      	it	lt
 8003b76:	4618      	movlt	r0, r3
 8003b78:	e7a4      	b.n	8003ac4 <_printf_i+0x168>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	4649      	mov	r1, r9
 8003b80:	4640      	mov	r0, r8
 8003b82:	47d0      	blx	sl
 8003b84:	3001      	adds	r0, #1
 8003b86:	d09b      	beq.n	8003ac0 <_printf_i+0x164>
 8003b88:	3501      	adds	r5, #1
 8003b8a:	68e3      	ldr	r3, [r4, #12]
 8003b8c:	9903      	ldr	r1, [sp, #12]
 8003b8e:	1a5b      	subs	r3, r3, r1
 8003b90:	42ab      	cmp	r3, r5
 8003b92:	dcf2      	bgt.n	8003b7a <_printf_i+0x21e>
 8003b94:	e7eb      	b.n	8003b6e <_printf_i+0x212>
 8003b96:	2500      	movs	r5, #0
 8003b98:	f104 0619 	add.w	r6, r4, #25
 8003b9c:	e7f5      	b.n	8003b8a <_printf_i+0x22e>
 8003b9e:	bf00      	nop
 8003ba0:	08003ea5 	.word	0x08003ea5
 8003ba4:	08003eb6 	.word	0x08003eb6

08003ba8 <_sbrk_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d06      	ldr	r5, [pc, #24]	; (8003bc4 <_sbrk_r+0x1c>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f7fc ffca 	bl	8000b4c <_sbrk>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_sbrk_r+0x1a>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_sbrk_r+0x1a>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	2000014c 	.word	0x2000014c

08003bc8 <__sread>:
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	460c      	mov	r4, r1
 8003bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd0:	f000 f8a0 	bl	8003d14 <_read_r>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	bfab      	itete	ge
 8003bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bda:	89a3      	ldrhlt	r3, [r4, #12]
 8003bdc:	181b      	addge	r3, r3, r0
 8003bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003be2:	bfac      	ite	ge
 8003be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003be6:	81a3      	strhlt	r3, [r4, #12]
 8003be8:	bd10      	pop	{r4, pc}

08003bea <__swrite>:
 8003bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bee:	461f      	mov	r7, r3
 8003bf0:	898b      	ldrh	r3, [r1, #12]
 8003bf2:	05db      	lsls	r3, r3, #23
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4616      	mov	r6, r2
 8003bfa:	d505      	bpl.n	8003c08 <__swrite+0x1e>
 8003bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c00:	2302      	movs	r3, #2
 8003c02:	2200      	movs	r2, #0
 8003c04:	f000 f868 	bl	8003cd8 <_lseek_r>
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c12:	81a3      	strh	r3, [r4, #12]
 8003c14:	4632      	mov	r2, r6
 8003c16:	463b      	mov	r3, r7
 8003c18:	4628      	mov	r0, r5
 8003c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1e:	f000 b817 	b.w	8003c50 <_write_r>

08003c22 <__sseek>:
 8003c22:	b510      	push	{r4, lr}
 8003c24:	460c      	mov	r4, r1
 8003c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2a:	f000 f855 	bl	8003cd8 <_lseek_r>
 8003c2e:	1c43      	adds	r3, r0, #1
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	bf15      	itete	ne
 8003c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c3e:	81a3      	strheq	r3, [r4, #12]
 8003c40:	bf18      	it	ne
 8003c42:	81a3      	strhne	r3, [r4, #12]
 8003c44:	bd10      	pop	{r4, pc}

08003c46 <__sclose>:
 8003c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c4a:	f000 b813 	b.w	8003c74 <_close_r>
	...

08003c50 <_write_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d07      	ldr	r5, [pc, #28]	; (8003c70 <_write_r+0x20>)
 8003c54:	4604      	mov	r4, r0
 8003c56:	4608      	mov	r0, r1
 8003c58:	4611      	mov	r1, r2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	602a      	str	r2, [r5, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f7fc fcf0 	bl	8000644 <_write>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d102      	bne.n	8003c6e <_write_r+0x1e>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	b103      	cbz	r3, 8003c6e <_write_r+0x1e>
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	2000014c 	.word	0x2000014c

08003c74 <_close_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4d06      	ldr	r5, [pc, #24]	; (8003c90 <_close_r+0x1c>)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	602b      	str	r3, [r5, #0]
 8003c80:	f7fc ff2f 	bl	8000ae2 <_close>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_close_r+0x1a>
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_close_r+0x1a>
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	2000014c 	.word	0x2000014c

08003c94 <_fstat_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4d07      	ldr	r5, [pc, #28]	; (8003cb4 <_fstat_r+0x20>)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	f7fc ff2a 	bl	8000afa <_fstat>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	d102      	bne.n	8003cb0 <_fstat_r+0x1c>
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	b103      	cbz	r3, 8003cb0 <_fstat_r+0x1c>
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000014c 	.word	0x2000014c

08003cb8 <_isatty_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d06      	ldr	r5, [pc, #24]	; (8003cd4 <_isatty_r+0x1c>)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	f7fc ff29 	bl	8000b1a <_isatty>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d102      	bne.n	8003cd2 <_isatty_r+0x1a>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	b103      	cbz	r3, 8003cd2 <_isatty_r+0x1a>
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	2000014c 	.word	0x2000014c

08003cd8 <_lseek_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d07      	ldr	r5, [pc, #28]	; (8003cf8 <_lseek_r+0x20>)
 8003cdc:	4604      	mov	r4, r0
 8003cde:	4608      	mov	r0, r1
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	602a      	str	r2, [r5, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f7fc ff22 	bl	8000b30 <_lseek>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_lseek_r+0x1e>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_lseek_r+0x1e>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	2000014c 	.word	0x2000014c

08003cfc <__malloc_lock>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__malloc_lock+0x8>)
 8003cfe:	f7ff bb55 	b.w	80033ac <__retarget_lock_acquire_recursive>
 8003d02:	bf00      	nop
 8003d04:	20000144 	.word	0x20000144

08003d08 <__malloc_unlock>:
 8003d08:	4801      	ldr	r0, [pc, #4]	; (8003d10 <__malloc_unlock+0x8>)
 8003d0a:	f7ff bb50 	b.w	80033ae <__retarget_lock_release_recursive>
 8003d0e:	bf00      	nop
 8003d10:	20000144 	.word	0x20000144

08003d14 <_read_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4d07      	ldr	r5, [pc, #28]	; (8003d34 <_read_r+0x20>)
 8003d18:	4604      	mov	r4, r0
 8003d1a:	4608      	mov	r0, r1
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	2200      	movs	r2, #0
 8003d20:	602a      	str	r2, [r5, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f7fc fec0 	bl	8000aa8 <_read>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d102      	bne.n	8003d32 <_read_r+0x1e>
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	b103      	cbz	r3, 8003d32 <_read_r+0x1e>
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
 8003d34:	2000014c 	.word	0x2000014c

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr


NRF905_STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000454c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004938  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004938  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103b9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002671  00000000  00000000  00030459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00032ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00033a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bd3  00000000  00000000  00034828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010494  00000000  00000000  0004c3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e2e  00000000  00000000  0005c88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed6bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  000ed710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046d4 	.word	0x080046d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080046d4 	.word	0x080046d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_GPIO_Init+0xc0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a28      	ldr	r2, [pc, #160]	; (8000638 <MX_GPIO_Init+0xc0>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a21      	ldr	r2, [pc, #132]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xc0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	481b      	ldr	r0, [pc, #108]	; (800063c <MX_GPIO_Init+0xc4>)
 80005ce:	f001 f865 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin|Tx_Pin|CS_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2198      	movs	r1, #152	; 0x98
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <MX_GPIO_Init+0xc8>)
 80005d8:	f001 f860 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_Pin;
 80005dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWR_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_GPIO_Init+0xc4>)
 80005f6:	f000 feb5 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Carrier_detect_Pin|Address_match_Pin|DR_Pin;
 80005fa:	2326      	movs	r3, #38	; 0x26
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <MX_GPIO_Init+0xc8>)
 800060e:	f000 fea9 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin|Tx_Pin|CS_Pin;
 8000612:	2398      	movs	r3, #152	; 0x98
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_GPIO_Init+0xc8>)
 800062a:	f000 fe9b 	bl	8001364 <HAL_GPIO_Init>

}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000
 8000640:	40020c00 	.word	0x40020c00

08000644 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr , int len){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2 , ptr , len , 50);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <_write+0x24>)
 800065a:	f002 fd98 	bl	800318e <HAL_UART_Transmit>
  return len;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000013c 	.word	0x2000013c

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fcfc 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f856 	bl	8000724 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ff7e 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067c:	f000 fc5a 	bl	8000f34 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000680:	f000 fa7c 	bl	8000b7c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000684:	f000 fbe4 	bl	8000e50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi1);
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <main+0x98>)
 800068a:	f001 fc95 	bl	8001fb8 <HAL_SPI_Init>
  HAL_TIM_Base_Start(&htim1);
 800068e:	481e      	ldr	r0, [pc, #120]	; (8000708 <main+0x9c>)
 8000690:	f002 fa8a 	bl	8002ba8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("INIT 2\r\n" );
 8000694:	481d      	ldr	r0, [pc, #116]	; (800070c <main+0xa0>)
 8000696:	f003 f8d7 	bl	8003848 <puts>

  set_RX_Payload_width(0x01);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 f924 	bl	80008e8 <set_RX_Payload_width>
  set_TX_Payload_width(0x01);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f94d 	bl	8000940 <set_TX_Payload_width>
  read_reg( R_CONFIG );
 80006a6:	2010      	movs	r0, #16
 80006a8:	f000 f9de 	bl	8000a68 <read_reg>
  set_Channel();
 80006ac:	f000 f9b0 	bl	8000a10 <set_Channel>
  set_Standby_mode();
 80006b0:	f000 f972 	bl	8000998 <set_Standby_mode>

  while (1)
  {
	  if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin) == GPIO_PIN_SET )
 80006b4:	2102      	movs	r1, #2
 80006b6:	4816      	ldr	r0, [pc, #88]	; (8000710 <main+0xa4>)
 80006b8:	f000 ffd8 	bl	800166c <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d102      	bne.n	80006c8 <main+0x5c>
		  printf("Carrier Detect \r\n");
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <main+0xa8>)
 80006c4:	f003 f8c0 	bl	8003848 <puts>
	  if( HAL_GPIO_ReadPin(Address_match_GPIO_Port, Address_match_Pin) == GPIO_PIN_SET )
 80006c8:	2104      	movs	r1, #4
 80006ca:	4811      	ldr	r0, [pc, #68]	; (8000710 <main+0xa4>)
 80006cc:	f000 ffce 	bl	800166c <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d102      	bne.n	80006dc <main+0x70>
		  printf("Address Match \r\n");
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <main+0xac>)
 80006d8:	f003 f8b6 	bl	8003848 <puts>
	  if( HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin) == GPIO_PIN_SET )
 80006dc:	2120      	movs	r1, #32
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <main+0xa4>)
 80006e0:	f000 ffc4 	bl	800166c <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d102      	bne.n	80006f0 <main+0x84>
		  printf("Data Ready \r\n");
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0xb0>)
 80006ec:	f003 f8ac 	bl	8003848 <puts>

	  read_reg(R_CONFIG);
 80006f0:	2010      	movs	r0, #16
 80006f2:	f000 f9b9 	bl	8000a68 <read_reg>

	RX_radio(rx_data);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <main+0xb4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f9f2 	bl	8000ae4 <RX_radio>
	  if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin) == GPIO_PIN_SET )
 8000700:	e7d8      	b.n	80006b4 <main+0x48>
 8000702:	bf00      	nop
 8000704:	2000009c 	.word	0x2000009c
 8000708:	200000f4 	.word	0x200000f4
 800070c:	080046ec 	.word	0x080046ec
 8000710:	40020c00 	.word	0x40020c00
 8000714:	080046f4 	.word	0x080046f4
 8000718:	08004708 	.word	0x08004708
 800071c:	08004718 	.word	0x08004718
 8000720:	20000098 	.word	0x20000098

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fffa 	bl	800372c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xb4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xb4>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xb4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <SystemClock_Config+0xb8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <SystemClock_Config+0xb8>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <SystemClock_Config+0xb8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 ff9b 	bl	80016d0 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007a0:	f000 f81e 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f9fd 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007cc:	f000 f808 	bl	80007e0 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <delay_us>:

#include "nrf905.h"



void delay_us (uint16_t us){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <delay_us+0x30>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80007fe:	bf00      	nop
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <delay_us+0x30>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3f9      	bcc.n	8000800 <delay_us+0x14>
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200000f4 	.word	0x200000f4

08000820 <Read_RX_PAYLOAD>:

void Read_RX_PAYLOAD(uint8_t * rx_data){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	uint8_t read = R_RX_PAYLOAD;
 8000828:	2324      	movs	r3, #36	; 0x24
 800082a:	73fb      	strb	r3, [r7, #15]

	PWR_ON();
 800082c:	f000 f8d8 	bl	80009e0 <PWR_ON>
	set_Rx_mode();
 8000830:	f000 f8ca 	bl	80009c8 <set_Rx_mode>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <Read_RX_PAYLOAD+0x5c>)
 800083a:	f000 ff2f 	bl	800169c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &read, 1 , 1000);
 800083e:	f107 010f 	add.w	r1, r7, #15
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	2201      	movs	r2, #1
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <Read_RX_PAYLOAD+0x60>)
 800084a:	f001 fc3e 	bl	80020ca <HAL_SPI_Transmit>
	HAL_SPI_Receive( &hspi1, rx_data, 1 , 1000);
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	2201      	movs	r2, #1
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <Read_RX_PAYLOAD+0x60>)
 8000858:	f001 fd73 	bl	8002342 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <Read_RX_PAYLOAD+0x5c>)
 8000862:	f000 ff1b 	bl	800169c <HAL_GPIO_WritePin>

	printf("Received ----> %d \r\n" , rx_data );
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <Read_RX_PAYLOAD+0x64>)
 800086a:	f002 ff67 	bl	800373c <iprintf>

	PWR_OFF();
 800086e:	f000 f8c3 	bl	80009f8 <PWR_OFF>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020c00 	.word	0x40020c00
 8000880:	2000009c 	.word	0x2000009c
 8000884:	08004728 	.word	0x08004728

08000888 <is_Data_Ready>:

uint8_t is_Data_Ready(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin)== GPIO_PIN_SET )
 800088c:	2120      	movs	r1, #32
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <is_Data_Ready+0x1c>)
 8000890:	f000 feec 	bl	800166c <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <is_Data_Ready+0x16>
		return 1;
 800089a:	2301      	movs	r3, #1
 800089c:	e000      	b.n	80008a0 <is_Data_Ready+0x18>
	else
		return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020c00 	.word	0x40020c00

080008a8 <is_Address_Match>:

uint8_t is_Address_Match(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(Address_match_GPIO_Port, Address_match_Pin)== GPIO_PIN_SET )
 80008ac:	2104      	movs	r1, #4
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <is_Address_Match+0x1c>)
 80008b0:	f000 fedc 	bl	800166c <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d101      	bne.n	80008be <is_Address_Match+0x16>
		return 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <is_Address_Match+0x18>
	else
		return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <is_Carrier_Detect>:

uint8_t is_Carrier_Detect(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(Carrier_detect_GPIO_Port, Carrier_detect_Pin)== GPIO_PIN_SET )
 80008cc:	2102      	movs	r1, #2
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <is_Carrier_Detect+0x1c>)
 80008d0:	f000 fecc 	bl	800166c <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d101      	bne.n	80008de <is_Carrier_Detect+0x16>
		return 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <is_Carrier_Detect+0x18>
	else
		return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40020c00 	.word	0x40020c00

080008e8 <set_RX_Payload_width>:

void set_RX_Payload_width(uint8_t width){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	PWR_OFF();
 80008f2:	f000 f881 	bl	80009f8 <PWR_OFF>
	uint8_t add = 0x03 ;
 80008f6:	2303      	movs	r3, #3
 80008f8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <set_RX_Payload_width+0x50>)
 8000900:	f000 fecc 	bl	800169c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &add , 1 , 1000);
 8000904:	f107 010f 	add.w	r1, r7, #15
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	2201      	movs	r2, #1
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <set_RX_Payload_width+0x54>)
 8000910:	f001 fbdb 	bl	80020ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &width, 1 , 1000);
 8000914:	1df9      	adds	r1, r7, #7
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	2201      	movs	r2, #1
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <set_RX_Payload_width+0x54>)
 800091e:	f001 fbd4 	bl	80020ca <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <set_RX_Payload_width+0x50>)
 8000928:	f000 feb8 	bl	800169c <HAL_GPIO_WritePin>

	PWR_ON();
 800092c:	f000 f858 	bl	80009e0 <PWR_ON>
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40020c00 	.word	0x40020c00
 800093c:	2000009c 	.word	0x2000009c

08000940 <set_TX_Payload_width>:

void set_TX_Payload_width(uint8_t width){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	PWR_OFF();
 800094a:	f000 f855 	bl	80009f8 <PWR_OFF>
	uint8_t add = 0x04 ;
 800094e:	2304      	movs	r3, #4
 8000950:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <set_TX_Payload_width+0x50>)
 8000958:	f000 fea0 	bl	800169c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &add , 1 , 1000);
 800095c:	f107 010f 	add.w	r1, r7, #15
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	2201      	movs	r2, #1
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <set_TX_Payload_width+0x54>)
 8000968:	f001 fbaf 	bl	80020ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, &width, 1 , 1000);
 800096c:	1df9      	adds	r1, r7, #7
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	2201      	movs	r2, #1
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <set_TX_Payload_width+0x54>)
 8000976:	f001 fba8 	bl	80020ca <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <set_TX_Payload_width+0x50>)
 8000980:	f000 fe8c 	bl	800169c <HAL_GPIO_WritePin>

	PWR_ON();
 8000984:	f000 f82c 	bl	80009e0 <PWR_ON>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40020c00 	.word	0x40020c00
 8000994:	2000009c 	.word	0x2000009c

08000998 <set_Standby_mode>:

void set_Standby_mode(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <set_Standby_mode+0x14>)
 80009a2:	f000 fe7b 	bl	800169c <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <set_TxRx_mode>:

void set_TxRx_mode(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( CE_GPIO_Port, CE_Pin , GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2108      	movs	r1, #8
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <set_TxRx_mode+0x14>)
 80009ba:	f000 fe6f 	bl	800169c <HAL_GPIO_WritePin>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020c00 	.word	0x40020c00

080009c8 <set_Rx_mode>:

void set_Tx_mode(){
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_SET);
}

void set_Rx_mode(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( Tx_GPIO_Port, Tx_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2110      	movs	r1, #16
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <set_Rx_mode+0x14>)
 80009d2:	f000 fe63 	bl	800169c <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <PWR_ON>:

void PWR_ON(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <PWR_ON+0x14>)
 80009ec:	f000 fe56 	bl	800169c <HAL_GPIO_WritePin>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40020000 	.word	0x40020000

080009f8 <PWR_OFF>:

void PWR_OFF(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <PWR_OFF+0x14>)
 8000a04:	f000 fe4a 	bl	800169c <HAL_GPIO_WritePin>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40020000 	.word	0x40020000

08000a10 <set_Channel>:
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);

	PWR_ON();
}

void set_Channel(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	PWR_OFF();
 8000a16:	f7ff ffef 	bl	80009f8 <PWR_OFF>

	uint8_t channel_add=0x00;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	uint8_t setCHANNEL = ( CHANNEL_CONFIG | (PA_PWR_10dbm<<2) | HFREQ_PLL );
 8000a1e:	238c      	movs	r3, #140	; 0x8c
 8000a20:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <set_Channel+0x50>)
 8000a28:	f000 fe38 	bl	800169c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &setCHANNEL , 1 , 1000);
 8000a2c:	1db9      	adds	r1, r7, #6
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	2201      	movs	r2, #1
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <set_Channel+0x54>)
 8000a36:	f001 fb48 	bl	80020ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi1, CH_NO, 1 , 1000);
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2176      	movs	r1, #118	; 0x76
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <set_Channel+0x54>)
 8000a44:	f001 fb41 	bl	80020ca <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <set_Channel+0x50>)
 8000a4e:	f000 fe25 	bl	800169c <HAL_GPIO_WritePin>

	PWR_ON();
 8000a52:	f7ff ffc5 	bl	80009e0 <PWR_ON>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	2000009c 	.word	0x2000009c

08000a68 <read_reg>:

void read_reg(uint8_t reg){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	uint8_t read=reg;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	73fb      	strb	r3, [r7, #15]
	//read = 0x24;
	uint8_t data=0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73bb      	strb	r3, [r7, #14]

	PWR_OFF();
 8000a7a:	f7ff ffbd 	bl	80009f8 <PWR_OFF>
	//set_Rx_mode();
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <read_reg+0x6c>)
 8000a84:	f000 fe0a 	bl	800169c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit( &hspi1, &read, 1 , 1000);
 8000a88:	f107 010f 	add.w	r1, r7, #15
 8000a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a90:	2201      	movs	r2, #1
 8000a92:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <read_reg+0x70>)
 8000a94:	f001 fb19 	bl	80020ca <HAL_SPI_Transmit>
	HAL_SPI_Receive( &hspi1, &data, 1 , 1000);
 8000a98:	f107 010e 	add.w	r1, r7, #14
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <read_reg+0x70>)
 8000aa4:	f001 fc4d 	bl	8002342 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <read_reg+0x6c>)
 8000aae:	f000 fdf5 	bl	800169c <HAL_GPIO_WritePin>

	printf("Read -> %d \r\n" , read );
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <read_reg+0x74>)
 8000ab8:	f002 fe40 	bl	800373c <iprintf>
	printf("Register -> %d \r\n" , data );
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <read_reg+0x78>)
 8000ac2:	f002 fe3b 	bl	800373c <iprintf>

	PWR_ON();
 8000ac6:	f7ff ff8b 	bl	80009e0 <PWR_ON>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	2000009c 	.word	0x2000009c
 8000adc:	08004740 	.word	0x08004740
 8000ae0:	08004750 	.word	0x08004750

08000ae4 <RX_radio>:

	//Clock_enable();
	HAL_Delay(10);
}

void RX_radio(uint8_t * rx_data){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	set_Standby_mode();
 8000aec:	f7ff ff54 	bl	8000998 <set_Standby_mode>
	PWR_ON();
 8000af0:	f7ff ff76 	bl	80009e0 <PWR_ON>
	set_Rx_mode();
 8000af4:	f7ff ff68 	bl	80009c8 <set_Rx_mode>
	set_TxRx_mode();
 8000af8:	f7ff ff5a 	bl	80009b0 <set_TxRx_mode>
	delay_us(650);
 8000afc:	f240 208a 	movw	r0, #650	; 0x28a
 8000b00:	f7ff fe74 	bl	80007ec <delay_us>

	if ( HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin) != GPIO_PIN_SET ){
 8000b04:	2108      	movs	r1, #8
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <RX_radio+0x88>)
 8000b08:	f000 fdb0 	bl	800166c <HAL_GPIO_ReadPin>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d01c      	beq.n	8000b4c <RX_radio+0x68>
		printf("No transmit/receive mode detected. \r\n");
 8000b12:	4817      	ldr	r0, [pc, #92]	; (8000b70 <RX_radio+0x8c>)
 8000b14:	f002 fe98 	bl	8003848 <puts>
		return ;
 8000b18:	e024      	b.n	8000b64 <RX_radio+0x80>
	}

	//while( !is_Carrier_Detect() );
	while( is_Carrier_Detect() && HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin) == GPIO_PIN_SET  ){
		printf("wykryto!!!!! \r\n ");
 8000b1a:	4816      	ldr	r0, [pc, #88]	; (8000b74 <RX_radio+0x90>)
 8000b1c:	f002 fe0e 	bl	800373c <iprintf>
		delay_us(20);
 8000b20:	2014      	movs	r0, #20
 8000b22:	f7ff fe63 	bl	80007ec <delay_us>
		if( is_Address_Match() ){
 8000b26:	f7ff febf 	bl	80008a8 <is_Address_Match>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00d      	beq.n	8000b4c <RX_radio+0x68>
			printf("adres git!!!! \r\n ");
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <RX_radio+0x94>)
 8000b32:	f002 fe03 	bl	800373c <iprintf>
			HAL_Delay(2);
 8000b36:	2002      	movs	r0, #2
 8000b38:	f000 fb0a 	bl	8001150 <HAL_Delay>
			if( is_Data_Ready() ){
 8000b3c:	f7ff fea4 	bl	8000888 <is_Data_Ready>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <RX_radio+0x68>
				Read_RX_PAYLOAD(rx_data);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fe6a 	bl	8000820 <Read_RX_PAYLOAD>
	while( is_Carrier_Detect() && HAL_GPIO_ReadPin(CE_GPIO_Port, CE_Pin) == GPIO_PIN_SET  ){
 8000b4c:	f7ff febc 	bl	80008c8 <is_Carrier_Detect>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <RX_radio+0x80>
 8000b56:	2108      	movs	r1, #8
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <RX_radio+0x88>)
 8000b5a:	f000 fd87 	bl	800166c <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d0da      	beq.n	8000b1a <RX_radio+0x36>
			}
		}
	}

}
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	080047b8 	.word	0x080047b8
 8000b74:	080047e0 	.word	0x080047e0
 8000b78:	080047f4 	.word	0x080047f4

08000b7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <MX_SPI1_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000bb0:	2228      	movs	r2, #40	; 0x28
 8000bb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000bc8:	220a      	movs	r2, #10
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_SPI1_Init+0x64>)
 8000bce:	f001 f9f3 	bl	8001fb8 <HAL_SPI_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f7ff fe02 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000009c 	.word	0x2000009c
 8000be4:	40013000 	.word	0x40013000

08000be8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_SPI_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23e0      	movs	r3, #224	; 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c5e:	f000 fb81 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f000 fb20 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f9fc 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e00a      	b.n	8000d44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d2e:	f3af 8000 	nop.w
 8000d32:	4601      	mov	r1, r0
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	b2ca      	uxtb	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf0      	blt.n	8000d2e <_read+0x12>
	}

return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f002 fc72 	bl	80036d8 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20020000 	.word	0x20020000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	2000008c 	.word	0x2000008c
 8000e28:	20000198 	.word	0x20000198

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <MX_TIM1_Init+0x9c>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e74:	220f      	movs	r2, #15
 8000e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000e9a:	f001 fe35 	bl	8002b08 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ea4:	f7ff fc9c 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000eb6:	f001 fed1 	bl	8002c5c <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ec0:	f7ff fc8e 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_TIM1_Init+0x98>)
 8000ed2:	f002 f8a1 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000edc:	f7ff fc80 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200000f4 	.word	0x200000f4
 8000eec:	40010000 	.word	0x40010000

08000ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_TIM_Base_MspInit+0x3c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10d      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x40>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0x40>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_TIM_Base_MspInit+0x40>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40023800 	.word	0x40023800

08000f34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART2_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	f002 f8c2 	bl	80030f4 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f7ff fc33 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000013c 	.word	0x2000013c
 8000f84:	40004400 	.word	0x40004400

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_UART_MspInit+0x84>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12b      	bne.n	8001002 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000ffe:	f000 f9b1 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40004400 	.word	0x40004400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001042:	f7ff fef3 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f002 fb4d 	bl	80036e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fb0f 	bl	800066c <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800105c:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8001060:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001064:	20000194 	.word	0x20000194

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f931 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fdea 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f911 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008
 8001134:	20000180 	.word	0x20000180

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000180 	.word	0x20000180

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e159      	b.n	8001634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8148 	bne.w	800162e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a2 	beq.w	800162e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b57      	ldr	r3, [pc, #348]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a56      	ldr	r2, [pc, #344]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b54      	ldr	r3, [pc, #336]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_GPIO_Init+0x2ec>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <HAL_GPIO_Init+0x2f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x202>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_GPIO_Init+0x2f4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x1fe>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a47      	ldr	r2, [pc, #284]	; (800165c <HAL_GPIO_Init+0x2f8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x1fa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <HAL_GPIO_Init+0x2fc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x1f6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_GPIO_Init+0x300>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x1f2>
 8001552:	2304      	movs	r3, #4
 8001554:	e008      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001556:	2307      	movs	r3, #7
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x204>
 800155a:	2303      	movs	r3, #3
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x204>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001566:	2300      	movs	r3, #0
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	f002 0203 	and.w	r2, r2, #3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4093      	lsls	r3, r2
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001578:	4935      	ldr	r1, [pc, #212]	; (8001650 <HAL_GPIO_Init+0x2ec>)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015aa:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d4:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_GPIO_Init+0x304>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	f67f aea2 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e001      	b.n	800168e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e264      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d075      	beq.n	80017da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ee:	4ba3      	ldr	r3, [pc, #652]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d00c      	beq.n	8001714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d112      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001706:	4b9d      	ldr	r3, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001712:	d10b      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d05b      	beq.n	80017d8 <HAL_RCC_OscConfig+0x108>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d157      	bne.n	80017d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e23f      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x74>
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b8b      	ldr	r3, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a8a      	ldr	r2, [pc, #552]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a87      	ldr	r2, [pc, #540]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001768:	4b84      	ldr	r3, [pc, #528]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a83      	ldr	r2, [pc, #524]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b81      	ldr	r3, [pc, #516]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcd6 	bl	8001138 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcd2 	bl	8001138 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e204      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0xc0>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fcc2 	bl	8001138 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fcbe 	bl	8001138 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1f0      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0xe8>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d063      	beq.n	80018ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d11c      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1c4      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4952      	ldr	r1, [pc, #328]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e03a      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_RCC_OscConfig+0x2b0>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fc77 	bl	8001138 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fc73 	bl	8001138 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a5      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4940      	ldr	r1, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x2b0>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fc56 	bl	8001138 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fc52 	bl	8001138 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e184      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d030      	beq.n	800191c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_OscConfig+0x2b4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fc36 	bl	8001138 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc32 	bl	8001138 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e164      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x200>
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x2b4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fc1f 	bl	8001138 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fc1b 	bl	8001138 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e14d      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a0 	beq.w	8001a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d121      	bne.n	80019aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fbe1 	bl	8001138 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e011      	b.n	800199e <HAL_RCC_OscConfig+0x2ce>
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	42470000 	.word	0x42470000
 8001984:	42470e80 	.word	0x42470e80
 8001988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff fbd4 	bl	8001138 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e106      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_RCC_OscConfig+0x4e4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	e01c      	b.n	80019fa <HAL_RCC_OscConfig+0x32a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019c8:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a77      	ldr	r2, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0x32a>
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a74      	ldr	r2, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
 80019ee:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb99 	bl	8001138 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fb95 	bl	8001138 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0c5      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ee      	beq.n	8001a0a <HAL_RCC_OscConfig+0x33a>
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb83 	bl	8001138 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb7f 	bl	8001138 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0af      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a55      	ldr	r2, [pc, #340]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 809b 	beq.w	8001baa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d05c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d141      	bne.n	8001b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb53 	bl	8001138 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb4f 	bl	8001138 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e081      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	019b      	lsls	r3, r3, #6
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	3b01      	subs	r3, #1
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
 8001ad8:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb28 	bl	8001138 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fb24 	bl	8001138 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e056      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x41c>
 8001b0a:	e04e      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb11 	bl	8001138 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb0d 	bl	8001138 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e03f      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x44a>
 8001b38:	e037      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e032      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d028      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d11a      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d111      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470060 	.word	0x42470060

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cc      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d044      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e067      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4934      	ldr	r1, [pc, #208]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa42 	bl	8001138 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fa3e 	bl	8001138 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d20c      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9a2 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08004808 	.word	0x08004808
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00d      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f200 80bd 	bhi.w	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dbe:	e0b7      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dc2:	60bb      	str	r3, [r7, #8]
       break;
 8001dc4:	e0b7      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dc8:	60bb      	str	r3, [r7, #8]
      break;
 8001dca:	e0b4      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d04d      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	ea02 0800 	and.w	r8, r2, r0
 8001dfa:	ea03 0901 	and.w	r9, r3, r1
 8001dfe:	4640      	mov	r0, r8
 8001e00:	4649      	mov	r1, r9
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	014b      	lsls	r3, r1, #5
 8001e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e10:	0142      	lsls	r2, r0, #5
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	ebb0 0008 	subs.w	r0, r0, r8
 8001e1a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2c:	0182      	lsls	r2, r0, #6
 8001e2e:	1a12      	subs	r2, r2, r0
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	00d9      	lsls	r1, r3, #3
 8001e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e42:	00d0      	lsls	r0, r2, #3
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	eb12 0208 	adds.w	r2, r2, r8
 8001e4c:	eb43 0309 	adc.w	r3, r3, r9
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0259      	lsls	r1, r3, #9
 8001e5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e5e:	0250      	lsls	r0, r2, #9
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe fa06 	bl	8000280 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e04a      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	461a      	mov	r2, r3
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	ea02 0400 	and.w	r4, r2, r0
 8001e96:	ea03 0501 	and.w	r5, r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	014b      	lsls	r3, r1, #5
 8001ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eac:	0142      	lsls	r2, r0, #5
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	1b00      	subs	r0, r0, r4
 8001eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	018b      	lsls	r3, r1, #6
 8001ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec6:	0182      	lsls	r2, r0, #6
 8001ec8:	1a12      	subs	r2, r2, r0
 8001eca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	00d9      	lsls	r1, r3, #3
 8001ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001edc:	00d0      	lsls	r0, r2, #3
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	1912      	adds	r2, r2, r4
 8001ee4:	eb45 0303 	adc.w	r3, r5, r3
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0299      	lsls	r1, r3, #10
 8001ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef6:	0290      	lsls	r0, r2, #10
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f7fe f9ba 	bl	8000280 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f32:	60bb      	str	r3, [r7, #8]
      break;
 8001f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f36:	68bb      	ldr	r3, [r7, #8]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08004818 	.word	0x08004818

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffdc 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08004818 	.word	0x08004818

08001fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e07b      	b.n	80020c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fda:	d009      	beq.n	8001ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
 8001fe2:	e005      	b.n	8001ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fdec 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	ea42 0103 	orr.w	r1, r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	f003 0104 	and.w	r1, r3, #4
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f003 0210 	and.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b088      	sub	sp, #32
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_SPI_Transmit+0x22>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e126      	b.n	800233a <HAL_SPI_Transmit+0x270>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f4:	f7ff f820 	bl	8001138 <HAL_GetTick>
 80020f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d002      	beq.n	8002110 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800210a:	2302      	movs	r3, #2
 800210c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800210e:	e10b      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_SPI_Transmit+0x52>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002120:	e102      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	88fa      	ldrh	r2, [r7, #6]
 800213a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	d10f      	bne.n	800218a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002188:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d007      	beq.n	80021a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b0:	d14b      	bne.n	800224a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_SPI_Transmit+0xf6>
 80021ba:	8afb      	ldrh	r3, [r7, #22]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d13e      	bne.n	800223e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021e4:	e02b      	b.n	800223e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d112      	bne.n	800221a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	1c9a      	adds	r2, r3, #2
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	86da      	strh	r2, [r3, #54]	; 0x36
 8002218:	e011      	b.n	800223e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800221a:	f7fe ff8d 	bl	8001138 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d803      	bhi.n	8002232 <HAL_SPI_Transmit+0x168>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d102      	bne.n	8002238 <HAL_SPI_Transmit+0x16e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800223c:	e074      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ce      	bne.n	80021e6 <HAL_SPI_Transmit+0x11c>
 8002248:	e04c      	b.n	80022e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Transmit+0x18e>
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d140      	bne.n	80022da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800227e:	e02c      	b.n	80022da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d113      	bne.n	80022b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b4:	e011      	b.n	80022da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b6:	f7fe ff3f 	bl	8001138 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d803      	bhi.n	80022ce <HAL_SPI_Transmit+0x204>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_Transmit+0x20a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022d8:	e026      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1cd      	bne.n	8002280 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	6839      	ldr	r1, [r7, #0]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fbcb 	bl	8002a84 <SPI_EndRxTxTransaction>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	77fb      	strb	r3, [r7, #31]
 8002324:	e000      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002338:	7ffb      	ldrb	r3, [r7, #31]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b088      	sub	sp, #32
 8002346:	af02      	add	r7, sp, #8
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235e:	d112      	bne.n	8002386 <HAL_SPI_Receive+0x44>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10e      	bne.n	8002386 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2204      	movs	r2, #4
 800236c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f8f1 	bl	8002564 <HAL_SPI_TransmitReceive>
 8002382:	4603      	mov	r3, r0
 8002384:	e0ea      	b.n	800255c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_SPI_Receive+0x52>
 8002390:	2302      	movs	r3, #2
 8002392:	e0e3      	b.n	800255c <HAL_SPI_Receive+0x21a>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800239c:	f7fe fecc 	bl	8001138 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d002      	beq.n	80023b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
 80023b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023b2:	e0ca      	b.n	800254a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_SPI_Receive+0x7e>
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023c4:	e0c1      	b.n	800254a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2204      	movs	r2, #4
 80023ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240c:	d10f      	bne.n	800242e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d007      	beq.n	800244c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d162      	bne.n	800251a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002454:	e02e      	b.n	80024b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d115      	bne.n	8002490 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f103 020c 	add.w	r2, r3, #12
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800248e:	e011      	b.n	80024b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002490:	f7fe fe52 	bl	8001138 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d803      	bhi.n	80024a8 <HAL_SPI_Receive+0x166>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d102      	bne.n	80024ae <HAL_SPI_Receive+0x16c>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024b2:	e04a      	b.n	800254a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1cb      	bne.n	8002456 <HAL_SPI_Receive+0x114>
 80024be:	e031      	b.n	8002524 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d113      	bne.n	80024f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	b292      	uxth	r2, r2
 80024da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f4:	e011      	b.n	800251a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f6:	f7fe fe1f 	bl	8001138 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d803      	bhi.n	800250e <HAL_SPI_Receive+0x1cc>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d102      	bne.n	8002514 <HAL_SPI_Receive+0x1d2>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002518:	e017      	b.n	800254a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1cd      	bne.n	80024c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fa45 	bl	80029b8 <SPI_EndRxTransaction>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
 8002546:	e000      	b.n	800254a <HAL_SPI_Receive+0x208>
  }

error :
 8002548:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002572:	2301      	movs	r3, #1
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_SPI_TransmitReceive+0x26>
 8002586:	2302      	movs	r3, #2
 8002588:	e18a      	b.n	80028a0 <HAL_SPI_TransmitReceive+0x33c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002592:	f7fe fdd1 	bl	8001138 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800259e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d00f      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x70>
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ba:	d107      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x68>
 80025c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d003      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
 80025ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025d2:	e15b      	b.n	800288c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0x82>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0x82>
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025ec:	e14e      	b.n	800288c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d003      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	887a      	ldrh	r2, [r7, #2]
 800262a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d007      	beq.n	8002656 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800265e:	d178      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_SPI_TransmitReceive+0x10a>
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d166      	bne.n	800273c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002692:	e053      	b.n	800273c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d11b      	bne.n	80026da <HAL_SPI_TransmitReceive+0x176>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d016      	beq.n	80026da <HAL_SPI_TransmitReceive+0x176>
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d113      	bne.n	80026da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d119      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1b8>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d014      	beq.n	800271c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	b292      	uxth	r2, r2
 80026fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	1c9a      	adds	r2, r3, #2
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002718:	2301      	movs	r3, #1
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800271c:	f7fe fd0c 	bl	8001138 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002728:	429a      	cmp	r2, r3
 800272a:	d807      	bhi.n	800273c <HAL_SPI_TransmitReceive+0x1d8>
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d003      	beq.n	800273c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800273a:	e0a7      	b.n	800288c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1a6      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x130>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1a1      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x130>
 8002750:	e07c      	b.n	800284c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_SPI_TransmitReceive+0x1fc>
 800275a:	8b7b      	ldrh	r3, [r7, #26]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d16b      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	e057      	b.n	8002838 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d11c      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x26c>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x26c>
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d114      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d119      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x2ae>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d014      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800280e:	2301      	movs	r3, #1
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002812:	f7fe fc91 	bl	8001138 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281e:	429a      	cmp	r2, r3
 8002820:	d803      	bhi.n	800282a <HAL_SPI_TransmitReceive+0x2c6>
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d102      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x2cc>
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002836:	e029      	b.n	800288c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1a2      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x224>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d19d      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f917 	bl	8002a84 <SPI_EndRxTxTransaction>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002868:	e010      	b.n	800288c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	e000      	b.n	800288c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800288a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800289c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028b8:	f7fe fc3e 	bl	8001138 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028c8:	f7fe fc36 	bl	8001138 <HAL_GetTick>
 80028cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	0d1b      	lsrs	r3, r3, #20
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028de:	e054      	b.n	800298a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d050      	beq.n	800298a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028e8:	f7fe fc26 	bl	8001138 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d902      	bls.n	80028fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d13d      	bne.n	800297a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800290c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002916:	d111      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002920:	d004      	beq.n	800292c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	d107      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002944:	d10f      	bne.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e017      	b.n	80029aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3b01      	subs	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d19b      	bne.n	80028e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000000 	.word	0x20000000

080029b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029cc:	d111      	bne.n	80029f2 <SPI_EndRxTransaction+0x3a>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d6:	d004      	beq.n	80029e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e0:	d107      	bne.n	80029f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fa:	d12a      	bne.n	8002a52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	d012      	beq.n	8002a2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff ff49 	bl	80028a8 <SPI_WaitFlagStateUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02d      	beq.n	8002a78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e026      	b.n	8002a7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	2101      	movs	r1, #1
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff36 	bl	80028a8 <SPI_WaitFlagStateUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01a      	beq.n	8002a78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e013      	b.n	8002a7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff ff23 	bl	80028a8 <SPI_WaitFlagStateUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e000      	b.n	8002a7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <SPI_EndRxTxTransaction+0x7c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <SPI_EndRxTxTransaction+0x80>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0d5b      	lsrs	r3, r3, #21
 8002a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aae:	d112      	bne.n	8002ad6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff fef4 	bl	80028a8 <SPI_WaitFlagStateUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e00f      	b.n	8002af6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d0f2      	beq.n	8002ad6 <SPI_EndRxTxTransaction+0x52>
 8002af0:	e000      	b.n	8002af4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002af2:	bf00      	nop
  }

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000
 8002b04:	165e9f81 	.word	0x165e9f81

08002b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e041      	b.n	8002b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f9de 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 f94c 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d001      	beq.n	8002bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e03c      	b.n	8002c3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_TIM_Base_Start+0xa0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_TIM_Base_Start+0x5c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d013      	beq.n	8002c04 <HAL_TIM_Base_Start+0x5c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_TIM_Base_Start+0xa4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_TIM_Base_Start+0x5c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_TIM_Base_Start+0xa8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_TIM_Base_Start+0x5c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_TIM_Base_Start+0xac>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_TIM_Base_Start+0x5c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_TIM_Base_Start+0xb0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d111      	bne.n	8002c28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d010      	beq.n	8002c38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	e007      	b.n	8002c38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40014000 	.word	0x40014000

08002c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_ConfigClockSource+0x18>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0b3      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x180>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cac:	d03e      	beq.n	8002d2c <HAL_TIM_ConfigClockSource+0xd0>
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb2:	f200 8087 	bhi.w	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	f000 8085 	beq.w	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc2:	d87f      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002cc4:	2b70      	cmp	r3, #112	; 0x70
 8002cc6:	d01a      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xa2>
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d87b      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ccc:	2b60      	cmp	r3, #96	; 0x60
 8002cce:	d050      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x116>
 8002cd0:	2b60      	cmp	r3, #96	; 0x60
 8002cd2:	d877      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002cd4:	2b50      	cmp	r3, #80	; 0x50
 8002cd6:	d03c      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xf6>
 8002cd8:	2b50      	cmp	r3, #80	; 0x50
 8002cda:	d873      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d058      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x136>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d86f      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	2b30      	cmp	r3, #48	; 0x30
 8002ce6:	d064      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x156>
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d86b      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d060      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x156>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d867      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05c      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x156>
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d05a      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cfc:	e062      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f000 f963 	bl	8002fd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	609a      	str	r2, [r3, #8]
      break;
 8002d2a:	e04e      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f000 f94c 	bl	8002fd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4e:	609a      	str	r2, [r3, #8]
      break;
 8002d50:	e03b      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 f8c0 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2150      	movs	r1, #80	; 0x50
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f919 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002d70:	e02b      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f8df 	bl	8002f42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2160      	movs	r1, #96	; 0x60
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f909 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e01b      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f8a0 	bl	8002ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2140      	movs	r1, #64	; 0x40
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f8f9 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e00b      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f000 f8f0 	bl	8002fa2 <TIM_ITRx_SetConfig>
        break;
 8002dc2:	e002      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <TIM_Base_SetConfig+0xe4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <TIM_Base_SetConfig+0x38>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0x38>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <TIM_Base_SetConfig+0xe8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x38>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <TIM_Base_SetConfig+0xec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x38>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <TIM_Base_SetConfig+0xf0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <TIM_Base_SetConfig+0xe4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <TIM_Base_SetConfig+0xe8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <TIM_Base_SetConfig+0xec>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a20      	ldr	r2, [pc, #128]	; (8002ed4 <TIM_Base_SetConfig+0xf0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <TIM_Base_SetConfig+0xf4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <TIM_Base_SetConfig+0xf8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <TIM_Base_SetConfig+0xfc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <TIM_Base_SetConfig+0xe4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800

08002ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 030a 	bic.w	r3, r3, #10
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0210 	bic.w	r2, r3, #16
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	031b      	lsls	r3, r3, #12
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f043 0307 	orr.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e050      	b.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d013      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10c      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e03f      	b.n	8003186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd ff34 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f905 	bl	8003348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	; 0x28
 8003192:	af02      	add	r7, sp, #8
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d17c      	bne.n	80032a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_UART_Transmit+0x2c>
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e075      	b.n	80032aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Transmit+0x3e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e06e      	b.n	80032aa <HAL_UART_Transmit+0x11c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	; 0x21
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e2:	f7fd ffa9 	bl	8001138 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	d108      	bne.n	8003210 <HAL_UART_Transmit+0x82>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e003      	b.n	8003218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003220:	e02a      	b.n	8003278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f840 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e036      	b.n	80032aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3302      	adds	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e007      	b.n	800326a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cf      	bne.n	8003222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f810 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e006      	b.n	80032aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e02c      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d028      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	f7fd ff31 	bl	8001138 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d21d      	bcs.n	800331e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e00f      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	429a      	cmp	r2, r3
 800333a:	d0c3      	beq.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	b09f      	sub	sp, #124	; 0x7c
 800334e:	af00      	add	r7, sp, #0
 8003350:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	68d9      	ldr	r1, [r3, #12]
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	ea40 0301 	orr.w	r3, r0, r1
 8003368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	431a      	orrs	r2, r3
 800337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800338c:	f021 010c 	bic.w	r1, r1, #12
 8003390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003396:	430b      	orrs	r3, r1
 8003398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	6999      	ldr	r1, [r3, #24]
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	ea40 0301 	orr.w	r3, r0, r1
 80033b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4bc5      	ldr	r3, [pc, #788]	; (80036cc <UART_SetConfig+0x384>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d004      	beq.n	80033c6 <UART_SetConfig+0x7e>
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4bc3      	ldr	r3, [pc, #780]	; (80036d0 <UART_SetConfig+0x388>)
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d103      	bne.n	80033ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c6:	f7fe fde3 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80033ca:	6778      	str	r0, [r7, #116]	; 0x74
 80033cc:	e002      	b.n	80033d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7fe fdcb 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80033d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	f040 80b6 	bne.w	800354c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e2:	461c      	mov	r4, r3
 80033e4:	f04f 0500 	mov.w	r5, #0
 80033e8:	4622      	mov	r2, r4
 80033ea:	462b      	mov	r3, r5
 80033ec:	1891      	adds	r1, r2, r2
 80033ee:	6439      	str	r1, [r7, #64]	; 0x40
 80033f0:	415b      	adcs	r3, r3
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
 80033f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033f8:	1912      	adds	r2, r2, r4
 80033fa:	eb45 0303 	adc.w	r3, r5, r3
 80033fe:	f04f 0000 	mov.w	r0, #0
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	00d9      	lsls	r1, r3, #3
 8003408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800340c:	00d0      	lsls	r0, r2, #3
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	1911      	adds	r1, r2, r4
 8003414:	6639      	str	r1, [r7, #96]	; 0x60
 8003416:	416b      	adcs	r3, r5
 8003418:	667b      	str	r3, [r7, #100]	; 0x64
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	1891      	adds	r1, r2, r2
 8003426:	63b9      	str	r1, [r7, #56]	; 0x38
 8003428:	415b      	adcs	r3, r3
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003430:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003434:	f7fc ff24 	bl	8000280 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4ba5      	ldr	r3, [pc, #660]	; (80036d4 <UART_SetConfig+0x38c>)
 800343e:	fba3 2302 	umull	r2, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	011e      	lsls	r6, r3, #4
 8003446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003448:	461c      	mov	r4, r3
 800344a:	f04f 0500 	mov.w	r5, #0
 800344e:	4622      	mov	r2, r4
 8003450:	462b      	mov	r3, r5
 8003452:	1891      	adds	r1, r2, r2
 8003454:	6339      	str	r1, [r7, #48]	; 0x30
 8003456:	415b      	adcs	r3, r3
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
 800345a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800345e:	1912      	adds	r2, r2, r4
 8003460:	eb45 0303 	adc.w	r3, r5, r3
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	00d9      	lsls	r1, r3, #3
 800346e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003472:	00d0      	lsls	r0, r2, #3
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	1911      	adds	r1, r2, r4
 800347a:	65b9      	str	r1, [r7, #88]	; 0x58
 800347c:	416b      	adcs	r3, r5
 800347e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	461a      	mov	r2, r3
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	1891      	adds	r1, r2, r2
 800348c:	62b9      	str	r1, [r7, #40]	; 0x28
 800348e:	415b      	adcs	r3, r3
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003496:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800349a:	f7fc fef1 	bl	8000280 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <UART_SetConfig+0x38c>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	2164      	movs	r1, #100	; 0x64
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	3332      	adds	r3, #50	; 0x32
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <UART_SetConfig+0x38c>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034c4:	441e      	add	r6, r3
 80034c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c8:	4618      	mov	r0, r3
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	1894      	adds	r4, r2, r2
 80034d4:	623c      	str	r4, [r7, #32]
 80034d6:	415b      	adcs	r3, r3
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034de:	1812      	adds	r2, r2, r0
 80034e0:	eb41 0303 	adc.w	r3, r1, r3
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	f04f 0500 	mov.w	r5, #0
 80034ec:	00dd      	lsls	r5, r3, #3
 80034ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034f2:	00d4      	lsls	r4, r2, #3
 80034f4:	4622      	mov	r2, r4
 80034f6:	462b      	mov	r3, r5
 80034f8:	1814      	adds	r4, r2, r0
 80034fa:	653c      	str	r4, [r7, #80]	; 0x50
 80034fc:	414b      	adcs	r3, r1
 80034fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	461a      	mov	r2, r3
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	1891      	adds	r1, r2, r2
 800350c:	61b9      	str	r1, [r7, #24]
 800350e:	415b      	adcs	r3, r3
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003516:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800351a:	f7fc feb1 	bl	8000280 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <UART_SetConfig+0x38c>)
 8003524:	fba3 1302 	umull	r1, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	2164      	movs	r1, #100	; 0x64
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	3332      	adds	r3, #50	; 0x32
 8003536:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <UART_SetConfig+0x38c>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	f003 0207 	and.w	r2, r3, #7
 8003542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4432      	add	r2, r6
 8003548:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800354a:	e0b9      	b.n	80036c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800354c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354e:	461c      	mov	r4, r3
 8003550:	f04f 0500 	mov.w	r5, #0
 8003554:	4622      	mov	r2, r4
 8003556:	462b      	mov	r3, r5
 8003558:	1891      	adds	r1, r2, r2
 800355a:	6139      	str	r1, [r7, #16]
 800355c:	415b      	adcs	r3, r3
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003564:	1912      	adds	r2, r2, r4
 8003566:	eb45 0303 	adc.w	r3, r5, r3
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	00d9      	lsls	r1, r3, #3
 8003574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003578:	00d0      	lsls	r0, r2, #3
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	eb12 0804 	adds.w	r8, r2, r4
 8003582:	eb43 0905 	adc.w	r9, r3, r5
 8003586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4618      	mov	r0, r3
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800359e:	0082      	lsls	r2, r0, #2
 80035a0:	4640      	mov	r0, r8
 80035a2:	4649      	mov	r1, r9
 80035a4:	f7fc fe6c 	bl	8000280 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b49      	ldr	r3, [pc, #292]	; (80036d4 <UART_SetConfig+0x38c>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011e      	lsls	r6, r3, #4
 80035b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b8:	4618      	mov	r0, r3
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	1894      	adds	r4, r2, r2
 80035c4:	60bc      	str	r4, [r7, #8]
 80035c6:	415b      	adcs	r3, r3
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ce:	1812      	adds	r2, r2, r0
 80035d0:	eb41 0303 	adc.w	r3, r1, r3
 80035d4:	f04f 0400 	mov.w	r4, #0
 80035d8:	f04f 0500 	mov.w	r5, #0
 80035dc:	00dd      	lsls	r5, r3, #3
 80035de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035e2:	00d4      	lsls	r4, r2, #3
 80035e4:	4622      	mov	r2, r4
 80035e6:	462b      	mov	r3, r5
 80035e8:	1814      	adds	r4, r2, r0
 80035ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80035ec:	414b      	adcs	r3, r1
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f04f 0100 	mov.w	r1, #0
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	008b      	lsls	r3, r1, #2
 8003604:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003608:	0082      	lsls	r2, r0, #2
 800360a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800360e:	f7fc fe37 	bl	8000280 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <UART_SetConfig+0x38c>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <UART_SetConfig+0x38c>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003636:	441e      	add	r6, r3
 8003638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363a:	4618      	mov	r0, r3
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	1894      	adds	r4, r2, r2
 8003646:	603c      	str	r4, [r7, #0]
 8003648:	415b      	adcs	r3, r3
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003650:	1812      	adds	r2, r2, r0
 8003652:	eb41 0303 	adc.w	r3, r1, r3
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	f04f 0500 	mov.w	r5, #0
 800365e:	00dd      	lsls	r5, r3, #3
 8003660:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003664:	00d4      	lsls	r4, r2, #3
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	eb12 0a00 	adds.w	sl, r2, r0
 800366e:	eb43 0b01 	adc.w	fp, r3, r1
 8003672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	008b      	lsls	r3, r1, #2
 8003686:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800368a:	0082      	lsls	r2, r0, #2
 800368c:	4650      	mov	r0, sl
 800368e:	4659      	mov	r1, fp
 8003690:	f7fc fdf6 	bl	8000280 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <UART_SetConfig+0x38c>)
 800369a:	fba3 1302 	umull	r1, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2164      	movs	r1, #100	; 0x64
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	3332      	adds	r3, #50	; 0x32
 80036ac:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <UART_SetConfig+0x38c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4432      	add	r2, r6
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	377c      	adds	r7, #124	; 0x7c
 80036c4:	46bd      	mov	sp, r7
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	bf00      	nop
 80036cc:	40011000 	.word	0x40011000
 80036d0:	40011400 	.word	0x40011400
 80036d4:	51eb851f 	.word	0x51eb851f

080036d8 <__errno>:
 80036d8:	4b01      	ldr	r3, [pc, #4]	; (80036e0 <__errno+0x8>)
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	2000000c 	.word	0x2000000c

080036e4 <__libc_init_array>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4d0d      	ldr	r5, [pc, #52]	; (800371c <__libc_init_array+0x38>)
 80036e8:	4c0d      	ldr	r4, [pc, #52]	; (8003720 <__libc_init_array+0x3c>)
 80036ea:	1b64      	subs	r4, r4, r5
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	2600      	movs	r6, #0
 80036f0:	42a6      	cmp	r6, r4
 80036f2:	d109      	bne.n	8003708 <__libc_init_array+0x24>
 80036f4:	4d0b      	ldr	r5, [pc, #44]	; (8003724 <__libc_init_array+0x40>)
 80036f6:	4c0c      	ldr	r4, [pc, #48]	; (8003728 <__libc_init_array+0x44>)
 80036f8:	f000 ffec 	bl	80046d4 <_init>
 80036fc:	1b64      	subs	r4, r4, r5
 80036fe:	10a4      	asrs	r4, r4, #2
 8003700:	2600      	movs	r6, #0
 8003702:	42a6      	cmp	r6, r4
 8003704:	d105      	bne.n	8003712 <__libc_init_array+0x2e>
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	f855 3b04 	ldr.w	r3, [r5], #4
 800370c:	4798      	blx	r3
 800370e:	3601      	adds	r6, #1
 8003710:	e7ee      	b.n	80036f0 <__libc_init_array+0xc>
 8003712:	f855 3b04 	ldr.w	r3, [r5], #4
 8003716:	4798      	blx	r3
 8003718:	3601      	adds	r6, #1
 800371a:	e7f2      	b.n	8003702 <__libc_init_array+0x1e>
 800371c:	080048c0 	.word	0x080048c0
 8003720:	080048c0 	.word	0x080048c0
 8003724:	080048c0 	.word	0x080048c0
 8003728:	080048c4 	.word	0x080048c4

0800372c <memset>:
 800372c:	4402      	add	r2, r0
 800372e:	4603      	mov	r3, r0
 8003730:	4293      	cmp	r3, r2
 8003732:	d100      	bne.n	8003736 <memset+0xa>
 8003734:	4770      	bx	lr
 8003736:	f803 1b01 	strb.w	r1, [r3], #1
 800373a:	e7f9      	b.n	8003730 <memset+0x4>

0800373c <iprintf>:
 800373c:	b40f      	push	{r0, r1, r2, r3}
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <iprintf+0x2c>)
 8003740:	b513      	push	{r0, r1, r4, lr}
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	b124      	cbz	r4, 8003750 <iprintf+0x14>
 8003746:	69a3      	ldr	r3, [r4, #24]
 8003748:	b913      	cbnz	r3, 8003750 <iprintf+0x14>
 800374a:	4620      	mov	r0, r4
 800374c:	f000 fa5e 	bl	8003c0c <__sinit>
 8003750:	ab05      	add	r3, sp, #20
 8003752:	9a04      	ldr	r2, [sp, #16]
 8003754:	68a1      	ldr	r1, [r4, #8]
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	4620      	mov	r0, r4
 800375a:	f000 fc2f 	bl	8003fbc <_vfiprintf_r>
 800375e:	b002      	add	sp, #8
 8003760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003764:	b004      	add	sp, #16
 8003766:	4770      	bx	lr
 8003768:	2000000c 	.word	0x2000000c

0800376c <_puts_r>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	460e      	mov	r6, r1
 8003770:	4605      	mov	r5, r0
 8003772:	b118      	cbz	r0, 800377c <_puts_r+0x10>
 8003774:	6983      	ldr	r3, [r0, #24]
 8003776:	b90b      	cbnz	r3, 800377c <_puts_r+0x10>
 8003778:	f000 fa48 	bl	8003c0c <__sinit>
 800377c:	69ab      	ldr	r3, [r5, #24]
 800377e:	68ac      	ldr	r4, [r5, #8]
 8003780:	b913      	cbnz	r3, 8003788 <_puts_r+0x1c>
 8003782:	4628      	mov	r0, r5
 8003784:	f000 fa42 	bl	8003c0c <__sinit>
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <_puts_r+0xd0>)
 800378a:	429c      	cmp	r4, r3
 800378c:	d120      	bne.n	80037d0 <_puts_r+0x64>
 800378e:	686c      	ldr	r4, [r5, #4]
 8003790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003792:	07db      	lsls	r3, r3, #31
 8003794:	d405      	bmi.n	80037a2 <_puts_r+0x36>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	0598      	lsls	r0, r3, #22
 800379a:	d402      	bmi.n	80037a2 <_puts_r+0x36>
 800379c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800379e:	f000 fad3 	bl	8003d48 <__retarget_lock_acquire_recursive>
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	0719      	lsls	r1, r3, #28
 80037a6:	d51d      	bpl.n	80037e4 <_puts_r+0x78>
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	b1db      	cbz	r3, 80037e4 <_puts_r+0x78>
 80037ac:	3e01      	subs	r6, #1
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60a3      	str	r3, [r4, #8]
 80037b8:	bb39      	cbnz	r1, 800380a <_puts_r+0x9e>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da38      	bge.n	8003830 <_puts_r+0xc4>
 80037be:	4622      	mov	r2, r4
 80037c0:	210a      	movs	r1, #10
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 f848 	bl	8003858 <__swbuf_r>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d011      	beq.n	80037f0 <_puts_r+0x84>
 80037cc:	250a      	movs	r5, #10
 80037ce:	e011      	b.n	80037f4 <_puts_r+0x88>
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <_puts_r+0xd4>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d101      	bne.n	80037da <_puts_r+0x6e>
 80037d6:	68ac      	ldr	r4, [r5, #8]
 80037d8:	e7da      	b.n	8003790 <_puts_r+0x24>
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <_puts_r+0xd8>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	bf08      	it	eq
 80037e0:	68ec      	ldreq	r4, [r5, #12]
 80037e2:	e7d5      	b.n	8003790 <_puts_r+0x24>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 f888 	bl	80038fc <__swsetup_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d0dd      	beq.n	80037ac <_puts_r+0x40>
 80037f0:	f04f 35ff 	mov.w	r5, #4294967295
 80037f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037f6:	07da      	lsls	r2, r3, #31
 80037f8:	d405      	bmi.n	8003806 <_puts_r+0x9a>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	059b      	lsls	r3, r3, #22
 80037fe:	d402      	bmi.n	8003806 <_puts_r+0x9a>
 8003800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003802:	f000 faa2 	bl	8003d4a <__retarget_lock_release_recursive>
 8003806:	4628      	mov	r0, r5
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	2b00      	cmp	r3, #0
 800380c:	da04      	bge.n	8003818 <_puts_r+0xac>
 800380e:	69a2      	ldr	r2, [r4, #24]
 8003810:	429a      	cmp	r2, r3
 8003812:	dc06      	bgt.n	8003822 <_puts_r+0xb6>
 8003814:	290a      	cmp	r1, #10
 8003816:	d004      	beq.n	8003822 <_puts_r+0xb6>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	6022      	str	r2, [r4, #0]
 800381e:	7019      	strb	r1, [r3, #0]
 8003820:	e7c5      	b.n	80037ae <_puts_r+0x42>
 8003822:	4622      	mov	r2, r4
 8003824:	4628      	mov	r0, r5
 8003826:	f000 f817 	bl	8003858 <__swbuf_r>
 800382a:	3001      	adds	r0, #1
 800382c:	d1bf      	bne.n	80037ae <_puts_r+0x42>
 800382e:	e7df      	b.n	80037f0 <_puts_r+0x84>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	250a      	movs	r5, #10
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	6022      	str	r2, [r4, #0]
 8003838:	701d      	strb	r5, [r3, #0]
 800383a:	e7db      	b.n	80037f4 <_puts_r+0x88>
 800383c:	08004844 	.word	0x08004844
 8003840:	08004864 	.word	0x08004864
 8003844:	08004824 	.word	0x08004824

08003848 <puts>:
 8003848:	4b02      	ldr	r3, [pc, #8]	; (8003854 <puts+0xc>)
 800384a:	4601      	mov	r1, r0
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	f7ff bf8d 	b.w	800376c <_puts_r>
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__swbuf_r>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	460e      	mov	r6, r1
 800385c:	4614      	mov	r4, r2
 800385e:	4605      	mov	r5, r0
 8003860:	b118      	cbz	r0, 800386a <__swbuf_r+0x12>
 8003862:	6983      	ldr	r3, [r0, #24]
 8003864:	b90b      	cbnz	r3, 800386a <__swbuf_r+0x12>
 8003866:	f000 f9d1 	bl	8003c0c <__sinit>
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <__swbuf_r+0x98>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d12b      	bne.n	80038c8 <__swbuf_r+0x70>
 8003870:	686c      	ldr	r4, [r5, #4]
 8003872:	69a3      	ldr	r3, [r4, #24]
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	071a      	lsls	r2, r3, #28
 800387a:	d52f      	bpl.n	80038dc <__swbuf_r+0x84>
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	b36b      	cbz	r3, 80038dc <__swbuf_r+0x84>
 8003880:	6923      	ldr	r3, [r4, #16]
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	1ac0      	subs	r0, r0, r3
 8003886:	6963      	ldr	r3, [r4, #20]
 8003888:	b2f6      	uxtb	r6, r6
 800388a:	4283      	cmp	r3, r0
 800388c:	4637      	mov	r7, r6
 800388e:	dc04      	bgt.n	800389a <__swbuf_r+0x42>
 8003890:	4621      	mov	r1, r4
 8003892:	4628      	mov	r0, r5
 8003894:	f000 f926 	bl	8003ae4 <_fflush_r>
 8003898:	bb30      	cbnz	r0, 80038e8 <__swbuf_r+0x90>
 800389a:	68a3      	ldr	r3, [r4, #8]
 800389c:	3b01      	subs	r3, #1
 800389e:	60a3      	str	r3, [r4, #8]
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	6022      	str	r2, [r4, #0]
 80038a6:	701e      	strb	r6, [r3, #0]
 80038a8:	6963      	ldr	r3, [r4, #20]
 80038aa:	3001      	adds	r0, #1
 80038ac:	4283      	cmp	r3, r0
 80038ae:	d004      	beq.n	80038ba <__swbuf_r+0x62>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	07db      	lsls	r3, r3, #31
 80038b4:	d506      	bpl.n	80038c4 <__swbuf_r+0x6c>
 80038b6:	2e0a      	cmp	r6, #10
 80038b8:	d104      	bne.n	80038c4 <__swbuf_r+0x6c>
 80038ba:	4621      	mov	r1, r4
 80038bc:	4628      	mov	r0, r5
 80038be:	f000 f911 	bl	8003ae4 <_fflush_r>
 80038c2:	b988      	cbnz	r0, 80038e8 <__swbuf_r+0x90>
 80038c4:	4638      	mov	r0, r7
 80038c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <__swbuf_r+0x9c>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d101      	bne.n	80038d2 <__swbuf_r+0x7a>
 80038ce:	68ac      	ldr	r4, [r5, #8]
 80038d0:	e7cf      	b.n	8003872 <__swbuf_r+0x1a>
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <__swbuf_r+0xa0>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	bf08      	it	eq
 80038d8:	68ec      	ldreq	r4, [r5, #12]
 80038da:	e7ca      	b.n	8003872 <__swbuf_r+0x1a>
 80038dc:	4621      	mov	r1, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	f000 f80c 	bl	80038fc <__swsetup_r>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d0cb      	beq.n	8003880 <__swbuf_r+0x28>
 80038e8:	f04f 37ff 	mov.w	r7, #4294967295
 80038ec:	e7ea      	b.n	80038c4 <__swbuf_r+0x6c>
 80038ee:	bf00      	nop
 80038f0:	08004844 	.word	0x08004844
 80038f4:	08004864 	.word	0x08004864
 80038f8:	08004824 	.word	0x08004824

080038fc <__swsetup_r>:
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <__swsetup_r+0xcc>)
 80038fe:	b570      	push	{r4, r5, r6, lr}
 8003900:	681d      	ldr	r5, [r3, #0]
 8003902:	4606      	mov	r6, r0
 8003904:	460c      	mov	r4, r1
 8003906:	b125      	cbz	r5, 8003912 <__swsetup_r+0x16>
 8003908:	69ab      	ldr	r3, [r5, #24]
 800390a:	b913      	cbnz	r3, 8003912 <__swsetup_r+0x16>
 800390c:	4628      	mov	r0, r5
 800390e:	f000 f97d 	bl	8003c0c <__sinit>
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <__swsetup_r+0xd0>)
 8003914:	429c      	cmp	r4, r3
 8003916:	d10f      	bne.n	8003938 <__swsetup_r+0x3c>
 8003918:	686c      	ldr	r4, [r5, #4]
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003920:	0719      	lsls	r1, r3, #28
 8003922:	d42c      	bmi.n	800397e <__swsetup_r+0x82>
 8003924:	06dd      	lsls	r5, r3, #27
 8003926:	d411      	bmi.n	800394c <__swsetup_r+0x50>
 8003928:	2309      	movs	r3, #9
 800392a:	6033      	str	r3, [r6, #0]
 800392c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003930:	81a3      	strh	r3, [r4, #12]
 8003932:	f04f 30ff 	mov.w	r0, #4294967295
 8003936:	e03e      	b.n	80039b6 <__swsetup_r+0xba>
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <__swsetup_r+0xd4>)
 800393a:	429c      	cmp	r4, r3
 800393c:	d101      	bne.n	8003942 <__swsetup_r+0x46>
 800393e:	68ac      	ldr	r4, [r5, #8]
 8003940:	e7eb      	b.n	800391a <__swsetup_r+0x1e>
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <__swsetup_r+0xd8>)
 8003944:	429c      	cmp	r4, r3
 8003946:	bf08      	it	eq
 8003948:	68ec      	ldreq	r4, [r5, #12]
 800394a:	e7e6      	b.n	800391a <__swsetup_r+0x1e>
 800394c:	0758      	lsls	r0, r3, #29
 800394e:	d512      	bpl.n	8003976 <__swsetup_r+0x7a>
 8003950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003952:	b141      	cbz	r1, 8003966 <__swsetup_r+0x6a>
 8003954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003958:	4299      	cmp	r1, r3
 800395a:	d002      	beq.n	8003962 <__swsetup_r+0x66>
 800395c:	4630      	mov	r0, r6
 800395e:	f000 fa59 	bl	8003e14 <_free_r>
 8003962:	2300      	movs	r3, #0
 8003964:	6363      	str	r3, [r4, #52]	; 0x34
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800396c:	81a3      	strh	r3, [r4, #12]
 800396e:	2300      	movs	r3, #0
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	6923      	ldr	r3, [r4, #16]
 8003980:	b94b      	cbnz	r3, 8003996 <__swsetup_r+0x9a>
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d003      	beq.n	8003996 <__swsetup_r+0x9a>
 800398e:	4621      	mov	r1, r4
 8003990:	4630      	mov	r0, r6
 8003992:	f000 f9ff 	bl	8003d94 <__smakebuf_r>
 8003996:	89a0      	ldrh	r0, [r4, #12]
 8003998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800399c:	f010 0301 	ands.w	r3, r0, #1
 80039a0:	d00a      	beq.n	80039b8 <__swsetup_r+0xbc>
 80039a2:	2300      	movs	r3, #0
 80039a4:	60a3      	str	r3, [r4, #8]
 80039a6:	6963      	ldr	r3, [r4, #20]
 80039a8:	425b      	negs	r3, r3
 80039aa:	61a3      	str	r3, [r4, #24]
 80039ac:	6923      	ldr	r3, [r4, #16]
 80039ae:	b943      	cbnz	r3, 80039c2 <__swsetup_r+0xc6>
 80039b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039b4:	d1ba      	bne.n	800392c <__swsetup_r+0x30>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	0781      	lsls	r1, r0, #30
 80039ba:	bf58      	it	pl
 80039bc:	6963      	ldrpl	r3, [r4, #20]
 80039be:	60a3      	str	r3, [r4, #8]
 80039c0:	e7f4      	b.n	80039ac <__swsetup_r+0xb0>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e7f7      	b.n	80039b6 <__swsetup_r+0xba>
 80039c6:	bf00      	nop
 80039c8:	2000000c 	.word	0x2000000c
 80039cc:	08004844 	.word	0x08004844
 80039d0:	08004864 	.word	0x08004864
 80039d4:	08004824 	.word	0x08004824

080039d8 <__sflush_r>:
 80039d8:	898a      	ldrh	r2, [r1, #12]
 80039da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039de:	4605      	mov	r5, r0
 80039e0:	0710      	lsls	r0, r2, #28
 80039e2:	460c      	mov	r4, r1
 80039e4:	d458      	bmi.n	8003a98 <__sflush_r+0xc0>
 80039e6:	684b      	ldr	r3, [r1, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	dc05      	bgt.n	80039f8 <__sflush_r+0x20>
 80039ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	dc02      	bgt.n	80039f8 <__sflush_r+0x20>
 80039f2:	2000      	movs	r0, #0
 80039f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d0f9      	beq.n	80039f2 <__sflush_r+0x1a>
 80039fe:	2300      	movs	r3, #0
 8003a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a04:	682f      	ldr	r7, [r5, #0]
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	d032      	beq.n	8003a70 <__sflush_r+0x98>
 8003a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	075a      	lsls	r2, r3, #29
 8003a10:	d505      	bpl.n	8003a1e <__sflush_r+0x46>
 8003a12:	6863      	ldr	r3, [r4, #4]
 8003a14:	1ac0      	subs	r0, r0, r3
 8003a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a18:	b10b      	cbz	r3, 8003a1e <__sflush_r+0x46>
 8003a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a1c:	1ac0      	subs	r0, r0, r3
 8003a1e:	2300      	movs	r3, #0
 8003a20:	4602      	mov	r2, r0
 8003a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a24:	6a21      	ldr	r1, [r4, #32]
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b0      	blx	r6
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	d106      	bne.n	8003a3e <__sflush_r+0x66>
 8003a30:	6829      	ldr	r1, [r5, #0]
 8003a32:	291d      	cmp	r1, #29
 8003a34:	d82c      	bhi.n	8003a90 <__sflush_r+0xb8>
 8003a36:	4a2a      	ldr	r2, [pc, #168]	; (8003ae0 <__sflush_r+0x108>)
 8003a38:	40ca      	lsrs	r2, r1
 8003a3a:	07d6      	lsls	r6, r2, #31
 8003a3c:	d528      	bpl.n	8003a90 <__sflush_r+0xb8>
 8003a3e:	2200      	movs	r2, #0
 8003a40:	6062      	str	r2, [r4, #4]
 8003a42:	04d9      	lsls	r1, r3, #19
 8003a44:	6922      	ldr	r2, [r4, #16]
 8003a46:	6022      	str	r2, [r4, #0]
 8003a48:	d504      	bpl.n	8003a54 <__sflush_r+0x7c>
 8003a4a:	1c42      	adds	r2, r0, #1
 8003a4c:	d101      	bne.n	8003a52 <__sflush_r+0x7a>
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	b903      	cbnz	r3, 8003a54 <__sflush_r+0x7c>
 8003a52:	6560      	str	r0, [r4, #84]	; 0x54
 8003a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a56:	602f      	str	r7, [r5, #0]
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d0ca      	beq.n	80039f2 <__sflush_r+0x1a>
 8003a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a60:	4299      	cmp	r1, r3
 8003a62:	d002      	beq.n	8003a6a <__sflush_r+0x92>
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f9d5 	bl	8003e14 <_free_r>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8003a6e:	e7c1      	b.n	80039f4 <__sflush_r+0x1c>
 8003a70:	6a21      	ldr	r1, [r4, #32]
 8003a72:	2301      	movs	r3, #1
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b0      	blx	r6
 8003a78:	1c41      	adds	r1, r0, #1
 8003a7a:	d1c7      	bne.n	8003a0c <__sflush_r+0x34>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0c4      	beq.n	8003a0c <__sflush_r+0x34>
 8003a82:	2b1d      	cmp	r3, #29
 8003a84:	d001      	beq.n	8003a8a <__sflush_r+0xb2>
 8003a86:	2b16      	cmp	r3, #22
 8003a88:	d101      	bne.n	8003a8e <__sflush_r+0xb6>
 8003a8a:	602f      	str	r7, [r5, #0]
 8003a8c:	e7b1      	b.n	80039f2 <__sflush_r+0x1a>
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	e7ad      	b.n	80039f4 <__sflush_r+0x1c>
 8003a98:	690f      	ldr	r7, [r1, #16]
 8003a9a:	2f00      	cmp	r7, #0
 8003a9c:	d0a9      	beq.n	80039f2 <__sflush_r+0x1a>
 8003a9e:	0793      	lsls	r3, r2, #30
 8003aa0:	680e      	ldr	r6, [r1, #0]
 8003aa2:	bf08      	it	eq
 8003aa4:	694b      	ldreq	r3, [r1, #20]
 8003aa6:	600f      	str	r7, [r1, #0]
 8003aa8:	bf18      	it	ne
 8003aaa:	2300      	movne	r3, #0
 8003aac:	eba6 0807 	sub.w	r8, r6, r7
 8003ab0:	608b      	str	r3, [r1, #8]
 8003ab2:	f1b8 0f00 	cmp.w	r8, #0
 8003ab6:	dd9c      	ble.n	80039f2 <__sflush_r+0x1a>
 8003ab8:	6a21      	ldr	r1, [r4, #32]
 8003aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003abc:	4643      	mov	r3, r8
 8003abe:	463a      	mov	r2, r7
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b0      	blx	r6
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	dc06      	bgt.n	8003ad6 <__sflush_r+0xfe>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e78e      	b.n	80039f4 <__sflush_r+0x1c>
 8003ad6:	4407      	add	r7, r0
 8003ad8:	eba8 0800 	sub.w	r8, r8, r0
 8003adc:	e7e9      	b.n	8003ab2 <__sflush_r+0xda>
 8003ade:	bf00      	nop
 8003ae0:	20400001 	.word	0x20400001

08003ae4 <_fflush_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	690b      	ldr	r3, [r1, #16]
 8003ae8:	4605      	mov	r5, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	b913      	cbnz	r3, 8003af4 <_fflush_r+0x10>
 8003aee:	2500      	movs	r5, #0
 8003af0:	4628      	mov	r0, r5
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	b118      	cbz	r0, 8003afe <_fflush_r+0x1a>
 8003af6:	6983      	ldr	r3, [r0, #24]
 8003af8:	b90b      	cbnz	r3, 8003afe <_fflush_r+0x1a>
 8003afa:	f000 f887 	bl	8003c0c <__sinit>
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <_fflush_r+0x6c>)
 8003b00:	429c      	cmp	r4, r3
 8003b02:	d11b      	bne.n	8003b3c <_fflush_r+0x58>
 8003b04:	686c      	ldr	r4, [r5, #4]
 8003b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ef      	beq.n	8003aee <_fflush_r+0xa>
 8003b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b10:	07d0      	lsls	r0, r2, #31
 8003b12:	d404      	bmi.n	8003b1e <_fflush_r+0x3a>
 8003b14:	0599      	lsls	r1, r3, #22
 8003b16:	d402      	bmi.n	8003b1e <_fflush_r+0x3a>
 8003b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b1a:	f000 f915 	bl	8003d48 <__retarget_lock_acquire_recursive>
 8003b1e:	4628      	mov	r0, r5
 8003b20:	4621      	mov	r1, r4
 8003b22:	f7ff ff59 	bl	80039d8 <__sflush_r>
 8003b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b28:	07da      	lsls	r2, r3, #31
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	d4e0      	bmi.n	8003af0 <_fflush_r+0xc>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	059b      	lsls	r3, r3, #22
 8003b32:	d4dd      	bmi.n	8003af0 <_fflush_r+0xc>
 8003b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b36:	f000 f908 	bl	8003d4a <__retarget_lock_release_recursive>
 8003b3a:	e7d9      	b.n	8003af0 <_fflush_r+0xc>
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <_fflush_r+0x70>)
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d101      	bne.n	8003b46 <_fflush_r+0x62>
 8003b42:	68ac      	ldr	r4, [r5, #8]
 8003b44:	e7df      	b.n	8003b06 <_fflush_r+0x22>
 8003b46:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <_fflush_r+0x74>)
 8003b48:	429c      	cmp	r4, r3
 8003b4a:	bf08      	it	eq
 8003b4c:	68ec      	ldreq	r4, [r5, #12]
 8003b4e:	e7da      	b.n	8003b06 <_fflush_r+0x22>
 8003b50:	08004844 	.word	0x08004844
 8003b54:	08004864 	.word	0x08004864
 8003b58:	08004824 	.word	0x08004824

08003b5c <std>:
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	4604      	mov	r4, r0
 8003b62:	e9c0 3300 	strd	r3, r3, [r0]
 8003b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b6a:	6083      	str	r3, [r0, #8]
 8003b6c:	8181      	strh	r1, [r0, #12]
 8003b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b70:	81c2      	strh	r2, [r0, #14]
 8003b72:	6183      	str	r3, [r0, #24]
 8003b74:	4619      	mov	r1, r3
 8003b76:	2208      	movs	r2, #8
 8003b78:	305c      	adds	r0, #92	; 0x5c
 8003b7a:	f7ff fdd7 	bl	800372c <memset>
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <std+0x38>)
 8003b80:	6263      	str	r3, [r4, #36]	; 0x24
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <std+0x3c>)
 8003b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <std+0x40>)
 8003b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <std+0x44>)
 8003b8c:	6224      	str	r4, [r4, #32]
 8003b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	bf00      	nop
 8003b94:	08004565 	.word	0x08004565
 8003b98:	08004587 	.word	0x08004587
 8003b9c:	080045bf 	.word	0x080045bf
 8003ba0:	080045e3 	.word	0x080045e3

08003ba4 <_cleanup_r>:
 8003ba4:	4901      	ldr	r1, [pc, #4]	; (8003bac <_cleanup_r+0x8>)
 8003ba6:	f000 b8af 	b.w	8003d08 <_fwalk_reent>
 8003baa:	bf00      	nop
 8003bac:	08003ae5 	.word	0x08003ae5

08003bb0 <__sfmoreglue>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	1e4a      	subs	r2, r1, #1
 8003bb4:	2568      	movs	r5, #104	; 0x68
 8003bb6:	4355      	muls	r5, r2
 8003bb8:	460e      	mov	r6, r1
 8003bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bbe:	f000 f979 	bl	8003eb4 <_malloc_r>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	b140      	cbz	r0, 8003bd8 <__sfmoreglue+0x28>
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8003bcc:	300c      	adds	r0, #12
 8003bce:	60a0      	str	r0, [r4, #8]
 8003bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bd4:	f7ff fdaa 	bl	800372c <memset>
 8003bd8:	4620      	mov	r0, r4
 8003bda:	bd70      	pop	{r4, r5, r6, pc}

08003bdc <__sfp_lock_acquire>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	; (8003be4 <__sfp_lock_acquire+0x8>)
 8003bde:	f000 b8b3 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8003be2:	bf00      	nop
 8003be4:	2000018c 	.word	0x2000018c

08003be8 <__sfp_lock_release>:
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <__sfp_lock_release+0x8>)
 8003bea:	f000 b8ae 	b.w	8003d4a <__retarget_lock_release_recursive>
 8003bee:	bf00      	nop
 8003bf0:	2000018c 	.word	0x2000018c

08003bf4 <__sinit_lock_acquire>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__sinit_lock_acquire+0x8>)
 8003bf6:	f000 b8a7 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	20000187 	.word	0x20000187

08003c00 <__sinit_lock_release>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__sinit_lock_release+0x8>)
 8003c02:	f000 b8a2 	b.w	8003d4a <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	20000187 	.word	0x20000187

08003c0c <__sinit>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
 8003c10:	f7ff fff0 	bl	8003bf4 <__sinit_lock_acquire>
 8003c14:	69a3      	ldr	r3, [r4, #24]
 8003c16:	b11b      	cbz	r3, 8003c20 <__sinit+0x14>
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	f7ff bff0 	b.w	8003c00 <__sinit_lock_release>
 8003c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c24:	6523      	str	r3, [r4, #80]	; 0x50
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <__sinit+0x68>)
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <__sinit+0x6c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	bf04      	itt	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	61a3      	streq	r3, [r4, #24]
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f820 	bl	8003c7c <__sfp>
 8003c3c:	6060      	str	r0, [r4, #4]
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 f81c 	bl	8003c7c <__sfp>
 8003c44:	60a0      	str	r0, [r4, #8]
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f818 	bl	8003c7c <__sfp>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	60e0      	str	r0, [r4, #12]
 8003c50:	2104      	movs	r1, #4
 8003c52:	6860      	ldr	r0, [r4, #4]
 8003c54:	f7ff ff82 	bl	8003b5c <std>
 8003c58:	68a0      	ldr	r0, [r4, #8]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2109      	movs	r1, #9
 8003c5e:	f7ff ff7d 	bl	8003b5c <std>
 8003c62:	68e0      	ldr	r0, [r4, #12]
 8003c64:	2202      	movs	r2, #2
 8003c66:	2112      	movs	r1, #18
 8003c68:	f7ff ff78 	bl	8003b5c <std>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	61a3      	str	r3, [r4, #24]
 8003c70:	e7d2      	b.n	8003c18 <__sinit+0xc>
 8003c72:	bf00      	nop
 8003c74:	08004820 	.word	0x08004820
 8003c78:	08003ba5 	.word	0x08003ba5

08003c7c <__sfp>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	4607      	mov	r7, r0
 8003c80:	f7ff ffac 	bl	8003bdc <__sfp_lock_acquire>
 8003c84:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <__sfp+0x84>)
 8003c86:	681e      	ldr	r6, [r3, #0]
 8003c88:	69b3      	ldr	r3, [r6, #24]
 8003c8a:	b913      	cbnz	r3, 8003c92 <__sfp+0x16>
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7ff ffbd 	bl	8003c0c <__sinit>
 8003c92:	3648      	adds	r6, #72	; 0x48
 8003c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	d503      	bpl.n	8003ca4 <__sfp+0x28>
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	b30b      	cbz	r3, 8003ce4 <__sfp+0x68>
 8003ca0:	6836      	ldr	r6, [r6, #0]
 8003ca2:	e7f7      	b.n	8003c94 <__sfp+0x18>
 8003ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ca8:	b9d5      	cbnz	r5, 8003ce0 <__sfp+0x64>
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <__sfp+0x88>)
 8003cac:	60e3      	str	r3, [r4, #12]
 8003cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8003cb4:	f000 f847 	bl	8003d46 <__retarget_lock_init_recursive>
 8003cb8:	f7ff ff96 	bl	8003be8 <__sfp_lock_release>
 8003cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003cc4:	6025      	str	r5, [r4, #0]
 8003cc6:	61a5      	str	r5, [r4, #24]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	4629      	mov	r1, r5
 8003ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cd0:	f7ff fd2c 	bl	800372c <memset>
 8003cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce0:	3468      	adds	r4, #104	; 0x68
 8003ce2:	e7d9      	b.n	8003c98 <__sfp+0x1c>
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	f7ff ff62 	bl	8003bb0 <__sfmoreglue>
 8003cec:	4604      	mov	r4, r0
 8003cee:	6030      	str	r0, [r6, #0]
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d1d5      	bne.n	8003ca0 <__sfp+0x24>
 8003cf4:	f7ff ff78 	bl	8003be8 <__sfp_lock_release>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	e7ee      	b.n	8003cdc <__sfp+0x60>
 8003cfe:	bf00      	nop
 8003d00:	08004820 	.word	0x08004820
 8003d04:	ffff0001 	.word	0xffff0001

08003d08 <_fwalk_reent>:
 8003d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	4688      	mov	r8, r1
 8003d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d14:	2700      	movs	r7, #0
 8003d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8003d1e:	d505      	bpl.n	8003d2c <_fwalk_reent+0x24>
 8003d20:	6824      	ldr	r4, [r4, #0]
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	d1f7      	bne.n	8003d16 <_fwalk_reent+0xe>
 8003d26:	4638      	mov	r0, r7
 8003d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2c:	89ab      	ldrh	r3, [r5, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d907      	bls.n	8003d42 <_fwalk_reent+0x3a>
 8003d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d36:	3301      	adds	r3, #1
 8003d38:	d003      	beq.n	8003d42 <_fwalk_reent+0x3a>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	47c0      	blx	r8
 8003d40:	4307      	orrs	r7, r0
 8003d42:	3568      	adds	r5, #104	; 0x68
 8003d44:	e7e9      	b.n	8003d1a <_fwalk_reent+0x12>

08003d46 <__retarget_lock_init_recursive>:
 8003d46:	4770      	bx	lr

08003d48 <__retarget_lock_acquire_recursive>:
 8003d48:	4770      	bx	lr

08003d4a <__retarget_lock_release_recursive>:
 8003d4a:	4770      	bx	lr

08003d4c <__swhatbuf_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d54:	2900      	cmp	r1, #0
 8003d56:	b096      	sub	sp, #88	; 0x58
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	da07      	bge.n	8003d6e <__swhatbuf_r+0x22>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	602b      	str	r3, [r5, #0]
 8003d62:	89b3      	ldrh	r3, [r6, #12]
 8003d64:	061a      	lsls	r2, r3, #24
 8003d66:	d410      	bmi.n	8003d8a <__swhatbuf_r+0x3e>
 8003d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6c:	e00e      	b.n	8003d8c <__swhatbuf_r+0x40>
 8003d6e:	466a      	mov	r2, sp
 8003d70:	f000 fc5e 	bl	8004630 <_fstat_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	dbf2      	blt.n	8003d5e <__swhatbuf_r+0x12>
 8003d78:	9a01      	ldr	r2, [sp, #4]
 8003d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d82:	425a      	negs	r2, r3
 8003d84:	415a      	adcs	r2, r3
 8003d86:	602a      	str	r2, [r5, #0]
 8003d88:	e7ee      	b.n	8003d68 <__swhatbuf_r+0x1c>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	b016      	add	sp, #88	; 0x58
 8003d92:	bd70      	pop	{r4, r5, r6, pc}

08003d94 <__smakebuf_r>:
 8003d94:	898b      	ldrh	r3, [r1, #12]
 8003d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d98:	079d      	lsls	r5, r3, #30
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	d507      	bpl.n	8003db0 <__smakebuf_r+0x1c>
 8003da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	2301      	movs	r3, #1
 8003daa:	6163      	str	r3, [r4, #20]
 8003dac:	b002      	add	sp, #8
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	ab01      	add	r3, sp, #4
 8003db2:	466a      	mov	r2, sp
 8003db4:	f7ff ffca 	bl	8003d4c <__swhatbuf_r>
 8003db8:	9900      	ldr	r1, [sp, #0]
 8003dba:	4605      	mov	r5, r0
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f000 f879 	bl	8003eb4 <_malloc_r>
 8003dc2:	b948      	cbnz	r0, 8003dd8 <__smakebuf_r+0x44>
 8003dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dc8:	059a      	lsls	r2, r3, #22
 8003dca:	d4ef      	bmi.n	8003dac <__smakebuf_r+0x18>
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	e7e3      	b.n	8003da0 <__smakebuf_r+0xc>
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <__smakebuf_r+0x7c>)
 8003dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	9b00      	ldr	r3, [sp, #0]
 8003de8:	6163      	str	r3, [r4, #20]
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	6120      	str	r0, [r4, #16]
 8003dee:	b15b      	cbz	r3, 8003e08 <__smakebuf_r+0x74>
 8003df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003df4:	4630      	mov	r0, r6
 8003df6:	f000 fc2d 	bl	8004654 <_isatty_r>
 8003dfa:	b128      	cbz	r0, 8003e08 <__smakebuf_r+0x74>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	89a0      	ldrh	r0, [r4, #12]
 8003e0a:	4305      	orrs	r5, r0
 8003e0c:	81a5      	strh	r5, [r4, #12]
 8003e0e:	e7cd      	b.n	8003dac <__smakebuf_r+0x18>
 8003e10:	08003ba5 	.word	0x08003ba5

08003e14 <_free_r>:
 8003e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e16:	2900      	cmp	r1, #0
 8003e18:	d048      	beq.n	8003eac <_free_r+0x98>
 8003e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1e:	9001      	str	r0, [sp, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f1a1 0404 	sub.w	r4, r1, #4
 8003e26:	bfb8      	it	lt
 8003e28:	18e4      	addlt	r4, r4, r3
 8003e2a:	f000 fc35 	bl	8004698 <__malloc_lock>
 8003e2e:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <_free_r+0x9c>)
 8003e30:	9801      	ldr	r0, [sp, #4]
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	4615      	mov	r5, r2
 8003e36:	b933      	cbnz	r3, 8003e46 <_free_r+0x32>
 8003e38:	6063      	str	r3, [r4, #4]
 8003e3a:	6014      	str	r4, [r2, #0]
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e42:	f000 bc2f 	b.w	80046a4 <__malloc_unlock>
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	d90b      	bls.n	8003e62 <_free_r+0x4e>
 8003e4a:	6821      	ldr	r1, [r4, #0]
 8003e4c:	1862      	adds	r2, r4, r1
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	bf04      	itt	eq
 8003e52:	681a      	ldreq	r2, [r3, #0]
 8003e54:	685b      	ldreq	r3, [r3, #4]
 8003e56:	6063      	str	r3, [r4, #4]
 8003e58:	bf04      	itt	eq
 8003e5a:	1852      	addeq	r2, r2, r1
 8003e5c:	6022      	streq	r2, [r4, #0]
 8003e5e:	602c      	str	r4, [r5, #0]
 8003e60:	e7ec      	b.n	8003e3c <_free_r+0x28>
 8003e62:	461a      	mov	r2, r3
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b10b      	cbz	r3, 8003e6c <_free_r+0x58>
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d9fa      	bls.n	8003e62 <_free_r+0x4e>
 8003e6c:	6811      	ldr	r1, [r2, #0]
 8003e6e:	1855      	adds	r5, r2, r1
 8003e70:	42a5      	cmp	r5, r4
 8003e72:	d10b      	bne.n	8003e8c <_free_r+0x78>
 8003e74:	6824      	ldr	r4, [r4, #0]
 8003e76:	4421      	add	r1, r4
 8003e78:	1854      	adds	r4, r2, r1
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	6011      	str	r1, [r2, #0]
 8003e7e:	d1dd      	bne.n	8003e3c <_free_r+0x28>
 8003e80:	681c      	ldr	r4, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	6053      	str	r3, [r2, #4]
 8003e86:	4421      	add	r1, r4
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	e7d7      	b.n	8003e3c <_free_r+0x28>
 8003e8c:	d902      	bls.n	8003e94 <_free_r+0x80>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	6003      	str	r3, [r0, #0]
 8003e92:	e7d3      	b.n	8003e3c <_free_r+0x28>
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	1961      	adds	r1, r4, r5
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf04      	itt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	6063      	str	r3, [r4, #4]
 8003ea2:	bf04      	itt	eq
 8003ea4:	1949      	addeq	r1, r1, r5
 8003ea6:	6021      	streq	r1, [r4, #0]
 8003ea8:	6054      	str	r4, [r2, #4]
 8003eaa:	e7c7      	b.n	8003e3c <_free_r+0x28>
 8003eac:	b003      	add	sp, #12
 8003eae:	bd30      	pop	{r4, r5, pc}
 8003eb0:	20000090 	.word	0x20000090

08003eb4 <_malloc_r>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	1ccd      	adds	r5, r1, #3
 8003eb8:	f025 0503 	bic.w	r5, r5, #3
 8003ebc:	3508      	adds	r5, #8
 8003ebe:	2d0c      	cmp	r5, #12
 8003ec0:	bf38      	it	cc
 8003ec2:	250c      	movcc	r5, #12
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	db01      	blt.n	8003ece <_malloc_r+0x1a>
 8003eca:	42a9      	cmp	r1, r5
 8003ecc:	d903      	bls.n	8003ed6 <_malloc_r+0x22>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed6:	f000 fbdf 	bl	8004698 <__malloc_lock>
 8003eda:	4921      	ldr	r1, [pc, #132]	; (8003f60 <_malloc_r+0xac>)
 8003edc:	680a      	ldr	r2, [r1, #0]
 8003ede:	4614      	mov	r4, r2
 8003ee0:	b99c      	cbnz	r4, 8003f0a <_malloc_r+0x56>
 8003ee2:	4f20      	ldr	r7, [pc, #128]	; (8003f64 <_malloc_r+0xb0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b923      	cbnz	r3, 8003ef2 <_malloc_r+0x3e>
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4630      	mov	r0, r6
 8003eec:	f000 fb2a 	bl	8004544 <_sbrk_r>
 8003ef0:	6038      	str	r0, [r7, #0]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 fb25 	bl	8004544 <_sbrk_r>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d123      	bne.n	8003f46 <_malloc_r+0x92>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	4630      	mov	r0, r6
 8003f04:	f000 fbce 	bl	80046a4 <__malloc_unlock>
 8003f08:	e7e3      	b.n	8003ed2 <_malloc_r+0x1e>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	1b5b      	subs	r3, r3, r5
 8003f0e:	d417      	bmi.n	8003f40 <_malloc_r+0x8c>
 8003f10:	2b0b      	cmp	r3, #11
 8003f12:	d903      	bls.n	8003f1c <_malloc_r+0x68>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	441c      	add	r4, r3
 8003f18:	6025      	str	r5, [r4, #0]
 8003f1a:	e004      	b.n	8003f26 <_malloc_r+0x72>
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	42a2      	cmp	r2, r4
 8003f20:	bf0c      	ite	eq
 8003f22:	600b      	streq	r3, [r1, #0]
 8003f24:	6053      	strne	r3, [r2, #4]
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 fbbc 	bl	80046a4 <__malloc_unlock>
 8003f2c:	f104 000b 	add.w	r0, r4, #11
 8003f30:	1d23      	adds	r3, r4, #4
 8003f32:	f020 0007 	bic.w	r0, r0, #7
 8003f36:	1ac2      	subs	r2, r0, r3
 8003f38:	d0cc      	beq.n	8003ed4 <_malloc_r+0x20>
 8003f3a:	1a1b      	subs	r3, r3, r0
 8003f3c:	50a3      	str	r3, [r4, r2]
 8003f3e:	e7c9      	b.n	8003ed4 <_malloc_r+0x20>
 8003f40:	4622      	mov	r2, r4
 8003f42:	6864      	ldr	r4, [r4, #4]
 8003f44:	e7cc      	b.n	8003ee0 <_malloc_r+0x2c>
 8003f46:	1cc4      	adds	r4, r0, #3
 8003f48:	f024 0403 	bic.w	r4, r4, #3
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d0e3      	beq.n	8003f18 <_malloc_r+0x64>
 8003f50:	1a21      	subs	r1, r4, r0
 8003f52:	4630      	mov	r0, r6
 8003f54:	f000 faf6 	bl	8004544 <_sbrk_r>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d1dd      	bne.n	8003f18 <_malloc_r+0x64>
 8003f5c:	e7cf      	b.n	8003efe <_malloc_r+0x4a>
 8003f5e:	bf00      	nop
 8003f60:	20000090 	.word	0x20000090
 8003f64:	20000094 	.word	0x20000094

08003f68 <__sfputc_r>:
 8003f68:	6893      	ldr	r3, [r2, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	b410      	push	{r4}
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	da08      	bge.n	8003f86 <__sfputc_r+0x1e>
 8003f74:	6994      	ldr	r4, [r2, #24]
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	db01      	blt.n	8003f7e <__sfputc_r+0x16>
 8003f7a:	290a      	cmp	r1, #10
 8003f7c:	d103      	bne.n	8003f86 <__sfputc_r+0x1e>
 8003f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f82:	f7ff bc69 	b.w	8003858 <__swbuf_r>
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	1c58      	adds	r0, r3, #1
 8003f8a:	6010      	str	r0, [r2, #0]
 8003f8c:	7019      	strb	r1, [r3, #0]
 8003f8e:	4608      	mov	r0, r1
 8003f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <__sfputs_r>:
 8003f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f98:	4606      	mov	r6, r0
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	18d5      	adds	r5, r2, r3
 8003fa0:	42ac      	cmp	r4, r5
 8003fa2:	d101      	bne.n	8003fa8 <__sfputs_r+0x12>
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e007      	b.n	8003fb8 <__sfputs_r+0x22>
 8003fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fac:	463a      	mov	r2, r7
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff ffda 	bl	8003f68 <__sfputc_r>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d1f3      	bne.n	8003fa0 <__sfputs_r+0xa>
 8003fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fbc <_vfiprintf_r>:
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	460d      	mov	r5, r1
 8003fc2:	b09d      	sub	sp, #116	; 0x74
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	4698      	mov	r8, r3
 8003fc8:	4606      	mov	r6, r0
 8003fca:	b118      	cbz	r0, 8003fd4 <_vfiprintf_r+0x18>
 8003fcc:	6983      	ldr	r3, [r0, #24]
 8003fce:	b90b      	cbnz	r3, 8003fd4 <_vfiprintf_r+0x18>
 8003fd0:	f7ff fe1c 	bl	8003c0c <__sinit>
 8003fd4:	4b89      	ldr	r3, [pc, #548]	; (80041fc <_vfiprintf_r+0x240>)
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	d11b      	bne.n	8004012 <_vfiprintf_r+0x56>
 8003fda:	6875      	ldr	r5, [r6, #4]
 8003fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fde:	07d9      	lsls	r1, r3, #31
 8003fe0:	d405      	bmi.n	8003fee <_vfiprintf_r+0x32>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	059a      	lsls	r2, r3, #22
 8003fe6:	d402      	bmi.n	8003fee <_vfiprintf_r+0x32>
 8003fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fea:	f7ff fead 	bl	8003d48 <__retarget_lock_acquire_recursive>
 8003fee:	89ab      	ldrh	r3, [r5, #12]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	d501      	bpl.n	8003ff8 <_vfiprintf_r+0x3c>
 8003ff4:	692b      	ldr	r3, [r5, #16]
 8003ff6:	b9eb      	cbnz	r3, 8004034 <_vfiprintf_r+0x78>
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff fc7e 	bl	80038fc <__swsetup_r>
 8004000:	b1c0      	cbz	r0, 8004034 <_vfiprintf_r+0x78>
 8004002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004004:	07dc      	lsls	r4, r3, #31
 8004006:	d50e      	bpl.n	8004026 <_vfiprintf_r+0x6a>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	b01d      	add	sp, #116	; 0x74
 800400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004012:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <_vfiprintf_r+0x244>)
 8004014:	429d      	cmp	r5, r3
 8004016:	d101      	bne.n	800401c <_vfiprintf_r+0x60>
 8004018:	68b5      	ldr	r5, [r6, #8]
 800401a:	e7df      	b.n	8003fdc <_vfiprintf_r+0x20>
 800401c:	4b79      	ldr	r3, [pc, #484]	; (8004204 <_vfiprintf_r+0x248>)
 800401e:	429d      	cmp	r5, r3
 8004020:	bf08      	it	eq
 8004022:	68f5      	ldreq	r5, [r6, #12]
 8004024:	e7da      	b.n	8003fdc <_vfiprintf_r+0x20>
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	0598      	lsls	r0, r3, #22
 800402a:	d4ed      	bmi.n	8004008 <_vfiprintf_r+0x4c>
 800402c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800402e:	f7ff fe8c 	bl	8003d4a <__retarget_lock_release_recursive>
 8004032:	e7e9      	b.n	8004008 <_vfiprintf_r+0x4c>
 8004034:	2300      	movs	r3, #0
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	2320      	movs	r3, #32
 800403a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800403e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004042:	2330      	movs	r3, #48	; 0x30
 8004044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004208 <_vfiprintf_r+0x24c>
 8004048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800404c:	f04f 0901 	mov.w	r9, #1
 8004050:	4623      	mov	r3, r4
 8004052:	469a      	mov	sl, r3
 8004054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004058:	b10a      	cbz	r2, 800405e <_vfiprintf_r+0xa2>
 800405a:	2a25      	cmp	r2, #37	; 0x25
 800405c:	d1f9      	bne.n	8004052 <_vfiprintf_r+0x96>
 800405e:	ebba 0b04 	subs.w	fp, sl, r4
 8004062:	d00b      	beq.n	800407c <_vfiprintf_r+0xc0>
 8004064:	465b      	mov	r3, fp
 8004066:	4622      	mov	r2, r4
 8004068:	4629      	mov	r1, r5
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff ff93 	bl	8003f96 <__sfputs_r>
 8004070:	3001      	adds	r0, #1
 8004072:	f000 80aa 	beq.w	80041ca <_vfiprintf_r+0x20e>
 8004076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004078:	445a      	add	r2, fp
 800407a:	9209      	str	r2, [sp, #36]	; 0x24
 800407c:	f89a 3000 	ldrb.w	r3, [sl]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a2 	beq.w	80041ca <_vfiprintf_r+0x20e>
 8004086:	2300      	movs	r3, #0
 8004088:	f04f 32ff 	mov.w	r2, #4294967295
 800408c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004090:	f10a 0a01 	add.w	sl, sl, #1
 8004094:	9304      	str	r3, [sp, #16]
 8004096:	9307      	str	r3, [sp, #28]
 8004098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800409c:	931a      	str	r3, [sp, #104]	; 0x68
 800409e:	4654      	mov	r4, sl
 80040a0:	2205      	movs	r2, #5
 80040a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a6:	4858      	ldr	r0, [pc, #352]	; (8004208 <_vfiprintf_r+0x24c>)
 80040a8:	f7fc f89a 	bl	80001e0 <memchr>
 80040ac:	9a04      	ldr	r2, [sp, #16]
 80040ae:	b9d8      	cbnz	r0, 80040e8 <_vfiprintf_r+0x12c>
 80040b0:	06d1      	lsls	r1, r2, #27
 80040b2:	bf44      	itt	mi
 80040b4:	2320      	movmi	r3, #32
 80040b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ba:	0713      	lsls	r3, r2, #28
 80040bc:	bf44      	itt	mi
 80040be:	232b      	movmi	r3, #43	; 0x2b
 80040c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040c4:	f89a 3000 	ldrb.w	r3, [sl]
 80040c8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ca:	d015      	beq.n	80040f8 <_vfiprintf_r+0x13c>
 80040cc:	9a07      	ldr	r2, [sp, #28]
 80040ce:	4654      	mov	r4, sl
 80040d0:	2000      	movs	r0, #0
 80040d2:	f04f 0c0a 	mov.w	ip, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040dc:	3b30      	subs	r3, #48	; 0x30
 80040de:	2b09      	cmp	r3, #9
 80040e0:	d94e      	bls.n	8004180 <_vfiprintf_r+0x1c4>
 80040e2:	b1b0      	cbz	r0, 8004112 <_vfiprintf_r+0x156>
 80040e4:	9207      	str	r2, [sp, #28]
 80040e6:	e014      	b.n	8004112 <_vfiprintf_r+0x156>
 80040e8:	eba0 0308 	sub.w	r3, r0, r8
 80040ec:	fa09 f303 	lsl.w	r3, r9, r3
 80040f0:	4313      	orrs	r3, r2
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	46a2      	mov	sl, r4
 80040f6:	e7d2      	b.n	800409e <_vfiprintf_r+0xe2>
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	1d19      	adds	r1, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	9103      	str	r1, [sp, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfbb      	ittet	lt
 8004104:	425b      	neglt	r3, r3
 8004106:	f042 0202 	orrlt.w	r2, r2, #2
 800410a:	9307      	strge	r3, [sp, #28]
 800410c:	9307      	strlt	r3, [sp, #28]
 800410e:	bfb8      	it	lt
 8004110:	9204      	strlt	r2, [sp, #16]
 8004112:	7823      	ldrb	r3, [r4, #0]
 8004114:	2b2e      	cmp	r3, #46	; 0x2e
 8004116:	d10c      	bne.n	8004132 <_vfiprintf_r+0x176>
 8004118:	7863      	ldrb	r3, [r4, #1]
 800411a:	2b2a      	cmp	r3, #42	; 0x2a
 800411c:	d135      	bne.n	800418a <_vfiprintf_r+0x1ce>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	1d1a      	adds	r2, r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	9203      	str	r2, [sp, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfb8      	it	lt
 800412a:	f04f 33ff 	movlt.w	r3, #4294967295
 800412e:	3402      	adds	r4, #2
 8004130:	9305      	str	r3, [sp, #20]
 8004132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004218 <_vfiprintf_r+0x25c>
 8004136:	7821      	ldrb	r1, [r4, #0]
 8004138:	2203      	movs	r2, #3
 800413a:	4650      	mov	r0, sl
 800413c:	f7fc f850 	bl	80001e0 <memchr>
 8004140:	b140      	cbz	r0, 8004154 <_vfiprintf_r+0x198>
 8004142:	2340      	movs	r3, #64	; 0x40
 8004144:	eba0 000a 	sub.w	r0, r0, sl
 8004148:	fa03 f000 	lsl.w	r0, r3, r0
 800414c:	9b04      	ldr	r3, [sp, #16]
 800414e:	4303      	orrs	r3, r0
 8004150:	3401      	adds	r4, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	482c      	ldr	r0, [pc, #176]	; (800420c <_vfiprintf_r+0x250>)
 800415a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800415e:	2206      	movs	r2, #6
 8004160:	f7fc f83e 	bl	80001e0 <memchr>
 8004164:	2800      	cmp	r0, #0
 8004166:	d03f      	beq.n	80041e8 <_vfiprintf_r+0x22c>
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <_vfiprintf_r+0x254>)
 800416a:	bb1b      	cbnz	r3, 80041b4 <_vfiprintf_r+0x1f8>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	3307      	adds	r3, #7
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	3308      	adds	r3, #8
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417a:	443b      	add	r3, r7
 800417c:	9309      	str	r3, [sp, #36]	; 0x24
 800417e:	e767      	b.n	8004050 <_vfiprintf_r+0x94>
 8004180:	fb0c 3202 	mla	r2, ip, r2, r3
 8004184:	460c      	mov	r4, r1
 8004186:	2001      	movs	r0, #1
 8004188:	e7a5      	b.n	80040d6 <_vfiprintf_r+0x11a>
 800418a:	2300      	movs	r3, #0
 800418c:	3401      	adds	r4, #1
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0c0a 	mov.w	ip, #10
 8004196:	4620      	mov	r0, r4
 8004198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419c:	3a30      	subs	r2, #48	; 0x30
 800419e:	2a09      	cmp	r2, #9
 80041a0:	d903      	bls.n	80041aa <_vfiprintf_r+0x1ee>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c5      	beq.n	8004132 <_vfiprintf_r+0x176>
 80041a6:	9105      	str	r1, [sp, #20]
 80041a8:	e7c3      	b.n	8004132 <_vfiprintf_r+0x176>
 80041aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ae:	4604      	mov	r4, r0
 80041b0:	2301      	movs	r3, #1
 80041b2:	e7f0      	b.n	8004196 <_vfiprintf_r+0x1da>
 80041b4:	ab03      	add	r3, sp, #12
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <_vfiprintf_r+0x258>)
 80041bc:	a904      	add	r1, sp, #16
 80041be:	4630      	mov	r0, r6
 80041c0:	f3af 8000 	nop.w
 80041c4:	4607      	mov	r7, r0
 80041c6:	1c78      	adds	r0, r7, #1
 80041c8:	d1d6      	bne.n	8004178 <_vfiprintf_r+0x1bc>
 80041ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041cc:	07d9      	lsls	r1, r3, #31
 80041ce:	d405      	bmi.n	80041dc <_vfiprintf_r+0x220>
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	059a      	lsls	r2, r3, #22
 80041d4:	d402      	bmi.n	80041dc <_vfiprintf_r+0x220>
 80041d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041d8:	f7ff fdb7 	bl	8003d4a <__retarget_lock_release_recursive>
 80041dc:	89ab      	ldrh	r3, [r5, #12]
 80041de:	065b      	lsls	r3, r3, #25
 80041e0:	f53f af12 	bmi.w	8004008 <_vfiprintf_r+0x4c>
 80041e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041e6:	e711      	b.n	800400c <_vfiprintf_r+0x50>
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	462a      	mov	r2, r5
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <_vfiprintf_r+0x258>)
 80041f0:	a904      	add	r1, sp, #16
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 f880 	bl	80042f8 <_printf_i>
 80041f8:	e7e4      	b.n	80041c4 <_vfiprintf_r+0x208>
 80041fa:	bf00      	nop
 80041fc:	08004844 	.word	0x08004844
 8004200:	08004864 	.word	0x08004864
 8004204:	08004824 	.word	0x08004824
 8004208:	08004884 	.word	0x08004884
 800420c:	0800488e 	.word	0x0800488e
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f97 	.word	0x08003f97
 8004218:	0800488a 	.word	0x0800488a

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4699      	mov	r9, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800422c:	4293      	cmp	r3, r2
 800422e:	bfb8      	it	lt
 8004230:	4613      	movlt	r3, r2
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004238:	4607      	mov	r7, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc26      	bgt.n	80042b2 <_printf_common+0x96>
 8004264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004268:	1e13      	subs	r3, r2, #0
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42b      	bmi.n	80042cc <_printf_common+0xb0>
 8004274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d01e      	beq.n	80042c0 <_printf_common+0xa4>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	68e5      	ldr	r5, [r4, #12]
 8004286:	6832      	ldr	r2, [r6, #0]
 8004288:	f003 0306 	and.w	r3, r3, #6
 800428c:	2b04      	cmp	r3, #4
 800428e:	bf08      	it	eq
 8004290:	1aad      	subeq	r5, r5, r2
 8004292:	68a3      	ldr	r3, [r4, #8]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	bf0c      	ite	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	2500      	movne	r5, #0
 800429e:	4293      	cmp	r3, r2
 80042a0:	bfc4      	itt	gt
 80042a2:	1a9b      	subgt	r3, r3, r2
 80042a4:	18ed      	addgt	r5, r5, r3
 80042a6:	2600      	movs	r6, #0
 80042a8:	341a      	adds	r4, #26
 80042aa:	42b5      	cmp	r5, r6
 80042ac:	d11a      	bne.n	80042e4 <_printf_common+0xc8>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e008      	b.n	80042c4 <_printf_common+0xa8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4649      	mov	r1, r9
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c0      	blx	r8
 80042bc:	3001      	adds	r0, #1
 80042be:	d103      	bne.n	80042c8 <_printf_common+0xac>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7c6      	b.n	800425a <_printf_common+0x3e>
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	2030      	movs	r0, #48	; 0x30
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d6:	4422      	add	r2, r4
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7c7      	b.n	8004274 <_printf_common+0x58>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4622      	mov	r2, r4
 80042e8:	4649      	mov	r1, r9
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c0      	blx	r8
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0e6      	beq.n	80042c0 <_printf_common+0xa4>
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7d9      	b.n	80042aa <_printf_common+0x8e>
	...

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	460c      	mov	r4, r1
 80042fe:	4691      	mov	r9, r2
 8004300:	7e27      	ldrb	r7, [r4, #24]
 8004302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004304:	2f78      	cmp	r7, #120	; 0x78
 8004306:	4680      	mov	r8, r0
 8004308:	469a      	mov	sl, r3
 800430a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	; 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d8 	beq.w	80044ca <_printf_i+0x1d2>
 800431a:	2f58      	cmp	r7, #88	; 0x58
 800431c:	f000 80a3 	beq.w	8004466 <_printf_i+0x16e>
 8004320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a001      	add	r0, pc, #4	; (adr r0, 8004338 <_printf_i+0x40>)
 8004334:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044b1 	.word	0x080044b1
 8004368:	080043d5 	.word	0x080043d5
 800436c:	08004493 	.word	0x08004493
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044d3 	.word	0x080044d3
 800437c:	08004321 	.word	0x08004321
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	0800449b 	.word	0x0800449b
 8004390:	680b      	ldr	r3, [r1, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	600a      	str	r2, [r1, #0]
 8004398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a3      	b.n	80044ec <_printf_i+0x1f4>
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	6808      	ldr	r0, [r1, #0]
 80043a8:	062e      	lsls	r6, r5, #24
 80043aa:	f100 0304 	add.w	r3, r0, #4
 80043ae:	d50a      	bpl.n	80043c6 <_printf_i+0xce>
 80043b0:	6805      	ldr	r5, [r0, #0]
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	da03      	bge.n	80043c0 <_printf_i+0xc8>
 80043b8:	232d      	movs	r3, #45	; 0x2d
 80043ba:	426d      	negs	r5, r5
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c0:	485e      	ldr	r0, [pc, #376]	; (800453c <_printf_i+0x244>)
 80043c2:	230a      	movs	r3, #10
 80043c4:	e019      	b.n	80043fa <_printf_i+0x102>
 80043c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043ca:	6805      	ldr	r5, [r0, #0]
 80043cc:	600b      	str	r3, [r1, #0]
 80043ce:	bf18      	it	ne
 80043d0:	b22d      	sxthne	r5, r5
 80043d2:	e7ef      	b.n	80043b4 <_printf_i+0xbc>
 80043d4:	680b      	ldr	r3, [r1, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	1d18      	adds	r0, r3, #4
 80043da:	6008      	str	r0, [r1, #0]
 80043dc:	0628      	lsls	r0, r5, #24
 80043de:	d501      	bpl.n	80043e4 <_printf_i+0xec>
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	e002      	b.n	80043ea <_printf_i+0xf2>
 80043e4:	0669      	lsls	r1, r5, #25
 80043e6:	d5fb      	bpl.n	80043e0 <_printf_i+0xe8>
 80043e8:	881d      	ldrh	r5, [r3, #0]
 80043ea:	4854      	ldr	r0, [pc, #336]	; (800453c <_printf_i+0x244>)
 80043ec:	2f6f      	cmp	r7, #111	; 0x6f
 80043ee:	bf0c      	ite	eq
 80043f0:	2308      	moveq	r3, #8
 80043f2:	230a      	movne	r3, #10
 80043f4:	2100      	movs	r1, #0
 80043f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043fa:	6866      	ldr	r6, [r4, #4]
 80043fc:	60a6      	str	r6, [r4, #8]
 80043fe:	2e00      	cmp	r6, #0
 8004400:	bfa2      	ittt	ge
 8004402:	6821      	ldrge	r1, [r4, #0]
 8004404:	f021 0104 	bicge.w	r1, r1, #4
 8004408:	6021      	strge	r1, [r4, #0]
 800440a:	b90d      	cbnz	r5, 8004410 <_printf_i+0x118>
 800440c:	2e00      	cmp	r6, #0
 800440e:	d04d      	beq.n	80044ac <_printf_i+0x1b4>
 8004410:	4616      	mov	r6, r2
 8004412:	fbb5 f1f3 	udiv	r1, r5, r3
 8004416:	fb03 5711 	mls	r7, r3, r1, r5
 800441a:	5dc7      	ldrb	r7, [r0, r7]
 800441c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004420:	462f      	mov	r7, r5
 8004422:	42bb      	cmp	r3, r7
 8004424:	460d      	mov	r5, r1
 8004426:	d9f4      	bls.n	8004412 <_printf_i+0x11a>
 8004428:	2b08      	cmp	r3, #8
 800442a:	d10b      	bne.n	8004444 <_printf_i+0x14c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	07df      	lsls	r7, r3, #31
 8004430:	d508      	bpl.n	8004444 <_printf_i+0x14c>
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	6861      	ldr	r1, [r4, #4]
 8004436:	4299      	cmp	r1, r3
 8004438:	bfde      	ittt	le
 800443a:	2330      	movle	r3, #48	; 0x30
 800443c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004444:	1b92      	subs	r2, r2, r6
 8004446:	6122      	str	r2, [r4, #16]
 8004448:	f8cd a000 	str.w	sl, [sp]
 800444c:	464b      	mov	r3, r9
 800444e:	aa03      	add	r2, sp, #12
 8004450:	4621      	mov	r1, r4
 8004452:	4640      	mov	r0, r8
 8004454:	f7ff fee2 	bl	800421c <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	d14c      	bne.n	80044f6 <_printf_i+0x1fe>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	b004      	add	sp, #16
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004466:	4835      	ldr	r0, [pc, #212]	; (800453c <_printf_i+0x244>)
 8004468:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	680e      	ldr	r6, [r1, #0]
 8004470:	061f      	lsls	r7, r3, #24
 8004472:	f856 5b04 	ldr.w	r5, [r6], #4
 8004476:	600e      	str	r6, [r1, #0]
 8004478:	d514      	bpl.n	80044a4 <_printf_i+0x1ac>
 800447a:	07d9      	lsls	r1, r3, #31
 800447c:	bf44      	itt	mi
 800447e:	f043 0320 	orrmi.w	r3, r3, #32
 8004482:	6023      	strmi	r3, [r4, #0]
 8004484:	b91d      	cbnz	r5, 800448e <_printf_i+0x196>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f023 0320 	bic.w	r3, r3, #32
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	2310      	movs	r3, #16
 8004490:	e7b0      	b.n	80043f4 <_printf_i+0xfc>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	2378      	movs	r3, #120	; 0x78
 800449c:	4828      	ldr	r0, [pc, #160]	; (8004540 <_printf_i+0x248>)
 800449e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044a2:	e7e3      	b.n	800446c <_printf_i+0x174>
 80044a4:	065e      	lsls	r6, r3, #25
 80044a6:	bf48      	it	mi
 80044a8:	b2ad      	uxthmi	r5, r5
 80044aa:	e7e6      	b.n	800447a <_printf_i+0x182>
 80044ac:	4616      	mov	r6, r2
 80044ae:	e7bb      	b.n	8004428 <_printf_i+0x130>
 80044b0:	680b      	ldr	r3, [r1, #0]
 80044b2:	6826      	ldr	r6, [r4, #0]
 80044b4:	6960      	ldr	r0, [r4, #20]
 80044b6:	1d1d      	adds	r5, r3, #4
 80044b8:	600d      	str	r5, [r1, #0]
 80044ba:	0635      	lsls	r5, r6, #24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	d501      	bpl.n	80044c4 <_printf_i+0x1cc>
 80044c0:	6018      	str	r0, [r3, #0]
 80044c2:	e002      	b.n	80044ca <_printf_i+0x1d2>
 80044c4:	0671      	lsls	r1, r6, #25
 80044c6:	d5fb      	bpl.n	80044c0 <_printf_i+0x1c8>
 80044c8:	8018      	strh	r0, [r3, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	4616      	mov	r6, r2
 80044d0:	e7ba      	b.n	8004448 <_printf_i+0x150>
 80044d2:	680b      	ldr	r3, [r1, #0]
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	600a      	str	r2, [r1, #0]
 80044d8:	681e      	ldr	r6, [r3, #0]
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	2100      	movs	r1, #0
 80044de:	4630      	mov	r0, r6
 80044e0:	f7fb fe7e 	bl	80001e0 <memchr>
 80044e4:	b108      	cbz	r0, 80044ea <_printf_i+0x1f2>
 80044e6:	1b80      	subs	r0, r0, r6
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	2300      	movs	r3, #0
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	e7a8      	b.n	8004448 <_printf_i+0x150>
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	4632      	mov	r2, r6
 80044fa:	4649      	mov	r1, r9
 80044fc:	4640      	mov	r0, r8
 80044fe:	47d0      	blx	sl
 8004500:	3001      	adds	r0, #1
 8004502:	d0ab      	beq.n	800445c <_printf_i+0x164>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	079b      	lsls	r3, r3, #30
 8004508:	d413      	bmi.n	8004532 <_printf_i+0x23a>
 800450a:	68e0      	ldr	r0, [r4, #12]
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	4298      	cmp	r0, r3
 8004510:	bfb8      	it	lt
 8004512:	4618      	movlt	r0, r3
 8004514:	e7a4      	b.n	8004460 <_printf_i+0x168>
 8004516:	2301      	movs	r3, #1
 8004518:	4632      	mov	r2, r6
 800451a:	4649      	mov	r1, r9
 800451c:	4640      	mov	r0, r8
 800451e:	47d0      	blx	sl
 8004520:	3001      	adds	r0, #1
 8004522:	d09b      	beq.n	800445c <_printf_i+0x164>
 8004524:	3501      	adds	r5, #1
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	9903      	ldr	r1, [sp, #12]
 800452a:	1a5b      	subs	r3, r3, r1
 800452c:	42ab      	cmp	r3, r5
 800452e:	dcf2      	bgt.n	8004516 <_printf_i+0x21e>
 8004530:	e7eb      	b.n	800450a <_printf_i+0x212>
 8004532:	2500      	movs	r5, #0
 8004534:	f104 0619 	add.w	r6, r4, #25
 8004538:	e7f5      	b.n	8004526 <_printf_i+0x22e>
 800453a:	bf00      	nop
 800453c:	08004895 	.word	0x08004895
 8004540:	080048a6 	.word	0x080048a6

08004544 <_sbrk_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4d06      	ldr	r5, [pc, #24]	; (8004560 <_sbrk_r+0x1c>)
 8004548:	2300      	movs	r3, #0
 800454a:	4604      	mov	r4, r0
 800454c:	4608      	mov	r0, r1
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	f7fc fc36 	bl	8000dc0 <_sbrk>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_sbrk_r+0x1a>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_sbrk_r+0x1a>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000190 	.word	0x20000190

08004564 <__sread>:
 8004564:	b510      	push	{r4, lr}
 8004566:	460c      	mov	r4, r1
 8004568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456c:	f000 f8a0 	bl	80046b0 <_read_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	bfab      	itete	ge
 8004574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004576:	89a3      	ldrhlt	r3, [r4, #12]
 8004578:	181b      	addge	r3, r3, r0
 800457a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800457e:	bfac      	ite	ge
 8004580:	6563      	strge	r3, [r4, #84]	; 0x54
 8004582:	81a3      	strhlt	r3, [r4, #12]
 8004584:	bd10      	pop	{r4, pc}

08004586 <__swrite>:
 8004586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	461f      	mov	r7, r3
 800458c:	898b      	ldrh	r3, [r1, #12]
 800458e:	05db      	lsls	r3, r3, #23
 8004590:	4605      	mov	r5, r0
 8004592:	460c      	mov	r4, r1
 8004594:	4616      	mov	r6, r2
 8004596:	d505      	bpl.n	80045a4 <__swrite+0x1e>
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	2302      	movs	r3, #2
 800459e:	2200      	movs	r2, #0
 80045a0:	f000 f868 	bl	8004674 <_lseek_r>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	4632      	mov	r2, r6
 80045b2:	463b      	mov	r3, r7
 80045b4:	4628      	mov	r0, r5
 80045b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ba:	f000 b817 	b.w	80045ec <_write_r>

080045be <__sseek>:
 80045be:	b510      	push	{r4, lr}
 80045c0:	460c      	mov	r4, r1
 80045c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c6:	f000 f855 	bl	8004674 <_lseek_r>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	bf15      	itete	ne
 80045d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80045d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045da:	81a3      	strheq	r3, [r4, #12]
 80045dc:	bf18      	it	ne
 80045de:	81a3      	strhne	r3, [r4, #12]
 80045e0:	bd10      	pop	{r4, pc}

080045e2 <__sclose>:
 80045e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e6:	f000 b813 	b.w	8004610 <_close_r>
	...

080045ec <_write_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d07      	ldr	r5, [pc, #28]	; (800460c <_write_r+0x20>)
 80045f0:	4604      	mov	r4, r0
 80045f2:	4608      	mov	r0, r1
 80045f4:	4611      	mov	r1, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	602a      	str	r2, [r5, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f7fc f822 	bl	8000644 <_write>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	d102      	bne.n	800460a <_write_r+0x1e>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	b103      	cbz	r3, 800460a <_write_r+0x1e>
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	bd38      	pop	{r3, r4, r5, pc}
 800460c:	20000190 	.word	0x20000190

08004610 <_close_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d06      	ldr	r5, [pc, #24]	; (800462c <_close_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fb9b 	bl	8000d56 <_close>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_close_r+0x1a>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_close_r+0x1a>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000190 	.word	0x20000190

08004630 <_fstat_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d07      	ldr	r5, [pc, #28]	; (8004650 <_fstat_r+0x20>)
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	f7fc fb96 	bl	8000d6e <_fstat>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	d102      	bne.n	800464c <_fstat_r+0x1c>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b103      	cbz	r3, 800464c <_fstat_r+0x1c>
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	20000190 	.word	0x20000190

08004654 <_isatty_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d06      	ldr	r5, [pc, #24]	; (8004670 <_isatty_r+0x1c>)
 8004658:	2300      	movs	r3, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fc fb95 	bl	8000d8e <_isatty>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_isatty_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_isatty_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	20000190 	.word	0x20000190

08004674 <_lseek_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	; (8004694 <_lseek_r+0x20>)
 8004678:	4604      	mov	r4, r0
 800467a:	4608      	mov	r0, r1
 800467c:	4611      	mov	r1, r2
 800467e:	2200      	movs	r2, #0
 8004680:	602a      	str	r2, [r5, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	f7fc fb8e 	bl	8000da4 <_lseek>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_lseek_r+0x1e>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_lseek_r+0x1e>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	20000190 	.word	0x20000190

08004698 <__malloc_lock>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__malloc_lock+0x8>)
 800469a:	f7ff bb55 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 800469e:	bf00      	nop
 80046a0:	20000188 	.word	0x20000188

080046a4 <__malloc_unlock>:
 80046a4:	4801      	ldr	r0, [pc, #4]	; (80046ac <__malloc_unlock+0x8>)
 80046a6:	f7ff bb50 	b.w	8003d4a <__retarget_lock_release_recursive>
 80046aa:	bf00      	nop
 80046ac:	20000188 	.word	0x20000188

080046b0 <_read_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d07      	ldr	r5, [pc, #28]	; (80046d0 <_read_r+0x20>)
 80046b4:	4604      	mov	r4, r0
 80046b6:	4608      	mov	r0, r1
 80046b8:	4611      	mov	r1, r2
 80046ba:	2200      	movs	r2, #0
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7fc fb2c 	bl	8000d1c <_read>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_read_r+0x1e>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_read_r+0x1e>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	20000190 	.word	0x20000190

080046d4 <_init>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr

080046e0 <_fini>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

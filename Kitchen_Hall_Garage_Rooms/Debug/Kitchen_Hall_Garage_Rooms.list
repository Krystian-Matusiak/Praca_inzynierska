
Kitchen_Hall_Garage_Rooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000964c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a30  08009a30  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009a30  08009a30  00019a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a38  08009a38  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c20  20000090  08009ad0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb0  08009ad0  00024cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c9b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c24  00000000  00000000  00043d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  00048980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  0004a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceda  00000000  00000000  0004bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee88  00000000  00000000  00068b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a84e0  00000000  00000000  000879fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012feda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000755c  00000000  00000000  0012ff30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097d4 	.word	0x080097d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080097d4 	.word	0x080097d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_write>:
 *      Author: kus
 */

#include "LoRa.h"

int _write(int file , char *ptr , int len){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2 , ptr , len , 50);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	2332      	movs	r3, #50	; 0x32
 800058a:	68b9      	ldr	r1, [r7, #8]
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <_write+0x24>)
 800058e:	f004 ffe6 	bl	800555e <HAL_UART_Transmit>
  return len;
 8000592:	687b      	ldr	r3, [r7, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20004c18 	.word	0x20004c18

080005a0 <SPI_CS_LOW>:

void SPI_CS_LOW(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LORA_GPIO_Port, CS_LORA_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <SPI_CS_LOW+0x14>)
 80005aa:	f003 f9a7 	bl	80038fc <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <SPI_CS_HIGH>:

void SPI_CS_HIGH(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LORA_GPIO_Port, CS_LORA_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <SPI_CS_HIGH+0x14>)
 80005c2:	f003 f99b 	bl	80038fc <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <Read_Reg>:

unsigned char Read_Reg(unsigned char addr){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = addr & 0x7F;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	SPI_CS_LOW();
 80005e4:	f7ff ffdc 	bl	80005a0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , HAL_MAX_DELAY);
 80005e8:	f107 010f 	add.w	r1, r7, #15
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	2201      	movs	r2, #1
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <Read_Reg+0x48>)
 80005f4:	f003 fe6d 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80005f8:	f107 010e 	add.w	r1, r7, #14
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <Read_Reg+0x48>)
 8000604:	f003 ffa1 	bl	800454a <HAL_SPI_Receive>
	SPI_CS_HIGH();
 8000608:	f7ff ffd6 	bl	80005b8 <SPI_CS_HIGH>

	return data;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20004b78 	.word	0x20004b78

0800061c <Write_Reg>:

void Write_Reg(unsigned char addr , unsigned char value){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t Value = value;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	73bb      	strb	r3, [r7, #14]

	SPI_CS_LOW();
 800063a:	f7ff ffb1 	bl	80005a0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg,	1 , HAL_MAX_DELAY);
 800063e:	f107 010f 	add.w	r1, r7, #15
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	2201      	movs	r2, #1
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <Write_Reg+0x50>)
 800064a:	f003 fe42 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &Value,1 , HAL_MAX_DELAY);
 800064e:	f107 010e 	add.w	r1, r7, #14
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2201      	movs	r2, #1
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <Write_Reg+0x50>)
 800065a:	f003 fe3a 	bl	80042d2 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800065e:	f7ff ffab 	bl	80005b8 <SPI_CS_HIGH>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20004b78 	.word	0x20004b78

08000670 <set_OPMODE>:

void set_OPMODE(uint8_t mode){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, Read_Reg(REG_OPMODE) & ~OPMODE_MASK | mode );
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ffa8 	bl	80005d0 <Read_Reg>
 8000680:	4603      	mov	r3, r0
 8000682:	b25b      	sxtb	r3, r3
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	b25a      	sxtb	r2, r3
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	4313      	orrs	r3, r2
 8000690:	b25b      	sxtb	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ffc0 	bl	800061c <Write_Reg>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <set_LoRa_mode>:

void set_LoRa_mode(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff ffe0 	bl	8000670 <set_OPMODE>
	HAL_Delay(15);
 80006b0:	200f      	movs	r0, #15
 80006b2:	f001 ff8d 	bl	80025d0 <HAL_Delay>

	uint8_t data = OPMODE_LORA;
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, data);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff ffac 	bl	800061c <Write_Reg>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <set_Freq>:

void set_Freq(uint64_t freq){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	e9c7 0100 	strd	r0, r1, [r7]
	set_OPMODE(OPMODE_SLEEP);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ffca 	bl	8000670 <set_OPMODE>
	HAL_Delay(15);
 80006dc:	200f      	movs	r0, #15
 80006de:	f001 ff77 	bl	80025d0 <HAL_Delay>

	uint64_t frf = (( uint64_t)freq <<14 );  // freq *  2^19 / 32
 80006e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006e6:	f04f 0200 	mov.w	r2, #0
 80006ea:	f04f 0300 	mov.w	r3, #0
 80006ee:	038b      	lsls	r3, r1, #14
 80006f0:	ea43 4390 	orr.w	r3, r3, r0, lsr #18
 80006f4:	0382      	lsls	r2, r0, #14
 80006f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Write_Reg(REG_FRF_MSB, (uint8_t)(frf>>16) );
 80006fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	0c02      	lsrs	r2, r0, #16
 8000708:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800070c:	0c0b      	lsrs	r3, r1, #16
 800070e:	b2d3      	uxtb	r3, r2
 8000710:	4619      	mov	r1, r3
 8000712:	2006      	movs	r0, #6
 8000714:	f7ff ff82 	bl	800061c <Write_Reg>
	Write_Reg(REG_FRF_MID, (uint8_t)(frf>>8) );
 8000718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	0a02      	lsrs	r2, r0, #8
 8000726:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800072a:	0a0b      	lsrs	r3, r1, #8
 800072c:	b2d3      	uxtb	r3, r2
 800072e:	4619      	mov	r1, r3
 8000730:	2007      	movs	r0, #7
 8000732:	f7ff ff73 	bl	800061c <Write_Reg>
	Write_Reg(REG_FRF_LSB, (uint8_t)(frf>>0) );
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	4619      	mov	r1, r3
 800073a:	2008      	movs	r0, #8
 800073c:	f7ff ff6e 	bl	800061c <Write_Reg>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <set_config>:

void set_config(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ff8e 	bl	8000670 <set_OPMODE>
	HAL_Delay(15);
 8000754:	200f      	movs	r0, #15
 8000756:	f001 ff3b 	bl	80025d0 <HAL_Delay>

	set_LoRa_mode();
 800075a:	f7ff ffa3 	bl	80006a4 <set_LoRa_mode>

	unsigned char version = Read_Reg(REG_VERSION);
 800075e:	2042      	movs	r0, #66	; 0x42
 8000760:	f7ff ff36 	bl	80005d0 <Read_Reg>
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]

	printf("%d version \n\r", version);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4619      	mov	r1, r3
 800076c:	4819      	ldr	r0, [pc, #100]	; (80007d4 <set_config+0x8c>)
 800076e:	f008 f865 	bl	800883c <iprintf>

	Write_Reg(REG_SYNC_WORD, 0x34);
 8000772:	2134      	movs	r1, #52	; 0x34
 8000774:	2039      	movs	r0, #57	; 0x39
 8000776:	f7ff ff51 	bl	800061c <Write_Reg>


	Write_Reg(REG_MODEM_CONFIG3,0x04);
 800077a:	2104      	movs	r1, #4
 800077c:	2026      	movs	r0, #38	; 0x26
 800077e:	f7ff ff4d 	bl	800061c <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG,0x72);
 8000782:	2172      	movs	r1, #114	; 0x72
 8000784:	201d      	movs	r0, #29
 8000786:	f7ff ff49 	bl	800061c <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG2, (0x07<<4) | 0x04);
 800078a:	2174      	movs	r1, #116	; 0x74
 800078c:	201e      	movs	r0, #30
 800078e:	f7ff ff45 	bl	800061c <Write_Reg>

	Write_Reg(REG_SYMB_TIMEOUT_LSB,0x08);
 8000792:	2108      	movs	r1, #8
 8000794:	201f      	movs	r0, #31
 8000796:	f7ff ff41 	bl	800061c <Write_Reg>

	Write_Reg(REG_MAX_PAYLOAD_LENGTH, 0x80);
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	2023      	movs	r0, #35	; 0x23
 800079e:	f7ff ff3d 	bl	800061c <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, PAYLOAD_LENGTH);
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	2022      	movs	r0, #34	; 0x22
 80007a6:	f7ff ff39 	bl	800061c <Write_Reg>
	Write_Reg(REG_HOP_PERIOD, 0xFF);
 80007aa:	21ff      	movs	r1, #255	; 0xff
 80007ac:	2024      	movs	r0, #36	; 0x24
 80007ae:	f7ff ff35 	bl	800061c <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, Read_Reg(REG_FIFO_TX_BASE_AD));
 80007b2:	200e      	movs	r0, #14
 80007b4:	f7ff ff0c 	bl	80005d0 <Read_Reg>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	200d      	movs	r0, #13
 80007be:	f7ff ff2d 	bl	800061c <Write_Reg>

	Write_Reg(REG_LNA, LNA_MAX_GAIN);
 80007c2:	2123      	movs	r1, #35	; 0x23
 80007c4:	200c      	movs	r0, #12
 80007c6:	f7ff ff29 	bl	800061c <Write_Reg>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	080097ec 	.word	0x080097ec

080007d8 <LoRa_init>:

void LoRa_init(uint64_t freq){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2102      	movs	r1, #2
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <LoRa_init+0x80>)
 80007e8:	f003 f888 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f001 feef 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2102      	movs	r1, #2
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <LoRa_init+0x80>)
 80007f8:	f003 f880 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007fc:	2064      	movs	r0, #100	; 0x64
 80007fe:	f001 fee7 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <LoRa_init+0x80>)
 8000808:	f003 f878 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f001 fedf 	bl	80025d0 <HAL_Delay>

	set_Freq(freq);
 8000812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000816:	f7ff ff59 	bl	80006cc <set_Freq>
	set_config();
 800081a:	f7ff ff95 	bl	8000748 <set_config>
	set_LoRa_mode();
 800081e:	f7ff ff41 	bl	80006a4 <set_LoRa_mode>

	set_OPMODE(OPMODE_STANDBY);
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff24 	bl	8000670 <set_OPMODE>
	Write_Reg(RegPaRamp, (Read_Reg(RegPaRamp)& 0xF0) | 0x80 );
 8000828:	200a      	movs	r0, #10
 800082a:	f7ff fed1 	bl	80005d0 <Read_Reg>
 800082e:	4603      	mov	r3, r0
 8000830:	b25b      	sxtb	r3, r3
 8000832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083c:	b25b      	sxtb	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	200a      	movs	r0, #10
 8000844:	f7ff feea 	bl	800061c <Write_Reg>
	set_Power(23);
 8000848:	2017      	movs	r0, #23
 800084a:	f000 f8c7 	bl	80009dc <set_Power>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40020400 	.word	0x40020400

0800085c <Receive>:


uint8_t Receive(char *payload){
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	Write_Reg(REG_IRQ_FLAGS, 0x40);
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	2012      	movs	r0, #18
 8000868:	f7ff fed8 	bl	800061c <Write_Reg>

	int IRQ = Read_Reg(REG_IRQ_FLAGS);
 800086c:	2012      	movs	r0, #18
 800086e:	f7ff feaf 	bl	80005d0 <Read_Reg>
 8000872:	4603      	mov	r3, r0
 8000874:	613b      	str	r3, [r7, #16]

	if(( IRQ & 0x20) == 0x20){
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <Receive+0x36>
		printf("CRC error \n\r");
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <Receive+0x84>)
 8000882:	f007 ffdb 	bl	800883c <iprintf>
		Write_Reg(REG_IRQ_FLAGS, 0x20);
 8000886:	2120      	movs	r1, #32
 8000888:	2012      	movs	r0, #18
 800088a:	f7ff fec7 	bl	800061c <Write_Reg>
		return 0;
 800088e:	2300      	movs	r3, #0
 8000890:	e021      	b.n	80008d6 <Receive+0x7a>
	}
	else {
		uint8_t currentAddr = Read_Reg(REG_FIFO_RX_CURRENT_ADDR);
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff fe9c 	bl	80005d0 <Read_Reg>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedCount = Read_Reg(REG_RX_NB_BYTES);
 800089c:	2013      	movs	r0, #19
 800089e:	f7ff fe97 	bl	80005d0 <Read_Reg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73bb      	strb	r3, [r7, #14]

		Write_Reg(REG_FIFO_ADDR_PTR, currentAddr);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4619      	mov	r1, r3
 80008aa:	200d      	movs	r0, #13
 80008ac:	f7ff feb6 	bl	800061c <Write_Reg>

		for(int i = 0; i < receivedCount; i++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <Receive+0x70>
			payload[i] = (char)Read_Reg(REG_FIFO);
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	18d4      	adds	r4, r2, r3
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe87 	bl	80005d0 <Read_Reg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
		for(int i = 0; i < receivedCount; i++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <Receive+0x5a>
	}

	return 1;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	bf00      	nop
 80008e0:	080097fc 	.word	0x080097fc

080008e4 <Write_Buf>:

void Write_Buf(unsigned char addr, unsigned char *value, unsigned char len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0c4      	sub	sp, #272	; 0x110
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	463b      	mov	r3, r7
 80008ec:	6019      	str	r1, [r3, #0]
 80008ee:	4611      	mov	r1, r2
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	4602      	mov	r2, r0
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	460a      	mov	r2, r1
 80008fa:	701a      	strb	r2, [r3, #0]

	uint8_t reg = addr | 0x80;
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t buf[256];
	for (int i = 0; i < len; i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000910:	e011      	b.n	8000936 <Write_Buf+0x52>
		buf[i] = value[i];
 8000912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000916:	463a      	mov	r2, r7
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	4413      	add	r3, r2
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	f107 0208 	add.w	r2, r7, #8
 8000922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000926:	4413      	add	r3, r2
 8000928:	460a      	mov	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800092c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000930:	3301      	adds	r3, #1
 8000932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000936:	1dbb      	adds	r3, r7, #6
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800093e:	429a      	cmp	r2, r3
 8000940:	dbe7      	blt.n	8000912 <Write_Buf+0x2e>
	}

	SPI_CS_LOW();
 8000942:	f7ff fe2d 	bl	80005a0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000946:	f207 110b 	addw	r1, r7, #267	; 0x10b
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <Write_Buf+0x94>)
 8000952:	f003 fcbe 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, len, HAL_MAX_DELAY);
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29a      	uxth	r2, r3
 800095c:	f107 0108 	add.w	r1, r7, #8
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <Write_Buf+0x94>)
 8000966:	f003 fcb4 	bl	80042d2 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800096a:	f7ff fe25 	bl	80005b8 <SPI_CS_HIGH>
}
 800096e:	bf00      	nop
 8000970:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20004b78 	.word	0x20004b78

0800097c <Transmit>:

void Transmit(unsigned char *frame, unsigned char datalen) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]

	Write_Reg(REG_HOP_PERIOD,0x00);
 8000988:	2100      	movs	r1, #0
 800098a:	2024      	movs	r0, #36	; 0x24
 800098c:	f7ff fe46 	bl	800061c <Write_Reg>
	Write_Reg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8000990:	21f0      	movs	r1, #240	; 0xf0
 8000992:	2040      	movs	r0, #64	; 0x40
 8000994:	f7ff fe42 	bl	800061c <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS, 0xFF);
 8000998:	21ff      	movs	r1, #255	; 0xff
 800099a:	2012      	movs	r0, #18
 800099c:	f7ff fe3e 	bl	800061c <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS_MASK, ~IRQ_LORA_TXDONE_MASK);
 80009a0:	21f7      	movs	r1, #247	; 0xf7
 80009a2:	2011      	movs	r0, #17
 80009a4:	f7ff fe3a 	bl	800061c <Write_Reg>

	Write_Reg(REG_FIFO_TX_BASE_AD, 0x00);
 80009a8:	2100      	movs	r1, #0
 80009aa:	200e      	movs	r0, #14
 80009ac:	f7ff fe36 	bl	800061c <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, 0x00);
 80009b0:	2100      	movs	r1, #0
 80009b2:	200d      	movs	r0, #13
 80009b4:	f7ff fe32 	bl	800061c <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, datalen);
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	4619      	mov	r1, r3
 80009bc:	2022      	movs	r0, #34	; 0x22
 80009be:	f7ff fe2d 	bl	800061c <Write_Reg>

	Write_Buf(REG_FIFO, frame, datalen);
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	461a      	mov	r2, r3
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff8b 	bl	80008e4 <Write_Buf>
	set_OPMODE(OPMODE_TX);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff fe4e 	bl	8000670 <set_OPMODE>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <set_Power>:

void set_Power(int8_t pw) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if(pw >= 17) {
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	dd02      	ble.n	80009f4 <set_Power+0x18>
		pw = 15;
 80009ee:	230f      	movs	r3, #15
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e005      	b.n	8000a00 <set_Power+0x24>
	} else if(pw < 2) {
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	dc01      	bgt.n	8000a00 <set_Power+0x24>
		pw = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	71fb      	strb	r3, [r7, #7]
	}
	Write_Reg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	2009      	movs	r0, #9
 8000a14:	f7ff fe02 	bl	800061c <Write_Reg>
	Write_Reg(RegPaDac, Read_Reg(RegPaDac)|0x4);
 8000a18:	205a      	movs	r0, #90	; 0x5a
 8000a1a:	f7ff fdd9 	bl	80005d0 <Read_Reg>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	205a      	movs	r0, #90	; 0x5a
 8000a2a:	f7ff fdf7 	bl	800061c <Write_Reg>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <Send_Command>:
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void Send_Command(uint8_t command) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < 8; i ++){
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e01e      	b.n	8000a86 <Send_Command+0x4e>

		HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin, (command & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <Send_Command+0x60>)
 8000a56:	f002 ff51 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <Send_Command+0x60>)
 8000a60:	f002 ff4c 	bl	80038fc <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f001 fdb3 	bl	80025d0 <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <Send_Command+0x60>)
 8000a70:	f002 ff44 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f001 fdab 	bl	80025d0 <HAL_Delay>

		command >>= 1;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	085b      	lsrs	r3, r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < 8; i ++){
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	3301      	adds	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d9dd      	bls.n	8000a48 <Send_Command+0x10>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40020800 	.word	0x40020800

08000a9c <Write_Byte>:


void Write_Byte(uint8_t address, uint8_t value){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	481d      	ldr	r0, [pc, #116]	; (8000b28 <Write_Byte+0x8c>)
 8000ab4:	f002 ff22 	bl	80038fc <HAL_GPIO_WritePin>
	Send_Command(address);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ffbc 	bl	8000a38 <Send_Command>

	for ( uint8_t i = 0; i < 8; i ++) {
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e01e      	b.n	8000b04 <Write_Byte+0x68>
		HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin, (value & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4815      	ldr	r0, [pc, #84]	; (8000b28 <Write_Byte+0x8c>)
 8000ad4:	f002 ff12 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <Write_Byte+0x8c>)
 8000ade:	f002 ff0d 	bl	80038fc <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f001 fd74 	bl	80025d0 <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	480e      	ldr	r0, [pc, #56]	; (8000b28 <Write_Byte+0x8c>)
 8000aee:	f002 ff05 	bl	80038fc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f001 fd6c 	bl	80025d0 <HAL_Delay>

		value >>= 1;
 8000af8:	79bb      	ldrb	r3, [r7, #6]
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	71bb      	strb	r3, [r7, #6]
	for ( uint8_t i = 0; i < 8; i ++) {
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	3301      	adds	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b07      	cmp	r3, #7
 8000b08:	d9dd      	bls.n	8000ac6 <Write_Byte+0x2a>
	}

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <Write_Byte+0x8c>)
 8000b12:	f002 fef3 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin,  GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <Write_Byte+0x8c>)
 8000b1c:	f002 feee 	bl	80038fc <HAL_GPIO_WritePin>
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40020800 	.word	0x40020800

08000b2c <RTC_Init>:
	buffor[6] = BCD_to_Hex(Temp);
	Temp = Read_Byte(REG_DAY);
	buffor[7] = BCD_to_Hex(Temp);
}

void RTC_Init(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SCLK_RTC_Pin | SDA_RTC_Pin | RST_RTC_Pin;
 8000b32:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b36:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <RTC_Init+0x50>)
 8000b46:	f002 fd3d 	bl	80035c4 <HAL_GPIO_Init>

	Write_Byte(REG_CHARGER,0x00);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2090      	movs	r0, #144	; 0x90
 8000b4e:	f7ff ffa5 	bl	8000a9c <Write_Byte>

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <RTC_Init+0x50>)
 8000b5a:	f002 fecf 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <RTC_Init+0x50>)
 8000b64:	f002 feca 	bl	80038fc <HAL_GPIO_WritePin>

	DWT->CTRL |= 1 ;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <RTC_Init+0x54>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <RTC_Init+0x54>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	e0001000 	.word	0xe0001000

08000b84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000b98:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <MX_ADC1_Init+0xf0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ba8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bc6:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <MX_ADC1_Init+0xf4>)
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000be6:	f001 fd17 	bl	8002618 <HAL_ADC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f001 f8e4 	bl	8001dbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000c06:	f001 fea9 	bl	800295c <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c10:	f001 f8d4 	bl	8001dbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c14:	230b      	movs	r3, #11
 8000c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000c22:	f001 fe9b 	bl	800295c <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c2c:	f001 f8c6 	bl	8001dbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c30:	230c      	movs	r3, #12
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c34:	2303      	movs	r3, #3
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000c3e:	f001 fe8d 	bl	800295c <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000c48:	f001 f8b8 	bl	8001dbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c4c:	230d      	movs	r3, #13
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c50:	2304      	movs	r3, #4
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC1_Init+0xec>)
 8000c5a:	f001 fe7f 	bl	800295c <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c64:	f001 f8aa 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200049e0 	.word	0x200049e0
 8000c74:	40012000 	.word	0x40012000
 8000c78:	0f000001 	.word	0x0f000001

08000c7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <HAL_ADC_MspInit+0xe8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d15d      	bne.n	8000d5a <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_ADC_MspInit+0xec>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <HAL_ADC_MspInit+0xec>)
 8000ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_ADC_MspInit+0xec>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <HAL_ADC_MspInit+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <HAL_ADC_MspInit+0xec>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_ADC_MspInit+0xec>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SUN_UP_Pin|SUN_DOWN_Pin|SUN_RIGHT_Pin|SUN_LEFT_Pin;
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <HAL_ADC_MspInit+0xf0>)
 8000cea:	f002 fc6b 	bl	80035c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000cf0:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <HAL_ADC_MspInit+0xf8>)
 8000cf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d30:	f002 f95e 	bl	8002ff0 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000d3a:	f001 f83f 	bl	8001dbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_ADC_MspInit+0xf4>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2012      	movs	r0, #18
 8000d50:	f002 f917 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d54:	2012      	movs	r0, #18
 8000d56:	f002 f930 	bl	8002fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012000 	.word	0x40012000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	20004a28 	.word	0x20004a28
 8000d74:	40026410 	.word	0x40026410

08000d78 <read_data>:
int16_t  dig_P6;
int16_t  dig_P7;
int16_t  dig_P8;
int16_t  dig_P9;

int read_data( uint8_t *addr, int8_t * value , uint8_t len) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <read_data+0x4c>)
 8000d8c:	f002 fdb6 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, addr, 1, 100);
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2201      	movs	r2, #1
 8000d94:	68f9      	ldr	r1, [r7, #12]
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <read_data+0x50>)
 8000d98:	f003 fa9b 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, value, len, 100);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <read_data+0x50>)
 8000da6:	f003 fbd0 	bl	800454a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2120      	movs	r1, #32
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <read_data+0x4c>)
 8000db0:	f002 fda4 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_Delay(3);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f001 fc0b 	bl	80025d0 <HAL_Delay>
	return 1;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	20004b20 	.word	0x20004b20

08000dcc <uread_data>:

int uread_data( uint8_t *addr, uint8_t * value , uint8_t len) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2120      	movs	r1, #32
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <uread_data+0x4c>)
 8000de0:	f002 fd8c 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, addr, 1, 100);
 8000de4:	2364      	movs	r3, #100	; 0x64
 8000de6:	2201      	movs	r2, #1
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <uread_data+0x50>)
 8000dec:	f003 fa71 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, value, len, 100);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <uread_data+0x50>)
 8000dfa:	f003 fba6 	bl	800454a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2120      	movs	r1, #32
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <uread_data+0x4c>)
 8000e04:	f002 fd7a 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_Delay(3);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f001 fbe1 	bl	80025d0 <HAL_Delay>
	return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	20004b20 	.word	0x20004b20

08000e20 <setConstants>:

void setConstants(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	  uread_data(&reg_T1l, dig_T12,2);
 8000e24:	2202      	movs	r2, #2
 8000e26:	496b      	ldr	r1, [pc, #428]	; (8000fd4 <setConstants+0x1b4>)
 8000e28:	486b      	ldr	r0, [pc, #428]	; (8000fd8 <setConstants+0x1b8>)
 8000e2a:	f7ff ffcf 	bl	8000dcc <uread_data>
	  read_data(&reg_T2l, dig_T22,2);
 8000e2e:	2202      	movs	r2, #2
 8000e30:	496a      	ldr	r1, [pc, #424]	; (8000fdc <setConstants+0x1bc>)
 8000e32:	486b      	ldr	r0, [pc, #428]	; (8000fe0 <setConstants+0x1c0>)
 8000e34:	f7ff ffa0 	bl	8000d78 <read_data>
	  read_data(&reg_T3l, dig_T32,2);
 8000e38:	2202      	movs	r2, #2
 8000e3a:	496a      	ldr	r1, [pc, #424]	; (8000fe4 <setConstants+0x1c4>)
 8000e3c:	486a      	ldr	r0, [pc, #424]	; (8000fe8 <setConstants+0x1c8>)
 8000e3e:	f7ff ff9b 	bl	8000d78 <read_data>
	  uread_data(&reg_P1l, dig_P12,2);
 8000e42:	2202      	movs	r2, #2
 8000e44:	4969      	ldr	r1, [pc, #420]	; (8000fec <setConstants+0x1cc>)
 8000e46:	486a      	ldr	r0, [pc, #424]	; (8000ff0 <setConstants+0x1d0>)
 8000e48:	f7ff ffc0 	bl	8000dcc <uread_data>
	  read_data(&reg_P2l, dig_P22,2);
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4969      	ldr	r1, [pc, #420]	; (8000ff4 <setConstants+0x1d4>)
 8000e50:	4869      	ldr	r0, [pc, #420]	; (8000ff8 <setConstants+0x1d8>)
 8000e52:	f7ff ff91 	bl	8000d78 <read_data>
	  read_data(&reg_P3l, dig_P32,2);
 8000e56:	2202      	movs	r2, #2
 8000e58:	4968      	ldr	r1, [pc, #416]	; (8000ffc <setConstants+0x1dc>)
 8000e5a:	4869      	ldr	r0, [pc, #420]	; (8001000 <setConstants+0x1e0>)
 8000e5c:	f7ff ff8c 	bl	8000d78 <read_data>
	  read_data(&reg_P4l, dig_P42,2);
 8000e60:	2202      	movs	r2, #2
 8000e62:	4968      	ldr	r1, [pc, #416]	; (8001004 <setConstants+0x1e4>)
 8000e64:	4868      	ldr	r0, [pc, #416]	; (8001008 <setConstants+0x1e8>)
 8000e66:	f7ff ff87 	bl	8000d78 <read_data>
	  read_data(&reg_P5l, dig_P52,2);
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4967      	ldr	r1, [pc, #412]	; (800100c <setConstants+0x1ec>)
 8000e6e:	4868      	ldr	r0, [pc, #416]	; (8001010 <setConstants+0x1f0>)
 8000e70:	f7ff ff82 	bl	8000d78 <read_data>
	  read_data(&reg_P6l, dig_P62,2);
 8000e74:	2202      	movs	r2, #2
 8000e76:	4967      	ldr	r1, [pc, #412]	; (8001014 <setConstants+0x1f4>)
 8000e78:	4867      	ldr	r0, [pc, #412]	; (8001018 <setConstants+0x1f8>)
 8000e7a:	f7ff ff7d 	bl	8000d78 <read_data>
	  read_data(&reg_P7l, dig_P72,2);
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4966      	ldr	r1, [pc, #408]	; (800101c <setConstants+0x1fc>)
 8000e82:	4867      	ldr	r0, [pc, #412]	; (8001020 <setConstants+0x200>)
 8000e84:	f7ff ff78 	bl	8000d78 <read_data>
	  read_data(&reg_P8l, dig_P82,2);
 8000e88:	2202      	movs	r2, #2
 8000e8a:	4966      	ldr	r1, [pc, #408]	; (8001024 <setConstants+0x204>)
 8000e8c:	4866      	ldr	r0, [pc, #408]	; (8001028 <setConstants+0x208>)
 8000e8e:	f7ff ff73 	bl	8000d78 <read_data>
	  read_data(&reg_P9l, dig_P92,2);
 8000e92:	2202      	movs	r2, #2
 8000e94:	4965      	ldr	r1, [pc, #404]	; (800102c <setConstants+0x20c>)
 8000e96:	4866      	ldr	r0, [pc, #408]	; (8001030 <setConstants+0x210>)
 8000e98:	f7ff ff6e 	bl	8000d78 <read_data>

	  dig_T1 = (uint16_t) ((uint16_t)dig_T12[0] | ( (uint16_t) ((uint16_t)dig_T12[1]<<8)));
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <setConstants+0x1b4>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <setConstants+0x1b4>)
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b60      	ldr	r3, [pc, #384]	; (8001034 <setConstants+0x214>)
 8000eb2:	801a      	strh	r2, [r3, #0]
	  dig_T2 = (int16_t)  ((int16_t)dig_T22[0]  | ( (int16_t)  ((int16_t)dig_T22[1]<<8)));
 8000eb4:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <setConstants+0x1bc>)
 8000eb6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <setConstants+0x1bc>)
 8000ebe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	4b5b      	ldr	r3, [pc, #364]	; (8001038 <setConstants+0x218>)
 8000ecc:	801a      	strh	r2, [r3, #0]
	  dig_T3 = (int16_t)  ((int16_t)dig_T32[0]  | ( (int16_t)  ((int16_t)dig_T32[1]<<8)));
 8000ece:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <setConstants+0x1c4>)
 8000ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <setConstants+0x1c4>)
 8000ed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	4b55      	ldr	r3, [pc, #340]	; (800103c <setConstants+0x21c>)
 8000ee6:	801a      	strh	r2, [r3, #0]
	  dig_P1 = (uint16_t) ((uint16_t)dig_P12[0] | ( (uint16_t) ((uint16_t)dig_P12[1]<<8)));
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <setConstants+0x1cc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <setConstants+0x1cc>)
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <setConstants+0x220>)
 8000efe:	801a      	strh	r2, [r3, #0]
	  dig_P2 = (int16_t)  ((int16_t)dig_P22[0]  | ( (int16_t)  ((int16_t)dig_P22[1]<<8)));
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <setConstants+0x1d4>)
 8000f02:	f993 3000 	ldrsb.w	r3, [r3]
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <setConstants+0x1d4>)
 8000f0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <setConstants+0x224>)
 8000f18:	801a      	strh	r2, [r3, #0]
	  dig_P3 = (int16_t)  ((int16_t)dig_P32[0]  | ( (int16_t)  ((int16_t)dig_P32[1]<<8)));
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <setConstants+0x1dc>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <setConstants+0x1dc>)
 8000f24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b45      	ldr	r3, [pc, #276]	; (8001048 <setConstants+0x228>)
 8000f32:	801a      	strh	r2, [r3, #0]
	  dig_P4 = (int16_t)  ((int16_t)dig_P42[0]  | ( (int16_t)  ((int16_t)dig_P42[1]<<8)));
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <setConstants+0x1e4>)
 8000f36:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <setConstants+0x1e4>)
 8000f3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <setConstants+0x22c>)
 8000f4c:	801a      	strh	r2, [r3, #0]
	  dig_P5 = (int16_t)  ((int16_t)dig_P52[0]  | ( (int16_t)  ((int16_t)dig_P52[1]<<8)));
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <setConstants+0x1ec>)
 8000f50:	f993 3000 	ldrsb.w	r3, [r3]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <setConstants+0x1ec>)
 8000f58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <setConstants+0x230>)
 8000f66:	801a      	strh	r2, [r3, #0]
	  dig_P6 = (int16_t)  ((int16_t)dig_P62[0]  | ( (int16_t)  ((int16_t)dig_P62[1]<<8)));
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <setConstants+0x1f4>)
 8000f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <setConstants+0x1f4>)
 8000f72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <setConstants+0x234>)
 8000f80:	801a      	strh	r2, [r3, #0]
	  dig_P7 = (int16_t)  ((int16_t)dig_P72[0]  | ( (int16_t)  ((int16_t)dig_P72[1]<<8)));
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <setConstants+0x1fc>)
 8000f84:	f993 3000 	ldrsb.w	r3, [r3]
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <setConstants+0x1fc>)
 8000f8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <setConstants+0x238>)
 8000f9a:	801a      	strh	r2, [r3, #0]
	  dig_P8 = (int16_t)  ((int16_t)dig_P82[0]  | ( (int16_t)  ((int16_t)dig_P82[1]<<8)));
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <setConstants+0x204>)
 8000f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <setConstants+0x204>)
 8000fa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <setConstants+0x23c>)
 8000fb4:	801a      	strh	r2, [r3, #0]
	  dig_P9 = (int16_t)  ((int16_t)dig_P92[0]  | ( (int16_t)  ((int16_t)dig_P92[1]<<8)));
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <setConstants+0x20c>)
 8000fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <setConstants+0x20c>)
 8000fc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <setConstants+0x240>)
 8000fce:	801a      	strh	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20004ab0 	.word	0x20004ab0
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20004a8c 	.word	0x20004a8c
 8000fe0:	20000001 	.word	0x20000001
 8000fe4:	20004a98 	.word	0x20004a98
 8000fe8:	20000002 	.word	0x20000002
 8000fec:	20004aa0 	.word	0x20004aa0
 8000ff0:	20000003 	.word	0x20000003
 8000ff4:	20004a90 	.word	0x20004a90
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20004a94 	.word	0x20004a94
 8001000:	20000005 	.word	0x20000005
 8001004:	20004ac4 	.word	0x20004ac4
 8001008:	20000006 	.word	0x20000006
 800100c:	20004ab4 	.word	0x20004ab4
 8001010:	20000007 	.word	0x20000007
 8001014:	20004aac 	.word	0x20004aac
 8001018:	20000008 	.word	0x20000008
 800101c:	20004abc 	.word	0x20004abc
 8001020:	20000009 	.word	0x20000009
 8001024:	20004aa4 	.word	0x20004aa4
 8001028:	2000000a 	.word	0x2000000a
 800102c:	20004aa8 	.word	0x20004aa8
 8001030:	2000000b 	.word	0x2000000b
 8001034:	20004a8a 	.word	0x20004a8a
 8001038:	20004a8e 	.word	0x20004a8e
 800103c:	20004ac0 	.word	0x20004ac0
 8001040:	20004ab6 	.word	0x20004ab6
 8001044:	20004a9a 	.word	0x20004a9a
 8001048:	20004ab8 	.word	0x20004ab8
 800104c:	20004a9c 	.word	0x20004a9c
 8001050:	20004aaa 	.word	0x20004aaa
 8001054:	20004ac6 	.word	0x20004ac6
 8001058:	20004a88 	.word	0x20004a88
 800105c:	20004aba 	.word	0x20004aba
 8001060:	20004abe 	.word	0x20004abe

08001064 <BMP280_setup>:


void BMP280_setup(){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2120      	movs	r1, #32
 800106e:	4839      	ldr	r0, [pc, #228]	; (8001154 <BMP280_setup+0xf0>)
 8001070:	f002 fc44 	bl	80038fc <HAL_GPIO_WritePin>

	uint8_t ctrl_meas_addr = 0x74;
 8001074:	2374      	movs	r3, #116	; 0x74
 8001076:	727b      	strb	r3, [r7, #9]
	uint8_t osrs_p = OSRS_P; // skipped / x1 / x2 / x4 / x8 / x16
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
	uint8_t osrs_t = OSRS_P; // skipped / x1 / x2 / x4 / x8 / x16
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
	uint8_t mode = MODE;    // sleep (00) / forced (01 / 10) / normal (11)
 8001080:	2311      	movs	r3, #17
 8001082:	737b      	strb	r3, [r7, #13]

	uint8_t t_sb_filtr_addr = 0x75;
 8001084:	2375      	movs	r3, #117	; 0x75
 8001086:	723b      	strb	r3, [r7, #8]
	uint8_t spi3w_en = SPI3W_EN;
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
	uint8_t filter= FILTER ;  // off / 2 / 4 / 8 / 16
 800108c:	2310      	movs	r3, #16
 800108e:	72fb      	strb	r3, [r7, #11]
	uint8_t t_sb= T_SB; // 0.5 / 62.5 / 125 / 250 / 500 / 1000 / 2000 / 4000
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	72bb      	strb	r3, [r7, #10]

//	uint8_t rst_addr= 0xE0;
//	uint8_t rst = 0x00;

	uint8_t read_F4=0xF4;
 8001094:	23f4      	movs	r3, #244	; 0xf4
 8001096:	71fb      	strb	r3, [r7, #7]
	uint8_t czytaj=0;
 8001098:	2300      	movs	r3, #0
 800109a:	71bb      	strb	r3, [r7, #6]

	uint8_t ctrl_meas = mode | osrs_t | osrs_t;
 800109c:	7b7a      	ldrb	r2, [r7, #13]
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	717b      	strb	r3, [r7, #5]
	uint8_t tsb_filtr_msk = t_sb | filter | spi3w_en;
 80010a6:	7aba      	ldrb	r2, [r7, #10]
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	713b      	strb	r3, [r7, #4]

	// MODE
	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	4826      	ldr	r0, [pc, #152]	; (8001154 <BMP280_setup+0xf0>)
 80010bc:	f002 fc1e 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &read_F4, 1, 100);
 80010c0:	1df9      	adds	r1, r7, #7
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	2201      	movs	r2, #1
 80010c6:	4824      	ldr	r0, [pc, #144]	; (8001158 <BMP280_setup+0xf4>)
 80010c8:	f003 f903 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &czytaj, 1, 200);
 80010cc:	1db9      	adds	r1, r7, #6
 80010ce:	23c8      	movs	r3, #200	; 0xc8
 80010d0:	2201      	movs	r2, #1
 80010d2:	4821      	ldr	r0, [pc, #132]	; (8001158 <BMP280_setup+0xf4>)
 80010d4:	f003 fa39 	bl	800454a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	481d      	ldr	r0, [pc, #116]	; (8001154 <BMP280_setup+0xf0>)
 80010de:	f002 fc0d 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2120      	movs	r1, #32
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <BMP280_setup+0xf0>)
 80010e8:	f002 fc08 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &ctrl_meas_addr, 1, 200);
 80010ec:	f107 0109 	add.w	r1, r7, #9
 80010f0:	23c8      	movs	r3, #200	; 0xc8
 80010f2:	2201      	movs	r2, #1
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <BMP280_setup+0xf4>)
 80010f6:	f003 f8ec 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &ctrl_meas, 1, 200);
 80010fa:	1d79      	adds	r1, r7, #5
 80010fc:	23c8      	movs	r3, #200	; 0xc8
 80010fe:	2201      	movs	r2, #1
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <BMP280_setup+0xf4>)
 8001102:	f003 f8e6 	bl	80042d2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <BMP280_setup+0xf0>)
 800110c:	f002 fbf6 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001110:	2005      	movs	r0, #5
 8001112:	f001 fa5d 	bl	80025d0 <HAL_Delay>


	// Filter and time standby
	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2120      	movs	r1, #32
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <BMP280_setup+0xf0>)
 800111c:	f002 fbee 	bl	80038fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &t_sb_filtr_addr, 1, 200);
 8001120:	f107 0108 	add.w	r1, r7, #8
 8001124:	23c8      	movs	r3, #200	; 0xc8
 8001126:	2201      	movs	r2, #1
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <BMP280_setup+0xf4>)
 800112a:	f003 f8d2 	bl	80042d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &tsb_filtr_msk, 1, 200);
 800112e:	1d39      	adds	r1, r7, #4
 8001130:	23c8      	movs	r3, #200	; 0xc8
 8001132:	2201      	movs	r2, #1
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <BMP280_setup+0xf4>)
 8001136:	f003 f8cc 	bl	80042d2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2120      	movs	r1, #32
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <BMP280_setup+0xf0>)
 8001140:	f002 fbdc 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001144:	2005      	movs	r0, #5
 8001146:	f001 fa43 	bl	80025d0 <HAL_Delay>

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020800 	.word	0x40020800
 8001158:	20004b20 	.word	0x20004b20

0800115c <get_temp_press>:

void get_temp_press(int32_t * temp , uint32_t * press){
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	; 0x40
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	  uint8_t P[3];
	  int32_t PP=0;
 8001166:	2300      	movs	r3, #0
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c

	  uint8_t T[3];
	  int32_t TT=0;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38

	  uint8_t A[6];
	  int32_t At=0;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
	  int32_t Ap=0;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
	  int32_t var1;
	  int32_t var2;
	  int32_t Var1;
	  int32_t Var2;

	  int32_t t_fine=0;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c

	  uint8_t reg_press = BMP280_REG_PRESS_MSB;
 800117a:	23f7      	movs	r3, #247	; 0xf7
 800117c:	72fb      	strb	r3, [r7, #11]
	  uint8_t reg_temp = BMP280_REG_TEMP_MSB;
 800117e:	23fa      	movs	r3, #250	; 0xfa
 8001180:	72bb      	strb	r3, [r7, #10]

	  // Ciśnienie
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	48b9      	ldr	r0, [pc, #740]	; (800146c <get_temp_press+0x310>)
 8001188:	f002 fbb8 	bl	80038fc <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, &reg_press, 1, 200);
 800118c:	f107 010b 	add.w	r1, r7, #11
 8001190:	23c8      	movs	r3, #200	; 0xc8
 8001192:	2201      	movs	r2, #1
 8001194:	48b6      	ldr	r0, [pc, #728]	; (8001470 <get_temp_press+0x314>)
 8001196:	f003 f89c 	bl	80042d2 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, &P[0], 3, 200);
 800119a:	f107 0118 	add.w	r1, r7, #24
 800119e:	23c8      	movs	r3, #200	; 0xc8
 80011a0:	2203      	movs	r2, #3
 80011a2:	48b3      	ldr	r0, [pc, #716]	; (8001470 <get_temp_press+0x314>)
 80011a4:	f003 f9d1 	bl	800454a <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2120      	movs	r1, #32
 80011ac:	48af      	ldr	r0, [pc, #700]	; (800146c <get_temp_press+0x310>)
 80011ae:	f002 fba5 	bl	80038fc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80011b2:	20c8      	movs	r0, #200	; 0xc8
 80011b4:	f001 fa0c 	bl	80025d0 <HAL_Delay>
//	  HAL_SPI_Receive(&hspi3, &zero, 3, 200);
//	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
//	  HAL_Delay(100);

	  // All
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2120      	movs	r1, #32
 80011bc:	48ab      	ldr	r0, [pc, #684]	; (800146c <get_temp_press+0x310>)
 80011be:	f002 fb9d 	bl	80038fc <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, &reg_press, 1, 200);
 80011c2:	f107 010b 	add.w	r1, r7, #11
 80011c6:	23c8      	movs	r3, #200	; 0xc8
 80011c8:	2201      	movs	r2, #1
 80011ca:	48a9      	ldr	r0, [pc, #676]	; (8001470 <get_temp_press+0x314>)
 80011cc:	f003 f881 	bl	80042d2 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, &A[0], 6, 200);
 80011d0:	f107 010c 	add.w	r1, r7, #12
 80011d4:	23c8      	movs	r3, #200	; 0xc8
 80011d6:	2206      	movs	r2, #6
 80011d8:	48a5      	ldr	r0, [pc, #660]	; (8001470 <get_temp_press+0x314>)
 80011da:	f003 f9b6 	bl	800454a <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2120      	movs	r1, #32
 80011e2:	48a2      	ldr	r0, [pc, #648]	; (800146c <get_temp_press+0x310>)
 80011e4:	f002 fb8a 	bl	80038fc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80011e8:	20c8      	movs	r0, #200	; 0xc8
 80011ea:	f001 f9f1 	bl	80025d0 <HAL_Delay>


	  // Temperatura
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	489e      	ldr	r0, [pc, #632]	; (800146c <get_temp_press+0x310>)
 80011f4:	f002 fb82 	bl	80038fc <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, &reg_temp, 1, 200);
 80011f8:	f107 010a 	add.w	r1, r7, #10
 80011fc:	23c8      	movs	r3, #200	; 0xc8
 80011fe:	2201      	movs	r2, #1
 8001200:	489b      	ldr	r0, [pc, #620]	; (8001470 <get_temp_press+0x314>)
 8001202:	f003 f866 	bl	80042d2 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, &T[0], 3, 200);
 8001206:	f107 0114 	add.w	r1, r7, #20
 800120a:	23c8      	movs	r3, #200	; 0xc8
 800120c:	2203      	movs	r2, #3
 800120e:	4898      	ldr	r0, [pc, #608]	; (8001470 <get_temp_press+0x314>)
 8001210:	f003 f99b 	bl	800454a <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4894      	ldr	r0, [pc, #592]	; (800146c <get_temp_press+0x310>)
 800121a:	f002 fb6f 	bl	80038fc <HAL_GPIO_WritePin>


	  PP = ((uint32_t)( (uint16_t) ((uint16_t)P[0] << 8) | (uint16_t)P[1]) << 4) | ((uint16_t)P[2] >>4    ) ;
 800121e:	7e3b      	ldrb	r3, [r7, #24]
 8001220:	b29b      	uxth	r3, r3
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	7e7b      	ldrb	r3, [r7, #25]
 800122a:	4313      	orrs	r3, r2
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	7eba      	ldrb	r2, [r7, #26]
 8001230:	0912      	lsrs	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	4313      	orrs	r3, r2
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
	  TT = ((uint32_t)( (uint16_t) ((uint16_t)T[0] << 8) | (uint16_t)T[1]) << 4) | (uint16_t)(T[2] >>4    ) ;
 8001238:	7d3b      	ldrb	r3, [r7, #20]
 800123a:	b29b      	uxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	7d7b      	ldrb	r3, [r7, #21]
 8001244:	4313      	orrs	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	7dba      	ldrb	r2, [r7, #22]
 800124a:	0912      	lsrs	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	4313      	orrs	r3, r2
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
	  At = ((uint32_t)( (uint16_t) ((uint16_t)A[3] << 8) | (uint16_t)A[4]) << 4) | (uint16_t)(A[5] >>4    ) ;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	b29b      	uxth	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	7c3b      	ldrb	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	7c7a      	ldrb	r2, [r7, #17]
 8001264:	0912      	lsrs	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	4313      	orrs	r3, r2
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
	  Ap = ((uint32_t)( (uint16_t) ((uint16_t)A[0] << 8) | (uint16_t)A[1]) << 4) | (uint16_t)(A[2] >>4    ) ;
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	b29b      	uxth	r3, r3
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	4313      	orrs	r3, r2
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	7bba      	ldrb	r2, [r7, #14]
 800127e:	0912      	lsrs	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	4313      	orrs	r3, r2
 8001284:	633b      	str	r3, [r7, #48]	; 0x30

	  HAL_Delay(300);
 8001286:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800128a:	f001 f9a1 	bl	80025d0 <HAL_Delay>
//	  dig_T1 = 28704;
//	  dig_T2 = 26435;
//	  dig_T3 = -1000;
//   TEMP

	  var1 = ((((TT>>3)-((int32_t)dig_T1<<1))) *((int32_t)dig_T2))>>11;
 800128e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001290:	10da      	asrs	r2, r3, #3
 8001292:	4b78      	ldr	r3, [pc, #480]	; (8001474 <get_temp_press+0x318>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	4a77      	ldr	r2, [pc, #476]	; (8001478 <get_temp_press+0x31c>)
 800129c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	12db      	asrs	r3, r3, #11
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
	  var2 = (((((TT>>4) - ((int32_t)dig_T1))*((TT>>4)-((int32_t)dig_T1))) >> 12)*((int32_t)dig_T3))>>14;
 80012a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012aa:	111b      	asrs	r3, r3, #4
 80012ac:	4a71      	ldr	r2, [pc, #452]	; (8001474 <get_temp_press+0x318>)
 80012ae:	8812      	ldrh	r2, [r2, #0]
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012b4:	1112      	asrs	r2, r2, #4
 80012b6:	496f      	ldr	r1, [pc, #444]	; (8001474 <get_temp_press+0x318>)
 80012b8:	8809      	ldrh	r1, [r1, #0]
 80012ba:	1a52      	subs	r2, r2, r1
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	131b      	asrs	r3, r3, #12
 80012c2:	4a6e      	ldr	r2, [pc, #440]	; (800147c <get_temp_press+0x320>)
 80012c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	139b      	asrs	r3, r3, #14
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
	  t_fine = var1+var2;
 80012d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	4413      	add	r3, r2
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *temp = (t_fine*5 + 128) >> 8;
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3380      	adds	r3, #128	; 0x80
 80012e2:	121a      	asrs	r2, r3, #8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
	  *temp = *temp / 100;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a64      	ldr	r2, [pc, #400]	; (8001480 <get_temp_press+0x324>)
 80012ee:	fb82 1203 	smull	r1, r2, r2, r3
 80012f2:	1152      	asrs	r2, r2, #5
 80012f4:	17db      	asrs	r3, r3, #31
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]

//	  PRESS

	  Var1 = (((int32_t)t_fine)/2) - (int32_t)64000;
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	0fda      	lsrs	r2, r3, #31
 8001300:	4413      	add	r3, r2
 8001302:	105b      	asrs	r3, r3, #1
 8001304:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001308:	623b      	str	r3, [r7, #32]
	  Var2 = (((Var1/4) * (Var1/4)) / 2048 ) * ((int32_t)dig_P6);
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da00      	bge.n	8001312 <get_temp_press+0x1b6>
 8001310:	3303      	adds	r3, #3
 8001312:	109b      	asrs	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <get_temp_press+0x1c2>
 800131c:	3303      	adds	r3, #3
 800131e:	109b      	asrs	r3, r3, #2
 8001320:	fb03 f302 	mul.w	r3, r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	da01      	bge.n	800132c <get_temp_press+0x1d0>
 8001328:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800132c:	12db      	asrs	r3, r3, #11
 800132e:	461a      	mov	r2, r3
 8001330:	4b54      	ldr	r3, [pc, #336]	; (8001484 <get_temp_press+0x328>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	fb03 f302 	mul.w	r3, r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
	  Var2 = Var2 + ((Var1*((int32_t)dig_P5))<<1);
 800133c:	4b52      	ldr	r3, [pc, #328]	; (8001488 <get_temp_press+0x32c>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	461a      	mov	r2, r3
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	fb03 f302 	mul.w	r3, r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	61fb      	str	r3, [r7, #28]
	  Var2 = (Var2>>2)+(((int32_t)dig_P4)<<16);
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	109a      	asrs	r2, r3, #2
 8001356:	4b4d      	ldr	r3, [pc, #308]	; (800148c <get_temp_press+0x330>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	4413      	add	r3, r2
 8001360:	61fb      	str	r3, [r7, #28]
	  Var1 = (((dig_P3 * (((Var1>>2) * (Var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) * Var1)>>1))>>18;
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <get_temp_press+0x334>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	4619      	mov	r1, r3
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	109b      	asrs	r3, r3, #2
 800136e:	6a3a      	ldr	r2, [r7, #32]
 8001370:	1092      	asrs	r2, r2, #2
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	135b      	asrs	r3, r3, #13
 8001378:	fb03 f301 	mul.w	r3, r3, r1
 800137c:	10da      	asrs	r2, r3, #3
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <get_temp_press+0x338>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	4619      	mov	r1, r3
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	fb03 f301 	mul.w	r3, r3, r1
 800138c:	105b      	asrs	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	149b      	asrs	r3, r3, #18
 8001392:	623b      	str	r3, [r7, #32]
	  Var1 = ((((32768+Var1))*((int32_t)dig_P1))>>15);
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <get_temp_press+0x33c>)
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	13db      	asrs	r3, r3, #15
 80013a4:	623b      	str	r3, [r7, #32]
//	  if (Var1 == 0){
//		  return ; // avoid exception caused by division by zero
//	  }
	  *press = (((uint32_t)(  ((int32_t)1048576)-PP )-(Var2>>12)))*3125;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	131b      	asrs	r3, r3, #12
 80013aa:	461a      	mov	r2, r3
 80013ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ae:	4413      	add	r3, r2
 80013b0:	4a3a      	ldr	r2, [pc, #232]	; (800149c <get_temp_press+0x340>)
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80013ba:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	6013      	str	r3, [r2, #0]
	  if (*press < 0x80000000) {
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db08      	blt.n	80013dc <get_temp_press+0x280>
		  *press = (*press << 1) / ((uint32_t)Var1);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	005a      	lsls	r2, r3, #1
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <get_temp_press+0x290>
	  }
	  else{
		  *press = (*press / (uint32_t)Var1) * 2;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	005a      	lsls	r2, r3, #1
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	601a      	str	r2, [r3, #0]
	  }
	  Var1 = (((int32_t)dig_P9) * ((int32_t)(((*press>>3) * (*press>>3))>>13)))>>12;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <get_temp_press+0x344>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	4619      	mov	r1, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	08d2      	lsrs	r2, r2, #3
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	0b5b      	lsrs	r3, r3, #13
 8001406:	fb03 f301 	mul.w	r3, r3, r1
 800140a:	131b      	asrs	r3, r3, #12
 800140c:	623b      	str	r3, [r7, #32]
	  Var2 = (((int32_t)(*press)/4) * ((int32_t)dig_P8))/8192;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da00      	bge.n	8001418 <get_temp_press+0x2bc>
 8001416:	3303      	adds	r3, #3
 8001418:	109b      	asrs	r3, r3, #2
 800141a:	461a      	mov	r2, r3
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <get_temp_press+0x348>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	fb03 f302 	mul.w	r3, r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	da02      	bge.n	8001430 <get_temp_press+0x2d4>
 800142a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800142e:	331f      	adds	r3, #31
 8001430:	135b      	asrs	r3, r3, #13
 8001432:	61fb      	str	r3, [r7, #28]
	  *press = (uint32_t)((int32_t)*press + ((Var1 + Var2 + dig_P7) >> 4));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <get_temp_press+0x34c>)
 8001442:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001446:	4413      	add	r3, r2
 8001448:	111b      	asrs	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	461a      	mov	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	601a      	str	r2, [r3, #0]
	  *press = *press/100;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <get_temp_press+0x324>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	095a      	lsrs	r2, r3, #5
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
//	  printf(" T: ( %d , %d , %d ) \r\n", T[0] , T[1] , T[2] );
//	  printf(" AP: ( %d , %d , %d ) \r\n", A[0] , A[1] , A[2] );
//	  printf(" AT: ( %d , %d , %d ) \r\n", A[3] , A[4] , A[5] );
//	  printf(" CISNIENIE : %d hPa \r\n", (int)PP );
//	  printf(" TEMPERATURA: %d *C \r\n", (int)TT );
}
 8001462:	bf00      	nop
 8001464:	3740      	adds	r7, #64	; 0x40
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020800 	.word	0x40020800
 8001470:	20004b20 	.word	0x20004b20
 8001474:	20004a8a 	.word	0x20004a8a
 8001478:	20004a8e 	.word	0x20004a8e
 800147c:	20004ac0 	.word	0x20004ac0
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	20004ac6 	.word	0x20004ac6
 8001488:	20004aaa 	.word	0x20004aaa
 800148c:	20004a9c 	.word	0x20004a9c
 8001490:	20004ab8 	.word	0x20004ab8
 8001494:	20004a9a 	.word	0x20004a9a
 8001498:	20004ab6 	.word	0x20004ab6
 800149c:	fffff3cb 	.word	0xfffff3cb
 80014a0:	20004abe 	.word	0x20004abe
 80014a4:	20004aba 	.word	0x20004aba
 80014a8:	20004a88 	.word	0x20004a88

080014ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_DMA_Init+0x3c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <MX_DMA_Init+0x3c>)
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_DMA_Init+0x3c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	2038      	movs	r0, #56	; 0x38
 80014d4:	f001 fd55 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014d8:	2038      	movs	r0, #56	; 0x38
 80014da:	f001 fd6e 	bl	8002fba <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <MX_FREERTOS_Init+0x18>)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_FREERTOS_Init+0x1c>)
 80014f6:	f004 fb55 	bl	8005ba4 <osThreadNew>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <MX_FREERTOS_Init+0x20>)
 80014fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	08009954 	.word	0x08009954
 8001508:	08001511 	.word	0x08001511
 800150c:	20004ac8 	.word	0x20004ac8

08001510 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001518:	2001      	movs	r0, #1
 800151a:	f004 fbd5 	bl	8005cc8 <osDelay>
 800151e:	e7fb      	b.n	8001518 <StartDefaultTask+0x8>

08001520 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <MX_GPIO_Init+0x158>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <MX_GPIO_Init+0x158>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <MX_GPIO_Init+0x158>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b48      	ldr	r3, [pc, #288]	; (8001678 <MX_GPIO_Init+0x158>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a47      	ldr	r2, [pc, #284]	; (8001678 <MX_GPIO_Init+0x158>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <MX_GPIO_Init+0x158>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <MX_GPIO_Init+0x158>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a40      	ldr	r2, [pc, #256]	; (8001678 <MX_GPIO_Init+0x158>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <MX_GPIO_Init+0x158>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <MX_GPIO_Init+0x158>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a39      	ldr	r2, [pc, #228]	; (8001678 <MX_GPIO_Init+0x158>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <MX_GPIO_Init+0x158>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_BMP_Pin|SCLK_RTC_Pin|SDA_RTC_Pin|RST_RTC_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80015ac:	4833      	ldr	r0, [pc, #204]	; (800167c <MX_GPIO_Init+0x15c>)
 80015ae:	f002 f9a5 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LORA_Pin|RST_Pin|CS_PRESS_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f240 4103 	movw	r1, #1027	; 0x403
 80015b8:	4831      	ldr	r0, [pc, #196]	; (8001680 <MX_GPIO_Init+0x160>)
 80015ba:	f002 f99f 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LIGHT_KIT_Pin|LIGHT_HALL_Pin|LIGHT_GAR_Pin|CM_BUZZER_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 80015c4:	482f      	ldr	r0, [pc, #188]	; (8001684 <MX_GPIO_Init+0x164>)
 80015c6:	f002 f999 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAR_Pin;
 80015ca:	2310      	movs	r3, #16
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAR_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4827      	ldr	r0, [pc, #156]	; (800167c <MX_GPIO_Init+0x15c>)
 80015de:	f001 fff1 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_BMP_Pin|SCLK_RTC_Pin|SDA_RTC_Pin|RST_RTC_Pin;
 80015e2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4820      	ldr	r0, [pc, #128]	; (800167c <MX_GPIO_Init+0x15c>)
 80015fc:	f001 ffe2 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_LORA_Pin|RST_Pin|CS_PRESS_Pin;
 8001600:	f240 4303 	movw	r3, #1027	; 0x403
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <MX_GPIO_Init+0x160>)
 800161a:	f001 ffd3 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800161e:	2304      	movs	r3, #4
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_GPIO_Init+0x160>)
 8001632:	f001 ffc7 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = MOTION_KIT_Pin|MOTION_HALL_Pin|MOTION_GAR_Pin|CMS_Pin
 8001636:	f24a 3380 	movw	r3, #41856	; 0xa380
 800163a:	617b      	str	r3, [r7, #20]
                          |DOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_GPIO_Init+0x164>)
 800164c:	f001 ffba 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LIGHT_KIT_Pin|LIGHT_HALL_Pin|LIGHT_GAR_Pin|CM_BUZZER_Pin;
 8001650:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_GPIO_Init+0x164>)
 800166a:	f001 ffab 	bl	80035c4 <HAL_GPIO_Init>

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	40020400 	.word	0x40020400
 8001684:	40021000 	.word	0x40021000

08001688 <servo_init>:
}Servo;

Servo Top;
Servo Bottom;

void servo_init(){
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	Top.Kp = 1;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <servo_init+0x4c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
	Top.Ki = 1;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <servo_init+0x4c>)
 8001694:	2201      	movs	r2, #1
 8001696:	705a      	strb	r2, [r3, #1]
	Top.Kd = 1;
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <servo_init+0x4c>)
 800169a:	2201      	movs	r2, #1
 800169c:	709a      	strb	r2, [r3, #2]
	Top.error = 0;
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <servo_init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	815a      	strh	r2, [r3, #10]
	Top.prev_error = 0;
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <servo_init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	819a      	strh	r2, [r3, #12]


	Bottom.Kp = 1;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <servo_init+0x50>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
	Bottom.Ki = 1;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <servo_init+0x50>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	705a      	strb	r2, [r3, #1]
	Bottom.Kd = 1;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <servo_init+0x50>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	709a      	strb	r2, [r3, #2]
	Bottom.error = 0;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <servo_init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	815a      	strh	r2, [r3, #10]
	Bottom.prev_error = 0;
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <servo_init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	819a      	strh	r2, [r3, #12]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20004afc 	.word	0x20004afc
 80016d8:	20004ae4 	.word	0x20004ae4

080016dc <light_kitchen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void light_kitchen	(void *pvParameters){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	while(1){

		isKitchenEmpty = HAL_GPIO_ReadPin(MOTION_KIT_GPIO_Port, MOTION_KIT_Pin);
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	4815      	ldr	r0, [pc, #84]	; (800173c <light_kitchen+0x60>)
 80016e8:	f002 f8f0 	bl	80038cc <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <light_kitchen+0x64>)
 80016f2:	701a      	strb	r2, [r3, #0]

		if( !isKitchenEmpty ){
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <light_kitchen+0x64>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <light_kitchen+0x3c>
			HAL_GPIO_WritePin(LIGHT_KIT_GPIO_Port, LIGHT_KIT_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <light_kitchen+0x60>)
 8001704:	f002 f8fa 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<4);
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <light_kitchen+0x68>)
 800170a:	7a9b      	ldrb	r3, [r3, #10]
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <light_kitchen+0x68>)
 8001714:	729a      	strb	r2, [r3, #10]
 8001716:	e00c      	b.n	8001732 <light_kitchen+0x56>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_KIT_GPIO_Port, LIGHT_KIT_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <light_kitchen+0x60>)
 8001720:	f002 f8ec 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<4);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <light_kitchen+0x68>)
 8001726:	7a9b      	ldrb	r3, [r3, #10]
 8001728:	f023 0310 	bic.w	r3, r3, #16
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <light_kitchen+0x68>)
 8001730:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 8001732:	2014      	movs	r0, #20
 8001734:	f005 fa5a 	bl	8006bec <vTaskDelay>
		isKitchenEmpty = HAL_GPIO_ReadPin(MOTION_KIT_GPIO_Port, MOTION_KIT_Pin);
 8001738:	e7d4      	b.n	80016e4 <light_kitchen+0x8>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	200000ac 	.word	0x200000ac
 8001744:	20000010 	.word	0x20000010

08001748 <light_hall>:

	}
	vTaskDelete(NULL);
}

void light_hall		(void *pvParameters){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	while(1){

		isHallEmpty = HAL_GPIO_ReadPin(MOTION_HALL_GPIO_Port, MOTION_HALL_Pin);
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	4814      	ldr	r0, [pc, #80]	; (80017a8 <light_hall+0x60>)
 8001756:	f002 f8b9 	bl	80038cc <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <light_hall+0x64>)
 8001760:	701a      	strb	r2, [r3, #0]

		if( !isHallEmpty ){
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <light_hall+0x64>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <light_hall+0x3e>
			HAL_GPIO_WritePin(LIGHT_HALL_GPIO_Port, LIGHT_HALL_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <light_hall+0x60>)
 8001772:	f002 f8c3 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<3);
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <light_hall+0x68>)
 8001778:	7a9b      	ldrb	r3, [r3, #10]
 800177a:	f043 0308 	orr.w	r3, r3, #8
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <light_hall+0x68>)
 8001782:	729a      	strb	r2, [r3, #10]
 8001784:	e00c      	b.n	80017a0 <light_hall+0x58>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_HALL_GPIO_Port, LIGHT_HALL_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <light_hall+0x60>)
 800178e:	f002 f8b5 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<3);
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <light_hall+0x68>)
 8001794:	7a9b      	ldrb	r3, [r3, #10]
 8001796:	f023 0308 	bic.w	r3, r3, #8
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <light_hall+0x68>)
 800179e:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 80017a0:	2014      	movs	r0, #20
 80017a2:	f005 fa23 	bl	8006bec <vTaskDelay>
		isHallEmpty = HAL_GPIO_ReadPin(MOTION_HALL_GPIO_Port, MOTION_HALL_Pin);
 80017a6:	e7d3      	b.n	8001750 <light_hall+0x8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	200000ad 	.word	0x200000ad
 80017b0:	20000010 	.word	0x20000010

080017b4 <light_garage>:
	}
	vTaskDelete(NULL);
}

void light_garage	(void *pvParameters){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	while(1){

		isGarageEmpty = HAL_GPIO_ReadPin(MOTION_GAR_GPIO_Port, MOTION_GAR_Pin);
 80017bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c0:	4814      	ldr	r0, [pc, #80]	; (8001814 <light_garage+0x60>)
 80017c2:	f002 f883 	bl	80038cc <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <light_garage+0x64>)
 80017cc:	701a      	strb	r2, [r3, #0]

		if( !isGarageEmpty ){
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <light_garage+0x64>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <light_garage+0x3e>
			HAL_GPIO_WritePin(LIGHT_GAR_GPIO_Port, LIGHT_GAR_Pin, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <light_garage+0x60>)
 80017de:	f002 f88d 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<2);
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <light_garage+0x68>)
 80017e4:	7a9b      	ldrb	r3, [r3, #10]
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <light_garage+0x68>)
 80017ee:	729a      	strb	r2, [r3, #10]
 80017f0:	e00c      	b.n	800180c <light_garage+0x58>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_GAR_GPIO_Port, LIGHT_GAR_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <light_garage+0x60>)
 80017fa:	f002 f87f 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<2);
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <light_garage+0x68>)
 8001800:	7a9b      	ldrb	r3, [r3, #10]
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <light_garage+0x68>)
 800180a:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 800180c:	2014      	movs	r0, #20
 800180e:	f005 f9ed 	bl	8006bec <vTaskDelay>
		isGarageEmpty = HAL_GPIO_ReadPin(MOTION_GAR_GPIO_Port, MOTION_GAR_Pin);
 8001812:	e7d3      	b.n	80017bc <light_garage+0x8>
 8001814:	40021000 	.word	0x40021000
 8001818:	200000ae 	.word	0x200000ae
 800181c:	20000010 	.word	0x20000010

08001820 <carbon_sensor>:

	}
	vTaskDelete(NULL);
}

void carbon_sensor	(void *pvParameters){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	while(1){

		isCMSensor = HAL_GPIO_ReadPin(CMS_GPIO_Port, CMS_Pin);
 8001828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182c:	4814      	ldr	r0, [pc, #80]	; (8001880 <carbon_sensor+0x60>)
 800182e:	f002 f84d 	bl	80038cc <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <carbon_sensor+0x64>)
 8001838:	701a      	strb	r2, [r3, #0]

		if( !isCMSensor ){
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <carbon_sensor+0x64>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <carbon_sensor+0x3e>
			HAL_GPIO_WritePin(CM_BUZZER_GPIO_Port, CM_BUZZER_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <carbon_sensor+0x60>)
 800184a:	f002 f857 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<1);
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <carbon_sensor+0x68>)
 8001850:	7a9b      	ldrb	r3, [r3, #10]
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <carbon_sensor+0x68>)
 800185a:	729a      	strb	r2, [r3, #10]
 800185c:	e00c      	b.n	8001878 <carbon_sensor+0x58>
		}
		else{
			HAL_GPIO_WritePin(CM_BUZZER_GPIO_Port, CM_BUZZER_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001864:	4806      	ldr	r0, [pc, #24]	; (8001880 <carbon_sensor+0x60>)
 8001866:	f002 f849 	bl	80038fc <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<1);
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <carbon_sensor+0x68>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	f023 0302 	bic.w	r3, r3, #2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <carbon_sensor+0x68>)
 8001876:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001878:	200a      	movs	r0, #10
 800187a:	f005 f9b7 	bl	8006bec <vTaskDelay>
		isCMSensor = HAL_GPIO_ReadPin(CMS_GPIO_Port, CMS_Pin);
 800187e:	e7d3      	b.n	8001828 <carbon_sensor+0x8>
 8001880:	40021000 	.word	0x40021000
 8001884:	200000b0 	.word	0x200000b0
 8001888:	20000010 	.word	0x20000010

0800188c <clock>:
	}
	vTaskDelete(NULL);
}

void clock			(void *pvParameters){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
//
//		hours = buffor[4];
//		minutes = buffor[5];
//		seconds = buffor[6];

		year = 21;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <clock+0x88>)
 8001896:	2215      	movs	r2, #21
 8001898:	701a      	strb	r2, [r3, #0]
		month = 8;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <clock+0x8c>)
 800189c:	2208      	movs	r2, #8
 800189e:	701a      	strb	r2, [r3, #0]
		day = 24;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <clock+0x90>)
 80018a2:	2218      	movs	r2, #24
 80018a4:	701a      	strb	r2, [r3, #0]

		hours = 9;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <clock+0x94>)
 80018a8:	2209      	movs	r2, #9
 80018aa:	701a      	strb	r2, [r3, #0]
		minutes = 1;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <clock+0x98>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]

		tx_frame[4] = hours;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <clock+0x94>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <clock+0x9c>)
 80018b8:	711a      	strb	r2, [r3, #4]
		tx_frame[5] = minutes;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <clock+0x98>)
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <clock+0x9c>)
 80018c0:	715a      	strb	r2, [r3, #5]
		tx_frame[6] = seconds;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <clock+0xa0>)
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <clock+0x9c>)
 80018c8:	719a      	strb	r2, [r3, #6]
		tx_frame[7] = day;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <clock+0x90>)
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <clock+0x9c>)
 80018d0:	71da      	strb	r2, [r3, #7]
		tx_frame[8] = month;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <clock+0x8c>)
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <clock+0x9c>)
 80018d8:	721a      	strb	r2, [r3, #8]
		tx_frame[9] = year;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <clock+0x88>)
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <clock+0x9c>)
 80018e0:	725a      	strb	r2, [r3, #9]
		seconds ++;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <clock+0xa0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <clock+0xa0>)
 80018ec:	701a      	strb	r2, [r3, #0]
		if(seconds == 60){
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <clock+0xa0>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b3c      	cmp	r3, #60	; 0x3c
 80018f4:	d108      	bne.n	8001908 <clock+0x7c>
			seconds=0;
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <clock+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
			minutes++;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <clock+0x98>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <clock+0x98>)
 8001906:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay( 500 / portTICK_PERIOD_MS);
 8001908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800190c:	f005 f96e 	bl	8006bec <vTaskDelay>
		year = 21;
 8001910:	e7c0      	b.n	8001894 <clock+0x8>
 8001912:	bf00      	nop
 8001914:	200000b6 	.word	0x200000b6
 8001918:	200000b5 	.word	0x200000b5
 800191c:	200000b4 	.word	0x200000b4
 8001920:	200000b2 	.word	0x200000b2
 8001924:	200000b3 	.word	0x200000b3
 8001928:	20000010 	.word	0x20000010
 800192c:	2000000c 	.word	0x2000000c

08001930 <door>:
	}
	vTaskDelete(NULL);
}

void door 			(void *pvParameters){
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	while(1){
		isDoorClosed = HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin);
 8001938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193c:	480e      	ldr	r0, [pc, #56]	; (8001978 <door+0x48>)
 800193e:	f001 ffc5 	bl	80038cc <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <door+0x4c>)
 8001948:	701a      	strb	r2, [r3, #0]
		if( !isCar ){
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <door+0x50>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d107      	bne.n	8001962 <door+0x32>
			tx_frame[10] = tx_frame[10] | (1<<5);
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <door+0x54>)
 8001954:	7a9b      	ldrb	r3, [r3, #10]
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <door+0x54>)
 800195e:	729a      	strb	r2, [r3, #10]
 8001960:	e006      	b.n	8001970 <door+0x40>
		}
		else{
			tx_frame[10] = tx_frame[10] & ~(1<<5);
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <door+0x54>)
 8001964:	7a9b      	ldrb	r3, [r3, #10]
 8001966:	f023 0320 	bic.w	r3, r3, #32
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <door+0x54>)
 800196e:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 50 / portTICK_PERIOD_MS);
 8001970:	2032      	movs	r0, #50	; 0x32
 8001972:	f005 f93b 	bl	8006bec <vTaskDelay>
		isDoorClosed = HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin);
 8001976:	e7df      	b.n	8001938 <door+0x8>
 8001978:	40021000 	.word	0x40021000
 800197c:	200000b1 	.word	0x200000b1
 8001980:	200000af 	.word	0x200000af
 8001984:	20000010 	.word	0x20000010

08001988 <car>:
	}
	vTaskDelete(NULL);
}

void car 			(void *pvParameters){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	while(1){
		isCar = HAL_GPIO_ReadPin(CAR_GPIO_Port, CAR_Pin);
 8001990:	2110      	movs	r1, #16
 8001992:	4811      	ldr	r0, [pc, #68]	; (80019d8 <car+0x50>)
 8001994:	f001 ff9a 	bl	80038cc <HAL_GPIO_ReadPin>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <car+0x54>)
 800199e:	701a      	strb	r2, [r3, #0]
		vTaskDelay( 300 / portTICK_PERIOD_MS);
 80019a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019a4:	f005 f922 	bl	8006bec <vTaskDelay>
		if( isDoorClosed )
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <car+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <car+0x38>
			tx_frame[10] = tx_frame[10] | 1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <car+0x5c>)
 80019b2:	7a9b      	ldrb	r3, [r3, #10]
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <car+0x5c>)
 80019bc:	729a      	strb	r2, [r3, #10]
 80019be:	e006      	b.n	80019ce <car+0x46>
		else
			tx_frame[10] = tx_frame[10] & ~1;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <car+0x5c>)
 80019c2:	7a9b      	ldrb	r3, [r3, #10]
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <car+0x5c>)
 80019cc:	729a      	strb	r2, [r3, #10]
		vTaskDelay( 50 / portTICK_PERIOD_MS);
 80019ce:	2032      	movs	r0, #50	; 0x32
 80019d0:	f005 f90c 	bl	8006bec <vTaskDelay>
		isCar = HAL_GPIO_ReadPin(CAR_GPIO_Port, CAR_Pin);
 80019d4:	e7dc      	b.n	8001990 <car+0x8>
 80019d6:	bf00      	nop
 80019d8:	40020800 	.word	0x40020800
 80019dc:	200000af 	.word	0x200000af
 80019e0:	200000b1 	.word	0x200000b1
 80019e4:	20000010 	.word	0x20000010

080019e8 <pressure>:
	}
	vTaskDelete(NULL);
}

void pressure		(void *pvParameters){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	while(1){
		get_temp_press( &temp, &press);
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <pressure+0x3c>)
 80019f2:	480d      	ldr	r0, [pc, #52]	; (8001a28 <pressure+0x40>)
 80019f4:	f7ff fbb2 	bl	800115c <get_temp_press>
		tx_frame[1] = press;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <pressure+0x3c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <pressure+0x44>)
 8001a00:	705a      	strb	r2, [r3, #1]
		tx_frame[3] = temp;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <pressure+0x40>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <pressure+0x44>)
 8001a0a:	70da      	strb	r2, [r3, #3]
		printf("temp=%d \t cis=%d \r\n" , (int)temp , (int)press);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <pressure+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <pressure+0x3c>)
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <pressure+0x48>)
 8001a18:	f006 ff10 	bl	800883c <iprintf>
		vTaskDelay( 80 / portTICK_PERIOD_MS);
 8001a1c:	2050      	movs	r0, #80	; 0x50
 8001a1e:	f005 f8e5 	bl	8006bec <vTaskDelay>
		get_temp_press( &temp, &press);
 8001a22:	e7e5      	b.n	80019f0 <pressure+0x8>
 8001a24:	20004b18 	.word	0x20004b18
 8001a28:	20004af8 	.word	0x20004af8
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	08009818 	.word	0x08009818

08001a34 <TX_radio>:
	vTaskDelete(NULL);
}


int cnt=0;
void TX_radio(void *pvParameters){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	while(1){

		set_OPMODE(OPMODE_TX);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f7fe fe17 	bl	8000670 <set_OPMODE>
		vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f005 f8d2 	bl	8006bec <vTaskDelay>
		Transmit(tx_frame, sizeof(tx_frame));
 8001a48:	210b      	movs	r1, #11
 8001a4a:	4812      	ldr	r0, [pc, #72]	; (8001a94 <TX_radio+0x60>)
 8001a4c:	f7fe ff96 	bl	800097c <Transmit>

		printf("Wyslano \r\n");
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <TX_radio+0x64>)
 8001a52:	f006 ff79 	bl	8008948 <puts>

		curr_dev++;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <TX_radio+0x68>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <TX_radio+0x68>)
 8001a60:	701a      	strb	r2, [r3, #0]
		if(curr_dev == end){
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <TX_radio+0x68>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d108      	bne.n	8001a7c <TX_radio+0x48>
			curr_dev = begin;
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <TX_radio+0x68>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			curr_dev++;
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <TX_radio+0x68>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <TX_radio+0x68>)
 8001a7a:	701a      	strb	r2, [r3, #0]
		}

		vTaskResume(rx_handle);
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <TX_radio+0x6c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f005 f98f 	bl	8006da4 <vTaskResume>
		vTaskSuspend( NULL );
 8001a86:	2000      	movs	r0, #0
 8001a88:	f005 f8e4 	bl	8006c54 <vTaskSuspend>
		vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f005 f8ad 	bl	8006bec <vTaskDelay>
		set_OPMODE(OPMODE_TX);
 8001a92:	e7d3      	b.n	8001a3c <TX_radio+0x8>
 8001a94:	20000010 	.word	0x20000010
 8001a98:	0800982c 	.word	0x0800982c
 8001a9c:	200000c3 	.word	0x200000c3
 8001aa0:	20004b10 	.word	0x20004b10

08001aa4 <RX_radio>:
	}
	vTaskDelete(NULL);
}


void RX_radio(void *pvParameters){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	while(1){
		vTaskSuspend(tx_handle);
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <RX_radio+0x98>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 f8cf 	bl	8006c54 <vTaskSuspend>

		set_OPMODE(OPMODE_RX);
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f7fe fdda 	bl	8000670 <set_OPMODE>
		vTaskDelay( 1 / portTICK_PERIOD_MS);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f005 f895 	bl	8006bec <vTaskDelay>

		if( HAL_GPIO_ReadPin(DIO0_GPIO_Port, DIO0_Pin) == GPIO_PIN_SET ){
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	481e      	ldr	r0, [pc, #120]	; (8001b40 <RX_radio+0x9c>)
 8001ac6:	f001 ff01 	bl	80038cc <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d12d      	bne.n	8001b2c <RX_radio+0x88>
			printf("Carrier found. \r\n");
 8001ad0:	481c      	ldr	r0, [pc, #112]	; (8001b44 <RX_radio+0xa0>)
 8001ad2:	f006 ff39 	bl	8008948 <puts>
			Receive(rx_frame);
 8001ad6:	481c      	ldr	r0, [pc, #112]	; (8001b48 <RX_radio+0xa4>)
 8001ad8:	f7fe fec0 	bl	800085c <Receive>
			if( rx_frame[0] == 0x03 ){
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <RX_radio+0xa4>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d10a      	bne.n	8001afa <RX_radio+0x56>
				printf("dev=%d \t humid=%d \t data=%d \r\n",rx_frame[0] , rx_frame[1], rx_frame[2] );
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <RX_radio+0xa4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <RX_radio+0xa4>)
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <RX_radio+0xa4>)
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	4815      	ldr	r0, [pc, #84]	; (8001b4c <RX_radio+0xa8>)
 8001af6:	f006 fea1 	bl	800883c <iprintf>
			}
			if( rx_frame[0] == 0x01 && rx_frame[1] == STM32F411_DEVICE ){
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <RX_radio+0xa4>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d117      	bne.n	8001b32 <RX_radio+0x8e>
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <RX_radio+0xa4>)
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d113      	bne.n	8001b32 <RX_radio+0x8e>
				printf("Transmit start \r\n" );
 8001b0a:	4811      	ldr	r0, [pc, #68]	; (8001b50 <RX_radio+0xac>)
 8001b0c:	f006 ff1c 	bl	8008948 <puts>
				vTaskResume(tx_handle);
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <RX_radio+0x98>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f005 f945 	bl	8006da4 <vTaskResume>
				vTaskSuspend( NULL );
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f005 f89a 	bl	8006c54 <vTaskSuspend>
				vTaskResume(tx_handle);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <RX_radio+0x98>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 f93d 	bl	8006da4 <vTaskResume>
 8001b2a:	e002      	b.n	8001b32 <RX_radio+0x8e>
			}
		}
		else{
			printf("No carrier found. \r\n");
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <RX_radio+0xb0>)
 8001b2e:	f006 ff0b 	bl	8008948 <puts>
//			vTaskResume(tx_handle);
//			vTaskSuspend( NULL );
//			vTaskResume(tx_handle);
//		}

		vTaskDelay( 200 / portTICK_PERIOD_MS);
 8001b32:	20c8      	movs	r0, #200	; 0xc8
 8001b34:	f005 f85a 	bl	8006bec <vTaskDelay>
		vTaskSuspend(tx_handle);
 8001b38:	e7b8      	b.n	8001aac <RX_radio+0x8>
 8001b3a:	bf00      	nop
 8001b3c:	20004ad4 	.word	0x20004ad4
 8001b40:	40020400 	.word	0x40020400
 8001b44:	08009838 	.word	0x08009838
 8001b48:	200000b8 	.word	0x200000b8
 8001b4c:	0800984c 	.word	0x0800984c
 8001b50:	0800986c 	.word	0x0800986c
 8001b54:	08009880 	.word	0x08009880

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f000 fcc5 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f8cd 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f7ff fcdb 	bl	8001520 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b6a:	f000 f92d 	bl	8001dc8 <MX_SPI1_Init>
  MX_DMA_Init();
 8001b6e:	f7ff fc9d 	bl	80014ac <MX_DMA_Init>
  MX_ADC1_Init();
 8001b72:	f7ff f807 	bl	8000b84 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001b76:	f000 fc1d 	bl	80023b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001b7a:	f000 fb2f 	bl	80021dc <MX_TIM1_Init>
  MX_SPI3_Init();
 8001b7e:	f000 f959 	bl	8001e34 <MX_SPI3_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_ADC_Start_DMA(&hadc1, ph_resis, 4);

  // Setting up BMP280
  BMP280_setup();
 8001b82:	f7ff fa6f 	bl	8001064 <BMP280_setup>
  setConstants();
 8001b86:	f7ff f94b 	bl	8000e20 <setConstants>

  // Setting up Real Time Clock
  RTC_Init();
 8001b8a:	f7fe ffcf 	bl	8000b2c <RTC_Init>

  servo_init();
 8001b8e:	f7ff fd7b 	bl	8001688 <servo_init>

  // Setting up LoRa
  LoRa_init(868);
 8001b92:	f44f 7059 	mov.w	r0, #868	; 0x364
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	f7fe fe1d 	bl	80007d8 <LoRa_init>
  tx_frame[0] = 0x02;
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <main+0x12c>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	701a      	strb	r2, [r3, #0]

//  setConstants();
//  BMP280_setup();

  xTaskCreate( light_kitchen	, "LIGHT_KITCHEN_TASK"		, 100, NULL, 1, &light_kit_handle );
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <main+0x130>)
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	2264      	movs	r2, #100	; 0x64
 8001bb0:	4936      	ldr	r1, [pc, #216]	; (8001c8c <main+0x134>)
 8001bb2:	4837      	ldr	r0, [pc, #220]	; (8001c90 <main+0x138>)
 8001bb4:	f004 fed5 	bl	8006962 <xTaskCreate>
  xTaskCreate( light_hall		, "LIGHT_HALL_TASK"			, 100, NULL, 1, &light_hall_handle );
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <main+0x13c>)
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2264      	movs	r2, #100	; 0x64
 8001bc4:	4934      	ldr	r1, [pc, #208]	; (8001c98 <main+0x140>)
 8001bc6:	4835      	ldr	r0, [pc, #212]	; (8001c9c <main+0x144>)
 8001bc8:	f004 fecb 	bl	8006962 <xTaskCreate>
  xTaskCreate( light_garage		, "LIGHT_GARAGE_TASK"		, 100, NULL, 1, &light_gar_handle );
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <main+0x148>)
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2264      	movs	r2, #100	; 0x64
 8001bd8:	4932      	ldr	r1, [pc, #200]	; (8001ca4 <main+0x14c>)
 8001bda:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <main+0x150>)
 8001bdc:	f004 fec1 	bl	8006962 <xTaskCreate>
//
  xTaskCreate( carbon_sensor	, "CARBON_SENSOR_TASK" 		, 120, NULL, 1, &carbon_sensor_handle );
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <main+0x154>)
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2301      	movs	r3, #1
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2300      	movs	r3, #0
 8001bea:	2278      	movs	r2, #120	; 0x78
 8001bec:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <main+0x158>)
 8001bee:	4831      	ldr	r0, [pc, #196]	; (8001cb4 <main+0x15c>)
 8001bf0:	f004 feb7 	bl	8006962 <xTaskCreate>
  xTaskCreate( pressure			, "PRESSURE_TASK"			, 200, NULL, 1, &pressure_handle );
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <main+0x160>)
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	22c8      	movs	r2, #200	; 0xc8
 8001c00:	492e      	ldr	r1, [pc, #184]	; (8001cbc <main+0x164>)
 8001c02:	482f      	ldr	r0, [pc, #188]	; (8001cc0 <main+0x168>)
 8001c04:	f004 fead 	bl	8006962 <xTaskCreate>
//
  xTaskCreate( clock			, "CLOCK_TASK"				, 200, NULL, 1, &clock_handle );
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <main+0x16c>)
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2300      	movs	r3, #0
 8001c12:	22c8      	movs	r2, #200	; 0xc8
 8001c14:	492c      	ldr	r1, [pc, #176]	; (8001cc8 <main+0x170>)
 8001c16:	482d      	ldr	r0, [pc, #180]	; (8001ccc <main+0x174>)
 8001c18:	f004 fea3 	bl	8006962 <xTaskCreate>
  xTaskCreate( door				, "DOOR_TASK"				, 120, NULL, 1, &door_handle );
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <main+0x178>)
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	2278      	movs	r2, #120	; 0x78
 8001c28:	492a      	ldr	r1, [pc, #168]	; (8001cd4 <main+0x17c>)
 8001c2a:	482b      	ldr	r0, [pc, #172]	; (8001cd8 <main+0x180>)
 8001c2c:	f004 fe99 	bl	8006962 <xTaskCreate>
  xTaskCreate( car				, "CAR_TASK"				, 120, NULL, 1, &car_handle );
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <main+0x184>)
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2278      	movs	r2, #120	; 0x78
 8001c3c:	4928      	ldr	r1, [pc, #160]	; (8001ce0 <main+0x188>)
 8001c3e:	4829      	ldr	r0, [pc, #164]	; (8001ce4 <main+0x18c>)
 8001c40:	f004 fe8f 	bl	8006962 <xTaskCreate>

  xTaskCreate( TX_radio			, "RADIO_TRANSMIT_TASK"		, 200, NULL, 1, &tx_handle );
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <main+0x190>)
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	22c8      	movs	r2, #200	; 0xc8
 8001c50:	4926      	ldr	r1, [pc, #152]	; (8001cec <main+0x194>)
 8001c52:	4827      	ldr	r0, [pc, #156]	; (8001cf0 <main+0x198>)
 8001c54:	f004 fe85 	bl	8006962 <xTaskCreate>
  xTaskCreate( RX_radio			, "RADIO_RECEIVE_TASK"		, 200, NULL, 1, &rx_handle );
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <main+0x19c>)
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	22c8      	movs	r2, #200	; 0xc8
 8001c64:	4924      	ldr	r1, [pc, #144]	; (8001cf8 <main+0x1a0>)
 8001c66:	4825      	ldr	r0, [pc, #148]	; (8001cfc <main+0x1a4>)
 8001c68:	f004 fe7b 	bl	8006962 <xTaskCreate>

  vTaskStartScheduler();
 8001c6c:	f005 f8f8 	bl	8006e60 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c70:	f003 ff4e 	bl	8005b10 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c74:	f7ff fc3a 	bl	80014ec <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001c78:	f003 ff6e 	bl	8005b58 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001c7c:	200a      	movs	r0, #10
 8001c7e:	f004 ffb5 	bl	8006bec <vTaskDelay>
 8001c82:	e7fb      	b.n	8001c7c <main+0x124>
 8001c84:	20000010 	.word	0x20000010
 8001c88:	20004ad0 	.word	0x20004ad0
 8001c8c:	08009894 	.word	0x08009894
 8001c90:	080016dd 	.word	0x080016dd
 8001c94:	20004ae0 	.word	0x20004ae0
 8001c98:	080098a8 	.word	0x080098a8
 8001c9c:	08001749 	.word	0x08001749
 8001ca0:	20004adc 	.word	0x20004adc
 8001ca4:	080098b8 	.word	0x080098b8
 8001ca8:	080017b5 	.word	0x080017b5
 8001cac:	20004acc 	.word	0x20004acc
 8001cb0:	080098cc 	.word	0x080098cc
 8001cb4:	08001821 	.word	0x08001821
 8001cb8:	20004af4 	.word	0x20004af4
 8001cbc:	080098e0 	.word	0x080098e0
 8001cc0:	080019e9 	.word	0x080019e9
 8001cc4:	20004ad8 	.word	0x20004ad8
 8001cc8:	080098f0 	.word	0x080098f0
 8001ccc:	0800188d 	.word	0x0800188d
 8001cd0:	20004b1c 	.word	0x20004b1c
 8001cd4:	080098fc 	.word	0x080098fc
 8001cd8:	08001931 	.word	0x08001931
 8001cdc:	20004b14 	.word	0x20004b14
 8001ce0:	08009908 	.word	0x08009908
 8001ce4:	08001989 	.word	0x08001989
 8001ce8:	20004ad4 	.word	0x20004ad4
 8001cec:	08009914 	.word	0x08009914
 8001cf0:	08001a35 	.word	0x08001a35
 8001cf4:	20004b10 	.word	0x20004b10
 8001cf8:	08009928 	.word	0x08009928
 8001cfc:	08001aa5 	.word	0x08001aa5

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b094      	sub	sp, #80	; 0x50
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2230      	movs	r2, #48	; 0x30
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f006 fd8c 	bl	800882c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <SystemClock_Config+0xb4>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <SystemClock_Config+0xb4>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <SystemClock_Config+0xb4>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <SystemClock_Config+0xb8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <SystemClock_Config+0xb8>)
 8001d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <SystemClock_Config+0xb8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d64:	2310      	movs	r3, #16
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fddd 	bl	8003930 <HAL_RCC_OscConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d7c:	f000 f81e 	bl	8001dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d80:	230f      	movs	r3, #15
 8001d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 f840 	bl	8003e20 <HAL_RCC_ClockConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001da6:	f000 f809 	bl	8001dbc <Error_Handler>
  }
}
 8001daa:	bf00      	nop
 8001dac:	3750      	adds	r7, #80	; 0x50
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40007000 	.word	0x40007000

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>
	...

08001dc8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001dce:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <MX_SPI1_Init+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001e14:	220a      	movs	r2, #10
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <MX_SPI1_Init+0x64>)
 8001e1a:	f002 f9d1 	bl	80041c0 <HAL_SPI_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e24:	f7ff ffca 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20004b78 	.word	0x20004b78
 8001e30:	40013000 	.word	0x40013000

08001e34 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <MX_SPI3_Init+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e54:	2202      	movs	r2, #2
 8001e56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e68:	2220      	movs	r2, #32
 8001e6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e80:	220a      	movs	r2, #10
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_SPI3_Init+0x64>)
 8001e86:	f002 f99b 	bl	80041c0 <HAL_SPI_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001e90:	f7ff ff94 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20004b20 	.word	0x20004b20
 8001e9c:	40003c00 	.word	0x40003c00

08001ea0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12c      	bne.n	8001f1c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a40      	ldr	r2, [pc, #256]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001efa:	23e0      	movs	r3, #224	; 0xe0
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	482e      	ldr	r0, [pc, #184]	; (8001fd0 <HAL_SPI_MspInit+0x130>)
 8001f16:	f001 fb55 	bl	80035c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001f1a:	e050      	b.n	8001fbe <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2c      	ldr	r2, [pc, #176]	; (8001fd4 <HAL_SPI_MspInit+0x134>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d14b      	bne.n	8001fbe <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001f8c:	2307      	movs	r3, #7
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <HAL_SPI_MspInit+0x138>)
 8001f98:	f001 fb14 	bl	80035c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fae:	2306      	movs	r3, #6
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4808      	ldr	r0, [pc, #32]	; (8001fdc <HAL_SPI_MspInit+0x13c>)
 8001fba:	f001 fb03 	bl	80035c4 <HAL_GPIO_Init>
}
 8001fbe:	bf00      	nop
 8001fc0:	3730      	adds	r7, #48	; 0x30
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40003c00 	.word	0x40003c00
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_MspInit+0x54>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_MspInit+0x54>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_MspInit+0x54>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_MspInit+0x54>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_MspInit+0x54>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_MspInit+0x54>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	210f      	movs	r1, #15
 8002022:	f06f 0001 	mvn.w	r0, #1
 8002026:	f000 ffac 	bl	8002f82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 fa92 	bl	8002590 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800206c:	f005 fb40 	bl	80076f0 <xTaskGetSchedulerState>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002076:	f006 f927 	bl	80082c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <ADC_IRQHandler+0x10>)
 8002086:	f000 fb0a 	bl	800269e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200049e0 	.word	0x200049e0

08002094 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA2_Stream0_IRQHandler+0x10>)
 800209a:	f001 f857 	bl	800314c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20004a28 	.word	0x20004a28

080020a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e00a      	b.n	80020d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ba:	f3af 8000 	nop.w
 80020be:	4601      	mov	r1, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf0      	blt.n	80020ba <_read+0x12>
	}

return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
	return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800210a:	605a      	str	r2, [r3, #4]
	return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_isatty>:

int _isatty(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	return 1;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f006 fb1e 	bl	80087bc <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20020000 	.word	0x20020000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	200000c4 	.word	0x200000c4
 80021b4:	20004cb0 	.word	0x20004cb0

080021b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b092      	sub	sp, #72	; 0x48
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2220      	movs	r2, #32
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f006 fb10 	bl	800882c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <MX_TIM1_Init+0x118>)
 800220e:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <MX_TIM1_Init+0x11c>)
 8002210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <MX_TIM1_Init+0x118>)
 8002214:	220f      	movs	r2, #15
 8002216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <MX_TIM1_Init+0x118>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800221e:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <MX_TIM1_Init+0x118>)
 8002220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <MX_TIM1_Init+0x118>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <MX_TIM1_Init+0x118>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <MX_TIM1_Init+0x118>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002238:	482e      	ldr	r0, [pc, #184]	; (80022f4 <MX_TIM1_Init+0x118>)
 800223a:	f002 fd69 	bl	8004d10 <HAL_TIM_PWM_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002244:	f7ff fdba 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002250:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002254:	4619      	mov	r1, r3
 8002256:	4827      	ldr	r0, [pc, #156]	; (80022f4 <MX_TIM1_Init+0x118>)
 8002258:	f003 f874 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002262:	f7ff fdab 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002266:	2360      	movs	r3, #96	; 0x60
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002272:	2300      	movs	r3, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	2200      	movs	r2, #0
 8002288:	4619      	mov	r1, r3
 800228a:	481a      	ldr	r0, [pc, #104]	; (80022f4 <MX_TIM1_Init+0x118>)
 800228c:	f002 fd90 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002296:	f7ff fd91 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	2204      	movs	r2, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4814      	ldr	r0, [pc, #80]	; (80022f4 <MX_TIM1_Init+0x118>)
 80022a4:	f002 fd84 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80022ae:	f7ff fd85 	bl	8001dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <MX_TIM1_Init+0x118>)
 80022d6:	f003 f8a3 	bl	8005420 <HAL_TIMEx_ConfigBreakDeadTime>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80022e0:	f7ff fd6c 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <MX_TIM1_Init+0x118>)
 80022e6:	f000 f82b 	bl	8002340 <HAL_TIM_MspPostInit>

}
 80022ea:	bf00      	nop
 80022ec:	3748      	adds	r7, #72	; 0x48
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20004bd0 	.word	0x20004bd0
 80022f8:	40010000 	.word	0x40010000

080022fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_TIM_PWM_MspInit+0x3c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_TIM_PWM_MspInit+0x40>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_TIM_PWM_MspInit+0x40>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_TIM_PWM_MspInit+0x40>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40010000 	.word	0x40010000
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_TIM_MspPostInit+0x68>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11e      	bne.n	80023a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_TIM_MspPostInit+0x6c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_TIM_MspPostInit+0x6c>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_TIM_MspPostInit+0x6c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_TOP_Pin|PWM_BOTTOM_Pin;
 800237e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002390:	2301      	movs	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	4619      	mov	r1, r3
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_TIM_MspPostInit+0x70>)
 800239c:	f001 f912 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020400 	.word	0x40020400

080023b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <MX_USART2_UART_Init+0x50>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ec:	f003 f86a 	bl	80054c4 <HAL_UART_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023f6:	f7ff fce1 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20004c18 	.word	0x20004c18
 8002404:	40004400 	.word	0x40004400

08002408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_UART_MspInit+0x84>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12b      	bne.n	8002482 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a17      	ldr	r2, [pc, #92]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x88>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_UART_MspInit+0x88>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002462:	230c      	movs	r3, #12
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002472:	2307      	movs	r3, #7
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_UART_MspInit+0x8c>)
 800247e:	f001 f8a1 	bl	80035c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40004400 	.word	0x40004400
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b4:	4c0b      	ldr	r4, [pc, #44]	; (80024e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024c2:	f7ff fe79 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f006 f97f 	bl	80087c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7ff fb45 	bl	8001b58 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80024dc:	08009a40 	.word	0x08009a40
  ldr r2, =_sbss
 80024e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80024e4:	20004cb0 	.word	0x20004cb0

080024e8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <DMA1_Stream0_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_Init+0x40>)
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_Init+0x40>)
 8002502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_Init+0x40>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 fd29 	bl	8002f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fd5e 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd41 	bl	8002fd6 <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 fd09 	bl	8002f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000001c 	.word	0x2000001c
 8002588:	20000024 	.word	0x20000024
 800258c:	20000020 	.word	0x20000020

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000024 	.word	0x20000024
 80025b4:	20004c5c 	.word	0x20004c5c

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20004c5c 	.word	0x20004c5c

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000024 	.word	0x20000024

08002618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e033      	b.n	8002696 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fb20 	bl	8000c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800265e:	f023 0302 	bic.w	r3, r3, #2
 8002662:	f043 0202 	orr.w	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 faa8 	bl	8002bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
 8002686:	e001      	b.n	800268c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d049      	beq.n	8002774 <HAL_ADC_IRQHandler+0xd6>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d046      	beq.n	8002774 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d12b      	bne.n	8002764 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d127      	bne.n	8002764 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0220 	bic.w	r2, r2, #32
 800273e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f8db 	bl	8002920 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f06f 0212 	mvn.w	r2, #18
 8002772:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d057      	beq.n	8002856 <HAL_ADC_IRQHandler+0x1b8>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d054      	beq.n	8002856 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d139      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12b      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d124      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11d      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d119      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002820:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fab6 	bl	8002db8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 020c 	mvn.w	r2, #12
 8002854:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_ADC_IRQHandler+0x21a>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d014      	beq.n	80028b8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10d      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f843 	bl	8002934 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f06f 0201 	mvn.w	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_ADC_IRQHandler+0x27a>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f06f 0220 	mvn.w	r2, #32
 8002906:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f81d 	bl	8002948 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f06f 0220 	mvn.w	r2, #32
 8002916:	601a      	str	r2, [r3, #0]
  }
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x1c>
 8002974:	2302      	movs	r3, #2
 8002976:	e113      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x244>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b09      	cmp	r3, #9
 8002986:	d925      	bls.n	80029d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68d9      	ldr	r1, [r3, #12]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	3b1e      	subs	r3, #30
 800299e:	2207      	movs	r2, #7
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43da      	mvns	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	400a      	ands	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68d9      	ldr	r1, [r3, #12]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4403      	add	r3, r0
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	409a      	lsls	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	e022      	b.n	8002a1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	2207      	movs	r2, #7
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	400a      	ands	r2, r1
 80029f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6919      	ldr	r1, [r3, #16]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4403      	add	r3, r0
 8002a10:	409a      	lsls	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d824      	bhi.n	8002a6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b05      	subs	r3, #5
 8002a34:	221f      	movs	r2, #31
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	400a      	ands	r2, r1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4618      	mov	r0, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b05      	subs	r3, #5
 8002a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	e04c      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d824      	bhi.n	8002abe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	3b23      	subs	r3, #35	; 0x23
 8002a86:	221f      	movs	r2, #31
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	400a      	ands	r2, r1
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b23      	subs	r3, #35	; 0x23
 8002ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
 8002abc:	e023      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b41      	subs	r3, #65	; 0x41
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b41      	subs	r3, #65	; 0x41
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_ADC_ConfigChannel+0x250>)
 8002b08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <HAL_ADC_ConfigChannel+0x254>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10f      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1d8>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_ADC_ConfigChannel+0x254>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d12b      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x23a>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_ADC_ConfigChannel+0x258>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d003      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x1f4>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b11      	cmp	r3, #17
 8002b4e:	d122      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <HAL_ADC_ConfigChannel+0x258>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d111      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_ADC_ConfigChannel+0x25c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <HAL_ADC_ConfigChannel+0x260>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	0c9a      	lsrs	r2, r3, #18
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40012300 	.word	0x40012300
 8002bb0:	40012000 	.word	0x40012000
 8002bb4:	10000012 	.word	0x10000012
 8002bb8:	2000001c 	.word	0x2000001c
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <ADC_Init+0x1f0>)
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	021a      	lsls	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <ADC_Init+0x1f4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e00f      	b.n	8002cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0202 	bic.w	r2, r2, #2
 8002ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e1b      	ldrb	r3, [r3, #24]
 8002cd8:	005a      	lsls	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	035a      	lsls	r2, r3, #13
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	e007      	b.n	8002d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	051a      	lsls	r2, r3, #20
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d76:	025a      	lsls	r2, r3, #9
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	029a      	lsls	r2, r3, #10
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012300 	.word	0x40012300
 8002db4:	0f000001 	.word	0x0f000001

08002db8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f38:	d301      	bcc.n	8002f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <SysTick_Config+0x40>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f46:	210f      	movs	r1, #15
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f7ff ff8e 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SysTick_Config+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <SysTick_Config+0x40>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff29 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f94:	f7ff ff3e 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff8e 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff5d 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff31 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ffa2 	bl	8002f28 <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff fadc 	bl	80025b8 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e099      	b.n	8003140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302c:	e00f      	b.n	800304e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302e:	f7ff fac3 	bl	80025b8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b05      	cmp	r3, #5
 800303a:	d908      	bls.n	800304e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e078      	b.n	8003140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e8      	bne.n	800302e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_DMA_Init+0x158>)
 8003068:	4013      	ands	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d117      	bne.n	8003112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f9e9 	bl	80034cc <DMA_CheckFifoParam>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800310e:	2301      	movs	r3, #1
 8003110:	e016      	b.n	8003140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9a0 	bl	8003460 <DMA_CalcBaseAndBitshift>
 8003120:	4603      	mov	r3, r0
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	223f      	movs	r2, #63	; 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	f010803f 	.word	0xf010803f

0800314c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003158:	4b92      	ldr	r3, [pc, #584]	; (80033a4 <HAL_DMA_IRQHandler+0x258>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a92      	ldr	r2, [pc, #584]	; (80033a8 <HAL_DMA_IRQHandler+0x25c>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	2208      	movs	r2, #8
 8003178:	409a      	lsls	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01a      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2208      	movs	r2, #8
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f043 0202 	orr.w	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	2204      	movs	r2, #4
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d012      	beq.n	8003224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2204      	movs	r2, #4
 8003212:	409a      	lsls	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2210      	movs	r2, #16
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d043      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03c      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2210      	movs	r2, #16
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d018      	beq.n	800328e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
 800327a:	e01f      	b.n	80032bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
 800328c:	e016      	b.n	80032bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0208 	bic.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2220      	movs	r2, #32
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 808e 	beq.w	80033ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8086 	beq.w	80033ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2220      	movs	r2, #32
 80032e4:	409a      	lsls	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d136      	bne.n	8003364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0216 	bic.w	r2, r2, #22
 8003304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <HAL_DMA_IRQHandler+0x1da>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	223f      	movs	r2, #63	; 0x3f
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	2b00      	cmp	r3, #0
 8003358:	d07d      	beq.n	8003456 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
        }
        return;
 8003362:	e078      	b.n	8003456 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01c      	beq.n	80033ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d108      	bne.n	8003392 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	2b00      	cmp	r3, #0
 8003386:	d030      	beq.n	80033ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
 8003390:	e02b      	b.n	80033ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d027      	beq.n	80033ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e022      	b.n	80033ea <HAL_DMA_IRQHandler+0x29e>
 80033a4:	2000001c 	.word	0x2000001c
 80033a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0210 	bic.w	r2, r2, #16
 80033c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d032      	beq.n	8003458 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d022      	beq.n	8003444 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2205      	movs	r2, #5
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	429a      	cmp	r2, r3
 8003420:	d307      	bcc.n	8003432 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f2      	bne.n	8003416 <HAL_DMA_IRQHandler+0x2ca>
 8003430:	e000      	b.n	8003434 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003432:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e000      	b.n	8003458 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003456:	bf00      	nop
    }
  }
}
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop

08003460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3b10      	subs	r3, #16
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <DMA_CalcBaseAndBitshift+0x68>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d909      	bls.n	80034a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	; 0x58
 80034a0:	e007      	b.n	80034b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	aaaaaaab 	.word	0xaaaaaaab
 80034c8:	08009990 	.word	0x08009990

080034cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11f      	bne.n	8003526 <DMA_CheckFifoParam+0x5a>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d856      	bhi.n	800359a <DMA_CheckFifoParam+0xce>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <DMA_CheckFifoParam+0x28>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003517 	.word	0x08003517
 80034fc:	08003505 	.word	0x08003505
 8003500:	0800359b 	.word	0x0800359b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d046      	beq.n	800359e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003514:	e043      	b.n	800359e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800351e:	d140      	bne.n	80035a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003524:	e03d      	b.n	80035a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d121      	bne.n	8003574 <DMA_CheckFifoParam+0xa8>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b03      	cmp	r3, #3
 8003534:	d837      	bhi.n	80035a6 <DMA_CheckFifoParam+0xda>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <DMA_CheckFifoParam+0x70>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003553 	.word	0x08003553
 8003544:	0800354d 	.word	0x0800354d
 8003548:	08003565 	.word	0x08003565
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      break;
 8003550:	e030      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d025      	beq.n	80035aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003562:	e022      	b.n	80035aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800356c:	d11f      	bne.n	80035ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003572:	e01c      	b.n	80035ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d903      	bls.n	8003582 <DMA_CheckFifoParam+0xb6>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d003      	beq.n	8003588 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003580:	e018      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e015      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      break;
 8003598:	e00b      	b.n	80035b2 <DMA_CheckFifoParam+0xe6>
      break;
 800359a:	bf00      	nop
 800359c:	e00a      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
 80035a0:	e008      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e006      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a6:	bf00      	nop
 80035a8:	e004      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b2:	bf00      	nop
    }
  } 
  
  return status; 
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	e159      	b.n	8003894 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e0:	2201      	movs	r2, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f040 8148 	bne.w	800388e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d005      	beq.n	8003616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003612:	2b02      	cmp	r3, #2
 8003614:	d130      	bne.n	8003678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b03      	cmp	r3, #3
 8003682:	d017      	beq.n	80036b4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d123      	bne.n	8003708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0203 	and.w	r2, r3, #3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a2 	beq.w	800388e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b57      	ldr	r3, [pc, #348]	; (80038ac <HAL_GPIO_Init+0x2e8>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a56      	ldr	r2, [pc, #344]	; (80038ac <HAL_GPIO_Init+0x2e8>)
 8003754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b54      	ldr	r3, [pc, #336]	; (80038ac <HAL_GPIO_Init+0x2e8>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003766:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_GPIO_Init+0x2ec>)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	220f      	movs	r2, #15
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_GPIO_Init+0x2f0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d019      	beq.n	80037c6 <HAL_GPIO_Init+0x202>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_GPIO_Init+0x2f4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_GPIO_Init+0x1fe>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a47      	ldr	r2, [pc, #284]	; (80038bc <HAL_GPIO_Init+0x2f8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00d      	beq.n	80037be <HAL_GPIO_Init+0x1fa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a46      	ldr	r2, [pc, #280]	; (80038c0 <HAL_GPIO_Init+0x2fc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <HAL_GPIO_Init+0x1f6>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a45      	ldr	r2, [pc, #276]	; (80038c4 <HAL_GPIO_Init+0x300>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_GPIO_Init+0x1f2>
 80037b2:	2304      	movs	r3, #4
 80037b4:	e008      	b.n	80037c8 <HAL_GPIO_Init+0x204>
 80037b6:	2307      	movs	r3, #7
 80037b8:	e006      	b.n	80037c8 <HAL_GPIO_Init+0x204>
 80037ba:	2303      	movs	r3, #3
 80037bc:	e004      	b.n	80037c8 <HAL_GPIO_Init+0x204>
 80037be:	2302      	movs	r3, #2
 80037c0:	e002      	b.n	80037c8 <HAL_GPIO_Init+0x204>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_GPIO_Init+0x204>
 80037c6:	2300      	movs	r3, #0
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	f002 0203 	and.w	r2, r2, #3
 80037ce:	0092      	lsls	r2, r2, #2
 80037d0:	4093      	lsls	r3, r2
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d8:	4935      	ldr	r1, [pc, #212]	; (80038b0 <HAL_GPIO_Init+0x2ec>)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	3302      	adds	r3, #2
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <HAL_GPIO_Init+0x304>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800380a:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <HAL_GPIO_Init+0x304>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_GPIO_Init+0x304>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003834:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <HAL_GPIO_Init+0x304>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_GPIO_Init+0x304>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_GPIO_Init+0x304>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_GPIO_Init+0x304>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <HAL_GPIO_Init+0x304>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3301      	adds	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b0f      	cmp	r3, #15
 8003898:	f67f aea2 	bls.w	80035e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40013800 	.word	0x40013800
 80038b4:	40020000 	.word	0x40020000
 80038b8:	40020400 	.word	0x40020400
 80038bc:	40020800 	.word	0x40020800
 80038c0:	40020c00 	.word	0x40020c00
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e001      	b.n	80038ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
 8003908:	4613      	mov	r3, r2
 800390a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003918:	e003      	b.n	8003922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e264      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d075      	beq.n	8003a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394e:	4ba3      	ldr	r3, [pc, #652]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b04      	cmp	r3, #4
 8003958:	d00c      	beq.n	8003974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395a:	4ba0      	ldr	r3, [pc, #640]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003962:	2b08      	cmp	r3, #8
 8003964:	d112      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b9d      	ldr	r3, [pc, #628]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x108>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d157      	bne.n	8003a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e23f      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x74>
 8003996:	4b91      	ldr	r3, [pc, #580]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a90      	ldr	r2, [pc, #576]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a8a      	ldr	r2, [pc, #552]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a87      	ldr	r2, [pc, #540]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039c8:	4b84      	ldr	r3, [pc, #528]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a83      	ldr	r2, [pc, #524]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a80      	ldr	r2, [pc, #512]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fde6 	bl	80025b8 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fde2 	bl	80025b8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e204      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xc0>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fdd2 	bl	80025b8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe fdce 	bl	80025b8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e1f0      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0xe8>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d063      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a46:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a52:	4b62      	ldr	r3, [pc, #392]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6a:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_RCC_OscConfig+0x152>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e1c4      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4952      	ldr	r1, [pc, #328]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	e03a      	b.n	8003b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <HAL_RCC_OscConfig+0x2b0>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fd87 	bl	80025b8 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aae:	f7fe fd83 	bl	80025b8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e1a5      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	4b46      	ldr	r3, [pc, #280]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4940      	ldr	r1, [pc, #256]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
 8003ae0:	e015      	b.n	8003b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <HAL_RCC_OscConfig+0x2b0>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fd66 	bl	80025b8 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af0:	f7fe fd62 	bl	80025b8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e184      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d030      	beq.n	8003b7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d016      	beq.n	8003b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b22:	4b30      	ldr	r3, [pc, #192]	; (8003be4 <HAL_RCC_OscConfig+0x2b4>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fe fd46 	bl	80025b8 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b30:	f7fe fd42 	bl	80025b8 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e164      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x200>
 8003b4e:	e015      	b.n	8003b7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCC_OscConfig+0x2b4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe fd2f 	bl	80025b8 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fd2b 	bl	80025b8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e14d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a0 	beq.w	8003cca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_OscConfig+0x2b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d121      	bne.n	8003c0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_OscConfig+0x2b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_RCC_OscConfig+0x2b8>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fcf1 	bl	80025b8 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	e011      	b.n	8003bfe <HAL_RCC_OscConfig+0x2ce>
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	42470000 	.word	0x42470000
 8003be4:	42470e80 	.word	0x42470e80
 8003be8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fe fce4 	bl	80025b8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e106      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b85      	ldr	r3, [pc, #532]	; (8003e14 <HAL_RCC_OscConfig+0x4e4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d106      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
 8003c12:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	e01c      	b.n	8003c5a <HAL_RCC_OscConfig+0x32a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x312>
 8003c28:	4b7b      	ldr	r3, [pc, #492]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a7a      	ldr	r2, [pc, #488]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	e00b      	b.n	8003c5a <HAL_RCC_OscConfig+0x32a>
 8003c42:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a74      	ldr	r2, [pc, #464]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a71      	ldr	r2, [pc, #452]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe fca9 	bl	80025b8 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe fca5 	bl	80025b8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0c5      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ee      	beq.n	8003c6a <HAL_RCC_OscConfig+0x33a>
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fc93 	bl	80025b8 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fc8f 	bl	80025b8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0af      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cac:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ee      	bne.n	8003c96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a55      	ldr	r2, [pc, #340]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 809b 	beq.w	8003e0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d05c      	beq.n	8003d9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d141      	bne.n	8003d6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <HAL_RCC_OscConfig+0x4ec>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe fc63 	bl	80025b8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe fc5f 	bl	80025b8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e081      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	019b      	lsls	r3, r3, #6
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	4937      	ldr	r1, [pc, #220]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <HAL_RCC_OscConfig+0x4ec>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fc38 	bl	80025b8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fe fc34 	bl	80025b8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e056      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x41c>
 8003d6a:	e04e      	b.n	8003e0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_OscConfig+0x4ec>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fe fc21 	bl	80025b8 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fe fc1d 	bl	80025b8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e03f      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x44a>
 8003d98:	e037      	b.n	8003e0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e032      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d028      	beq.n	8003e06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d121      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d11a      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ddc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d111      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	3b01      	subs	r3, #1
 8003df0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40007000 	.word	0x40007000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470060 	.word	0x42470060

08003e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0cc      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e34:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d90c      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0b8      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e74:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d044      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d119      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d003      	beq.n	8003ede <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e067      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efe:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f023 0203 	bic.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4934      	ldr	r1, [pc, #208]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f10:	f7fe fb52 	bl	80025b8 <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f18:	f7fe fb4e 	bl	80025b8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e04f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 020c 	and.w	r2, r3, #12
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1eb      	bne.n	8003f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d20c      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e032      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4916      	ldr	r1, [pc, #88]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	490e      	ldr	r1, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa6:	f000 f821 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fab2 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	08009978 	.word	0x08009978
 8003fe4:	2000001c 	.word	0x2000001c
 8003fe8:	20000020 	.word	0x20000020

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	b5b0      	push	{r4, r5, r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	6079      	str	r1, [r7, #4]
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	60f9      	str	r1, [r7, #12]
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ffe:	2100      	movs	r1, #0
 8004000:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004002:	4952      	ldr	r1, [pc, #328]	; (800414c <HAL_RCC_GetSysClockFreq+0x160>)
 8004004:	6889      	ldr	r1, [r1, #8]
 8004006:	f001 010c 	and.w	r1, r1, #12
 800400a:	2908      	cmp	r1, #8
 800400c:	d00d      	beq.n	800402a <HAL_RCC_GetSysClockFreq+0x3e>
 800400e:	2908      	cmp	r1, #8
 8004010:	f200 8094 	bhi.w	800413c <HAL_RCC_GetSysClockFreq+0x150>
 8004014:	2900      	cmp	r1, #0
 8004016:	d002      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x32>
 8004018:	2904      	cmp	r1, #4
 800401a:	d003      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x38>
 800401c:	e08e      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800401e:	4b4c      	ldr	r3, [pc, #304]	; (8004150 <HAL_RCC_GetSysClockFreq+0x164>)
 8004020:	60bb      	str	r3, [r7, #8]
       break;
 8004022:	e08e      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <HAL_RCC_GetSysClockFreq+0x168>)
 8004026:	60bb      	str	r3, [r7, #8]
      break;
 8004028:	e08b      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402a:	4948      	ldr	r1, [pc, #288]	; (800414c <HAL_RCC_GetSysClockFreq+0x160>)
 800402c:	6849      	ldr	r1, [r1, #4]
 800402e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004032:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004034:	4945      	ldr	r1, [pc, #276]	; (800414c <HAL_RCC_GetSysClockFreq+0x160>)
 8004036:	6849      	ldr	r1, [r1, #4]
 8004038:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800403c:	2900      	cmp	r1, #0
 800403e:	d024      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4942      	ldr	r1, [pc, #264]	; (800414c <HAL_RCC_GetSysClockFreq+0x160>)
 8004042:	6849      	ldr	r1, [r1, #4]
 8004044:	0989      	lsrs	r1, r1, #6
 8004046:	4608      	mov	r0, r1
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004050:	f04f 0500 	mov.w	r5, #0
 8004054:	ea00 0204 	and.w	r2, r0, r4
 8004058:	ea01 0305 	and.w	r3, r1, r5
 800405c:	493d      	ldr	r1, [pc, #244]	; (8004154 <HAL_RCC_GetSysClockFreq+0x168>)
 800405e:	fb01 f003 	mul.w	r0, r1, r3
 8004062:	2100      	movs	r1, #0
 8004064:	fb01 f102 	mul.w	r1, r1, r2
 8004068:	1844      	adds	r4, r0, r1
 800406a:	493a      	ldr	r1, [pc, #232]	; (8004154 <HAL_RCC_GetSysClockFreq+0x168>)
 800406c:	fba2 0101 	umull	r0, r1, r2, r1
 8004070:	1863      	adds	r3, r4, r1
 8004072:	4619      	mov	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	461a      	mov	r2, r3
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f7fc f900 	bl	8000280 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e04a      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_GetSysClockFreq+0x160>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	ea02 0400 	and.w	r4, r2, r0
 80040a2:	ea03 0501 	and.w	r5, r3, r1
 80040a6:	4620      	mov	r0, r4
 80040a8:	4629      	mov	r1, r5
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	014b      	lsls	r3, r1, #5
 80040b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040b8:	0142      	lsls	r2, r0, #5
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	1b00      	subs	r0, r0, r4
 80040c0:	eb61 0105 	sbc.w	r1, r1, r5
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	018b      	lsls	r3, r1, #6
 80040ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040d2:	0182      	lsls	r2, r0, #6
 80040d4:	1a12      	subs	r2, r2, r0
 80040d6:	eb63 0301 	sbc.w	r3, r3, r1
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	00d9      	lsls	r1, r3, #3
 80040e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e8:	00d0      	lsls	r0, r2, #3
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	1912      	adds	r2, r2, r4
 80040f0:	eb45 0303 	adc.w	r3, r5, r3
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0299      	lsls	r1, r3, #10
 80040fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004102:	0290      	lsls	r0, r2, #10
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	461a      	mov	r2, r3
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f7fc f8b4 	bl	8000280 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_GetSysClockFreq+0x160>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	60bb      	str	r3, [r7, #8]
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <HAL_RCC_GetSysClockFreq+0x164>)
 800413e:	60bb      	str	r3, [r7, #8]
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	68bb      	ldr	r3, [r7, #8]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bdb0      	pop	{r4, r5, r7, pc}
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	017d7840 	.word	0x017d7840

08004158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_RCC_GetHCLKFreq+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2000001c 	.word	0x2000001c

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004174:	f7ff fff0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	08009988 	.word	0x08009988

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800419c:	f7ff ffdc 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0b5b      	lsrs	r3, r3, #13
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	08009988 	.word	0x08009988

080041c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07b      	b.n	80042ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e2:	d009      	beq.n	80041f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
 80041ea:	e005      	b.n	80041f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd fe44 	bl	8001ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	ea42 0103 	orr.w	r1, r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0104 	and.w	r1, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f003 0210 	and.w	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_SPI_Transmit+0x22>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e126      	b.n	8004542 <HAL_SPI_Transmit+0x270>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042fc:	f7fe f95c 	bl	80025b8 <HAL_GetTick>
 8004300:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004312:	2302      	movs	r3, #2
 8004314:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004316:	e10b      	b.n	8004530 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Transmit+0x52>
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004328:	e102      	b.n	8004530 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2203      	movs	r2, #3
 800432e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	88fa      	ldrh	r2, [r7, #6]
 8004342:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d10f      	bne.n	8004392 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004380:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004390:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d007      	beq.n	80043b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d14b      	bne.n	8004452 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_SPI_Transmit+0xf6>
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d13e      	bne.n	8004446 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043ec:	e02b      	b.n	8004446 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d112      	bne.n	8004422 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004420:	e011      	b.n	8004446 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004422:	f7fe f8c9 	bl	80025b8 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d803      	bhi.n	800443a <HAL_SPI_Transmit+0x168>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d102      	bne.n	8004440 <HAL_SPI_Transmit+0x16e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004444:	e074      	b.n	8004530 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ce      	bne.n	80043ee <HAL_SPI_Transmit+0x11c>
 8004450:	e04c      	b.n	80044ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_SPI_Transmit+0x18e>
 800445a:	8afb      	ldrh	r3, [r7, #22]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d140      	bne.n	80044e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	7812      	ldrb	r2, [r2, #0]
 800446c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004486:	e02c      	b.n	80044e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d113      	bne.n	80044be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80044bc:	e011      	b.n	80044e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044be:	f7fe f87b 	bl	80025b8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d803      	bhi.n	80044d6 <HAL_SPI_Transmit+0x204>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_Transmit+0x20a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044e0:	e026      	b.n	8004530 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1cd      	bne.n	8004488 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fbcb 	bl	8004c8c <SPI_EndRxTxTransaction>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e000      	b.n	8004530 <HAL_SPI_Transmit+0x25e>
  }

error:
 800452e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004540:	7ffb      	ldrb	r3, [r7, #31]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af02      	add	r7, sp, #8
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d112      	bne.n	800458e <HAL_SPI_Receive+0x44>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10e      	bne.n	800458e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2204      	movs	r2, #4
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f8f1 	bl	800476c <HAL_SPI_TransmitReceive>
 800458a:	4603      	mov	r3, r0
 800458c:	e0ea      	b.n	8004764 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_SPI_Receive+0x52>
 8004598:	2302      	movs	r3, #2
 800459a:	e0e3      	b.n	8004764 <HAL_SPI_Receive+0x21a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a4:	f7fe f808 	bl	80025b8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045ba:	e0ca      	b.n	8004752 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Receive+0x7e>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045cc:	e0c1      	b.n	8004752 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2204      	movs	r2, #4
 80045d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	d10f      	bne.n	8004636 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004624:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004652:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d162      	bne.n	8004722 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800465c:	e02e      	b.n	80046bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d115      	bne.n	8004698 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f103 020c 	add.w	r2, r3, #12
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	7812      	ldrb	r2, [r2, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004696:	e011      	b.n	80046bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004698:	f7fd ff8e 	bl	80025b8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d803      	bhi.n	80046b0 <HAL_SPI_Receive+0x166>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d102      	bne.n	80046b6 <HAL_SPI_Receive+0x16c>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046ba:	e04a      	b.n	8004752 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1cb      	bne.n	800465e <HAL_SPI_Receive+0x114>
 80046c6:	e031      	b.n	800472c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d113      	bne.n	80046fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	b292      	uxth	r2, r2
 80046e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046fc:	e011      	b.n	8004722 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046fe:	f7fd ff5b 	bl	80025b8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d803      	bhi.n	8004716 <HAL_SPI_Receive+0x1cc>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d102      	bne.n	800471c <HAL_SPI_Receive+0x1d2>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004720:	e017      	b.n	8004752 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1cd      	bne.n	80046c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fa45 	bl	8004bc0 <SPI_EndRxTransaction>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
 800474e:	e000      	b.n	8004752 <HAL_SPI_Receive+0x208>
  }

error :
 8004750:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800477a:	2301      	movs	r3, #1
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x26>
 800478e:	2302      	movs	r3, #2
 8004790:	e18a      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x33c>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479a:	f7fd ff0d 	bl	80025b8 <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00f      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x70>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c2:	d107      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x68>
 80047cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d003      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047da:	e15b      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x82>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x82>
 80047e8:	887b      	ldrh	r3, [r7, #2]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047f4:	e14e      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d003      	beq.n	800480a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2205      	movs	r2, #5
 8004806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	887a      	ldrh	r2, [r7, #2]
 800481a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	887a      	ldrh	r2, [r7, #2]
 8004832:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d007      	beq.n	800485e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004866:	d178      	bne.n	800495a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x10a>
 8004870:	8b7b      	ldrh	r3, [r7, #26]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d166      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489a:	e053      	b.n	8004944 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d11b      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x176>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d016      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x176>
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d113      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	1c9a      	adds	r2, r3, #2
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d119      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x1b8>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	b292      	uxth	r2, r2
 8004906:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	1c9a      	adds	r2, r3, #2
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004920:	2301      	movs	r3, #1
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004924:	f7fd fe48 	bl	80025b8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004930:	429a      	cmp	r2, r3
 8004932:	d807      	bhi.n	8004944 <HAL_SPI_TransmitReceive+0x1d8>
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d003      	beq.n	8004944 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004942:	e0a7      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1a6      	bne.n	800489c <HAL_SPI_TransmitReceive+0x130>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1a1      	bne.n	800489c <HAL_SPI_TransmitReceive+0x130>
 8004958:	e07c      	b.n	8004a54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x1fc>
 8004962:	8b7b      	ldrh	r3, [r7, #26]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d16b      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498e:	e057      	b.n	8004a40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d11c      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x26c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d017      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x26c>
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d114      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d119      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x2ae>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d014      	beq.n	8004a1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a16:	2301      	movs	r3, #1
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a1a:	f7fd fdcd 	bl	80025b8 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d803      	bhi.n	8004a32 <HAL_SPI_TransmitReceive+0x2c6>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d102      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x2cc>
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a3e:	e029      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1a2      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x224>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d19d      	bne.n	8004990 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f917 	bl	8004c8c <SPI_EndRxTxTransaction>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d006      	beq.n	8004a72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a70:	e010      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	e000      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3730      	adds	r7, #48	; 0x30
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ac0:	f7fd fd7a 	bl	80025b8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	4413      	add	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ad0:	f7fd fd72 	bl	80025b8 <HAL_GetTick>
 8004ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	015b      	lsls	r3, r3, #5
 8004adc:	0d1b      	lsrs	r3, r3, #20
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae6:	e054      	b.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d050      	beq.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004af0:	f7fd fd62 	bl	80025b8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d902      	bls.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d13d      	bne.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1e:	d111      	bne.n	8004b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b28:	d004      	beq.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d107      	bne.n	8004b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4c:	d10f      	bne.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e017      	b.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d19b      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	2000001c 	.word	0x2000001c

08004bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd4:	d111      	bne.n	8004bfa <SPI_EndRxTransaction+0x3a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bde:	d004      	beq.n	8004bea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be8:	d107      	bne.n	8004bfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c02:	d12a      	bne.n	8004c5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0c:	d012      	beq.n	8004c34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2180      	movs	r1, #128	; 0x80
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff ff49 	bl	8004ab0 <SPI_WaitFlagStateUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d02d      	beq.n	8004c80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e026      	b.n	8004c82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff ff36 	bl	8004ab0 <SPI_WaitFlagStateUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01a      	beq.n	8004c80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e013      	b.n	8004c82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2101      	movs	r1, #1
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff ff23 	bl	8004ab0 <SPI_WaitFlagStateUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e000      	b.n	8004c82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <SPI_EndRxTxTransaction+0x7c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <SPI_EndRxTxTransaction+0x80>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0d5b      	lsrs	r3, r3, #21
 8004ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb6:	d112      	bne.n	8004cde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff fef4 	bl	8004ab0 <SPI_WaitFlagStateUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d0f2      	beq.n	8004cde <SPI_EndRxTxTransaction+0x52>
 8004cf8:	e000      	b.n	8004cfc <SPI_EndRxTxTransaction+0x70>
        break;
 8004cfa:	bf00      	nop
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	2000001c 	.word	0x2000001c
 8004d0c:	165e9f81 	.word	0x165e9f81

08004d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e041      	b.n	8004da6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fd fae0 	bl	80022fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 f8ec 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0ac      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	f200 809f 	bhi.w	8004f18 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e15 	.word	0x08004e15
 8004de4:	08004f19 	.word	0x08004f19
 8004de8:	08004f19 	.word	0x08004f19
 8004dec:	08004f19 	.word	0x08004f19
 8004df0:	08004e55 	.word	0x08004e55
 8004df4:	08004f19 	.word	0x08004f19
 8004df8:	08004f19 	.word	0x08004f19
 8004dfc:	08004f19 	.word	0x08004f19
 8004e00:	08004e97 	.word	0x08004e97
 8004e04:	08004f19 	.word	0x08004f19
 8004e08:	08004f19 	.word	0x08004f19
 8004e0c:	08004f19 	.word	0x08004f19
 8004e10:	08004ed7 	.word	0x08004ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f906 	bl	800502c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0208 	orr.w	r2, r2, #8
 8004e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	619a      	str	r2, [r3, #24]
      break;
 8004e52:	e062      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f94c 	bl	80050f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	021a      	lsls	r2, r3, #8
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	619a      	str	r2, [r3, #24]
      break;
 8004e94:	e041      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f997 	bl	80051d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0208 	orr.w	r2, r2, #8
 8004eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0204 	bic.w	r2, r2, #4
 8004ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	61da      	str	r2, [r3, #28]
      break;
 8004ed4:	e021      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f9e1 	bl	80052a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69d9      	ldr	r1, [r3, #28]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	021a      	lsls	r2, r3, #8
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	61da      	str	r2, [r3, #28]
      break;
 8004f16:	e000      	b.n	8004f1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a34      	ldr	r2, [pc, #208]	; (8005010 <TIM_Base_SetConfig+0xe4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0x38>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0x38>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a31      	ldr	r2, [pc, #196]	; (8005014 <TIM_Base_SetConfig+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a30      	ldr	r2, [pc, #192]	; (8005018 <TIM_Base_SetConfig+0xec>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0x38>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0xf0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <TIM_Base_SetConfig+0xe4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01b      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d017      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a22      	ldr	r2, [pc, #136]	; (8005014 <TIM_Base_SetConfig+0xe8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a21      	ldr	r2, [pc, #132]	; (8005018 <TIM_Base_SetConfig+0xec>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00f      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a20      	ldr	r2, [pc, #128]	; (800501c <TIM_Base_SetConfig+0xf0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <TIM_Base_SetConfig+0xf4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <TIM_Base_SetConfig+0xf8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1d      	ldr	r2, [pc, #116]	; (8005028 <TIM_Base_SetConfig+0xfc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a08      	ldr	r2, [pc, #32]	; (8005010 <TIM_Base_SetConfig+0xe4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d103      	bne.n	8004ffc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	615a      	str	r2, [r3, #20]
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800
 800501c:	40000c00 	.word	0x40000c00
 8005020:	40014000 	.word	0x40014000
 8005024:	40014400 	.word	0x40014400
 8005028:	40014800 	.word	0x40014800

0800502c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0302 	bic.w	r3, r3, #2
 8005074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <TIM_OC1_SetConfig+0xc8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d10c      	bne.n	80050a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0308 	bic.w	r3, r3, #8
 800508e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <TIM_OC1_SetConfig+0xc8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d111      	bne.n	80050ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40010000 	.word	0x40010000

080050f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0210 	bic.w	r2, r3, #16
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0320 	bic.w	r3, r3, #32
 8005142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <TIM_OC2_SetConfig+0xd4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10d      	bne.n	8005174 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a15      	ldr	r2, [pc, #84]	; (80051cc <TIM_OC2_SetConfig+0xd4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d113      	bne.n	80051a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000

080051d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <TIM_OC3_SetConfig+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10d      	bne.n	800524a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC3_SetConfig+0xd0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d113      	bne.n	800527a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40010000 	.word	0x40010000

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a10      	ldr	r2, [pc, #64]	; (8005340 <TIM_OC4_SetConfig+0x9c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e050      	b.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d013      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a13      	ldr	r2, [pc, #76]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10c      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40014000 	.word	0x40014000

08005420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005438:	2302      	movs	r3, #2
 800543a:	e03d      	b.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03f      	b.n	8005556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fc ff8c 	bl	8002408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f905 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af02      	add	r7, sp, #8
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b20      	cmp	r3, #32
 800557c:	d17c      	bne.n	8005678 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_UART_Transmit+0x2c>
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e075      	b.n	800567a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_UART_Transmit+0x3e>
 8005598:	2302      	movs	r3, #2
 800559a:	e06e      	b.n	800567a <HAL_UART_Transmit+0x11c>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b2:	f7fd f801 	bl	80025b8 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	88fa      	ldrh	r2, [r7, #6]
 80055c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d108      	bne.n	80055e0 <HAL_UART_Transmit+0x82>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e003      	b.n	80055e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055f0:	e02a      	b.n	8005648 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2180      	movs	r1, #128	; 0x80
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f840 	bl	8005682 <UART_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e036      	b.n	800567a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	3302      	adds	r3, #2
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e007      	b.n	800563a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1cf      	bne.n	80055f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	2140      	movs	r1, #64	; 0x40
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f810 	bl	8005682 <UART_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	e02c      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d028      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80056a2:	f7fc ff89 	bl	80025b8 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d21d      	bcs.n	80056ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e00f      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	bf0c      	ite	eq
 80056fe:	2301      	moveq	r3, #1
 8005700:	2300      	movne	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	429a      	cmp	r2, r3
 800570a:	d0c3      	beq.n	8005694 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	b09f      	sub	sp, #124	; 0x7c
 800571e:	af00      	add	r7, sp, #0
 8005720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	68d9      	ldr	r1, [r3, #12]
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	ea40 0301 	orr.w	r3, r0, r1
 8005738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	431a      	orrs	r2, r3
 800574a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4313      	orrs	r3, r2
 8005750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800575c:	f021 010c 	bic.w	r1, r1, #12
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005766:	430b      	orrs	r3, r1
 8005768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	6999      	ldr	r1, [r3, #24]
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	ea40 0301 	orr.w	r3, r0, r1
 8005780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4bc5      	ldr	r3, [pc, #788]	; (8005a9c <UART_SetConfig+0x384>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d004      	beq.n	8005796 <UART_SetConfig+0x7e>
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4bc3      	ldr	r3, [pc, #780]	; (8005aa0 <UART_SetConfig+0x388>)
 8005792:	429a      	cmp	r2, r3
 8005794:	d103      	bne.n	800579e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005796:	f7fe fcff 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 800579a:	6778      	str	r0, [r7, #116]	; 0x74
 800579c:	e002      	b.n	80057a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fe fce7 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 80057a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ac:	f040 80b6 	bne.w	800591c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b2:	461c      	mov	r4, r3
 80057b4:	f04f 0500 	mov.w	r5, #0
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	6439      	str	r1, [r7, #64]	; 0x40
 80057c0:	415b      	adcs	r3, r3
 80057c2:	647b      	str	r3, [r7, #68]	; 0x44
 80057c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057c8:	1912      	adds	r2, r2, r4
 80057ca:	eb45 0303 	adc.w	r3, r5, r3
 80057ce:	f04f 0000 	mov.w	r0, #0
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	00d9      	lsls	r1, r3, #3
 80057d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057dc:	00d0      	lsls	r0, r2, #3
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	1911      	adds	r1, r2, r4
 80057e4:	6639      	str	r1, [r7, #96]	; 0x60
 80057e6:	416b      	adcs	r3, r5
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	1891      	adds	r1, r2, r2
 80057f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057f8:	415b      	adcs	r3, r3
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005804:	f7fa fd3c 	bl	8000280 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4ba5      	ldr	r3, [pc, #660]	; (8005aa4 <UART_SetConfig+0x38c>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011e      	lsls	r6, r3, #4
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	461c      	mov	r4, r3
 800581a:	f04f 0500 	mov.w	r5, #0
 800581e:	4622      	mov	r2, r4
 8005820:	462b      	mov	r3, r5
 8005822:	1891      	adds	r1, r2, r2
 8005824:	6339      	str	r1, [r7, #48]	; 0x30
 8005826:	415b      	adcs	r3, r3
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800582e:	1912      	adds	r2, r2, r4
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	00d9      	lsls	r1, r3, #3
 800583e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005842:	00d0      	lsls	r0, r2, #3
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	1911      	adds	r1, r2, r4
 800584a:	65b9      	str	r1, [r7, #88]	; 0x58
 800584c:	416b      	adcs	r3, r5
 800584e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	461a      	mov	r2, r3
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	1891      	adds	r1, r2, r2
 800585c:	62b9      	str	r1, [r7, #40]	; 0x28
 800585e:	415b      	adcs	r3, r3
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800586a:	f7fa fd09 	bl	8000280 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	2164      	movs	r1, #100	; 0x64
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	3332      	adds	r3, #50	; 0x32
 8005886:	4a87      	ldr	r2, [pc, #540]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005894:	441e      	add	r6, r3
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	4618      	mov	r0, r3
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	1894      	adds	r4, r2, r2
 80058a4:	623c      	str	r4, [r7, #32]
 80058a6:	415b      	adcs	r3, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ae:	1812      	adds	r2, r2, r0
 80058b0:	eb41 0303 	adc.w	r3, r1, r3
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	f04f 0500 	mov.w	r5, #0
 80058bc:	00dd      	lsls	r5, r3, #3
 80058be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c2:	00d4      	lsls	r4, r2, #3
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	1814      	adds	r4, r2, r0
 80058ca:	653c      	str	r4, [r7, #80]	; 0x50
 80058cc:	414b      	adcs	r3, r1
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	61b9      	str	r1, [r7, #24]
 80058de:	415b      	adcs	r3, r3
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ea:	f7fa fcc9 	bl	8000280 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <UART_SetConfig+0x38c>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a67      	ldr	r2, [pc, #412]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f003 0207 	and.w	r2, r3, #7
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4432      	add	r2, r6
 8005918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800591a:	e0b9      	b.n	8005a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800591c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591e:	461c      	mov	r4, r3
 8005920:	f04f 0500 	mov.w	r5, #0
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	1891      	adds	r1, r2, r2
 800592a:	6139      	str	r1, [r7, #16]
 800592c:	415b      	adcs	r3, r3
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005934:	1912      	adds	r2, r2, r4
 8005936:	eb45 0303 	adc.w	r3, r5, r3
 800593a:	f04f 0000 	mov.w	r0, #0
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	00d9      	lsls	r1, r3, #3
 8005944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005948:	00d0      	lsls	r0, r2, #3
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	eb12 0804 	adds.w	r8, r2, r4
 8005952:	eb43 0905 	adc.w	r9, r3, r5
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800596e:	0082      	lsls	r2, r0, #2
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fa fc84 	bl	8000280 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <UART_SetConfig+0x38c>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	011e      	lsls	r6, r3, #4
 8005986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005988:	4618      	mov	r0, r3
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	1894      	adds	r4, r2, r2
 8005994:	60bc      	str	r4, [r7, #8]
 8005996:	415b      	adcs	r3, r3
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599e:	1812      	adds	r2, r2, r0
 80059a0:	eb41 0303 	adc.w	r3, r1, r3
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	f04f 0500 	mov.w	r5, #0
 80059ac:	00dd      	lsls	r5, r3, #3
 80059ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b2:	00d4      	lsls	r4, r2, #3
 80059b4:	4622      	mov	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	1814      	adds	r4, r2, r0
 80059ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80059bc:	414b      	adcs	r3, r1
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	008b      	lsls	r3, r1, #2
 80059d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059d8:	0082      	lsls	r2, r0, #2
 80059da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059de:	f7fa fc4f 	bl	8000280 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <UART_SetConfig+0x38c>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <UART_SetConfig+0x38c>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a06:	441e      	add	r6, r3
 8005a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	1894      	adds	r4, r2, r2
 8005a16:	603c      	str	r4, [r7, #0]
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a20:	1812      	adds	r2, r2, r0
 8005a22:	eb41 0303 	adc.w	r3, r1, r3
 8005a26:	f04f 0400 	mov.w	r4, #0
 8005a2a:	f04f 0500 	mov.w	r5, #0
 8005a2e:	00dd      	lsls	r5, r3, #3
 8005a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a34:	00d4      	lsls	r4, r2, #3
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8005a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a5a:	0082      	lsls	r2, r0, #2
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4659      	mov	r1, fp
 8005a60:	f7fa fc0e 	bl	8000280 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4432      	add	r2, r6
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	377c      	adds	r7, #124	; 0x7c
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <__NVIC_SetPriority>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b00:	2100      	movs	r1, #0
 8005b02:	f06f 0004 	mvn.w	r0, #4
 8005b06:	f7ff ffcf 	bl	8005aa8 <__NVIC_SetPriority>
#endif
}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b16:	f3ef 8305 	mrs	r3, IPSR
 8005b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b22:	f06f 0305 	mvn.w	r3, #5
 8005b26:	607b      	str	r3, [r7, #4]
 8005b28:	e00c      	b.n	8005b44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <osKernelInitialize+0x44>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d105      	bne.n	8005b3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <osKernelInitialize+0x44>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	e002      	b.n	8005b44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b44:	687b      	ldr	r3, [r7, #4]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200000c8 	.word	0x200000c8

08005b58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b5e:	f3ef 8305 	mrs	r3, IPSR
 8005b62:	603b      	str	r3, [r7, #0]
  return(result);
 8005b64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b6a:	f06f 0305 	mvn.w	r3, #5
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	e010      	b.n	8005b94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <osKernelStart+0x48>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d109      	bne.n	8005b8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b7a:	f7ff ffbf 	bl	8005afc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <osKernelStart+0x48>)
 8005b80:	2202      	movs	r2, #2
 8005b82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b84:	f001 f96c 	bl	8006e60 <vTaskStartScheduler>
      stat = osOK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	e002      	b.n	8005b94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b94:	687b      	ldr	r3, [r7, #4]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200000c8 	.word	0x200000c8

08005ba4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af04      	add	r7, sp, #16
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb4:	f3ef 8305 	mrs	r3, IPSR
 8005bb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005bba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d17e      	bne.n	8005cbe <osThreadNew+0x11a>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d07b      	beq.n	8005cbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005bca:	2318      	movs	r3, #24
 8005bcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d045      	beq.n	8005c6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <osThreadNew+0x48>
        name = attr->name;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <osThreadNew+0x6e>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b38      	cmp	r3, #56	; 0x38
 8005c04:	d805      	bhi.n	8005c12 <osThreadNew+0x6e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <osThreadNew+0x72>
        return (NULL);
 8005c12:	2300      	movs	r3, #0
 8005c14:	e054      	b.n	8005cc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00e      	beq.n	8005c4c <osThreadNew+0xa8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b5b      	cmp	r3, #91	; 0x5b
 8005c34:	d90a      	bls.n	8005c4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d006      	beq.n	8005c4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <osThreadNew+0xa8>
        mem = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e010      	b.n	8005c6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10c      	bne.n	8005c6e <osThreadNew+0xca>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d108      	bne.n	8005c6e <osThreadNew+0xca>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <osThreadNew+0xca>
          mem = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	e001      	b.n	8005c6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d110      	bne.n	8005c96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c7c:	9202      	str	r2, [sp, #8]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fe0c 	bl	80068a8 <xTaskCreateStatic>
 8005c90:	4603      	mov	r3, r0
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e013      	b.n	8005cbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d110      	bne.n	8005cbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 fe57 	bl	8006962 <xTaskCreate>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d001      	beq.n	8005cbe <osThreadNew+0x11a>
            hTask = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005cbe:	693b      	ldr	r3, [r7, #16]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3728      	adds	r7, #40	; 0x28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd0:	f3ef 8305 	mrs	r3, IPSR
 8005cd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <osDelay+0x1c>
    stat = osErrorISR;
 8005cdc:	f06f 0305 	mvn.w	r3, #5
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e007      	b.n	8005cf4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 ff7c 	bl	8006bec <vTaskDelay>
    }
  }

  return (stat);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a07      	ldr	r2, [pc, #28]	; (8005d2c <vApplicationGetIdleTaskMemory+0x2c>)
 8005d10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4a06      	ldr	r2, [pc, #24]	; (8005d30 <vApplicationGetIdleTaskMemory+0x30>)
 8005d16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	200000cc 	.word	0x200000cc
 8005d30:	20000128 	.word	0x20000128

08005d34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <vApplicationGetTimerTaskMemory+0x30>)
 8005d4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	20000328 	.word	0x20000328
 8005d64:	20000384 	.word	0x20000384

08005d68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f103 0208 	add.w	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d103      	bne.n	8005e2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e00c      	b.n	8005e44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e002      	b.n	8005e38 <vListInsert+0x2e>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d2f6      	bcs.n	8005e32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6892      	ldr	r2, [r2, #8]
 8005e92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6852      	ldr	r2, [r2, #4]
 8005e9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d103      	bne.n	8005eb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005efa:	f002 f953 	bl	80081a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	68f9      	ldr	r1, [r7, #12]
 8005f08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	22ff      	movs	r2, #255	; 0xff
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d114      	bne.n	8005f7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01a      	beq.n	8005f8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3310      	adds	r3, #16
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fa09 	bl	8007374 <xTaskRemoveFromEventList>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d012      	beq.n	8005f8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <xQueueGenericReset+0xcc>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	e009      	b.n	8005f8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3310      	adds	r3, #16
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fef2 	bl	8005d68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3324      	adds	r3, #36	; 0x24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff feed 	bl	8005d68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f8e:	f002 f939 	bl	8008204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f92:	2301      	movs	r3, #1
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <xQueueGenericCreateStatic+0x52>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <xQueueGenericCreateStatic+0x56>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueGenericCreateStatic+0x58>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xQueueGenericCreateStatic+0x7e>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <xQueueGenericCreateStatic+0x82>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueGenericCreateStatic+0x84>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61fb      	str	r3, [r7, #28]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800603e:	2350      	movs	r3, #80	; 0x50
 8006040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b50      	cmp	r3, #80	; 0x50
 8006046:	d00a      	beq.n	800605e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	61bb      	str	r3, [r7, #24]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800605e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006072:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f805 	bl	8006090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006088:	4618      	mov	r0, r3
 800608a:	3730      	adds	r7, #48	; 0x30
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060be:	2101      	movs	r1, #1
 80060c0:	69b8      	ldr	r0, [r7, #24]
 80060c2:	f7ff ff05 	bl	8005ed0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	; 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060e6:	2300      	movs	r3, #0
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueGenericSend+0x32>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <xQueueGenericSend+0x40>
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <xQueueGenericSend+0x44>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <xQueueGenericSend+0x46>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <xQueueGenericSend+0x60>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d103      	bne.n	8006146 <xQueueGenericSend+0x6e>
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <xQueueGenericSend+0x72>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericSend+0x74>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericSend+0x8e>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006166:	f001 fac3 	bl	80076f0 <xTaskGetSchedulerState>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <xQueueGenericSend+0x9e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <xQueueGenericSend+0xa2>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <xQueueGenericSend+0xa4>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <xQueueGenericSend+0xbe>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	61fb      	str	r3, [r7, #28]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006196:	f002 f805 	bl	80081a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <xQueueGenericSend+0xd4>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d129      	bne.n	8006200 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061b2:	f000 fa0b 	bl	80065cc <prvCopyDataToQueue>
 80061b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d010      	beq.n	80061e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	3324      	adds	r3, #36	; 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f8d5 	bl	8007374 <xTaskRemoveFromEventList>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d013      	beq.n	80061f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061d0:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <xQueueGenericSend+0x1f8>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	e00a      	b.n	80061f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061e8:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <xQueueGenericSend+0x1f8>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061f8:	f002 f804 	bl	8008204 <vPortExitCritical>
				return pdPASS;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e063      	b.n	80062c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006206:	f001 fffd 	bl	8008204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800620a:	2300      	movs	r3, #0
 800620c:	e05c      	b.n	80062c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006214:	f107 0314 	add.w	r3, r7, #20
 8006218:	4618      	mov	r0, r3
 800621a:	f001 f90f 	bl	800743c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800621e:	2301      	movs	r3, #1
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006222:	f001 ffef 	bl	8008204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006226:	f000 fe81 	bl	8006f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800622a:	f001 ffbb 	bl	80081a4 <vPortEnterCritical>
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006234:	b25b      	sxtb	r3, r3
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d103      	bne.n	8006244 <xQueueGenericSend+0x16c>
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800624a:	b25b      	sxtb	r3, r3
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d103      	bne.n	800625a <xQueueGenericSend+0x182>
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625a:	f001 ffd3 	bl	8008204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800625e:	1d3a      	adds	r2, r7, #4
 8006260:	f107 0314 	add.w	r3, r7, #20
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f001 f8fe 	bl	8007468 <xTaskCheckForTimeOut>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d124      	bne.n	80062bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006274:	f000 faa2 	bl	80067bc <prvIsQueueFull>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d018      	beq.n	80062b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	3310      	adds	r3, #16
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f824 	bl	80072d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800628c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800628e:	f000 fa2d 	bl	80066ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006292:	f000 fe59 	bl	8006f48 <xTaskResumeAll>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	f47f af7c 	bne.w	8006196 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <xQueueGenericSend+0x1f8>)
 80062a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	e772      	b.n	8006196 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b2:	f000 fa1b 	bl	80066ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062b6:	f000 fe47 	bl	8006f48 <xTaskResumeAll>
 80062ba:	e76c      	b.n	8006196 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062be:	f000 fa15 	bl	80066ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062c2:	f000 fe41 	bl	8006f48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3738      	adds	r7, #56	; 0x38
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b090      	sub	sp, #64	; 0x40
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <xQueueGenericSendFromISR+0x3c>
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <xQueueGenericSendFromISR+0x40>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <xQueueGenericSendFromISR+0x42>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d103      	bne.n	800633e <xQueueGenericSendFromISR+0x6a>
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <xQueueGenericSendFromISR+0x6e>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <xQueueGenericSendFromISR+0x70>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	623b      	str	r3, [r7, #32]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800635e:	f002 f803 	bl	8008368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006362:	f3ef 8211 	mrs	r2, BASEPRI
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	61fa      	str	r2, [r7, #28]
 8006378:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800637a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <xQueueGenericSendFromISR+0xbc>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d12f      	bne.n	80063f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063a6:	f000 f911 	bl	80065cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d112      	bne.n	80063da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d016      	beq.n	80063ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 ffd7 	bl	8007374 <xTaskRemoveFromEventList>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00e      	beq.n	80063ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e007      	b.n	80063ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063de:	3301      	adds	r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	b25a      	sxtb	r2, r3
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063ea:	2301      	movs	r3, #1
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063ee:	e001      	b.n	80063f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006402:	4618      	mov	r0, r3
 8006404:	3740      	adds	r7, #64	; 0x40
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <xQueueReceive+0x30>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	623b      	str	r3, [r7, #32]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <xQueueReceive+0x3e>
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <xQueueReceive+0x42>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueReceive+0x44>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueReceive+0x5e>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	61fb      	str	r3, [r7, #28]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800646a:	f001 f941 	bl	80076f0 <xTaskGetSchedulerState>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <xQueueReceive+0x6e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueReceive+0x72>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueReceive+0x74>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueReceive+0x8e>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61bb      	str	r3, [r7, #24]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800649a:	f001 fe83 	bl	80081a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01f      	beq.n	80064ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ae:	f000 f8f7 	bl	80066a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1e5a      	subs	r2, r3, #1
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00f      	beq.n	80064e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	3310      	adds	r3, #16
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff54 	bl	8007374 <xTaskRemoveFromEventList>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064d2:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <xQueueReceive+0x1bc>)
 80064d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064e2:	f001 fe8f 	bl	8008204 <vPortExitCritical>
				return pdPASS;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e069      	b.n	80065be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064f0:	f001 fe88 	bl	8008204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e062      	b.n	80065be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064fe:	f107 0310 	add.w	r3, r7, #16
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ff9a 	bl	800743c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800650c:	f001 fe7a 	bl	8008204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006510:	f000 fd0c 	bl	8006f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006514:	f001 fe46 	bl	80081a4 <vPortEnterCritical>
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800651e:	b25b      	sxtb	r3, r3
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d103      	bne.n	800652e <xQueueReceive+0x122>
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006534:	b25b      	sxtb	r3, r3
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d103      	bne.n	8006544 <xQueueReceive+0x138>
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006544:	f001 fe5e 	bl	8008204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006548:	1d3a      	adds	r2, r7, #4
 800654a:	f107 0310 	add.w	r3, r7, #16
 800654e:	4611      	mov	r1, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f000 ff89 	bl	8007468 <xTaskCheckForTimeOut>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d123      	bne.n	80065a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655e:	f000 f917 	bl	8006790 <prvIsQueueEmpty>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d017      	beq.n	8006598 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	3324      	adds	r3, #36	; 0x24
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f000 feaf 	bl	80072d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006578:	f000 f8b8 	bl	80066ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800657c:	f000 fce4 	bl	8006f48 <xTaskResumeAll>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d189      	bne.n	800649a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <xQueueReceive+0x1bc>)
 8006588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	e780      	b.n	800649a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659a:	f000 f8a7 	bl	80066ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800659e:	f000 fcd3 	bl	8006f48 <xTaskResumeAll>
 80065a2:	e77a      	b.n	800649a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a6:	f000 f8a1 	bl	80066ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065aa:	f000 fccd 	bl	8006f48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b0:	f000 f8ee 	bl	8006790 <prvIsQueueEmpty>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f43f af6f 	beq.w	800649a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3730      	adds	r7, #48	; 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d14d      	bne.n	800668e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f898 	bl	800772c <xTaskPriorityDisinherit>
 80065fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	e043      	b.n	800668e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d119      	bne.n	8006640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6858      	ldr	r0, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	461a      	mov	r2, r3
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	f002 f8fa 	bl	8008810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	441a      	add	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d32b      	bcc.n	800668e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e026      	b.n	800668e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68d8      	ldr	r0, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	461a      	mov	r2, r3
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	f002 f8e0 	bl	8008810 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	425b      	negs	r3, r3
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d207      	bcs.n	800667c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	425b      	negs	r3, r3
 8006676:	441a      	add	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d105      	bne.n	800668e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	3b01      	subs	r3, #1
 800668c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006696:	697b      	ldr	r3, [r7, #20]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d303      	bcc.n	80066d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68d9      	ldr	r1, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	461a      	mov	r2, r3
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	f002 f896 	bl	8008810 <memcpy>
	}
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066f4:	f001 fd56 	bl	80081a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006700:	e011      	b.n	8006726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d012      	beq.n	8006730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3324      	adds	r3, #36	; 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fe30 	bl	8007374 <xTaskRemoveFromEventList>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800671a:	f000 ff07 	bl	800752c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	3b01      	subs	r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dce9      	bgt.n	8006702 <prvUnlockQueue+0x16>
 800672e:	e000      	b.n	8006732 <prvUnlockQueue+0x46>
					break;
 8006730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800673a:	f001 fd63 	bl	8008204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800673e:	f001 fd31 	bl	80081a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800674a:	e011      	b.n	8006770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d012      	beq.n	800677a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3310      	adds	r3, #16
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fe0b 	bl	8007374 <xTaskRemoveFromEventList>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006764:	f000 fee2 	bl	800752c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	3b01      	subs	r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	dce9      	bgt.n	800674c <prvUnlockQueue+0x60>
 8006778:	e000      	b.n	800677c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800677a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	22ff      	movs	r2, #255	; 0xff
 8006780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006784:	f001 fd3e 	bl	8008204 <vPortExitCritical>
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006798:	f001 fd04 	bl	80081a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e001      	b.n	80067ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ae:	f001 fd29 	bl	8008204 <vPortExitCritical>

	return xReturn;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067c4:	f001 fcee 	bl	80081a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d102      	bne.n	80067da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e001      	b.n	80067de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067de:	f001 fd11 	bl	8008204 <vPortExitCritical>

	return xReturn;
 80067e2:	68fb      	ldr	r3, [r7, #12]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e014      	b.n	8006826 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067fc:	4a0f      	ldr	r2, [pc, #60]	; (800683c <vQueueAddToRegistry+0x50>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006808:	490c      	ldr	r1, [pc, #48]	; (800683c <vQueueAddToRegistry+0x50>)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <vQueueAddToRegistry+0x50>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800681e:	e006      	b.n	800682e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b07      	cmp	r3, #7
 800682a:	d9e7      	bls.n	80067fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20004c60 	.word	0x20004c60

08006840 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006850:	f001 fca8 	bl	80081a4 <vPortEnterCritical>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800685a:	b25b      	sxtb	r3, r3
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d103      	bne.n	800686a <vQueueWaitForMessageRestricted+0x2a>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006870:	b25b      	sxtb	r3, r3
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d103      	bne.n	8006880 <vQueueWaitForMessageRestricted+0x40>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006880:	f001 fcc0 	bl	8008204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3324      	adds	r3, #36	; 0x24
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fd41 	bl	800731c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800689a:	6978      	ldr	r0, [r7, #20]
 800689c:	f7ff ff26 	bl	80066ec <prvUnlockQueue>
	}
 80068a0:	bf00      	nop
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08e      	sub	sp, #56	; 0x38
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	623b      	str	r3, [r7, #32]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xTaskCreateStatic+0x46>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	61fb      	str	r3, [r7, #28]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068ee:	235c      	movs	r3, #92	; 0x5c
 80068f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b5c      	cmp	r3, #92	; 0x5c
 80068f6:	d00a      	beq.n	800690e <xTaskCreateStatic+0x66>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	61bb      	str	r3, [r7, #24]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800690e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01e      	beq.n	8006954 <xTaskCreateStatic+0xac>
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01b      	beq.n	8006954 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006924:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	2202      	movs	r2, #2
 800692a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800692e:	2300      	movs	r3, #0
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	9302      	str	r3, [sp, #8]
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f850 	bl	80069ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800694c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800694e:	f000 f8dd 	bl	8006b0c <prvAddNewTaskToReadyList>
 8006952:	e001      	b.n	8006958 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006958:	697b      	ldr	r3, [r7, #20]
	}
 800695a:	4618      	mov	r0, r3
 800695c:	3728      	adds	r7, #40	; 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08c      	sub	sp, #48	; 0x30
 8006966:	af04      	add	r7, sp, #16
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4618      	mov	r0, r3
 8006978:	f001 fd36 	bl	80083e8 <pvPortMalloc>
 800697c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006984:	205c      	movs	r0, #92	; 0x5c
 8006986:	f001 fd2f 	bl	80083e8 <pvPortMalloc>
 800698a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
 8006998:	e005      	b.n	80069a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800699a:	6978      	ldr	r0, [r7, #20]
 800699c:	f001 fdf0 	bl	8008580 <vPortFree>
 80069a0:	e001      	b.n	80069a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d017      	beq.n	80069dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069b4:	88fa      	ldrh	r2, [r7, #6]
 80069b6:	2300      	movs	r3, #0
 80069b8:	9303      	str	r3, [sp, #12]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	9302      	str	r3, [sp, #8]
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f80e 	bl	80069ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069d0:	69f8      	ldr	r0, [r7, #28]
 80069d2:	f000 f89b 	bl	8006b0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e002      	b.n	80069e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
 80069e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069e2:	69bb      	ldr	r3, [r7, #24]
	}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	461a      	mov	r2, r3
 8006a04:	21a5      	movs	r1, #165	; 0xa5
 8006a06:	f001 ff11 	bl	800882c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	3b01      	subs	r3, #1
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f023 0307 	bic.w	r3, r3, #7
 8006a22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	617b      	str	r3, [r7, #20]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01f      	beq.n	8006a8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e012      	b.n	8006a76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	7819      	ldrb	r1, [r3, #0]
 8006a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3334      	adds	r3, #52	; 0x34
 8006a60:	460a      	mov	r2, r1
 8006a62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	3301      	adds	r3, #1
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b0f      	cmp	r3, #15
 8006a7a:	d9e9      	bls.n	8006a50 <prvInitialiseNewTask+0x64>
 8006a7c:	e000      	b.n	8006a80 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a88:	e003      	b.n	8006a92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	2b37      	cmp	r3, #55	; 0x37
 8006a96:	d901      	bls.n	8006a9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a98:	2337      	movs	r3, #55	; 0x37
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	2200      	movs	r2, #0
 8006aac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff f978 	bl	8005da8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	3318      	adds	r3, #24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff f973 	bl	8005da8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2200      	movs	r2, #0
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	69b8      	ldr	r0, [r7, #24]
 8006aec:	f001 fa2e 	bl	8007f4c <pxPortInitialiseStack>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b02:	bf00      	nop
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b14:	f001 fb46 	bl	80081a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b18:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <prvAddNewTaskToReadyList+0xc4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <prvAddNewTaskToReadyList+0xc4>)
 8006b20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b22:	4b2c      	ldr	r3, [pc, #176]	; (8006bd4 <prvAddNewTaskToReadyList+0xc8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <prvAddNewTaskToReadyList+0xc8>)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <prvAddNewTaskToReadyList+0xc4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d110      	bne.n	8006b5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b38:	f000 fd1c 	bl	8007574 <prvInitialiseTaskLists>
 8006b3c:	e00d      	b.n	8006b5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b3e:	4b26      	ldr	r3, [pc, #152]	; (8006bd8 <prvAddNewTaskToReadyList+0xcc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b46:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <prvAddNewTaskToReadyList+0xc8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d802      	bhi.n	8006b5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <prvAddNewTaskToReadyList+0xc8>)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b5a:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <prvAddNewTaskToReadyList+0xd0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <prvAddNewTaskToReadyList+0xd0>)
 8006b62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <prvAddNewTaskToReadyList+0xd0>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <prvAddNewTaskToReadyList+0xd4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d903      	bls.n	8006b80 <prvAddNewTaskToReadyList+0x74>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <prvAddNewTaskToReadyList+0xd4>)
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4a15      	ldr	r2, [pc, #84]	; (8006be4 <prvAddNewTaskToReadyList+0xd8>)
 8006b8e:	441a      	add	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f7ff f913 	bl	8005dc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b9c:	f001 fb32 	bl	8008204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ba0:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <prvAddNewTaskToReadyList+0xcc>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00e      	beq.n	8006bc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <prvAddNewTaskToReadyList+0xc8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d207      	bcs.n	8006bc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvAddNewTaskToReadyList+0xdc>)
 8006bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000c58 	.word	0x20000c58
 8006bd4:	20000784 	.word	0x20000784
 8006bd8:	20000c64 	.word	0x20000c64
 8006bdc:	20000c74 	.word	0x20000c74
 8006be0:	20000c60 	.word	0x20000c60
 8006be4:	20000788 	.word	0x20000788
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d017      	beq.n	8006c2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <vTaskDelay+0x60>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <vTaskDelay+0x30>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60bb      	str	r3, [r7, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c1c:	f000 f986 	bl	8006f2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c20:	2100      	movs	r1, #0
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fdf0 	bl	8007808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c28:	f000 f98e 	bl	8006f48 <xTaskResumeAll>
 8006c2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d107      	bne.n	8006c44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <vTaskDelay+0x64>)
 8006c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000c80 	.word	0x20000c80
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c5c:	f001 faa2 	bl	80081a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <vTaskSuspend+0x18>
 8006c66:	4b30      	ldr	r3, [pc, #192]	; (8006d28 <vTaskSuspend+0xd4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	e000      	b.n	8006c6e <vTaskSuspend+0x1a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff f901 	bl	8005e7c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3318      	adds	r3, #24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f8f8 	bl	8005e7c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4826      	ldr	r0, [pc, #152]	; (8006d2c <vTaskSuspend+0xd8>)
 8006c94:	f7ff f895 	bl	8005dc2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d103      	bne.n	8006cac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006cac:	f001 faaa 	bl	8008204 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <vTaskSuspend+0xdc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006cb8:	f001 fa74 	bl	80081a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006cbc:	f000 fcf8 	bl	80076b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006cc0:	f001 faa0 	bl	8008204 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006cc4:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <vTaskSuspend+0xd4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d127      	bne.n	8006d1e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006cce:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <vTaskSuspend+0xdc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d017      	beq.n	8006d06 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006cd6:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <vTaskSuspend+0xe0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <vTaskSuspend+0xa0>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60bb      	str	r3, [r7, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006cf4:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <vTaskSuspend+0xe4>)
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d04:	e00b      	b.n	8006d1e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <vTaskSuspend+0xd8>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <vTaskSuspend+0xe8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d103      	bne.n	8006d1a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <vTaskSuspend+0xd4>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
	}
 8006d18:	e001      	b.n	8006d1e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006d1a:	f000 fa7d 	bl	8007218 <vTaskSwitchContext>
	}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000784 	.word	0x20000784
 8006d2c:	20000c44 	.word	0x20000c44
 8006d30:	20000c64 	.word	0x20000c64
 8006d34:	20000c80 	.word	0x20000c80
 8006d38:	e000ed04 	.word	0xe000ed04
 8006d3c:	20000c58 	.word	0x20000c58

08006d40 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60fb      	str	r3, [r7, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <prvTaskIsTaskSuspended+0x5c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d10a      	bne.n	8006d8c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <prvTaskIsTaskSuspended+0x60>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d005      	beq.n	8006d8c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d8c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000c44 	.word	0x20000c44
 8006da0:	20000c18 	.word	0x20000c18

08006da4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <vTaskResume+0x28>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60bb      	str	r3, [r7, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006dcc:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <vTaskResume+0xac>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d038      	beq.n	8006e48 <vTaskResume+0xa4>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d035      	beq.n	8006e48 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006ddc:	f001 f9e2 	bl	80081a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff ffad 	bl	8006d40 <prvTaskIsTaskSuspended>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02b      	beq.n	8006e44 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff f843 	bl	8005e7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <vTaskResume+0xb0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d903      	bls.n	8006e0a <vTaskResume+0x66>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	4a13      	ldr	r2, [pc, #76]	; (8006e54 <vTaskResume+0xb0>)
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <vTaskResume+0xb4>)
 8006e18:	441a      	add	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7fe ffce 	bl	8005dc2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <vTaskResume+0xac>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d307      	bcc.n	8006e44 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <vTaskResume+0xb8>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006e44:	f001 f9de 	bl	8008204 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000784 	.word	0x20000784
 8006e54:	20000c60 	.word	0x20000c60
 8006e58:	20000788 	.word	0x20000788
 8006e5c:	e000ed04 	.word	0xe000ed04

08006e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e6e:	463a      	mov	r2, r7
 8006e70:	1d39      	adds	r1, r7, #4
 8006e72:	f107 0308 	add.w	r3, r7, #8
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe ff42 	bl	8005d00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	9202      	str	r2, [sp, #8]
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	460a      	mov	r2, r1
 8006e8e:	4921      	ldr	r1, [pc, #132]	; (8006f14 <vTaskStartScheduler+0xb4>)
 8006e90:	4821      	ldr	r0, [pc, #132]	; (8006f18 <vTaskStartScheduler+0xb8>)
 8006e92:	f7ff fd09 	bl	80068a8 <xTaskCreateStatic>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <vTaskStartScheduler+0xbc>)
 8006e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e9c:	4b1f      	ldr	r3, [pc, #124]	; (8006f1c <vTaskStartScheduler+0xbc>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e001      	b.n	8006eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d102      	bne.n	8006eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006eb4:	f000 fcfc 	bl	80078b0 <xTimerCreateTimerTask>
 8006eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d116      	bne.n	8006eee <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ed4:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <vTaskStartScheduler+0xc0>)
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <vTaskStartScheduler+0xc4>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ee2:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <vTaskStartScheduler+0xc8>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ee8:	f001 f8ba 	bl	8008060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eec:	e00e      	b.n	8006f0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d10a      	bne.n	8006f0c <vTaskStartScheduler+0xac>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60fb      	str	r3, [r7, #12]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <vTaskStartScheduler+0xaa>
}
 8006f0c:	bf00      	nop
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	0800993c 	.word	0x0800993c
 8006f18:	08007545 	.word	0x08007545
 8006f1c:	20000c7c 	.word	0x20000c7c
 8006f20:	20000c78 	.word	0x20000c78
 8006f24:	20000c64 	.word	0x20000c64
 8006f28:	20000c5c 	.word	0x20000c5c

08006f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <vTaskSuspendAll+0x18>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <vTaskSuspendAll+0x18>)
 8006f38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f3a:	bf00      	nop
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20000c80 	.word	0x20000c80

08006f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f56:	4b42      	ldr	r3, [pc, #264]	; (8007060 <xTaskResumeAll+0x118>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	603b      	str	r3, [r7, #0]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f74:	f001 f916 	bl	80081a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f78:	4b39      	ldr	r3, [pc, #228]	; (8007060 <xTaskResumeAll+0x118>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	4a38      	ldr	r2, [pc, #224]	; (8007060 <xTaskResumeAll+0x118>)
 8006f80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f82:	4b37      	ldr	r3, [pc, #220]	; (8007060 <xTaskResumeAll+0x118>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d162      	bne.n	8007050 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f8a:	4b36      	ldr	r3, [pc, #216]	; (8007064 <xTaskResumeAll+0x11c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d05e      	beq.n	8007050 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f92:	e02f      	b.n	8006ff4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f94:	4b34      	ldr	r3, [pc, #208]	; (8007068 <xTaskResumeAll+0x120>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3318      	adds	r3, #24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe ff6b 	bl	8005e7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe ff66 	bl	8005e7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4b2d      	ldr	r3, [pc, #180]	; (800706c <xTaskResumeAll+0x124>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d903      	bls.n	8006fc4 <xTaskResumeAll+0x7c>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <xTaskResumeAll+0x124>)
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4a27      	ldr	r2, [pc, #156]	; (8007070 <xTaskResumeAll+0x128>)
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f7fe fef1 	bl	8005dc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe4:	4b23      	ldr	r3, [pc, #140]	; (8007074 <xTaskResumeAll+0x12c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fee:	4b22      	ldr	r3, [pc, #136]	; (8007078 <xTaskResumeAll+0x130>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <xTaskResumeAll+0x120>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1cb      	bne.n	8006f94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007002:	f000 fb55 	bl	80076b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007006:	4b1d      	ldr	r3, [pc, #116]	; (800707c <xTaskResumeAll+0x134>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d010      	beq.n	8007034 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007012:	f000 f847 	bl	80070a4 <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800701c:	4b16      	ldr	r3, [pc, #88]	; (8007078 <xTaskResumeAll+0x130>)
 800701e:	2201      	movs	r2, #1
 8007020:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f1      	bne.n	8007012 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <xTaskResumeAll+0x134>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007034:	4b10      	ldr	r3, [pc, #64]	; (8007078 <xTaskResumeAll+0x130>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <xTaskResumeAll+0x138>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007050:	f001 f8d8 	bl	8008204 <vPortExitCritical>

	return xAlreadyYielded;
 8007054:	68bb      	ldr	r3, [r7, #8]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000c80 	.word	0x20000c80
 8007064:	20000c58 	.word	0x20000c58
 8007068:	20000c18 	.word	0x20000c18
 800706c:	20000c60 	.word	0x20000c60
 8007070:	20000788 	.word	0x20000788
 8007074:	20000784 	.word	0x20000784
 8007078:	20000c6c 	.word	0x20000c6c
 800707c:	20000c68 	.word	0x20000c68
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <xTaskGetTickCount+0x1c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007090:	687b      	ldr	r3, [r7, #4]
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20000c5c 	.word	0x20000c5c

080070a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ae:	4b4f      	ldr	r3, [pc, #316]	; (80071ec <xTaskIncrementTick+0x148>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 808f 	bne.w	80071d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b8:	4b4d      	ldr	r3, [pc, #308]	; (80071f0 <xTaskIncrementTick+0x14c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070c0:	4a4b      	ldr	r2, [pc, #300]	; (80071f0 <xTaskIncrementTick+0x14c>)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d120      	bne.n	800710e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070cc:	4b49      	ldr	r3, [pc, #292]	; (80071f4 <xTaskIncrementTick+0x150>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <xTaskIncrementTick+0x48>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	603b      	str	r3, [r7, #0]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <xTaskIncrementTick+0x46>
 80070ec:	4b41      	ldr	r3, [pc, #260]	; (80071f4 <xTaskIncrementTick+0x150>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	4b41      	ldr	r3, [pc, #260]	; (80071f8 <xTaskIncrementTick+0x154>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a3f      	ldr	r2, [pc, #252]	; (80071f4 <xTaskIncrementTick+0x150>)
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4a3f      	ldr	r2, [pc, #252]	; (80071f8 <xTaskIncrementTick+0x154>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	4b3e      	ldr	r3, [pc, #248]	; (80071fc <xTaskIncrementTick+0x158>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	4a3d      	ldr	r2, [pc, #244]	; (80071fc <xTaskIncrementTick+0x158>)
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	f000 fad1 	bl	80076b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800710e:	4b3c      	ldr	r3, [pc, #240]	; (8007200 <xTaskIncrementTick+0x15c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	429a      	cmp	r2, r3
 8007116:	d349      	bcc.n	80071ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007118:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <xTaskIncrementTick+0x150>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d104      	bne.n	800712c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <xTaskIncrementTick+0x15c>)
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	601a      	str	r2, [r3, #0]
					break;
 800712a:	e03f      	b.n	80071ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712c:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <xTaskIncrementTick+0x150>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d203      	bcs.n	800714c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007144:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <xTaskIncrementTick+0x15c>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800714a:	e02f      	b.n	80071ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3304      	adds	r3, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fe93 	bl	8005e7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	3318      	adds	r3, #24
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fe8a 	bl	8005e7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b25      	ldr	r3, [pc, #148]	; (8007204 <xTaskIncrementTick+0x160>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d903      	bls.n	800717c <xTaskIncrementTick+0xd8>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	4a22      	ldr	r2, [pc, #136]	; (8007204 <xTaskIncrementTick+0x160>)
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <xTaskIncrementTick+0x164>)
 800718a:	441a      	add	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7fe fe15 	bl	8005dc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <xTaskIncrementTick+0x168>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3b8      	bcc.n	8007118 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071a6:	2301      	movs	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071aa:	e7b5      	b.n	8007118 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b17      	ldr	r3, [pc, #92]	; (800720c <xTaskIncrementTick+0x168>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	4915      	ldr	r1, [pc, #84]	; (8007208 <xTaskIncrementTick+0x164>)
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	440b      	add	r3, r1
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d901      	bls.n	80071c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071c8:	4b11      	ldr	r3, [pc, #68]	; (8007210 <xTaskIncrementTick+0x16c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e004      	b.n	80071e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <xTaskIncrementTick+0x170>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	4a0d      	ldr	r2, [pc, #52]	; (8007214 <xTaskIncrementTick+0x170>)
 80071de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071e0:	697b      	ldr	r3, [r7, #20]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000c80 	.word	0x20000c80
 80071f0:	20000c5c 	.word	0x20000c5c
 80071f4:	20000c10 	.word	0x20000c10
 80071f8:	20000c14 	.word	0x20000c14
 80071fc:	20000c70 	.word	0x20000c70
 8007200:	20000c78 	.word	0x20000c78
 8007204:	20000c60 	.word	0x20000c60
 8007208:	20000788 	.word	0x20000788
 800720c:	20000784 	.word	0x20000784
 8007210:	20000c6c 	.word	0x20000c6c
 8007214:	20000c68 	.word	0x20000c68

08007218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800721e:	4b28      	ldr	r3, [pc, #160]	; (80072c0 <vTaskSwitchContext+0xa8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007226:	4b27      	ldr	r3, [pc, #156]	; (80072c4 <vTaskSwitchContext+0xac>)
 8007228:	2201      	movs	r2, #1
 800722a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800722c:	e041      	b.n	80072b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800722e:	4b25      	ldr	r3, [pc, #148]	; (80072c4 <vTaskSwitchContext+0xac>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <vTaskSwitchContext+0xb0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e010      	b.n	800725e <vTaskSwitchContext+0x46>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <vTaskSwitchContext+0x40>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	607b      	str	r3, [r7, #4]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <vTaskSwitchContext+0x3e>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3b01      	subs	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	491b      	ldr	r1, [pc, #108]	; (80072cc <vTaskSwitchContext+0xb4>)
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0e4      	beq.n	800723c <vTaskSwitchContext+0x24>
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4a13      	ldr	r2, [pc, #76]	; (80072cc <vTaskSwitchContext+0xb4>)
 800727e:	4413      	add	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	605a      	str	r2, [r3, #4]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3308      	adds	r3, #8
 8007294:	429a      	cmp	r2, r3
 8007296:	d104      	bne.n	80072a2 <vTaskSwitchContext+0x8a>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	605a      	str	r2, [r3, #4]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <vTaskSwitchContext+0xb8>)
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4a06      	ldr	r2, [pc, #24]	; (80072c8 <vTaskSwitchContext+0xb0>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6013      	str	r3, [r2, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000c80 	.word	0x20000c80
 80072c4:	20000c6c 	.word	0x20000c6c
 80072c8:	20000c60 	.word	0x20000c60
 80072cc:	20000788 	.word	0x20000788
 80072d0:	20000784 	.word	0x20000784

080072d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	60fb      	str	r3, [r7, #12]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072fa:	4b07      	ldr	r3, [pc, #28]	; (8007318 <vTaskPlaceOnEventList+0x44>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3318      	adds	r3, #24
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fe fd81 	bl	8005e0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007308:	2101      	movs	r1, #1
 800730a:	6838      	ldr	r0, [r7, #0]
 800730c:	f000 fa7c 	bl	8007808 <prvAddCurrentTaskToDelayedList>
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000784 	.word	0x20000784

0800731c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	617b      	str	r3, [r7, #20]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007344:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <vTaskPlaceOnEventListRestricted+0x54>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3318      	adds	r3, #24
 800734a:	4619      	mov	r1, r3
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7fe fd38 	bl	8005dc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007358:	f04f 33ff 	mov.w	r3, #4294967295
 800735c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	68b8      	ldr	r0, [r7, #8]
 8007362:	f000 fa51 	bl	8007808 <prvAddCurrentTaskToDelayedList>
	}
 8007366:	bf00      	nop
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000784 	.word	0x20000784

08007374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	60fb      	str	r3, [r7, #12]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3318      	adds	r3, #24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe fd69 	bl	8005e7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073aa:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <xTaskRemoveFromEventList+0xb0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d11d      	bne.n	80073ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fd60 	bl	8005e7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	4b19      	ldr	r3, [pc, #100]	; (8007428 <xTaskRemoveFromEventList+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d903      	bls.n	80073d0 <xTaskRemoveFromEventList+0x5c>
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <xTaskRemoveFromEventList+0xb4>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4a13      	ldr	r2, [pc, #76]	; (800742c <xTaskRemoveFromEventList+0xb8>)
 80073de:	441a      	add	r2, r3
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fe fceb 	bl	8005dc2 <vListInsertEnd>
 80073ec:	e005      	b.n	80073fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3318      	adds	r3, #24
 80073f2:	4619      	mov	r1, r3
 80073f4:	480e      	ldr	r0, [pc, #56]	; (8007430 <xTaskRemoveFromEventList+0xbc>)
 80073f6:	f7fe fce4 	bl	8005dc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <xTaskRemoveFromEventList+0xc0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	429a      	cmp	r2, r3
 8007406:	d905      	bls.n	8007414 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007408:	2301      	movs	r3, #1
 800740a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800740c:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <xTaskRemoveFromEventList+0xc4>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e001      	b.n	8007418 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007418:	697b      	ldr	r3, [r7, #20]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000c80 	.word	0x20000c80
 8007428:	20000c60 	.word	0x20000c60
 800742c:	20000788 	.word	0x20000788
 8007430:	20000c18 	.word	0x20000c18
 8007434:	20000784 	.word	0x20000784
 8007438:	20000c6c 	.word	0x20000c6c

0800743c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <vTaskInternalSetTimeOutState+0x24>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <vTaskInternalSetTimeOutState+0x28>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000c70 	.word	0x20000c70
 8007464:	20000c5c 	.word	0x20000c5c

08007468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10a      	bne.n	800748e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	613b      	str	r3, [r7, #16]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	60fb      	str	r3, [r7, #12]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074aa:	f000 fe7b 	bl	80081a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ae:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <xTaskCheckForTimeOut+0xbc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d102      	bne.n	80074ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e023      	b.n	8007516 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <xTaskCheckForTimeOut+0xc0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d007      	beq.n	80074ea <xTaskCheckForTimeOut+0x82>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d302      	bcc.n	80074ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074e4:	2301      	movs	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e015      	b.n	8007516 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d20b      	bcs.n	800750c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff ff9b 	bl	800743c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	e004      	b.n	8007516 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007512:	2301      	movs	r3, #1
 8007514:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007516:	f000 fe75 	bl	8008204 <vPortExitCritical>

	return xReturn;
 800751a:	69fb      	ldr	r3, [r7, #28]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000c5c 	.word	0x20000c5c
 8007528:	20000c70 	.word	0x20000c70

0800752c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007530:	4b03      	ldr	r3, [pc, #12]	; (8007540 <vTaskMissedYield+0x14>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
}
 8007536:	bf00      	nop
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	20000c6c 	.word	0x20000c6c

08007544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800754c:	f000 f852 	bl	80075f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <prvIdleTask+0x28>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d9f9      	bls.n	800754c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007558:	4b05      	ldr	r3, [pc, #20]	; (8007570 <prvIdleTask+0x2c>)
 800755a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007568:	e7f0      	b.n	800754c <prvIdleTask+0x8>
 800756a:	bf00      	nop
 800756c:	20000788 	.word	0x20000788
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800757a:	2300      	movs	r3, #0
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	e00c      	b.n	800759a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <prvInitialiseTaskLists+0x60>)
 800758c:	4413      	add	r3, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fbea 	bl	8005d68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3301      	adds	r3, #1
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b37      	cmp	r3, #55	; 0x37
 800759e:	d9ef      	bls.n	8007580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075a0:	480d      	ldr	r0, [pc, #52]	; (80075d8 <prvInitialiseTaskLists+0x64>)
 80075a2:	f7fe fbe1 	bl	8005d68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075a6:	480d      	ldr	r0, [pc, #52]	; (80075dc <prvInitialiseTaskLists+0x68>)
 80075a8:	f7fe fbde 	bl	8005d68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075ac:	480c      	ldr	r0, [pc, #48]	; (80075e0 <prvInitialiseTaskLists+0x6c>)
 80075ae:	f7fe fbdb 	bl	8005d68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075b2:	480c      	ldr	r0, [pc, #48]	; (80075e4 <prvInitialiseTaskLists+0x70>)
 80075b4:	f7fe fbd8 	bl	8005d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075b8:	480b      	ldr	r0, [pc, #44]	; (80075e8 <prvInitialiseTaskLists+0x74>)
 80075ba:	f7fe fbd5 	bl	8005d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075be:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <prvInitialiseTaskLists+0x78>)
 80075c0:	4a05      	ldr	r2, [pc, #20]	; (80075d8 <prvInitialiseTaskLists+0x64>)
 80075c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <prvInitialiseTaskLists+0x7c>)
 80075c6:	4a05      	ldr	r2, [pc, #20]	; (80075dc <prvInitialiseTaskLists+0x68>)
 80075c8:	601a      	str	r2, [r3, #0]
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000788 	.word	0x20000788
 80075d8:	20000be8 	.word	0x20000be8
 80075dc:	20000bfc 	.word	0x20000bfc
 80075e0:	20000c18 	.word	0x20000c18
 80075e4:	20000c2c 	.word	0x20000c2c
 80075e8:	20000c44 	.word	0x20000c44
 80075ec:	20000c10 	.word	0x20000c10
 80075f0:	20000c14 	.word	0x20000c14

080075f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075fa:	e019      	b.n	8007630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075fc:	f000 fdd2 	bl	80081a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <prvCheckTasksWaitingTermination+0x50>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe fc35 	bl	8005e7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007612:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <prvCheckTasksWaitingTermination+0x54>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3b01      	subs	r3, #1
 8007618:	4a0b      	ldr	r2, [pc, #44]	; (8007648 <prvCheckTasksWaitingTermination+0x54>)
 800761a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <prvCheckTasksWaitingTermination+0x58>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	4a0a      	ldr	r2, [pc, #40]	; (800764c <prvCheckTasksWaitingTermination+0x58>)
 8007624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007626:	f000 fded 	bl	8008204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f810 	bl	8007650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <prvCheckTasksWaitingTermination+0x58>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e1      	bne.n	80075fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000c2c 	.word	0x20000c2c
 8007648:	20000c58 	.word	0x20000c58
 800764c:	20000c40 	.word	0x20000c40

08007650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800765e:	2b00      	cmp	r3, #0
 8007660:	d108      	bne.n	8007674 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	4618      	mov	r0, r3
 8007668:	f000 ff8a 	bl	8008580 <vPortFree>
				vPortFree( pxTCB );
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 ff87 	bl	8008580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007672:	e018      	b.n	80076a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800767a:	2b01      	cmp	r3, #1
 800767c:	d103      	bne.n	8007686 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 ff7e 	bl	8008580 <vPortFree>
	}
 8007684:	e00f      	b.n	80076a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800768c:	2b02      	cmp	r3, #2
 800768e:	d00a      	beq.n	80076a6 <prvDeleteTCB+0x56>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	60fb      	str	r3, [r7, #12]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <prvDeleteTCB+0x54>
	}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvResetNextTaskUnblockTime+0x38>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <prvResetNextTaskUnblockTime+0x3c>)
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076c8:	e008      	b.n	80076dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <prvResetNextTaskUnblockTime+0x38>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a04      	ldr	r2, [pc, #16]	; (80076ec <prvResetNextTaskUnblockTime+0x3c>)
 80076da:	6013      	str	r3, [r2, #0]
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	20000c10 	.word	0x20000c10
 80076ec:	20000c78 	.word	0x20000c78

080076f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <xTaskGetSchedulerState+0x34>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076fe:	2301      	movs	r3, #1
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	e008      	b.n	8007716 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007704:	4b08      	ldr	r3, [pc, #32]	; (8007728 <xTaskGetSchedulerState+0x38>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800770c:	2302      	movs	r3, #2
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	e001      	b.n	8007716 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007712:	2300      	movs	r3, #0
 8007714:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007716:	687b      	ldr	r3, [r7, #4]
	}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000c64 	.word	0x20000c64
 8007728:	20000c80 	.word	0x20000c80

0800772c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d056      	beq.n	80077f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007742:	4b2e      	ldr	r3, [pc, #184]	; (80077fc <xTaskPriorityDisinherit+0xd0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	429a      	cmp	r2, r3
 800774a:	d00a      	beq.n	8007762 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60fb      	str	r3, [r7, #12]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	60bb      	str	r3, [r7, #8]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007784:	1e5a      	subs	r2, r3, #1
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007792:	429a      	cmp	r2, r3
 8007794:	d02c      	beq.n	80077f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d128      	bne.n	80077f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fb6a 	bl	8005e7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <xTaskPriorityDisinherit+0xd4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d903      	bls.n	80077d0 <xTaskPriorityDisinherit+0xa4>
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	4a0c      	ldr	r2, [pc, #48]	; (8007800 <xTaskPriorityDisinherit+0xd4>)
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4a09      	ldr	r2, [pc, #36]	; (8007804 <xTaskPriorityDisinherit+0xd8>)
 80077de:	441a      	add	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7fe faeb 	bl	8005dc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077f0:	697b      	ldr	r3, [r7, #20]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000784 	.word	0x20000784
 8007800:	20000c60 	.word	0x20000c60
 8007804:	20000788 	.word	0x20000788

08007808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007812:	4b21      	ldr	r3, [pc, #132]	; (8007898 <prvAddCurrentTaskToDelayedList+0x90>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007818:	4b20      	ldr	r3, [pc, #128]	; (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fb2c 	bl	8005e7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d10a      	bne.n	8007842 <prvAddCurrentTaskToDelayedList+0x3a>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007832:	4b1a      	ldr	r3, [pc, #104]	; (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4819      	ldr	r0, [pc, #100]	; (80078a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800783c:	f7fe fac1 	bl	8005dc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007840:	e026      	b.n	8007890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4413      	add	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800784a:	4b14      	ldr	r3, [pc, #80]	; (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	d209      	bcs.n	800786e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fe facf 	bl	8005e0a <vListInsert>
}
 800786c:	e010      	b.n	8007890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b0a      	ldr	r3, [pc, #40]	; (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f7fe fac5 	bl	8005e0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	d202      	bcs.n	8007890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800788a:	4a08      	ldr	r2, [pc, #32]	; (80078ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6013      	str	r3, [r2, #0]
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000c5c 	.word	0x20000c5c
 800789c:	20000784 	.word	0x20000784
 80078a0:	20000c44 	.word	0x20000c44
 80078a4:	20000c14 	.word	0x20000c14
 80078a8:	20000c10 	.word	0x20000c10
 80078ac:	20000c78 	.word	0x20000c78

080078b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ba:	f000 fb07 	bl	8007ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078be:	4b1c      	ldr	r3, [pc, #112]	; (8007930 <xTimerCreateTimerTask+0x80>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d021      	beq.n	800790a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078ce:	1d3a      	adds	r2, r7, #4
 80078d0:	f107 0108 	add.w	r1, r7, #8
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fa2b 	bl	8005d34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	9202      	str	r2, [sp, #8]
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	2302      	movs	r3, #2
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	2300      	movs	r3, #0
 80078ee:	460a      	mov	r2, r1
 80078f0:	4910      	ldr	r1, [pc, #64]	; (8007934 <xTimerCreateTimerTask+0x84>)
 80078f2:	4811      	ldr	r0, [pc, #68]	; (8007938 <xTimerCreateTimerTask+0x88>)
 80078f4:	f7fe ffd8 	bl	80068a8 <xTaskCreateStatic>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4a10      	ldr	r2, [pc, #64]	; (800793c <xTimerCreateTimerTask+0x8c>)
 80078fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <xTimerCreateTimerTask+0x8c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007906:	2301      	movs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	613b      	str	r3, [r7, #16]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007926:	697b      	ldr	r3, [r7, #20]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000cb4 	.word	0x20000cb4
 8007934:	08009944 	.word	0x08009944
 8007938:	08007a75 	.word	0x08007a75
 800793c:	20000cb8 	.word	0x20000cb8

08007940 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	623b      	str	r3, [r7, #32]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800796e:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <xTimerGenericCommand+0x98>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d02a      	beq.n	80079cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2b05      	cmp	r3, #5
 8007986:	dc18      	bgt.n	80079ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007988:	f7ff feb2 	bl	80076f0 <xTaskGetSchedulerState>
 800798c:	4603      	mov	r3, r0
 800798e:	2b02      	cmp	r3, #2
 8007990:	d109      	bne.n	80079a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <xTimerGenericCommand+0x98>)
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	f107 0110 	add.w	r1, r7, #16
 800799a:	2300      	movs	r3, #0
 800799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799e:	f7fe fb9b 	bl	80060d8 <xQueueGenericSend>
 80079a2:	6278      	str	r0, [r7, #36]	; 0x24
 80079a4:	e012      	b.n	80079cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079a6:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <xTimerGenericCommand+0x98>)
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	f107 0110 	add.w	r1, r7, #16
 80079ae:	2300      	movs	r3, #0
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7fe fb91 	bl	80060d8 <xQueueGenericSend>
 80079b6:	6278      	str	r0, [r7, #36]	; 0x24
 80079b8:	e008      	b.n	80079cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <xTimerGenericCommand+0x98>)
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	f107 0110 	add.w	r1, r7, #16
 80079c2:	2300      	movs	r3, #0
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	f7fe fc85 	bl	80062d4 <xQueueGenericSendFromISR>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3728      	adds	r7, #40	; 0x28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000cb4 	.word	0x20000cb4

080079dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e6:	4b22      	ldr	r3, [pc, #136]	; (8007a70 <prvProcessExpiredTimer+0x94>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fa41 	bl	8005e7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d022      	beq.n	8007a4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	18d1      	adds	r1, r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	6978      	ldr	r0, [r7, #20]
 8007a16:	f000 f8d1 	bl	8007bbc <prvInsertTimerInActiveList>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01f      	beq.n	8007a60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a20:	2300      	movs	r3, #0
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f7ff ff88 	bl	8007940 <xTimerGenericCommand>
 8007a30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d113      	bne.n	8007a60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	60fb      	str	r3, [r7, #12]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a54:	f023 0301 	bic.w	r3, r3, #1
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	6978      	ldr	r0, [r7, #20]
 8007a66:	4798      	blx	r3
}
 8007a68:	bf00      	nop
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000cac 	.word	0x20000cac

08007a74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a7c:	f107 0308 	add.w	r3, r7, #8
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 f857 	bl	8007b34 <prvGetNextExpireTime>
 8007a86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f803 	bl	8007a98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a92:	f000 f8d5 	bl	8007c40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a96:	e7f1      	b.n	8007a7c <prvTimerTask+0x8>

08007a98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007aa2:	f7ff fa43 	bl	8006f2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aa6:	f107 0308 	add.w	r3, r7, #8
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f866 	bl	8007b7c <prvSampleTimeNow>
 8007ab0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d130      	bne.n	8007b1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <prvProcessTimerOrBlockTask+0x3c>
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d806      	bhi.n	8007ad4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ac6:	f7ff fa3f 	bl	8006f48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ff85 	bl	80079dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ad2:	e024      	b.n	8007b1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ada:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <prvProcessTimerOrBlockTask+0x90>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <prvProcessTimerOrBlockTask+0x50>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <prvProcessTimerOrBlockTask+0x52>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <prvProcessTimerOrBlockTask+0x94>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	f7fe fea1 	bl	8006840 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007afe:	f7ff fa23 	bl	8006f48 <xTaskResumeAll>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <prvProcessTimerOrBlockTask+0x98>)
 8007b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	f3bf 8f6f 	isb	sy
}
 8007b18:	e001      	b.n	8007b1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b1a:	f7ff fa15 	bl	8006f48 <xTaskResumeAll>
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000cb0 	.word	0x20000cb0
 8007b2c:	20000cb4 	.word	0x20000cb4
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b3c:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <prvGetNextExpireTime+0x44>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <prvGetNextExpireTime+0x16>
 8007b46:	2201      	movs	r2, #1
 8007b48:	e000      	b.n	8007b4c <prvGetNextExpireTime+0x18>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d105      	bne.n	8007b64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b58:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <prvGetNextExpireTime+0x44>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e001      	b.n	8007b68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b68:	68fb      	ldr	r3, [r7, #12]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000cac 	.word	0x20000cac

08007b7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b84:	f7ff fa7e 	bl	8007084 <xTaskGetTickCount>
 8007b88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <prvSampleTimeNow+0x3c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d205      	bcs.n	8007ba0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b94:	f000 f936 	bl	8007e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ba6:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <prvSampleTimeNow+0x3c>)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bac:	68fb      	ldr	r3, [r7, #12]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000cbc 	.word	0x20000cbc

08007bbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d812      	bhi.n	8007c08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e01b      	b.n	8007c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <prvInsertTimerInActiveList+0x7c>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7fe f902 	bl	8005e0a <vListInsert>
 8007c06:	e012      	b.n	8007c2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d206      	bcs.n	8007c1e <prvInsertTimerInActiveList+0x62>
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e007      	b.n	8007c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <prvInsertTimerInActiveList+0x80>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3304      	adds	r3, #4
 8007c26:	4619      	mov	r1, r3
 8007c28:	4610      	mov	r0, r2
 8007c2a:	f7fe f8ee 	bl	8005e0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c2e:	697b      	ldr	r3, [r7, #20]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20000cb0 	.word	0x20000cb0
 8007c3c:	20000cac 	.word	0x20000cac

08007c40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08e      	sub	sp, #56	; 0x38
 8007c44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c46:	e0ca      	b.n	8007dde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da18      	bge.n	8007c80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c4e:	1d3b      	adds	r3, r7, #4
 8007c50:	3304      	adds	r3, #4
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	61fb      	str	r3, [r7, #28]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c76:	6850      	ldr	r0, [r2, #4]
 8007c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7a:	6892      	ldr	r2, [r2, #8]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f2c0 80aa 	blt.w	8007ddc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	3304      	adds	r3, #4
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe f8ef 	bl	8005e7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff ff6b 	bl	8007b7c <prvSampleTimeNow>
 8007ca6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	f200 8097 	bhi.w	8007dde <prvProcessReceivedCommands+0x19e>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <prvProcessReceivedCommands+0x78>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007ce1 	.word	0x08007ce1
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce1 	.word	0x08007ce1
 8007cc4:	08007d55 	.word	0x08007d55
 8007cc8:	08007d69 	.word	0x08007d69
 8007ccc:	08007db3 	.word	0x08007db3
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007ce1 	.word	0x08007ce1
 8007cd8:	08007d55 	.word	0x08007d55
 8007cdc:	08007d69 	.word	0x08007d69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce6:	f043 0301 	orr.w	r3, r3, #1
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	18d1      	adds	r1, r2, r3
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d00:	f7ff ff5c 	bl	8007bbc <prvInsertTimerInActiveList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d069      	beq.n	8007dde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d05e      	beq.n	8007dde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	441a      	add	r2, r3
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d32:	f7ff fe05 	bl	8007940 <xTimerGenericCommand>
 8007d36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d14f      	bne.n	8007dde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	61bb      	str	r3, [r7, #24]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5a:	f023 0301 	bic.w	r3, r3, #1
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d66:	e03a      	b.n	8007dde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	617b      	str	r3, [r7, #20]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	18d1      	adds	r1, r2, r3
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dac:	f7ff ff06 	bl	8007bbc <prvInsertTimerInActiveList>
					break;
 8007db0:	e015      	b.n	8007dde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc2:	f000 fbdd 	bl	8008580 <vPortFree>
 8007dc6:	e00a      	b.n	8007dde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dda:	e000      	b.n	8007dde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <prvProcessReceivedCommands+0x1c0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	1d39      	adds	r1, r7, #4
 8007de4:	2200      	movs	r2, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fb10 	bl	800640c <xQueueReceive>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f47f af2a 	bne.w	8007c48 <prvProcessReceivedCommands+0x8>
	}
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	3730      	adds	r7, #48	; 0x30
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000cb4 	.word	0x20000cb4

08007e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e0a:	e048      	b.n	8007e9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e0c:	4b2d      	ldr	r3, [pc, #180]	; (8007ec4 <prvSwitchTimerLists+0xc0>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e16:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <prvSwitchTimerLists+0xc0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe f829 	bl	8005e7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02e      	beq.n	8007e9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d90e      	bls.n	8007e70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e5e:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <prvSwitchTimerLists+0xc0>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fd ffce 	bl	8005e0a <vListInsert>
 8007e6e:	e016      	b.n	8007e9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e70:	2300      	movs	r3, #0
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f7ff fd60 	bl	8007940 <xTimerGenericCommand>
 8007e80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	603b      	str	r3, [r7, #0]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e9e:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <prvSwitchTimerLists+0xc0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1b1      	bne.n	8007e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <prvSwitchTimerLists+0xc0>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <prvSwitchTimerLists+0xc0>)
 8007eb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007eb6:	4a04      	ldr	r2, [pc, #16]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	6013      	str	r3, [r2, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000cac 	.word	0x20000cac
 8007ec8:	20000cb0 	.word	0x20000cb0

08007ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ed2:	f000 f967 	bl	80081a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d120      	bne.n	8007f20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ede:	4814      	ldr	r0, [pc, #80]	; (8007f30 <prvCheckForValidListAndQueue+0x64>)
 8007ee0:	f7fd ff42 	bl	8005d68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ee4:	4813      	ldr	r0, [pc, #76]	; (8007f34 <prvCheckForValidListAndQueue+0x68>)
 8007ee6:	f7fd ff3f 	bl	8005d68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007eea:	4b13      	ldr	r3, [pc, #76]	; (8007f38 <prvCheckForValidListAndQueue+0x6c>)
 8007eec:	4a10      	ldr	r2, [pc, #64]	; (8007f30 <prvCheckForValidListAndQueue+0x64>)
 8007eee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ef0:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <prvCheckForValidListAndQueue+0x70>)
 8007ef2:	4a10      	ldr	r2, [pc, #64]	; (8007f34 <prvCheckForValidListAndQueue+0x68>)
 8007ef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <prvCheckForValidListAndQueue+0x74>)
 8007efc:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <prvCheckForValidListAndQueue+0x78>)
 8007efe:	2110      	movs	r1, #16
 8007f00:	200a      	movs	r0, #10
 8007f02:	f7fe f84d 	bl	8005fa0 <xQueueGenericCreateStatic>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007f0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f0c:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	490b      	ldr	r1, [pc, #44]	; (8007f48 <prvCheckForValidListAndQueue+0x7c>)
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fc66 	bl	80067ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f20:	f000 f970 	bl	8008204 <vPortExitCritical>
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000cb4 	.word	0x20000cb4
 8007f30:	20000c84 	.word	0x20000c84
 8007f34:	20000c98 	.word	0x20000c98
 8007f38:	20000cac 	.word	0x20000cac
 8007f3c:	20000cb0 	.word	0x20000cb0
 8007f40:	20000d60 	.word	0x20000d60
 8007f44:	20000cc0 	.word	0x20000cc0
 8007f48:	0800994c 	.word	0x0800994c

08007f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3b04      	subs	r3, #4
 8007f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f023 0201 	bic.w	r2, r3, #1
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f7c:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <pxPortInitialiseStack+0x64>)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b14      	subs	r3, #20
 8007f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3b04      	subs	r3, #4
 8007f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f06f 0202 	mvn.w	r2, #2
 8007f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3b20      	subs	r3, #32
 8007fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	08007fb5 	.word	0x08007fb5

08007fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fbe:	4b12      	ldr	r3, [pc, #72]	; (8008008 <prvTaskExitError+0x54>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d00a      	beq.n	8007fde <prvTaskExitError+0x2a>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	60fb      	str	r3, [r7, #12]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <prvTaskExitError+0x28>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	60bb      	str	r3, [r7, #8]
}
 8007ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ff2:	bf00      	nop
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0fc      	beq.n	8007ff4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20000028 	.word	0x20000028
 800800c:	00000000 	.word	0x00000000

08008010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <pxCurrentTCBConst2>)
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	6808      	ldr	r0, [r1, #0]
 8008016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	f380 8809 	msr	PSP, r0
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	4770      	bx	lr
 800802c:	f3af 8000 	nop.w

08008030 <pxCurrentTCBConst2>:
 8008030:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008038:	4808      	ldr	r0, [pc, #32]	; (800805c <prvPortStartFirstTask+0x24>)
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	6800      	ldr	r0, [r0, #0]
 800803e:	f380 8808 	msr	MSP, r0
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8814 	msr	CONTROL, r0
 800804a:	b662      	cpsie	i
 800804c:	b661      	cpsie	f
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	df00      	svc	0
 8008058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800805a:	bf00      	nop
 800805c:	e000ed08 	.word	0xe000ed08

08008060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008066:	4b46      	ldr	r3, [pc, #280]	; (8008180 <xPortStartScheduler+0x120>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a46      	ldr	r2, [pc, #280]	; (8008184 <xPortStartScheduler+0x124>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10a      	bne.n	8008086 <xPortStartScheduler+0x26>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	613b      	str	r3, [r7, #16]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008086:	4b3e      	ldr	r3, [pc, #248]	; (8008180 <xPortStartScheduler+0x120>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a3f      	ldr	r2, [pc, #252]	; (8008188 <xPortStartScheduler+0x128>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d10a      	bne.n	80080a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60fb      	str	r3, [r7, #12]
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080a6:	4b39      	ldr	r3, [pc, #228]	; (800818c <xPortStartScheduler+0x12c>)
 80080a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	22ff      	movs	r2, #255	; 0xff
 80080b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	4b31      	ldr	r3, [pc, #196]	; (8008190 <xPortStartScheduler+0x130>)
 80080cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080ce:	4b31      	ldr	r3, [pc, #196]	; (8008194 <xPortStartScheduler+0x134>)
 80080d0:	2207      	movs	r2, #7
 80080d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080d4:	e009      	b.n	80080ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080d6:	4b2f      	ldr	r3, [pc, #188]	; (8008194 <xPortStartScheduler+0x134>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3b01      	subs	r3, #1
 80080dc:	4a2d      	ldr	r2, [pc, #180]	; (8008194 <xPortStartScheduler+0x134>)
 80080de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f2:	2b80      	cmp	r3, #128	; 0x80
 80080f4:	d0ef      	beq.n	80080d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080f6:	4b27      	ldr	r3, [pc, #156]	; (8008194 <xPortStartScheduler+0x134>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1c3 0307 	rsb	r3, r3, #7
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d00a      	beq.n	8008118 <xPortStartScheduler+0xb8>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	60bb      	str	r3, [r7, #8]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008118:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <xPortStartScheduler+0x134>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <xPortStartScheduler+0x134>)
 8008120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008122:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <xPortStartScheduler+0x134>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800812a:	4a1a      	ldr	r2, [pc, #104]	; (8008194 <xPortStartScheduler+0x134>)
 800812c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	b2da      	uxtb	r2, r3
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008136:	4b18      	ldr	r3, [pc, #96]	; (8008198 <xPortStartScheduler+0x138>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a17      	ldr	r2, [pc, #92]	; (8008198 <xPortStartScheduler+0x138>)
 800813c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <xPortStartScheduler+0x138>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a14      	ldr	r2, [pc, #80]	; (8008198 <xPortStartScheduler+0x138>)
 8008148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800814c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800814e:	f000 f8dd 	bl	800830c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008152:	4b12      	ldr	r3, [pc, #72]	; (800819c <xPortStartScheduler+0x13c>)
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008158:	f000 f8fc 	bl	8008354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800815c:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <xPortStartScheduler+0x140>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0f      	ldr	r2, [pc, #60]	; (80081a0 <xPortStartScheduler+0x140>)
 8008162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008168:	f7ff ff66 	bl	8008038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800816c:	f7ff f854 	bl	8007218 <vTaskSwitchContext>
	prvTaskExitError();
 8008170:	f7ff ff20 	bl	8007fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	e000ed00 	.word	0xe000ed00
 8008184:	410fc271 	.word	0x410fc271
 8008188:	410fc270 	.word	0x410fc270
 800818c:	e000e400 	.word	0xe000e400
 8008190:	20000db0 	.word	0x20000db0
 8008194:	20000db4 	.word	0x20000db4
 8008198:	e000ed20 	.word	0xe000ed20
 800819c:	20000028 	.word	0x20000028
 80081a0:	e000ef34 	.word	0xe000ef34

080081a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	607b      	str	r3, [r7, #4]
}
 80081bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081be:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <vPortEnterCritical+0x58>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	4a0d      	ldr	r2, [pc, #52]	; (80081fc <vPortEnterCritical+0x58>)
 80081c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081c8:	4b0c      	ldr	r3, [pc, #48]	; (80081fc <vPortEnterCritical+0x58>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d10f      	bne.n	80081f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <vPortEnterCritical+0x5c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	603b      	str	r3, [r7, #0]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <vPortEnterCritical+0x4a>
	}
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20000028 	.word	0x20000028
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800820a:	4b12      	ldr	r3, [pc, #72]	; (8008254 <vPortExitCritical+0x50>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <vPortExitCritical+0x24>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	607b      	str	r3, [r7, #4]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <vPortExitCritical+0x50>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	4a09      	ldr	r2, [pc, #36]	; (8008254 <vPortExitCritical+0x50>)
 8008230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008232:	4b08      	ldr	r3, [pc, #32]	; (8008254 <vPortExitCritical+0x50>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <vPortExitCritical+0x42>
 800823a:	2300      	movs	r3, #0
 800823c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	f383 8811 	msr	BASEPRI, r3
}
 8008244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000028 	.word	0x20000028
	...

08008260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008260:	f3ef 8009 	mrs	r0, PSP
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <pxCurrentTCBConst>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f01e 0f10 	tst.w	lr, #16
 8008270:	bf08      	it	eq
 8008272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	6010      	str	r0, [r2, #0]
 800827c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008284:	f380 8811 	msr	BASEPRI, r0
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f7fe ffc2 	bl	8007218 <vTaskSwitchContext>
 8008294:	f04f 0000 	mov.w	r0, #0
 8008298:	f380 8811 	msr	BASEPRI, r0
 800829c:	bc09      	pop	{r0, r3}
 800829e:	6819      	ldr	r1, [r3, #0]
 80082a0:	6808      	ldr	r0, [r1, #0]
 80082a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a6:	f01e 0f10 	tst.w	lr, #16
 80082aa:	bf08      	it	eq
 80082ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082b0:	f380 8809 	msr	PSP, r0
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst>:
 80082c0:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
}
 80082e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082e2:	f7fe fedf 	bl	80070a4 <xTaskIncrementTick>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <xPortSysTickHandler+0x40>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f383 8811 	msr	BASEPRI, r3
}
 80082fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008316:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <vPortSetupTimerInterrupt+0x38>)
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <vPortSetupTimerInterrupt+0x3c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a0a      	ldr	r2, [pc, #40]	; (800834c <vPortSetupTimerInterrupt+0x40>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	099b      	lsrs	r3, r3, #6
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <vPortSetupTimerInterrupt+0x44>)
 800832a:	3b01      	subs	r3, #1
 800832c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800832e:	4b04      	ldr	r3, [pc, #16]	; (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008330:	2207      	movs	r2, #7
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000e010 	.word	0xe000e010
 8008344:	e000e018 	.word	0xe000e018
 8008348:	2000001c 	.word	0x2000001c
 800834c:	10624dd3 	.word	0x10624dd3
 8008350:	e000e014 	.word	0xe000e014

08008354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008364 <vPortEnableVFP+0x10>
 8008358:	6801      	ldr	r1, [r0, #0]
 800835a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800835e:	6001      	str	r1, [r0, #0]
 8008360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008362:	bf00      	nop
 8008364:	e000ed88 	.word	0xe000ed88

08008368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800836e:	f3ef 8305 	mrs	r3, IPSR
 8008372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b0f      	cmp	r3, #15
 8008378:	d914      	bls.n	80083a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800837a:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <vPortValidateInterruptPriority+0x70>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008384:	4b15      	ldr	r3, [pc, #84]	; (80083dc <vPortValidateInterruptPriority+0x74>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	7afa      	ldrb	r2, [r7, #11]
 800838a:	429a      	cmp	r2, r3
 800838c:	d20a      	bcs.n	80083a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083a4:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <vPortValidateInterruptPriority+0x78>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <vPortValidateInterruptPriority+0x7c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d90a      	bls.n	80083ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	603b      	str	r3, [r7, #0]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <vPortValidateInterruptPriority+0x60>
	}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	e000e3f0 	.word	0xe000e3f0
 80083dc:	20000db0 	.word	0x20000db0
 80083e0:	e000ed0c 	.word	0xe000ed0c
 80083e4:	20000db4 	.word	0x20000db4

080083e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083f0:	2300      	movs	r3, #0
 80083f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083f4:	f7fe fd9a 	bl	8006f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083f8:	4b5b      	ldr	r3, [pc, #364]	; (8008568 <pvPortMalloc+0x180>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008400:	f000 f920 	bl	8008644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008404:	4b59      	ldr	r3, [pc, #356]	; (800856c <pvPortMalloc+0x184>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 8093 	bne.w	8008538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01d      	beq.n	8008454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008418:	2208      	movs	r2, #8
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d014      	beq.n	8008454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f023 0307 	bic.w	r3, r3, #7
 8008430:	3308      	adds	r3, #8
 8008432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <pvPortMalloc+0x6c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	617b      	str	r3, [r7, #20]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d06e      	beq.n	8008538 <pvPortMalloc+0x150>
 800845a:	4b45      	ldr	r3, [pc, #276]	; (8008570 <pvPortMalloc+0x188>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d869      	bhi.n	8008538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008464:	4b43      	ldr	r3, [pc, #268]	; (8008574 <pvPortMalloc+0x18c>)
 8008466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008468:	4b42      	ldr	r3, [pc, #264]	; (8008574 <pvPortMalloc+0x18c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800846e:	e004      	b.n	800847a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d903      	bls.n	800848c <pvPortMalloc+0xa4>
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f1      	bne.n	8008470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800848c:	4b36      	ldr	r3, [pc, #216]	; (8008568 <pvPortMalloc+0x180>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008492:	429a      	cmp	r2, r3
 8008494:	d050      	beq.n	8008538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2208      	movs	r2, #8
 800849c:	4413      	add	r3, r2
 800849e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	2308      	movs	r3, #8
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d91f      	bls.n	80084f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4413      	add	r3, r2
 80084be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <pvPortMalloc+0xf8>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	613b      	str	r3, [r7, #16]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	1ad2      	subs	r2, r2, r3
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084f2:	69b8      	ldr	r0, [r7, #24]
 80084f4:	f000 f908 	bl	8008708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084f8:	4b1d      	ldr	r3, [pc, #116]	; (8008570 <pvPortMalloc+0x188>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <pvPortMalloc+0x188>)
 8008504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008506:	4b1a      	ldr	r3, [pc, #104]	; (8008570 <pvPortMalloc+0x188>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <pvPortMalloc+0x190>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d203      	bcs.n	800851a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008512:	4b17      	ldr	r3, [pc, #92]	; (8008570 <pvPortMalloc+0x188>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a18      	ldr	r2, [pc, #96]	; (8008578 <pvPortMalloc+0x190>)
 8008518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <pvPortMalloc+0x184>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	431a      	orrs	r2, r3
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <pvPortMalloc+0x194>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a11      	ldr	r2, [pc, #68]	; (800857c <pvPortMalloc+0x194>)
 8008536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008538:	f7fe fd06 	bl	8006f48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <pvPortMalloc+0x174>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	60fb      	str	r3, [r7, #12]
}
 8008558:	bf00      	nop
 800855a:	e7fe      	b.n	800855a <pvPortMalloc+0x172>
	return pvReturn;
 800855c:	69fb      	ldr	r3, [r7, #28]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3728      	adds	r7, #40	; 0x28
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200049c0 	.word	0x200049c0
 800856c:	200049d4 	.word	0x200049d4
 8008570:	200049c4 	.word	0x200049c4
 8008574:	200049b8 	.word	0x200049b8
 8008578:	200049c8 	.word	0x200049c8
 800857c:	200049cc 	.word	0x200049cc

08008580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d04d      	beq.n	800862e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008592:	2308      	movs	r3, #8
 8008594:	425b      	negs	r3, r3
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4413      	add	r3, r2
 800859a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	4b24      	ldr	r3, [pc, #144]	; (8008638 <vPortFree+0xb8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <vPortFree+0x44>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	60fb      	str	r3, [r7, #12]
}
 80085c0:	bf00      	nop
 80085c2:	e7fe      	b.n	80085c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <vPortFree+0x62>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60bb      	str	r3, [r7, #8]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	4b14      	ldr	r3, [pc, #80]	; (8008638 <vPortFree+0xb8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01e      	beq.n	800862e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11a      	bne.n	800862e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <vPortFree+0xb8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	43db      	mvns	r3, r3
 8008602:	401a      	ands	r2, r3
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008608:	f7fe fc90 	bl	8006f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	4b0a      	ldr	r3, [pc, #40]	; (800863c <vPortFree+0xbc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4413      	add	r3, r2
 8008616:	4a09      	ldr	r2, [pc, #36]	; (800863c <vPortFree+0xbc>)
 8008618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800861a:	6938      	ldr	r0, [r7, #16]
 800861c:	f000 f874 	bl	8008708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <vPortFree+0xc0>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	4a06      	ldr	r2, [pc, #24]	; (8008640 <vPortFree+0xc0>)
 8008628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800862a:	f7fe fc8d 	bl	8006f48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800862e:	bf00      	nop
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	200049d4 	.word	0x200049d4
 800863c:	200049c4 	.word	0x200049c4
 8008640:	200049d0 	.word	0x200049d0

08008644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800864a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800864e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008650:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <prvHeapInit+0xac>)
 8008652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3307      	adds	r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0307 	bic.w	r3, r3, #7
 800866a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <prvHeapInit+0xac>)
 8008674:	4413      	add	r3, r2
 8008676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800867c:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <prvHeapInit+0xb0>)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008682:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <prvHeapInit+0xb0>)
 8008684:	2200      	movs	r2, #0
 8008686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4413      	add	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008690:	2208      	movs	r2, #8
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0307 	bic.w	r3, r3, #7
 800869e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a15      	ldr	r2, [pc, #84]	; (80086f8 <prvHeapInit+0xb4>)
 80086a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <prvHeapInit+0xb4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <prvHeapInit+0xb4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <prvHeapInit+0xb4>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <prvHeapInit+0xb8>)
 80086d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	4a09      	ldr	r2, [pc, #36]	; (8008700 <prvHeapInit+0xbc>)
 80086da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <prvHeapInit+0xc0>)
 80086de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	20000db8 	.word	0x20000db8
 80086f4:	200049b8 	.word	0x200049b8
 80086f8:	200049c0 	.word	0x200049c0
 80086fc:	200049c8 	.word	0x200049c8
 8008700:	200049c4 	.word	0x200049c4
 8008704:	200049d4 	.word	0x200049d4

08008708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008710:	4b28      	ldr	r3, [pc, #160]	; (80087b4 <prvInsertBlockIntoFreeList+0xac>)
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e002      	b.n	800871c <prvInsertBlockIntoFreeList+0x14>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d8f7      	bhi.n	8008716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d108      	bne.n	800874a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	441a      	add	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	441a      	add	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d118      	bne.n	8008790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d00d      	beq.n	8008786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	441a      	add	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	e008      	b.n	8008798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e003      	b.n	8008798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	429a      	cmp	r2, r3
 800879e:	d002      	beq.n	80087a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	200049b8 	.word	0x200049b8
 80087b8:	200049c0 	.word	0x200049c0

080087bc <__errno>:
 80087bc:	4b01      	ldr	r3, [pc, #4]	; (80087c4 <__errno+0x8>)
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	2000002c 	.word	0x2000002c

080087c8 <__libc_init_array>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4d0d      	ldr	r5, [pc, #52]	; (8008800 <__libc_init_array+0x38>)
 80087cc:	4c0d      	ldr	r4, [pc, #52]	; (8008804 <__libc_init_array+0x3c>)
 80087ce:	1b64      	subs	r4, r4, r5
 80087d0:	10a4      	asrs	r4, r4, #2
 80087d2:	2600      	movs	r6, #0
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	d109      	bne.n	80087ec <__libc_init_array+0x24>
 80087d8:	4d0b      	ldr	r5, [pc, #44]	; (8008808 <__libc_init_array+0x40>)
 80087da:	4c0c      	ldr	r4, [pc, #48]	; (800880c <__libc_init_array+0x44>)
 80087dc:	f000 fffa 	bl	80097d4 <_init>
 80087e0:	1b64      	subs	r4, r4, r5
 80087e2:	10a4      	asrs	r4, r4, #2
 80087e4:	2600      	movs	r6, #0
 80087e6:	42a6      	cmp	r6, r4
 80087e8:	d105      	bne.n	80087f6 <__libc_init_array+0x2e>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f0:	4798      	blx	r3
 80087f2:	3601      	adds	r6, #1
 80087f4:	e7ee      	b.n	80087d4 <__libc_init_array+0xc>
 80087f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fa:	4798      	blx	r3
 80087fc:	3601      	adds	r6, #1
 80087fe:	e7f2      	b.n	80087e6 <__libc_init_array+0x1e>
 8008800:	08009a38 	.word	0x08009a38
 8008804:	08009a38 	.word	0x08009a38
 8008808:	08009a38 	.word	0x08009a38
 800880c:	08009a3c 	.word	0x08009a3c

08008810 <memcpy>:
 8008810:	440a      	add	r2, r1
 8008812:	4291      	cmp	r1, r2
 8008814:	f100 33ff 	add.w	r3, r0, #4294967295
 8008818:	d100      	bne.n	800881c <memcpy+0xc>
 800881a:	4770      	bx	lr
 800881c:	b510      	push	{r4, lr}
 800881e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008826:	4291      	cmp	r1, r2
 8008828:	d1f9      	bne.n	800881e <memcpy+0xe>
 800882a:	bd10      	pop	{r4, pc}

0800882c <memset>:
 800882c:	4402      	add	r2, r0
 800882e:	4603      	mov	r3, r0
 8008830:	4293      	cmp	r3, r2
 8008832:	d100      	bne.n	8008836 <memset+0xa>
 8008834:	4770      	bx	lr
 8008836:	f803 1b01 	strb.w	r1, [r3], #1
 800883a:	e7f9      	b.n	8008830 <memset+0x4>

0800883c <iprintf>:
 800883c:	b40f      	push	{r0, r1, r2, r3}
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <iprintf+0x2c>)
 8008840:	b513      	push	{r0, r1, r4, lr}
 8008842:	681c      	ldr	r4, [r3, #0]
 8008844:	b124      	cbz	r4, 8008850 <iprintf+0x14>
 8008846:	69a3      	ldr	r3, [r4, #24]
 8008848:	b913      	cbnz	r3, 8008850 <iprintf+0x14>
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fa5e 	bl	8008d0c <__sinit>
 8008850:	ab05      	add	r3, sp, #20
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	68a1      	ldr	r1, [r4, #8]
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fc2f 	bl	80090bc <_vfiprintf_r>
 800885e:	b002      	add	sp, #8
 8008860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008864:	b004      	add	sp, #16
 8008866:	4770      	bx	lr
 8008868:	2000002c 	.word	0x2000002c

0800886c <_puts_r>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	460e      	mov	r6, r1
 8008870:	4605      	mov	r5, r0
 8008872:	b118      	cbz	r0, 800887c <_puts_r+0x10>
 8008874:	6983      	ldr	r3, [r0, #24]
 8008876:	b90b      	cbnz	r3, 800887c <_puts_r+0x10>
 8008878:	f000 fa48 	bl	8008d0c <__sinit>
 800887c:	69ab      	ldr	r3, [r5, #24]
 800887e:	68ac      	ldr	r4, [r5, #8]
 8008880:	b913      	cbnz	r3, 8008888 <_puts_r+0x1c>
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fa42 	bl	8008d0c <__sinit>
 8008888:	4b2c      	ldr	r3, [pc, #176]	; (800893c <_puts_r+0xd0>)
 800888a:	429c      	cmp	r4, r3
 800888c:	d120      	bne.n	80088d0 <_puts_r+0x64>
 800888e:	686c      	ldr	r4, [r5, #4]
 8008890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008892:	07db      	lsls	r3, r3, #31
 8008894:	d405      	bmi.n	80088a2 <_puts_r+0x36>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	0598      	lsls	r0, r3, #22
 800889a:	d402      	bmi.n	80088a2 <_puts_r+0x36>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f000 fad3 	bl	8008e48 <__retarget_lock_acquire_recursive>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	0719      	lsls	r1, r3, #28
 80088a6:	d51d      	bpl.n	80088e4 <_puts_r+0x78>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b1db      	cbz	r3, 80088e4 <_puts_r+0x78>
 80088ac:	3e01      	subs	r6, #1
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088b4:	3b01      	subs	r3, #1
 80088b6:	60a3      	str	r3, [r4, #8]
 80088b8:	bb39      	cbnz	r1, 800890a <_puts_r+0x9e>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da38      	bge.n	8008930 <_puts_r+0xc4>
 80088be:	4622      	mov	r2, r4
 80088c0:	210a      	movs	r1, #10
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f848 	bl	8008958 <__swbuf_r>
 80088c8:	3001      	adds	r0, #1
 80088ca:	d011      	beq.n	80088f0 <_puts_r+0x84>
 80088cc:	250a      	movs	r5, #10
 80088ce:	e011      	b.n	80088f4 <_puts_r+0x88>
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <_puts_r+0xd4>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	d101      	bne.n	80088da <_puts_r+0x6e>
 80088d6:	68ac      	ldr	r4, [r5, #8]
 80088d8:	e7da      	b.n	8008890 <_puts_r+0x24>
 80088da:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <_puts_r+0xd8>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	bf08      	it	eq
 80088e0:	68ec      	ldreq	r4, [r5, #12]
 80088e2:	e7d5      	b.n	8008890 <_puts_r+0x24>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 f888 	bl	80089fc <__swsetup_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d0dd      	beq.n	80088ac <_puts_r+0x40>
 80088f0:	f04f 35ff 	mov.w	r5, #4294967295
 80088f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f6:	07da      	lsls	r2, r3, #31
 80088f8:	d405      	bmi.n	8008906 <_puts_r+0x9a>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	059b      	lsls	r3, r3, #22
 80088fe:	d402      	bmi.n	8008906 <_puts_r+0x9a>
 8008900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008902:	f000 faa2 	bl	8008e4a <__retarget_lock_release_recursive>
 8008906:	4628      	mov	r0, r5
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	2b00      	cmp	r3, #0
 800890c:	da04      	bge.n	8008918 <_puts_r+0xac>
 800890e:	69a2      	ldr	r2, [r4, #24]
 8008910:	429a      	cmp	r2, r3
 8008912:	dc06      	bgt.n	8008922 <_puts_r+0xb6>
 8008914:	290a      	cmp	r1, #10
 8008916:	d004      	beq.n	8008922 <_puts_r+0xb6>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	6022      	str	r2, [r4, #0]
 800891e:	7019      	strb	r1, [r3, #0]
 8008920:	e7c5      	b.n	80088ae <_puts_r+0x42>
 8008922:	4622      	mov	r2, r4
 8008924:	4628      	mov	r0, r5
 8008926:	f000 f817 	bl	8008958 <__swbuf_r>
 800892a:	3001      	adds	r0, #1
 800892c:	d1bf      	bne.n	80088ae <_puts_r+0x42>
 800892e:	e7df      	b.n	80088f0 <_puts_r+0x84>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	250a      	movs	r5, #10
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	701d      	strb	r5, [r3, #0]
 800893a:	e7db      	b.n	80088f4 <_puts_r+0x88>
 800893c:	080099bc 	.word	0x080099bc
 8008940:	080099dc 	.word	0x080099dc
 8008944:	0800999c 	.word	0x0800999c

08008948 <puts>:
 8008948:	4b02      	ldr	r3, [pc, #8]	; (8008954 <puts+0xc>)
 800894a:	4601      	mov	r1, r0
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f7ff bf8d 	b.w	800886c <_puts_r>
 8008952:	bf00      	nop
 8008954:	2000002c 	.word	0x2000002c

08008958 <__swbuf_r>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	460e      	mov	r6, r1
 800895c:	4614      	mov	r4, r2
 800895e:	4605      	mov	r5, r0
 8008960:	b118      	cbz	r0, 800896a <__swbuf_r+0x12>
 8008962:	6983      	ldr	r3, [r0, #24]
 8008964:	b90b      	cbnz	r3, 800896a <__swbuf_r+0x12>
 8008966:	f000 f9d1 	bl	8008d0c <__sinit>
 800896a:	4b21      	ldr	r3, [pc, #132]	; (80089f0 <__swbuf_r+0x98>)
 800896c:	429c      	cmp	r4, r3
 800896e:	d12b      	bne.n	80089c8 <__swbuf_r+0x70>
 8008970:	686c      	ldr	r4, [r5, #4]
 8008972:	69a3      	ldr	r3, [r4, #24]
 8008974:	60a3      	str	r3, [r4, #8]
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	071a      	lsls	r2, r3, #28
 800897a:	d52f      	bpl.n	80089dc <__swbuf_r+0x84>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	b36b      	cbz	r3, 80089dc <__swbuf_r+0x84>
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	6820      	ldr	r0, [r4, #0]
 8008984:	1ac0      	subs	r0, r0, r3
 8008986:	6963      	ldr	r3, [r4, #20]
 8008988:	b2f6      	uxtb	r6, r6
 800898a:	4283      	cmp	r3, r0
 800898c:	4637      	mov	r7, r6
 800898e:	dc04      	bgt.n	800899a <__swbuf_r+0x42>
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f926 	bl	8008be4 <_fflush_r>
 8008998:	bb30      	cbnz	r0, 80089e8 <__swbuf_r+0x90>
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	3b01      	subs	r3, #1
 800899e:	60a3      	str	r3, [r4, #8]
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	6022      	str	r2, [r4, #0]
 80089a6:	701e      	strb	r6, [r3, #0]
 80089a8:	6963      	ldr	r3, [r4, #20]
 80089aa:	3001      	adds	r0, #1
 80089ac:	4283      	cmp	r3, r0
 80089ae:	d004      	beq.n	80089ba <__swbuf_r+0x62>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	07db      	lsls	r3, r3, #31
 80089b4:	d506      	bpl.n	80089c4 <__swbuf_r+0x6c>
 80089b6:	2e0a      	cmp	r6, #10
 80089b8:	d104      	bne.n	80089c4 <__swbuf_r+0x6c>
 80089ba:	4621      	mov	r1, r4
 80089bc:	4628      	mov	r0, r5
 80089be:	f000 f911 	bl	8008be4 <_fflush_r>
 80089c2:	b988      	cbnz	r0, 80089e8 <__swbuf_r+0x90>
 80089c4:	4638      	mov	r0, r7
 80089c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <__swbuf_r+0x9c>)
 80089ca:	429c      	cmp	r4, r3
 80089cc:	d101      	bne.n	80089d2 <__swbuf_r+0x7a>
 80089ce:	68ac      	ldr	r4, [r5, #8]
 80089d0:	e7cf      	b.n	8008972 <__swbuf_r+0x1a>
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <__swbuf_r+0xa0>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	bf08      	it	eq
 80089d8:	68ec      	ldreq	r4, [r5, #12]
 80089da:	e7ca      	b.n	8008972 <__swbuf_r+0x1a>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f80c 	bl	80089fc <__swsetup_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d0cb      	beq.n	8008980 <__swbuf_r+0x28>
 80089e8:	f04f 37ff 	mov.w	r7, #4294967295
 80089ec:	e7ea      	b.n	80089c4 <__swbuf_r+0x6c>
 80089ee:	bf00      	nop
 80089f0:	080099bc 	.word	0x080099bc
 80089f4:	080099dc 	.word	0x080099dc
 80089f8:	0800999c 	.word	0x0800999c

080089fc <__swsetup_r>:
 80089fc:	4b32      	ldr	r3, [pc, #200]	; (8008ac8 <__swsetup_r+0xcc>)
 80089fe:	b570      	push	{r4, r5, r6, lr}
 8008a00:	681d      	ldr	r5, [r3, #0]
 8008a02:	4606      	mov	r6, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	b125      	cbz	r5, 8008a12 <__swsetup_r+0x16>
 8008a08:	69ab      	ldr	r3, [r5, #24]
 8008a0a:	b913      	cbnz	r3, 8008a12 <__swsetup_r+0x16>
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f97d 	bl	8008d0c <__sinit>
 8008a12:	4b2e      	ldr	r3, [pc, #184]	; (8008acc <__swsetup_r+0xd0>)
 8008a14:	429c      	cmp	r4, r3
 8008a16:	d10f      	bne.n	8008a38 <__swsetup_r+0x3c>
 8008a18:	686c      	ldr	r4, [r5, #4]
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a20:	0719      	lsls	r1, r3, #28
 8008a22:	d42c      	bmi.n	8008a7e <__swsetup_r+0x82>
 8008a24:	06dd      	lsls	r5, r3, #27
 8008a26:	d411      	bmi.n	8008a4c <__swsetup_r+0x50>
 8008a28:	2309      	movs	r3, #9
 8008a2a:	6033      	str	r3, [r6, #0]
 8008a2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	f04f 30ff 	mov.w	r0, #4294967295
 8008a36:	e03e      	b.n	8008ab6 <__swsetup_r+0xba>
 8008a38:	4b25      	ldr	r3, [pc, #148]	; (8008ad0 <__swsetup_r+0xd4>)
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d101      	bne.n	8008a42 <__swsetup_r+0x46>
 8008a3e:	68ac      	ldr	r4, [r5, #8]
 8008a40:	e7eb      	b.n	8008a1a <__swsetup_r+0x1e>
 8008a42:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <__swsetup_r+0xd8>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	bf08      	it	eq
 8008a48:	68ec      	ldreq	r4, [r5, #12]
 8008a4a:	e7e6      	b.n	8008a1a <__swsetup_r+0x1e>
 8008a4c:	0758      	lsls	r0, r3, #29
 8008a4e:	d512      	bpl.n	8008a76 <__swsetup_r+0x7a>
 8008a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a52:	b141      	cbz	r1, 8008a66 <__swsetup_r+0x6a>
 8008a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a58:	4299      	cmp	r1, r3
 8008a5a:	d002      	beq.n	8008a62 <__swsetup_r+0x66>
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 fa59 	bl	8008f14 <_free_r>
 8008a62:	2300      	movs	r3, #0
 8008a64:	6363      	str	r3, [r4, #52]	; 0x34
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	6063      	str	r3, [r4, #4]
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f043 0308 	orr.w	r3, r3, #8
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	b94b      	cbnz	r3, 8008a96 <__swsetup_r+0x9a>
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a8c:	d003      	beq.n	8008a96 <__swsetup_r+0x9a>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 f9ff 	bl	8008e94 <__smakebuf_r>
 8008a96:	89a0      	ldrh	r0, [r4, #12]
 8008a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a9c:	f010 0301 	ands.w	r3, r0, #1
 8008aa0:	d00a      	beq.n	8008ab8 <__swsetup_r+0xbc>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60a3      	str	r3, [r4, #8]
 8008aa6:	6963      	ldr	r3, [r4, #20]
 8008aa8:	425b      	negs	r3, r3
 8008aaa:	61a3      	str	r3, [r4, #24]
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	b943      	cbnz	r3, 8008ac2 <__swsetup_r+0xc6>
 8008ab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ab4:	d1ba      	bne.n	8008a2c <__swsetup_r+0x30>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	0781      	lsls	r1, r0, #30
 8008aba:	bf58      	it	pl
 8008abc:	6963      	ldrpl	r3, [r4, #20]
 8008abe:	60a3      	str	r3, [r4, #8]
 8008ac0:	e7f4      	b.n	8008aac <__swsetup_r+0xb0>
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	e7f7      	b.n	8008ab6 <__swsetup_r+0xba>
 8008ac6:	bf00      	nop
 8008ac8:	2000002c 	.word	0x2000002c
 8008acc:	080099bc 	.word	0x080099bc
 8008ad0:	080099dc 	.word	0x080099dc
 8008ad4:	0800999c 	.word	0x0800999c

08008ad8 <__sflush_r>:
 8008ad8:	898a      	ldrh	r2, [r1, #12]
 8008ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ade:	4605      	mov	r5, r0
 8008ae0:	0710      	lsls	r0, r2, #28
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	d458      	bmi.n	8008b98 <__sflush_r+0xc0>
 8008ae6:	684b      	ldr	r3, [r1, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc05      	bgt.n	8008af8 <__sflush_r+0x20>
 8008aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dc02      	bgt.n	8008af8 <__sflush_r+0x20>
 8008af2:	2000      	movs	r0, #0
 8008af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d0f9      	beq.n	8008af2 <__sflush_r+0x1a>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b04:	682f      	ldr	r7, [r5, #0]
 8008b06:	602b      	str	r3, [r5, #0]
 8008b08:	d032      	beq.n	8008b70 <__sflush_r+0x98>
 8008b0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	075a      	lsls	r2, r3, #29
 8008b10:	d505      	bpl.n	8008b1e <__sflush_r+0x46>
 8008b12:	6863      	ldr	r3, [r4, #4]
 8008b14:	1ac0      	subs	r0, r0, r3
 8008b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b18:	b10b      	cbz	r3, 8008b1e <__sflush_r+0x46>
 8008b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b1c:	1ac0      	subs	r0, r0, r3
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4602      	mov	r2, r0
 8008b22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b24:	6a21      	ldr	r1, [r4, #32]
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b0      	blx	r6
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	d106      	bne.n	8008b3e <__sflush_r+0x66>
 8008b30:	6829      	ldr	r1, [r5, #0]
 8008b32:	291d      	cmp	r1, #29
 8008b34:	d82c      	bhi.n	8008b90 <__sflush_r+0xb8>
 8008b36:	4a2a      	ldr	r2, [pc, #168]	; (8008be0 <__sflush_r+0x108>)
 8008b38:	40ca      	lsrs	r2, r1
 8008b3a:	07d6      	lsls	r6, r2, #31
 8008b3c:	d528      	bpl.n	8008b90 <__sflush_r+0xb8>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	6062      	str	r2, [r4, #4]
 8008b42:	04d9      	lsls	r1, r3, #19
 8008b44:	6922      	ldr	r2, [r4, #16]
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	d504      	bpl.n	8008b54 <__sflush_r+0x7c>
 8008b4a:	1c42      	adds	r2, r0, #1
 8008b4c:	d101      	bne.n	8008b52 <__sflush_r+0x7a>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	b903      	cbnz	r3, 8008b54 <__sflush_r+0x7c>
 8008b52:	6560      	str	r0, [r4, #84]	; 0x54
 8008b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b56:	602f      	str	r7, [r5, #0]
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	d0ca      	beq.n	8008af2 <__sflush_r+0x1a>
 8008b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b60:	4299      	cmp	r1, r3
 8008b62:	d002      	beq.n	8008b6a <__sflush_r+0x92>
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f9d5 	bl	8008f14 <_free_r>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b6e:	e7c1      	b.n	8008af4 <__sflush_r+0x1c>
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	2301      	movs	r3, #1
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	1c41      	adds	r1, r0, #1
 8008b7a:	d1c7      	bne.n	8008b0c <__sflush_r+0x34>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c4      	beq.n	8008b0c <__sflush_r+0x34>
 8008b82:	2b1d      	cmp	r3, #29
 8008b84:	d001      	beq.n	8008b8a <__sflush_r+0xb2>
 8008b86:	2b16      	cmp	r3, #22
 8008b88:	d101      	bne.n	8008b8e <__sflush_r+0xb6>
 8008b8a:	602f      	str	r7, [r5, #0]
 8008b8c:	e7b1      	b.n	8008af2 <__sflush_r+0x1a>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	e7ad      	b.n	8008af4 <__sflush_r+0x1c>
 8008b98:	690f      	ldr	r7, [r1, #16]
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	d0a9      	beq.n	8008af2 <__sflush_r+0x1a>
 8008b9e:	0793      	lsls	r3, r2, #30
 8008ba0:	680e      	ldr	r6, [r1, #0]
 8008ba2:	bf08      	it	eq
 8008ba4:	694b      	ldreq	r3, [r1, #20]
 8008ba6:	600f      	str	r7, [r1, #0]
 8008ba8:	bf18      	it	ne
 8008baa:	2300      	movne	r3, #0
 8008bac:	eba6 0807 	sub.w	r8, r6, r7
 8008bb0:	608b      	str	r3, [r1, #8]
 8008bb2:	f1b8 0f00 	cmp.w	r8, #0
 8008bb6:	dd9c      	ble.n	8008af2 <__sflush_r+0x1a>
 8008bb8:	6a21      	ldr	r1, [r4, #32]
 8008bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bbc:	4643      	mov	r3, r8
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b0      	blx	r6
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	dc06      	bgt.n	8008bd6 <__sflush_r+0xfe>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	e78e      	b.n	8008af4 <__sflush_r+0x1c>
 8008bd6:	4407      	add	r7, r0
 8008bd8:	eba8 0800 	sub.w	r8, r8, r0
 8008bdc:	e7e9      	b.n	8008bb2 <__sflush_r+0xda>
 8008bde:	bf00      	nop
 8008be0:	20400001 	.word	0x20400001

08008be4 <_fflush_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	690b      	ldr	r3, [r1, #16]
 8008be8:	4605      	mov	r5, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	b913      	cbnz	r3, 8008bf4 <_fflush_r+0x10>
 8008bee:	2500      	movs	r5, #0
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	b118      	cbz	r0, 8008bfe <_fflush_r+0x1a>
 8008bf6:	6983      	ldr	r3, [r0, #24]
 8008bf8:	b90b      	cbnz	r3, 8008bfe <_fflush_r+0x1a>
 8008bfa:	f000 f887 	bl	8008d0c <__sinit>
 8008bfe:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <_fflush_r+0x6c>)
 8008c00:	429c      	cmp	r4, r3
 8008c02:	d11b      	bne.n	8008c3c <_fflush_r+0x58>
 8008c04:	686c      	ldr	r4, [r5, #4]
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0ef      	beq.n	8008bee <_fflush_r+0xa>
 8008c0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c10:	07d0      	lsls	r0, r2, #31
 8008c12:	d404      	bmi.n	8008c1e <_fflush_r+0x3a>
 8008c14:	0599      	lsls	r1, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_fflush_r+0x3a>
 8008c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1a:	f000 f915 	bl	8008e48 <__retarget_lock_acquire_recursive>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	4621      	mov	r1, r4
 8008c22:	f7ff ff59 	bl	8008ad8 <__sflush_r>
 8008c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c28:	07da      	lsls	r2, r3, #31
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	d4e0      	bmi.n	8008bf0 <_fflush_r+0xc>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	059b      	lsls	r3, r3, #22
 8008c32:	d4dd      	bmi.n	8008bf0 <_fflush_r+0xc>
 8008c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c36:	f000 f908 	bl	8008e4a <__retarget_lock_release_recursive>
 8008c3a:	e7d9      	b.n	8008bf0 <_fflush_r+0xc>
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <_fflush_r+0x70>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	d101      	bne.n	8008c46 <_fflush_r+0x62>
 8008c42:	68ac      	ldr	r4, [r5, #8]
 8008c44:	e7df      	b.n	8008c06 <_fflush_r+0x22>
 8008c46:	4b04      	ldr	r3, [pc, #16]	; (8008c58 <_fflush_r+0x74>)
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	bf08      	it	eq
 8008c4c:	68ec      	ldreq	r4, [r5, #12]
 8008c4e:	e7da      	b.n	8008c06 <_fflush_r+0x22>
 8008c50:	080099bc 	.word	0x080099bc
 8008c54:	080099dc 	.word	0x080099dc
 8008c58:	0800999c 	.word	0x0800999c

08008c5c <std>:
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	4604      	mov	r4, r0
 8008c62:	e9c0 3300 	strd	r3, r3, [r0]
 8008c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6a:	6083      	str	r3, [r0, #8]
 8008c6c:	8181      	strh	r1, [r0, #12]
 8008c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c70:	81c2      	strh	r2, [r0, #14]
 8008c72:	6183      	str	r3, [r0, #24]
 8008c74:	4619      	mov	r1, r3
 8008c76:	2208      	movs	r2, #8
 8008c78:	305c      	adds	r0, #92	; 0x5c
 8008c7a:	f7ff fdd7 	bl	800882c <memset>
 8008c7e:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <std+0x38>)
 8008c80:	6263      	str	r3, [r4, #36]	; 0x24
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <std+0x3c>)
 8008c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <std+0x40>)
 8008c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c8a:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <std+0x44>)
 8008c8c:	6224      	str	r4, [r4, #32]
 8008c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c90:	bd10      	pop	{r4, pc}
 8008c92:	bf00      	nop
 8008c94:	08009665 	.word	0x08009665
 8008c98:	08009687 	.word	0x08009687
 8008c9c:	080096bf 	.word	0x080096bf
 8008ca0:	080096e3 	.word	0x080096e3

08008ca4 <_cleanup_r>:
 8008ca4:	4901      	ldr	r1, [pc, #4]	; (8008cac <_cleanup_r+0x8>)
 8008ca6:	f000 b8af 	b.w	8008e08 <_fwalk_reent>
 8008caa:	bf00      	nop
 8008cac:	08008be5 	.word	0x08008be5

08008cb0 <__sfmoreglue>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	1e4a      	subs	r2, r1, #1
 8008cb4:	2568      	movs	r5, #104	; 0x68
 8008cb6:	4355      	muls	r5, r2
 8008cb8:	460e      	mov	r6, r1
 8008cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cbe:	f000 f979 	bl	8008fb4 <_malloc_r>
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	b140      	cbz	r0, 8008cd8 <__sfmoreglue+0x28>
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8008ccc:	300c      	adds	r0, #12
 8008cce:	60a0      	str	r0, [r4, #8]
 8008cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cd4:	f7ff fdaa 	bl	800882c <memset>
 8008cd8:	4620      	mov	r0, r4
 8008cda:	bd70      	pop	{r4, r5, r6, pc}

08008cdc <__sfp_lock_acquire>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__sfp_lock_acquire+0x8>)
 8008cde:	f000 b8b3 	b.w	8008e48 <__retarget_lock_acquire_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	20004ca8 	.word	0x20004ca8

08008ce8 <__sfp_lock_release>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__sfp_lock_release+0x8>)
 8008cea:	f000 b8ae 	b.w	8008e4a <__retarget_lock_release_recursive>
 8008cee:	bf00      	nop
 8008cf0:	20004ca8 	.word	0x20004ca8

08008cf4 <__sinit_lock_acquire>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__sinit_lock_acquire+0x8>)
 8008cf6:	f000 b8a7 	b.w	8008e48 <__retarget_lock_acquire_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	20004ca3 	.word	0x20004ca3

08008d00 <__sinit_lock_release>:
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <__sinit_lock_release+0x8>)
 8008d02:	f000 b8a2 	b.w	8008e4a <__retarget_lock_release_recursive>
 8008d06:	bf00      	nop
 8008d08:	20004ca3 	.word	0x20004ca3

08008d0c <__sinit>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	4604      	mov	r4, r0
 8008d10:	f7ff fff0 	bl	8008cf4 <__sinit_lock_acquire>
 8008d14:	69a3      	ldr	r3, [r4, #24]
 8008d16:	b11b      	cbz	r3, 8008d20 <__sinit+0x14>
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1c:	f7ff bff0 	b.w	8008d00 <__sinit_lock_release>
 8008d20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d24:	6523      	str	r3, [r4, #80]	; 0x50
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <__sinit+0x68>)
 8008d28:	4a13      	ldr	r2, [pc, #76]	; (8008d78 <__sinit+0x6c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	bf04      	itt	eq
 8008d32:	2301      	moveq	r3, #1
 8008d34:	61a3      	streq	r3, [r4, #24]
 8008d36:	4620      	mov	r0, r4
 8008d38:	f000 f820 	bl	8008d7c <__sfp>
 8008d3c:	6060      	str	r0, [r4, #4]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 f81c 	bl	8008d7c <__sfp>
 8008d44:	60a0      	str	r0, [r4, #8]
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 f818 	bl	8008d7c <__sfp>
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	60e0      	str	r0, [r4, #12]
 8008d50:	2104      	movs	r1, #4
 8008d52:	6860      	ldr	r0, [r4, #4]
 8008d54:	f7ff ff82 	bl	8008c5c <std>
 8008d58:	68a0      	ldr	r0, [r4, #8]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	2109      	movs	r1, #9
 8008d5e:	f7ff ff7d 	bl	8008c5c <std>
 8008d62:	68e0      	ldr	r0, [r4, #12]
 8008d64:	2202      	movs	r2, #2
 8008d66:	2112      	movs	r1, #18
 8008d68:	f7ff ff78 	bl	8008c5c <std>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	61a3      	str	r3, [r4, #24]
 8008d70:	e7d2      	b.n	8008d18 <__sinit+0xc>
 8008d72:	bf00      	nop
 8008d74:	08009998 	.word	0x08009998
 8008d78:	08008ca5 	.word	0x08008ca5

08008d7c <__sfp>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	4607      	mov	r7, r0
 8008d80:	f7ff ffac 	bl	8008cdc <__sfp_lock_acquire>
 8008d84:	4b1e      	ldr	r3, [pc, #120]	; (8008e00 <__sfp+0x84>)
 8008d86:	681e      	ldr	r6, [r3, #0]
 8008d88:	69b3      	ldr	r3, [r6, #24]
 8008d8a:	b913      	cbnz	r3, 8008d92 <__sfp+0x16>
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff ffbd 	bl	8008d0c <__sinit>
 8008d92:	3648      	adds	r6, #72	; 0x48
 8008d94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	d503      	bpl.n	8008da4 <__sfp+0x28>
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	b30b      	cbz	r3, 8008de4 <__sfp+0x68>
 8008da0:	6836      	ldr	r6, [r6, #0]
 8008da2:	e7f7      	b.n	8008d94 <__sfp+0x18>
 8008da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008da8:	b9d5      	cbnz	r5, 8008de0 <__sfp+0x64>
 8008daa:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <__sfp+0x88>)
 8008dac:	60e3      	str	r3, [r4, #12]
 8008dae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008db2:	6665      	str	r5, [r4, #100]	; 0x64
 8008db4:	f000 f847 	bl	8008e46 <__retarget_lock_init_recursive>
 8008db8:	f7ff ff96 	bl	8008ce8 <__sfp_lock_release>
 8008dbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dc4:	6025      	str	r5, [r4, #0]
 8008dc6:	61a5      	str	r5, [r4, #24]
 8008dc8:	2208      	movs	r2, #8
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dd0:	f7ff fd2c 	bl	800882c <memset>
 8008dd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ddc:	4620      	mov	r0, r4
 8008dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de0:	3468      	adds	r4, #104	; 0x68
 8008de2:	e7d9      	b.n	8008d98 <__sfp+0x1c>
 8008de4:	2104      	movs	r1, #4
 8008de6:	4638      	mov	r0, r7
 8008de8:	f7ff ff62 	bl	8008cb0 <__sfmoreglue>
 8008dec:	4604      	mov	r4, r0
 8008dee:	6030      	str	r0, [r6, #0]
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d1d5      	bne.n	8008da0 <__sfp+0x24>
 8008df4:	f7ff ff78 	bl	8008ce8 <__sfp_lock_release>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	e7ee      	b.n	8008ddc <__sfp+0x60>
 8008dfe:	bf00      	nop
 8008e00:	08009998 	.word	0x08009998
 8008e04:	ffff0001 	.word	0xffff0001

08008e08 <_fwalk_reent>:
 8008e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	4688      	mov	r8, r1
 8008e10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e14:	2700      	movs	r7, #0
 8008e16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e1a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e1e:	d505      	bpl.n	8008e2c <_fwalk_reent+0x24>
 8008e20:	6824      	ldr	r4, [r4, #0]
 8008e22:	2c00      	cmp	r4, #0
 8008e24:	d1f7      	bne.n	8008e16 <_fwalk_reent+0xe>
 8008e26:	4638      	mov	r0, r7
 8008e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2c:	89ab      	ldrh	r3, [r5, #12]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d907      	bls.n	8008e42 <_fwalk_reent+0x3a>
 8008e32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e36:	3301      	adds	r3, #1
 8008e38:	d003      	beq.n	8008e42 <_fwalk_reent+0x3a>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	47c0      	blx	r8
 8008e40:	4307      	orrs	r7, r0
 8008e42:	3568      	adds	r5, #104	; 0x68
 8008e44:	e7e9      	b.n	8008e1a <_fwalk_reent+0x12>

08008e46 <__retarget_lock_init_recursive>:
 8008e46:	4770      	bx	lr

08008e48 <__retarget_lock_acquire_recursive>:
 8008e48:	4770      	bx	lr

08008e4a <__retarget_lock_release_recursive>:
 8008e4a:	4770      	bx	lr

08008e4c <__swhatbuf_r>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	460e      	mov	r6, r1
 8008e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e54:	2900      	cmp	r1, #0
 8008e56:	b096      	sub	sp, #88	; 0x58
 8008e58:	4614      	mov	r4, r2
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	da07      	bge.n	8008e6e <__swhatbuf_r+0x22>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	89b3      	ldrh	r3, [r6, #12]
 8008e64:	061a      	lsls	r2, r3, #24
 8008e66:	d410      	bmi.n	8008e8a <__swhatbuf_r+0x3e>
 8008e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e6c:	e00e      	b.n	8008e8c <__swhatbuf_r+0x40>
 8008e6e:	466a      	mov	r2, sp
 8008e70:	f000 fc5e 	bl	8009730 <_fstat_r>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	dbf2      	blt.n	8008e5e <__swhatbuf_r+0x12>
 8008e78:	9a01      	ldr	r2, [sp, #4]
 8008e7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e82:	425a      	negs	r2, r3
 8008e84:	415a      	adcs	r2, r3
 8008e86:	602a      	str	r2, [r5, #0]
 8008e88:	e7ee      	b.n	8008e68 <__swhatbuf_r+0x1c>
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	b016      	add	sp, #88	; 0x58
 8008e92:	bd70      	pop	{r4, r5, r6, pc}

08008e94 <__smakebuf_r>:
 8008e94:	898b      	ldrh	r3, [r1, #12]
 8008e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e98:	079d      	lsls	r5, r3, #30
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	d507      	bpl.n	8008eb0 <__smakebuf_r+0x1c>
 8008ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	6123      	str	r3, [r4, #16]
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	6163      	str	r3, [r4, #20]
 8008eac:	b002      	add	sp, #8
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	ab01      	add	r3, sp, #4
 8008eb2:	466a      	mov	r2, sp
 8008eb4:	f7ff ffca 	bl	8008e4c <__swhatbuf_r>
 8008eb8:	9900      	ldr	r1, [sp, #0]
 8008eba:	4605      	mov	r5, r0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f000 f879 	bl	8008fb4 <_malloc_r>
 8008ec2:	b948      	cbnz	r0, 8008ed8 <__smakebuf_r+0x44>
 8008ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec8:	059a      	lsls	r2, r3, #22
 8008eca:	d4ef      	bmi.n	8008eac <__smakebuf_r+0x18>
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	f043 0302 	orr.w	r3, r3, #2
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	e7e3      	b.n	8008ea0 <__smakebuf_r+0xc>
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <__smakebuf_r+0x7c>)
 8008eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	6020      	str	r0, [r4, #0]
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	81a3      	strh	r3, [r4, #12]
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	6163      	str	r3, [r4, #20]
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	6120      	str	r0, [r4, #16]
 8008eee:	b15b      	cbz	r3, 8008f08 <__smakebuf_r+0x74>
 8008ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f000 fc2d 	bl	8009754 <_isatty_r>
 8008efa:	b128      	cbz	r0, 8008f08 <__smakebuf_r+0x74>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	f043 0301 	orr.w	r3, r3, #1
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	89a0      	ldrh	r0, [r4, #12]
 8008f0a:	4305      	orrs	r5, r0
 8008f0c:	81a5      	strh	r5, [r4, #12]
 8008f0e:	e7cd      	b.n	8008eac <__smakebuf_r+0x18>
 8008f10:	08008ca5 	.word	0x08008ca5

08008f14 <_free_r>:
 8008f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d048      	beq.n	8008fac <_free_r+0x98>
 8008f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1e:	9001      	str	r0, [sp, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f1a1 0404 	sub.w	r4, r1, #4
 8008f26:	bfb8      	it	lt
 8008f28:	18e4      	addlt	r4, r4, r3
 8008f2a:	f000 fc35 	bl	8009798 <__malloc_lock>
 8008f2e:	4a20      	ldr	r2, [pc, #128]	; (8008fb0 <_free_r+0x9c>)
 8008f30:	9801      	ldr	r0, [sp, #4]
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	4615      	mov	r5, r2
 8008f36:	b933      	cbnz	r3, 8008f46 <_free_r+0x32>
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6014      	str	r4, [r2, #0]
 8008f3c:	b003      	add	sp, #12
 8008f3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f42:	f000 bc2f 	b.w	80097a4 <__malloc_unlock>
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	d90b      	bls.n	8008f62 <_free_r+0x4e>
 8008f4a:	6821      	ldr	r1, [r4, #0]
 8008f4c:	1862      	adds	r2, r4, r1
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bf04      	itt	eq
 8008f52:	681a      	ldreq	r2, [r3, #0]
 8008f54:	685b      	ldreq	r3, [r3, #4]
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	bf04      	itt	eq
 8008f5a:	1852      	addeq	r2, r2, r1
 8008f5c:	6022      	streq	r2, [r4, #0]
 8008f5e:	602c      	str	r4, [r5, #0]
 8008f60:	e7ec      	b.n	8008f3c <_free_r+0x28>
 8008f62:	461a      	mov	r2, r3
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b10b      	cbz	r3, 8008f6c <_free_r+0x58>
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	d9fa      	bls.n	8008f62 <_free_r+0x4e>
 8008f6c:	6811      	ldr	r1, [r2, #0]
 8008f6e:	1855      	adds	r5, r2, r1
 8008f70:	42a5      	cmp	r5, r4
 8008f72:	d10b      	bne.n	8008f8c <_free_r+0x78>
 8008f74:	6824      	ldr	r4, [r4, #0]
 8008f76:	4421      	add	r1, r4
 8008f78:	1854      	adds	r4, r2, r1
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	6011      	str	r1, [r2, #0]
 8008f7e:	d1dd      	bne.n	8008f3c <_free_r+0x28>
 8008f80:	681c      	ldr	r4, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	6053      	str	r3, [r2, #4]
 8008f86:	4421      	add	r1, r4
 8008f88:	6011      	str	r1, [r2, #0]
 8008f8a:	e7d7      	b.n	8008f3c <_free_r+0x28>
 8008f8c:	d902      	bls.n	8008f94 <_free_r+0x80>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	e7d3      	b.n	8008f3c <_free_r+0x28>
 8008f94:	6825      	ldr	r5, [r4, #0]
 8008f96:	1961      	adds	r1, r4, r5
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf04      	itt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	bf04      	itt	eq
 8008fa4:	1949      	addeq	r1, r1, r5
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	6054      	str	r4, [r2, #4]
 8008faa:	e7c7      	b.n	8008f3c <_free_r+0x28>
 8008fac:	b003      	add	sp, #12
 8008fae:	bd30      	pop	{r4, r5, pc}
 8008fb0:	200049d8 	.word	0x200049d8

08008fb4 <_malloc_r>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	1ccd      	adds	r5, r1, #3
 8008fb8:	f025 0503 	bic.w	r5, r5, #3
 8008fbc:	3508      	adds	r5, #8
 8008fbe:	2d0c      	cmp	r5, #12
 8008fc0:	bf38      	it	cc
 8008fc2:	250c      	movcc	r5, #12
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	db01      	blt.n	8008fce <_malloc_r+0x1a>
 8008fca:	42a9      	cmp	r1, r5
 8008fcc:	d903      	bls.n	8008fd6 <_malloc_r+0x22>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	6033      	str	r3, [r6, #0]
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd6:	f000 fbdf 	bl	8009798 <__malloc_lock>
 8008fda:	4921      	ldr	r1, [pc, #132]	; (8009060 <_malloc_r+0xac>)
 8008fdc:	680a      	ldr	r2, [r1, #0]
 8008fde:	4614      	mov	r4, r2
 8008fe0:	b99c      	cbnz	r4, 800900a <_malloc_r+0x56>
 8008fe2:	4f20      	ldr	r7, [pc, #128]	; (8009064 <_malloc_r+0xb0>)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	b923      	cbnz	r3, 8008ff2 <_malloc_r+0x3e>
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4630      	mov	r0, r6
 8008fec:	f000 fb2a 	bl	8009644 <_sbrk_r>
 8008ff0:	6038      	str	r0, [r7, #0]
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f000 fb25 	bl	8009644 <_sbrk_r>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d123      	bne.n	8009046 <_malloc_r+0x92>
 8008ffe:	230c      	movs	r3, #12
 8009000:	6033      	str	r3, [r6, #0]
 8009002:	4630      	mov	r0, r6
 8009004:	f000 fbce 	bl	80097a4 <__malloc_unlock>
 8009008:	e7e3      	b.n	8008fd2 <_malloc_r+0x1e>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	1b5b      	subs	r3, r3, r5
 800900e:	d417      	bmi.n	8009040 <_malloc_r+0x8c>
 8009010:	2b0b      	cmp	r3, #11
 8009012:	d903      	bls.n	800901c <_malloc_r+0x68>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	441c      	add	r4, r3
 8009018:	6025      	str	r5, [r4, #0]
 800901a:	e004      	b.n	8009026 <_malloc_r+0x72>
 800901c:	6863      	ldr	r3, [r4, #4]
 800901e:	42a2      	cmp	r2, r4
 8009020:	bf0c      	ite	eq
 8009022:	600b      	streq	r3, [r1, #0]
 8009024:	6053      	strne	r3, [r2, #4]
 8009026:	4630      	mov	r0, r6
 8009028:	f000 fbbc 	bl	80097a4 <__malloc_unlock>
 800902c:	f104 000b 	add.w	r0, r4, #11
 8009030:	1d23      	adds	r3, r4, #4
 8009032:	f020 0007 	bic.w	r0, r0, #7
 8009036:	1ac2      	subs	r2, r0, r3
 8009038:	d0cc      	beq.n	8008fd4 <_malloc_r+0x20>
 800903a:	1a1b      	subs	r3, r3, r0
 800903c:	50a3      	str	r3, [r4, r2]
 800903e:	e7c9      	b.n	8008fd4 <_malloc_r+0x20>
 8009040:	4622      	mov	r2, r4
 8009042:	6864      	ldr	r4, [r4, #4]
 8009044:	e7cc      	b.n	8008fe0 <_malloc_r+0x2c>
 8009046:	1cc4      	adds	r4, r0, #3
 8009048:	f024 0403 	bic.w	r4, r4, #3
 800904c:	42a0      	cmp	r0, r4
 800904e:	d0e3      	beq.n	8009018 <_malloc_r+0x64>
 8009050:	1a21      	subs	r1, r4, r0
 8009052:	4630      	mov	r0, r6
 8009054:	f000 faf6 	bl	8009644 <_sbrk_r>
 8009058:	3001      	adds	r0, #1
 800905a:	d1dd      	bne.n	8009018 <_malloc_r+0x64>
 800905c:	e7cf      	b.n	8008ffe <_malloc_r+0x4a>
 800905e:	bf00      	nop
 8009060:	200049d8 	.word	0x200049d8
 8009064:	200049dc 	.word	0x200049dc

08009068 <__sfputc_r>:
 8009068:	6893      	ldr	r3, [r2, #8]
 800906a:	3b01      	subs	r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	b410      	push	{r4}
 8009070:	6093      	str	r3, [r2, #8]
 8009072:	da08      	bge.n	8009086 <__sfputc_r+0x1e>
 8009074:	6994      	ldr	r4, [r2, #24]
 8009076:	42a3      	cmp	r3, r4
 8009078:	db01      	blt.n	800907e <__sfputc_r+0x16>
 800907a:	290a      	cmp	r1, #10
 800907c:	d103      	bne.n	8009086 <__sfputc_r+0x1e>
 800907e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009082:	f7ff bc69 	b.w	8008958 <__swbuf_r>
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	1c58      	adds	r0, r3, #1
 800908a:	6010      	str	r0, [r2, #0]
 800908c:	7019      	strb	r1, [r3, #0]
 800908e:	4608      	mov	r0, r1
 8009090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009094:	4770      	bx	lr

08009096 <__sfputs_r>:
 8009096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009098:	4606      	mov	r6, r0
 800909a:	460f      	mov	r7, r1
 800909c:	4614      	mov	r4, r2
 800909e:	18d5      	adds	r5, r2, r3
 80090a0:	42ac      	cmp	r4, r5
 80090a2:	d101      	bne.n	80090a8 <__sfputs_r+0x12>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e007      	b.n	80090b8 <__sfputs_r+0x22>
 80090a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ac:	463a      	mov	r2, r7
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7ff ffda 	bl	8009068 <__sfputc_r>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d1f3      	bne.n	80090a0 <__sfputs_r+0xa>
 80090b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090bc <_vfiprintf_r>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	460d      	mov	r5, r1
 80090c2:	b09d      	sub	sp, #116	; 0x74
 80090c4:	4614      	mov	r4, r2
 80090c6:	4698      	mov	r8, r3
 80090c8:	4606      	mov	r6, r0
 80090ca:	b118      	cbz	r0, 80090d4 <_vfiprintf_r+0x18>
 80090cc:	6983      	ldr	r3, [r0, #24]
 80090ce:	b90b      	cbnz	r3, 80090d4 <_vfiprintf_r+0x18>
 80090d0:	f7ff fe1c 	bl	8008d0c <__sinit>
 80090d4:	4b89      	ldr	r3, [pc, #548]	; (80092fc <_vfiprintf_r+0x240>)
 80090d6:	429d      	cmp	r5, r3
 80090d8:	d11b      	bne.n	8009112 <_vfiprintf_r+0x56>
 80090da:	6875      	ldr	r5, [r6, #4]
 80090dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090de:	07d9      	lsls	r1, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_vfiprintf_r+0x32>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	059a      	lsls	r2, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_vfiprintf_r+0x32>
 80090e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ea:	f7ff fead 	bl	8008e48 <__retarget_lock_acquire_recursive>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	071b      	lsls	r3, r3, #28
 80090f2:	d501      	bpl.n	80090f8 <_vfiprintf_r+0x3c>
 80090f4:	692b      	ldr	r3, [r5, #16]
 80090f6:	b9eb      	cbnz	r3, 8009134 <_vfiprintf_r+0x78>
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff fc7e 	bl	80089fc <__swsetup_r>
 8009100:	b1c0      	cbz	r0, 8009134 <_vfiprintf_r+0x78>
 8009102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009104:	07dc      	lsls	r4, r3, #31
 8009106:	d50e      	bpl.n	8009126 <_vfiprintf_r+0x6a>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	b01d      	add	sp, #116	; 0x74
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	4b7b      	ldr	r3, [pc, #492]	; (8009300 <_vfiprintf_r+0x244>)
 8009114:	429d      	cmp	r5, r3
 8009116:	d101      	bne.n	800911c <_vfiprintf_r+0x60>
 8009118:	68b5      	ldr	r5, [r6, #8]
 800911a:	e7df      	b.n	80090dc <_vfiprintf_r+0x20>
 800911c:	4b79      	ldr	r3, [pc, #484]	; (8009304 <_vfiprintf_r+0x248>)
 800911e:	429d      	cmp	r5, r3
 8009120:	bf08      	it	eq
 8009122:	68f5      	ldreq	r5, [r6, #12]
 8009124:	e7da      	b.n	80090dc <_vfiprintf_r+0x20>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	0598      	lsls	r0, r3, #22
 800912a:	d4ed      	bmi.n	8009108 <_vfiprintf_r+0x4c>
 800912c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800912e:	f7ff fe8c 	bl	8008e4a <__retarget_lock_release_recursive>
 8009132:	e7e9      	b.n	8009108 <_vfiprintf_r+0x4c>
 8009134:	2300      	movs	r3, #0
 8009136:	9309      	str	r3, [sp, #36]	; 0x24
 8009138:	2320      	movs	r3, #32
 800913a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800913e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009142:	2330      	movs	r3, #48	; 0x30
 8009144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009308 <_vfiprintf_r+0x24c>
 8009148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800914c:	f04f 0901 	mov.w	r9, #1
 8009150:	4623      	mov	r3, r4
 8009152:	469a      	mov	sl, r3
 8009154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009158:	b10a      	cbz	r2, 800915e <_vfiprintf_r+0xa2>
 800915a:	2a25      	cmp	r2, #37	; 0x25
 800915c:	d1f9      	bne.n	8009152 <_vfiprintf_r+0x96>
 800915e:	ebba 0b04 	subs.w	fp, sl, r4
 8009162:	d00b      	beq.n	800917c <_vfiprintf_r+0xc0>
 8009164:	465b      	mov	r3, fp
 8009166:	4622      	mov	r2, r4
 8009168:	4629      	mov	r1, r5
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ff93 	bl	8009096 <__sfputs_r>
 8009170:	3001      	adds	r0, #1
 8009172:	f000 80aa 	beq.w	80092ca <_vfiprintf_r+0x20e>
 8009176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009178:	445a      	add	r2, fp
 800917a:	9209      	str	r2, [sp, #36]	; 0x24
 800917c:	f89a 3000 	ldrb.w	r3, [sl]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80a2 	beq.w	80092ca <_vfiprintf_r+0x20e>
 8009186:	2300      	movs	r3, #0
 8009188:	f04f 32ff 	mov.w	r2, #4294967295
 800918c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009190:	f10a 0a01 	add.w	sl, sl, #1
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800919c:	931a      	str	r3, [sp, #104]	; 0x68
 800919e:	4654      	mov	r4, sl
 80091a0:	2205      	movs	r2, #5
 80091a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a6:	4858      	ldr	r0, [pc, #352]	; (8009308 <_vfiprintf_r+0x24c>)
 80091a8:	f7f7 f81a 	bl	80001e0 <memchr>
 80091ac:	9a04      	ldr	r2, [sp, #16]
 80091ae:	b9d8      	cbnz	r0, 80091e8 <_vfiprintf_r+0x12c>
 80091b0:	06d1      	lsls	r1, r2, #27
 80091b2:	bf44      	itt	mi
 80091b4:	2320      	movmi	r3, #32
 80091b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ba:	0713      	lsls	r3, r2, #28
 80091bc:	bf44      	itt	mi
 80091be:	232b      	movmi	r3, #43	; 0x2b
 80091c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c4:	f89a 3000 	ldrb.w	r3, [sl]
 80091c8:	2b2a      	cmp	r3, #42	; 0x2a
 80091ca:	d015      	beq.n	80091f8 <_vfiprintf_r+0x13c>
 80091cc:	9a07      	ldr	r2, [sp, #28]
 80091ce:	4654      	mov	r4, sl
 80091d0:	2000      	movs	r0, #0
 80091d2:	f04f 0c0a 	mov.w	ip, #10
 80091d6:	4621      	mov	r1, r4
 80091d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091dc:	3b30      	subs	r3, #48	; 0x30
 80091de:	2b09      	cmp	r3, #9
 80091e0:	d94e      	bls.n	8009280 <_vfiprintf_r+0x1c4>
 80091e2:	b1b0      	cbz	r0, 8009212 <_vfiprintf_r+0x156>
 80091e4:	9207      	str	r2, [sp, #28]
 80091e6:	e014      	b.n	8009212 <_vfiprintf_r+0x156>
 80091e8:	eba0 0308 	sub.w	r3, r0, r8
 80091ec:	fa09 f303 	lsl.w	r3, r9, r3
 80091f0:	4313      	orrs	r3, r2
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	46a2      	mov	sl, r4
 80091f6:	e7d2      	b.n	800919e <_vfiprintf_r+0xe2>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	1d19      	adds	r1, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	9103      	str	r1, [sp, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfbb      	ittet	lt
 8009204:	425b      	neglt	r3, r3
 8009206:	f042 0202 	orrlt.w	r2, r2, #2
 800920a:	9307      	strge	r3, [sp, #28]
 800920c:	9307      	strlt	r3, [sp, #28]
 800920e:	bfb8      	it	lt
 8009210:	9204      	strlt	r2, [sp, #16]
 8009212:	7823      	ldrb	r3, [r4, #0]
 8009214:	2b2e      	cmp	r3, #46	; 0x2e
 8009216:	d10c      	bne.n	8009232 <_vfiprintf_r+0x176>
 8009218:	7863      	ldrb	r3, [r4, #1]
 800921a:	2b2a      	cmp	r3, #42	; 0x2a
 800921c:	d135      	bne.n	800928a <_vfiprintf_r+0x1ce>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d1a      	adds	r2, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9203      	str	r2, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfb8      	it	lt
 800922a:	f04f 33ff 	movlt.w	r3, #4294967295
 800922e:	3402      	adds	r4, #2
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009318 <_vfiprintf_r+0x25c>
 8009236:	7821      	ldrb	r1, [r4, #0]
 8009238:	2203      	movs	r2, #3
 800923a:	4650      	mov	r0, sl
 800923c:	f7f6 ffd0 	bl	80001e0 <memchr>
 8009240:	b140      	cbz	r0, 8009254 <_vfiprintf_r+0x198>
 8009242:	2340      	movs	r3, #64	; 0x40
 8009244:	eba0 000a 	sub.w	r0, r0, sl
 8009248:	fa03 f000 	lsl.w	r0, r3, r0
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	4303      	orrs	r3, r0
 8009250:	3401      	adds	r4, #1
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009258:	482c      	ldr	r0, [pc, #176]	; (800930c <_vfiprintf_r+0x250>)
 800925a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800925e:	2206      	movs	r2, #6
 8009260:	f7f6 ffbe 	bl	80001e0 <memchr>
 8009264:	2800      	cmp	r0, #0
 8009266:	d03f      	beq.n	80092e8 <_vfiprintf_r+0x22c>
 8009268:	4b29      	ldr	r3, [pc, #164]	; (8009310 <_vfiprintf_r+0x254>)
 800926a:	bb1b      	cbnz	r3, 80092b4 <_vfiprintf_r+0x1f8>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	3307      	adds	r3, #7
 8009270:	f023 0307 	bic.w	r3, r3, #7
 8009274:	3308      	adds	r3, #8
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	443b      	add	r3, r7
 800927c:	9309      	str	r3, [sp, #36]	; 0x24
 800927e:	e767      	b.n	8009150 <_vfiprintf_r+0x94>
 8009280:	fb0c 3202 	mla	r2, ip, r2, r3
 8009284:	460c      	mov	r4, r1
 8009286:	2001      	movs	r0, #1
 8009288:	e7a5      	b.n	80091d6 <_vfiprintf_r+0x11a>
 800928a:	2300      	movs	r3, #0
 800928c:	3401      	adds	r4, #1
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	4619      	mov	r1, r3
 8009292:	f04f 0c0a 	mov.w	ip, #10
 8009296:	4620      	mov	r0, r4
 8009298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800929c:	3a30      	subs	r2, #48	; 0x30
 800929e:	2a09      	cmp	r2, #9
 80092a0:	d903      	bls.n	80092aa <_vfiprintf_r+0x1ee>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0c5      	beq.n	8009232 <_vfiprintf_r+0x176>
 80092a6:	9105      	str	r1, [sp, #20]
 80092a8:	e7c3      	b.n	8009232 <_vfiprintf_r+0x176>
 80092aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ae:	4604      	mov	r4, r0
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7f0      	b.n	8009296 <_vfiprintf_r+0x1da>
 80092b4:	ab03      	add	r3, sp, #12
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4b16      	ldr	r3, [pc, #88]	; (8009314 <_vfiprintf_r+0x258>)
 80092bc:	a904      	add	r1, sp, #16
 80092be:	4630      	mov	r0, r6
 80092c0:	f3af 8000 	nop.w
 80092c4:	4607      	mov	r7, r0
 80092c6:	1c78      	adds	r0, r7, #1
 80092c8:	d1d6      	bne.n	8009278 <_vfiprintf_r+0x1bc>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092cc:	07d9      	lsls	r1, r3, #31
 80092ce:	d405      	bmi.n	80092dc <_vfiprintf_r+0x220>
 80092d0:	89ab      	ldrh	r3, [r5, #12]
 80092d2:	059a      	lsls	r2, r3, #22
 80092d4:	d402      	bmi.n	80092dc <_vfiprintf_r+0x220>
 80092d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d8:	f7ff fdb7 	bl	8008e4a <__retarget_lock_release_recursive>
 80092dc:	89ab      	ldrh	r3, [r5, #12]
 80092de:	065b      	lsls	r3, r3, #25
 80092e0:	f53f af12 	bmi.w	8009108 <_vfiprintf_r+0x4c>
 80092e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e6:	e711      	b.n	800910c <_vfiprintf_r+0x50>
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	462a      	mov	r2, r5
 80092ee:	4b09      	ldr	r3, [pc, #36]	; (8009314 <_vfiprintf_r+0x258>)
 80092f0:	a904      	add	r1, sp, #16
 80092f2:	4630      	mov	r0, r6
 80092f4:	f000 f880 	bl	80093f8 <_printf_i>
 80092f8:	e7e4      	b.n	80092c4 <_vfiprintf_r+0x208>
 80092fa:	bf00      	nop
 80092fc:	080099bc 	.word	0x080099bc
 8009300:	080099dc 	.word	0x080099dc
 8009304:	0800999c 	.word	0x0800999c
 8009308:	080099fc 	.word	0x080099fc
 800930c:	08009a06 	.word	0x08009a06
 8009310:	00000000 	.word	0x00000000
 8009314:	08009097 	.word	0x08009097
 8009318:	08009a02 	.word	0x08009a02

0800931c <_printf_common>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	4616      	mov	r6, r2
 8009322:	4699      	mov	r9, r3
 8009324:	688a      	ldr	r2, [r1, #8]
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800932c:	4293      	cmp	r3, r2
 800932e:	bfb8      	it	lt
 8009330:	4613      	movlt	r3, r2
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009338:	4607      	mov	r7, r0
 800933a:	460c      	mov	r4, r1
 800933c:	b10a      	cbz	r2, 8009342 <_printf_common+0x26>
 800933e:	3301      	adds	r3, #1
 8009340:	6033      	str	r3, [r6, #0]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	0699      	lsls	r1, r3, #26
 8009346:	bf42      	ittt	mi
 8009348:	6833      	ldrmi	r3, [r6, #0]
 800934a:	3302      	addmi	r3, #2
 800934c:	6033      	strmi	r3, [r6, #0]
 800934e:	6825      	ldr	r5, [r4, #0]
 8009350:	f015 0506 	ands.w	r5, r5, #6
 8009354:	d106      	bne.n	8009364 <_printf_common+0x48>
 8009356:	f104 0a19 	add.w	sl, r4, #25
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	6832      	ldr	r2, [r6, #0]
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	42ab      	cmp	r3, r5
 8009362:	dc26      	bgt.n	80093b2 <_printf_common+0x96>
 8009364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009368:	1e13      	subs	r3, r2, #0
 800936a:	6822      	ldr	r2, [r4, #0]
 800936c:	bf18      	it	ne
 800936e:	2301      	movne	r3, #1
 8009370:	0692      	lsls	r2, r2, #26
 8009372:	d42b      	bmi.n	80093cc <_printf_common+0xb0>
 8009374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009378:	4649      	mov	r1, r9
 800937a:	4638      	mov	r0, r7
 800937c:	47c0      	blx	r8
 800937e:	3001      	adds	r0, #1
 8009380:	d01e      	beq.n	80093c0 <_printf_common+0xa4>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	68e5      	ldr	r5, [r4, #12]
 8009386:	6832      	ldr	r2, [r6, #0]
 8009388:	f003 0306 	and.w	r3, r3, #6
 800938c:	2b04      	cmp	r3, #4
 800938e:	bf08      	it	eq
 8009390:	1aad      	subeq	r5, r5, r2
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	bf0c      	ite	eq
 8009398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800939c:	2500      	movne	r5, #0
 800939e:	4293      	cmp	r3, r2
 80093a0:	bfc4      	itt	gt
 80093a2:	1a9b      	subgt	r3, r3, r2
 80093a4:	18ed      	addgt	r5, r5, r3
 80093a6:	2600      	movs	r6, #0
 80093a8:	341a      	adds	r4, #26
 80093aa:	42b5      	cmp	r5, r6
 80093ac:	d11a      	bne.n	80093e4 <_printf_common+0xc8>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e008      	b.n	80093c4 <_printf_common+0xa8>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4649      	mov	r1, r9
 80093b8:	4638      	mov	r0, r7
 80093ba:	47c0      	blx	r8
 80093bc:	3001      	adds	r0, #1
 80093be:	d103      	bne.n	80093c8 <_printf_common+0xac>
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c8:	3501      	adds	r5, #1
 80093ca:	e7c6      	b.n	800935a <_printf_common+0x3e>
 80093cc:	18e1      	adds	r1, r4, r3
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	2030      	movs	r0, #48	; 0x30
 80093d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093d6:	4422      	add	r2, r4
 80093d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093e0:	3302      	adds	r3, #2
 80093e2:	e7c7      	b.n	8009374 <_printf_common+0x58>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4622      	mov	r2, r4
 80093e8:	4649      	mov	r1, r9
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c0      	blx	r8
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0e6      	beq.n	80093c0 <_printf_common+0xa4>
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7d9      	b.n	80093aa <_printf_common+0x8e>
	...

080093f8 <_printf_i>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	4691      	mov	r9, r2
 8009400:	7e27      	ldrb	r7, [r4, #24]
 8009402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009404:	2f78      	cmp	r7, #120	; 0x78
 8009406:	4680      	mov	r8, r0
 8009408:	469a      	mov	sl, r3
 800940a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800940e:	d807      	bhi.n	8009420 <_printf_i+0x28>
 8009410:	2f62      	cmp	r7, #98	; 0x62
 8009412:	d80a      	bhi.n	800942a <_printf_i+0x32>
 8009414:	2f00      	cmp	r7, #0
 8009416:	f000 80d8 	beq.w	80095ca <_printf_i+0x1d2>
 800941a:	2f58      	cmp	r7, #88	; 0x58
 800941c:	f000 80a3 	beq.w	8009566 <_printf_i+0x16e>
 8009420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009428:	e03a      	b.n	80094a0 <_printf_i+0xa8>
 800942a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800942e:	2b15      	cmp	r3, #21
 8009430:	d8f6      	bhi.n	8009420 <_printf_i+0x28>
 8009432:	a001      	add	r0, pc, #4	; (adr r0, 8009438 <_printf_i+0x40>)
 8009434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009438:	08009491 	.word	0x08009491
 800943c:	080094a5 	.word	0x080094a5
 8009440:	08009421 	.word	0x08009421
 8009444:	08009421 	.word	0x08009421
 8009448:	08009421 	.word	0x08009421
 800944c:	08009421 	.word	0x08009421
 8009450:	080094a5 	.word	0x080094a5
 8009454:	08009421 	.word	0x08009421
 8009458:	08009421 	.word	0x08009421
 800945c:	08009421 	.word	0x08009421
 8009460:	08009421 	.word	0x08009421
 8009464:	080095b1 	.word	0x080095b1
 8009468:	080094d5 	.word	0x080094d5
 800946c:	08009593 	.word	0x08009593
 8009470:	08009421 	.word	0x08009421
 8009474:	08009421 	.word	0x08009421
 8009478:	080095d3 	.word	0x080095d3
 800947c:	08009421 	.word	0x08009421
 8009480:	080094d5 	.word	0x080094d5
 8009484:	08009421 	.word	0x08009421
 8009488:	08009421 	.word	0x08009421
 800948c:	0800959b 	.word	0x0800959b
 8009490:	680b      	ldr	r3, [r1, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	600a      	str	r2, [r1, #0]
 8009498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800949c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0a3      	b.n	80095ec <_printf_i+0x1f4>
 80094a4:	6825      	ldr	r5, [r4, #0]
 80094a6:	6808      	ldr	r0, [r1, #0]
 80094a8:	062e      	lsls	r6, r5, #24
 80094aa:	f100 0304 	add.w	r3, r0, #4
 80094ae:	d50a      	bpl.n	80094c6 <_printf_i+0xce>
 80094b0:	6805      	ldr	r5, [r0, #0]
 80094b2:	600b      	str	r3, [r1, #0]
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	da03      	bge.n	80094c0 <_printf_i+0xc8>
 80094b8:	232d      	movs	r3, #45	; 0x2d
 80094ba:	426d      	negs	r5, r5
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	485e      	ldr	r0, [pc, #376]	; (800963c <_printf_i+0x244>)
 80094c2:	230a      	movs	r3, #10
 80094c4:	e019      	b.n	80094fa <_printf_i+0x102>
 80094c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094ca:	6805      	ldr	r5, [r0, #0]
 80094cc:	600b      	str	r3, [r1, #0]
 80094ce:	bf18      	it	ne
 80094d0:	b22d      	sxthne	r5, r5
 80094d2:	e7ef      	b.n	80094b4 <_printf_i+0xbc>
 80094d4:	680b      	ldr	r3, [r1, #0]
 80094d6:	6825      	ldr	r5, [r4, #0]
 80094d8:	1d18      	adds	r0, r3, #4
 80094da:	6008      	str	r0, [r1, #0]
 80094dc:	0628      	lsls	r0, r5, #24
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0xec>
 80094e0:	681d      	ldr	r5, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0xf2>
 80094e4:	0669      	lsls	r1, r5, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0xe8>
 80094e8:	881d      	ldrh	r5, [r3, #0]
 80094ea:	4854      	ldr	r0, [pc, #336]	; (800963c <_printf_i+0x244>)
 80094ec:	2f6f      	cmp	r7, #111	; 0x6f
 80094ee:	bf0c      	ite	eq
 80094f0:	2308      	moveq	r3, #8
 80094f2:	230a      	movne	r3, #10
 80094f4:	2100      	movs	r1, #0
 80094f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094fa:	6866      	ldr	r6, [r4, #4]
 80094fc:	60a6      	str	r6, [r4, #8]
 80094fe:	2e00      	cmp	r6, #0
 8009500:	bfa2      	ittt	ge
 8009502:	6821      	ldrge	r1, [r4, #0]
 8009504:	f021 0104 	bicge.w	r1, r1, #4
 8009508:	6021      	strge	r1, [r4, #0]
 800950a:	b90d      	cbnz	r5, 8009510 <_printf_i+0x118>
 800950c:	2e00      	cmp	r6, #0
 800950e:	d04d      	beq.n	80095ac <_printf_i+0x1b4>
 8009510:	4616      	mov	r6, r2
 8009512:	fbb5 f1f3 	udiv	r1, r5, r3
 8009516:	fb03 5711 	mls	r7, r3, r1, r5
 800951a:	5dc7      	ldrb	r7, [r0, r7]
 800951c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009520:	462f      	mov	r7, r5
 8009522:	42bb      	cmp	r3, r7
 8009524:	460d      	mov	r5, r1
 8009526:	d9f4      	bls.n	8009512 <_printf_i+0x11a>
 8009528:	2b08      	cmp	r3, #8
 800952a:	d10b      	bne.n	8009544 <_printf_i+0x14c>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	07df      	lsls	r7, r3, #31
 8009530:	d508      	bpl.n	8009544 <_printf_i+0x14c>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	6861      	ldr	r1, [r4, #4]
 8009536:	4299      	cmp	r1, r3
 8009538:	bfde      	ittt	le
 800953a:	2330      	movle	r3, #48	; 0x30
 800953c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009544:	1b92      	subs	r2, r2, r6
 8009546:	6122      	str	r2, [r4, #16]
 8009548:	f8cd a000 	str.w	sl, [sp]
 800954c:	464b      	mov	r3, r9
 800954e:	aa03      	add	r2, sp, #12
 8009550:	4621      	mov	r1, r4
 8009552:	4640      	mov	r0, r8
 8009554:	f7ff fee2 	bl	800931c <_printf_common>
 8009558:	3001      	adds	r0, #1
 800955a:	d14c      	bne.n	80095f6 <_printf_i+0x1fe>
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	b004      	add	sp, #16
 8009562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009566:	4835      	ldr	r0, [pc, #212]	; (800963c <_printf_i+0x244>)
 8009568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	680e      	ldr	r6, [r1, #0]
 8009570:	061f      	lsls	r7, r3, #24
 8009572:	f856 5b04 	ldr.w	r5, [r6], #4
 8009576:	600e      	str	r6, [r1, #0]
 8009578:	d514      	bpl.n	80095a4 <_printf_i+0x1ac>
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	bf44      	itt	mi
 800957e:	f043 0320 	orrmi.w	r3, r3, #32
 8009582:	6023      	strmi	r3, [r4, #0]
 8009584:	b91d      	cbnz	r5, 800958e <_printf_i+0x196>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f023 0320 	bic.w	r3, r3, #32
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	2310      	movs	r3, #16
 8009590:	e7b0      	b.n	80094f4 <_printf_i+0xfc>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f043 0320 	orr.w	r3, r3, #32
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	2378      	movs	r3, #120	; 0x78
 800959c:	4828      	ldr	r0, [pc, #160]	; (8009640 <_printf_i+0x248>)
 800959e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a2:	e7e3      	b.n	800956c <_printf_i+0x174>
 80095a4:	065e      	lsls	r6, r3, #25
 80095a6:	bf48      	it	mi
 80095a8:	b2ad      	uxthmi	r5, r5
 80095aa:	e7e6      	b.n	800957a <_printf_i+0x182>
 80095ac:	4616      	mov	r6, r2
 80095ae:	e7bb      	b.n	8009528 <_printf_i+0x130>
 80095b0:	680b      	ldr	r3, [r1, #0]
 80095b2:	6826      	ldr	r6, [r4, #0]
 80095b4:	6960      	ldr	r0, [r4, #20]
 80095b6:	1d1d      	adds	r5, r3, #4
 80095b8:	600d      	str	r5, [r1, #0]
 80095ba:	0635      	lsls	r5, r6, #24
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	d501      	bpl.n	80095c4 <_printf_i+0x1cc>
 80095c0:	6018      	str	r0, [r3, #0]
 80095c2:	e002      	b.n	80095ca <_printf_i+0x1d2>
 80095c4:	0671      	lsls	r1, r6, #25
 80095c6:	d5fb      	bpl.n	80095c0 <_printf_i+0x1c8>
 80095c8:	8018      	strh	r0, [r3, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	4616      	mov	r6, r2
 80095d0:	e7ba      	b.n	8009548 <_printf_i+0x150>
 80095d2:	680b      	ldr	r3, [r1, #0]
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	600a      	str	r2, [r1, #0]
 80095d8:	681e      	ldr	r6, [r3, #0]
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	2100      	movs	r1, #0
 80095de:	4630      	mov	r0, r6
 80095e0:	f7f6 fdfe 	bl	80001e0 <memchr>
 80095e4:	b108      	cbz	r0, 80095ea <_printf_i+0x1f2>
 80095e6:	1b80      	subs	r0, r0, r6
 80095e8:	6060      	str	r0, [r4, #4]
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	2300      	movs	r3, #0
 80095f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f4:	e7a8      	b.n	8009548 <_printf_i+0x150>
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	4632      	mov	r2, r6
 80095fa:	4649      	mov	r1, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	47d0      	blx	sl
 8009600:	3001      	adds	r0, #1
 8009602:	d0ab      	beq.n	800955c <_printf_i+0x164>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	079b      	lsls	r3, r3, #30
 8009608:	d413      	bmi.n	8009632 <_printf_i+0x23a>
 800960a:	68e0      	ldr	r0, [r4, #12]
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	4298      	cmp	r0, r3
 8009610:	bfb8      	it	lt
 8009612:	4618      	movlt	r0, r3
 8009614:	e7a4      	b.n	8009560 <_printf_i+0x168>
 8009616:	2301      	movs	r3, #1
 8009618:	4632      	mov	r2, r6
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d09b      	beq.n	800955c <_printf_i+0x164>
 8009624:	3501      	adds	r5, #1
 8009626:	68e3      	ldr	r3, [r4, #12]
 8009628:	9903      	ldr	r1, [sp, #12]
 800962a:	1a5b      	subs	r3, r3, r1
 800962c:	42ab      	cmp	r3, r5
 800962e:	dcf2      	bgt.n	8009616 <_printf_i+0x21e>
 8009630:	e7eb      	b.n	800960a <_printf_i+0x212>
 8009632:	2500      	movs	r5, #0
 8009634:	f104 0619 	add.w	r6, r4, #25
 8009638:	e7f5      	b.n	8009626 <_printf_i+0x22e>
 800963a:	bf00      	nop
 800963c:	08009a0d 	.word	0x08009a0d
 8009640:	08009a1e 	.word	0x08009a1e

08009644 <_sbrk_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d06      	ldr	r5, [pc, #24]	; (8009660 <_sbrk_r+0x1c>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f8 fd7c 	bl	800214c <_sbrk>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_sbrk_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_sbrk_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20004cac 	.word	0x20004cac

08009664 <__sread>:
 8009664:	b510      	push	{r4, lr}
 8009666:	460c      	mov	r4, r1
 8009668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966c:	f000 f8a0 	bl	80097b0 <_read_r>
 8009670:	2800      	cmp	r0, #0
 8009672:	bfab      	itete	ge
 8009674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009676:	89a3      	ldrhlt	r3, [r4, #12]
 8009678:	181b      	addge	r3, r3, r0
 800967a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800967e:	bfac      	ite	ge
 8009680:	6563      	strge	r3, [r4, #84]	; 0x54
 8009682:	81a3      	strhlt	r3, [r4, #12]
 8009684:	bd10      	pop	{r4, pc}

08009686 <__swrite>:
 8009686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968a:	461f      	mov	r7, r3
 800968c:	898b      	ldrh	r3, [r1, #12]
 800968e:	05db      	lsls	r3, r3, #23
 8009690:	4605      	mov	r5, r0
 8009692:	460c      	mov	r4, r1
 8009694:	4616      	mov	r6, r2
 8009696:	d505      	bpl.n	80096a4 <__swrite+0x1e>
 8009698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969c:	2302      	movs	r3, #2
 800969e:	2200      	movs	r2, #0
 80096a0:	f000 f868 	bl	8009774 <_lseek_r>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	4632      	mov	r2, r6
 80096b2:	463b      	mov	r3, r7
 80096b4:	4628      	mov	r0, r5
 80096b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	f000 b817 	b.w	80096ec <_write_r>

080096be <__sseek>:
 80096be:	b510      	push	{r4, lr}
 80096c0:	460c      	mov	r4, r1
 80096c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c6:	f000 f855 	bl	8009774 <_lseek_r>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	bf15      	itete	ne
 80096d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80096d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096da:	81a3      	strheq	r3, [r4, #12]
 80096dc:	bf18      	it	ne
 80096de:	81a3      	strhne	r3, [r4, #12]
 80096e0:	bd10      	pop	{r4, pc}

080096e2 <__sclose>:
 80096e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e6:	f000 b813 	b.w	8009710 <_close_r>
	...

080096ec <_write_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d07      	ldr	r5, [pc, #28]	; (800970c <_write_r+0x20>)
 80096f0:	4604      	mov	r4, r0
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	2200      	movs	r2, #0
 80096f8:	602a      	str	r2, [r5, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	f7f6 ff3c 	bl	8000578 <_write>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_write_r+0x1e>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_write_r+0x1e>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20004cac 	.word	0x20004cac

08009710 <_close_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_close_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f8 fce1 	bl	80020e2 <_close>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_close_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_close_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20004cac 	.word	0x20004cac

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	; (8009750 <_fstat_r+0x20>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f8 fcdc 	bl	80020fa <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	20004cac 	.word	0x20004cac

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	; (8009770 <_isatty_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f8 fcdb 	bl	800211a <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20004cac 	.word	0x20004cac

08009774 <_lseek_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d07      	ldr	r5, [pc, #28]	; (8009794 <_lseek_r+0x20>)
 8009778:	4604      	mov	r4, r0
 800977a:	4608      	mov	r0, r1
 800977c:	4611      	mov	r1, r2
 800977e:	2200      	movs	r2, #0
 8009780:	602a      	str	r2, [r5, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f7f8 fcd4 	bl	8002130 <_lseek>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_lseek_r+0x1e>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_lseek_r+0x1e>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20004cac 	.word	0x20004cac

08009798 <__malloc_lock>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__malloc_lock+0x8>)
 800979a:	f7ff bb55 	b.w	8008e48 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20004ca4 	.word	0x20004ca4

080097a4 <__malloc_unlock>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__malloc_unlock+0x8>)
 80097a6:	f7ff bb50 	b.w	8008e4a <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20004ca4 	.word	0x20004ca4

080097b0 <_read_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d07      	ldr	r5, [pc, #28]	; (80097d0 <_read_r+0x20>)
 80097b4:	4604      	mov	r4, r0
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	2200      	movs	r2, #0
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f7f8 fc72 	bl	80020a8 <_read>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_read_r+0x1e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_read_r+0x1e>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	20004cac 	.word	0x20004cac

080097d4 <_init>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr

080097e0 <_fini>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	bf00      	nop
 80097e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e6:	bc08      	pop	{r3}
 80097e8:	469e      	mov	lr, r3
 80097ea:	4770      	bx	lr

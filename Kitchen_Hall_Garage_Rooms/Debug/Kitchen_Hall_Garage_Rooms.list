
Kitchen_Hall_Garage_Rooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009a5c  08009a5c  00019a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c54  08009c54  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c5c  08009c5c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004450  2000009c  08009d00  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044ec  08009d00  000244ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cbf  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c36  00000000  00000000  00043d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  000489c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  0004a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cece  00000000  00000000  0004bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef31  00000000  00000000  00068bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a84b9  00000000  00000000  00087aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ffb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000759c  00000000  00000000  0013000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a44 	.word	0x08009a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08009a44 	.word	0x08009a44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_write>:
 *      Author: kus
 */

#include "LoRa.h"

int _write(int file , char *ptr , int len){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2 , ptr , len , 50);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	2332      	movs	r3, #50	; 0x32
 800058a:	68b9      	ldr	r1, [r7, #8]
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <_write+0x24>)
 800058e:	f005 f91c 	bl	80057ca <HAL_UART_Transmit>
  return len;
 8000592:	687b      	ldr	r3, [r7, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20004454 	.word	0x20004454

080005a0 <SPI_CS_LOW>:

void SPI_CS_LOW(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LORA_GPIO_Port, CS_LORA_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <SPI_CS_LOW+0x14>)
 80005aa:	f003 fadd 	bl	8003b68 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <SPI_CS_HIGH>:

void SPI_CS_HIGH(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LORA_GPIO_Port, CS_LORA_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <SPI_CS_HIGH+0x14>)
 80005c2:	f003 fad1 	bl	8003b68 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <Read_Reg>:

unsigned char Read_Reg(unsigned char addr){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = addr & 0x7F;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	SPI_CS_LOW();
 80005e4:	f7ff ffdc 	bl	80005a0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , HAL_MAX_DELAY);
 80005e8:	f107 010f 	add.w	r1, r7, #15
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	2201      	movs	r2, #1
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <Read_Reg+0x48>)
 80005f4:	f003 ffa3 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80005f8:	f107 010e 	add.w	r1, r7, #14
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <Read_Reg+0x48>)
 8000604:	f004 f8d7 	bl	80047b6 <HAL_SPI_Receive>
	SPI_CS_HIGH();
 8000608:	f7ff ffd6 	bl	80005b8 <SPI_CS_HIGH>

	return data;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200043b4 	.word	0x200043b4

0800061c <Write_Reg>:

void Write_Reg(unsigned char addr , unsigned char value){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t Value = value;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	73bb      	strb	r3, [r7, #14]

	SPI_CS_LOW();
 800063a:	f7ff ffb1 	bl	80005a0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg,	1 , HAL_MAX_DELAY);
 800063e:	f107 010f 	add.w	r1, r7, #15
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	2201      	movs	r2, #1
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <Write_Reg+0x50>)
 800064a:	f003 ff78 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &Value,1 , HAL_MAX_DELAY);
 800064e:	f107 010e 	add.w	r1, r7, #14
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2201      	movs	r2, #1
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <Write_Reg+0x50>)
 800065a:	f003 ff70 	bl	800453e <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800065e:	f7ff ffab 	bl	80005b8 <SPI_CS_HIGH>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200043b4 	.word	0x200043b4

08000670 <set_OPMODE>:

void set_OPMODE(uint8_t mode){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, Read_Reg(REG_OPMODE) & ~OPMODE_MASK | mode );
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ffa8 	bl	80005d0 <Read_Reg>
 8000680:	4603      	mov	r3, r0
 8000682:	b25b      	sxtb	r3, r3
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	b25a      	sxtb	r2, r3
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	4313      	orrs	r3, r2
 8000690:	b25b      	sxtb	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ffc0 	bl	800061c <Write_Reg>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <set_LoRa_mode>:

void set_LoRa_mode(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff ffe0 	bl	8000670 <set_OPMODE>
	HAL_Delay(15);
 80006b0:	200f      	movs	r0, #15
 80006b2:	f002 f8c3 	bl	800283c <HAL_Delay>

	uint8_t data = OPMODE_LORA;
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, data);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff ffac 	bl	800061c <Write_Reg>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <set_Freq>:

void set_Freq(uint64_t freq){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	e9c7 0100 	strd	r0, r1, [r7]
	set_OPMODE(OPMODE_SLEEP);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ffca 	bl	8000670 <set_OPMODE>
	HAL_Delay(15);
 80006dc:	200f      	movs	r0, #15
 80006de:	f002 f8ad 	bl	800283c <HAL_Delay>

	uint64_t frf = (( uint64_t)freq <<14 );  // freq *  2^19 / 32
 80006e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006e6:	f04f 0200 	mov.w	r2, #0
 80006ea:	f04f 0300 	mov.w	r3, #0
 80006ee:	038b      	lsls	r3, r1, #14
 80006f0:	ea43 4390 	orr.w	r3, r3, r0, lsr #18
 80006f4:	0382      	lsls	r2, r0, #14
 80006f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Write_Reg(REG_FRF_MSB, (uint8_t)(frf>>16) );
 80006fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	0c02      	lsrs	r2, r0, #16
 8000708:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800070c:	0c0b      	lsrs	r3, r1, #16
 800070e:	b2d3      	uxtb	r3, r2
 8000710:	4619      	mov	r1, r3
 8000712:	2006      	movs	r0, #6
 8000714:	f7ff ff82 	bl	800061c <Write_Reg>
	Write_Reg(REG_FRF_MID, (uint8_t)(frf>>8) );
 8000718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	0a02      	lsrs	r2, r0, #8
 8000726:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800072a:	0a0b      	lsrs	r3, r1, #8
 800072c:	b2d3      	uxtb	r3, r2
 800072e:	4619      	mov	r1, r3
 8000730:	2007      	movs	r0, #7
 8000732:	f7ff ff73 	bl	800061c <Write_Reg>
	Write_Reg(REG_FRF_LSB, (uint8_t)(frf>>0) );
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	4619      	mov	r1, r3
 800073a:	2008      	movs	r0, #8
 800073c:	f7ff ff6e 	bl	800061c <Write_Reg>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <set_config>:

void set_config(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ff8e 	bl	8000670 <set_OPMODE>
	HAL_Delay(15);
 8000754:	200f      	movs	r0, #15
 8000756:	f002 f871 	bl	800283c <HAL_Delay>

	set_LoRa_mode();
 800075a:	f7ff ffa3 	bl	80006a4 <set_LoRa_mode>

	unsigned char version = Read_Reg(REG_VERSION);
 800075e:	2042      	movs	r0, #66	; 0x42
 8000760:	f7ff ff36 	bl	80005d0 <Read_Reg>
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]

	printf("%d version \n\r", version);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4619      	mov	r1, r3
 800076c:	4819      	ldr	r0, [pc, #100]	; (80007d4 <set_config+0x8c>)
 800076e:	f008 f99d 	bl	8008aac <iprintf>

	Write_Reg(REG_SYNC_WORD, 0x34);
 8000772:	2134      	movs	r1, #52	; 0x34
 8000774:	2039      	movs	r0, #57	; 0x39
 8000776:	f7ff ff51 	bl	800061c <Write_Reg>


	Write_Reg(REG_MODEM_CONFIG3,0x04);
 800077a:	2104      	movs	r1, #4
 800077c:	2026      	movs	r0, #38	; 0x26
 800077e:	f7ff ff4d 	bl	800061c <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG,0x72);
 8000782:	2172      	movs	r1, #114	; 0x72
 8000784:	201d      	movs	r0, #29
 8000786:	f7ff ff49 	bl	800061c <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG2, (0x07<<4) | 0x04);
 800078a:	2174      	movs	r1, #116	; 0x74
 800078c:	201e      	movs	r0, #30
 800078e:	f7ff ff45 	bl	800061c <Write_Reg>

	Write_Reg(REG_SYMB_TIMEOUT_LSB,0x08);
 8000792:	2108      	movs	r1, #8
 8000794:	201f      	movs	r0, #31
 8000796:	f7ff ff41 	bl	800061c <Write_Reg>

	Write_Reg(REG_MAX_PAYLOAD_LENGTH, 0x80);
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	2023      	movs	r0, #35	; 0x23
 800079e:	f7ff ff3d 	bl	800061c <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, PAYLOAD_LENGTH);
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	2022      	movs	r0, #34	; 0x22
 80007a6:	f7ff ff39 	bl	800061c <Write_Reg>
	Write_Reg(REG_HOP_PERIOD, 0xFF);
 80007aa:	21ff      	movs	r1, #255	; 0xff
 80007ac:	2024      	movs	r0, #36	; 0x24
 80007ae:	f7ff ff35 	bl	800061c <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, Read_Reg(REG_FIFO_TX_BASE_AD));
 80007b2:	200e      	movs	r0, #14
 80007b4:	f7ff ff0c 	bl	80005d0 <Read_Reg>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	200d      	movs	r0, #13
 80007be:	f7ff ff2d 	bl	800061c <Write_Reg>

	Write_Reg(REG_LNA, LNA_MAX_GAIN);
 80007c2:	2123      	movs	r1, #35	; 0x23
 80007c4:	200c      	movs	r0, #12
 80007c6:	f7ff ff29 	bl	800061c <Write_Reg>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08009a5c 	.word	0x08009a5c

080007d8 <LoRa_init>:

void LoRa_init(uint64_t freq){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2102      	movs	r1, #2
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <LoRa_init+0x80>)
 80007e8:	f003 f9be 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f002 f825 	bl	800283c <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2102      	movs	r1, #2
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <LoRa_init+0x80>)
 80007f8:	f003 f9b6 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007fc:	2064      	movs	r0, #100	; 0x64
 80007fe:	f002 f81d 	bl	800283c <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <LoRa_init+0x80>)
 8000808:	f003 f9ae 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f002 f815 	bl	800283c <HAL_Delay>

	set_Freq(freq);
 8000812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000816:	f7ff ff59 	bl	80006cc <set_Freq>
	set_config();
 800081a:	f7ff ff95 	bl	8000748 <set_config>
	set_LoRa_mode();
 800081e:	f7ff ff41 	bl	80006a4 <set_LoRa_mode>

	set_OPMODE(OPMODE_STANDBY);
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff24 	bl	8000670 <set_OPMODE>
	Write_Reg(RegPaRamp, (Read_Reg(RegPaRamp)& 0xF0) | 0x80 );
 8000828:	200a      	movs	r0, #10
 800082a:	f7ff fed1 	bl	80005d0 <Read_Reg>
 800082e:	4603      	mov	r3, r0
 8000830:	b25b      	sxtb	r3, r3
 8000832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083c:	b25b      	sxtb	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	200a      	movs	r0, #10
 8000844:	f7ff feea 	bl	800061c <Write_Reg>
	set_Power(23);
 8000848:	2017      	movs	r0, #23
 800084a:	f000 f8c7 	bl	80009dc <set_Power>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40020400 	.word	0x40020400

0800085c <Receive>:


uint8_t Receive(char *payload){
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	Write_Reg(REG_IRQ_FLAGS, 0x40);
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	2012      	movs	r0, #18
 8000868:	f7ff fed8 	bl	800061c <Write_Reg>

	int IRQ = Read_Reg(REG_IRQ_FLAGS);
 800086c:	2012      	movs	r0, #18
 800086e:	f7ff feaf 	bl	80005d0 <Read_Reg>
 8000872:	4603      	mov	r3, r0
 8000874:	613b      	str	r3, [r7, #16]

	if(( IRQ & 0x20) == 0x20){
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <Receive+0x36>
		printf("CRC error \n\r");
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <Receive+0x84>)
 8000882:	f008 f913 	bl	8008aac <iprintf>
		Write_Reg(REG_IRQ_FLAGS, 0x20);
 8000886:	2120      	movs	r1, #32
 8000888:	2012      	movs	r0, #18
 800088a:	f7ff fec7 	bl	800061c <Write_Reg>
		return 0;
 800088e:	2300      	movs	r3, #0
 8000890:	e021      	b.n	80008d6 <Receive+0x7a>
	}
	else {
		uint8_t currentAddr = Read_Reg(REG_FIFO_RX_CURRENT_ADDR);
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff fe9c 	bl	80005d0 <Read_Reg>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedCount = Read_Reg(REG_RX_NB_BYTES);
 800089c:	2013      	movs	r0, #19
 800089e:	f7ff fe97 	bl	80005d0 <Read_Reg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73bb      	strb	r3, [r7, #14]

		Write_Reg(REG_FIFO_ADDR_PTR, currentAddr);
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4619      	mov	r1, r3
 80008aa:	200d      	movs	r0, #13
 80008ac:	f7ff feb6 	bl	800061c <Write_Reg>

		for(int i = 0; i < receivedCount; i++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <Receive+0x70>
			payload[i] = (char)Read_Reg(REG_FIFO);
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	18d4      	adds	r4, r2, r3
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe87 	bl	80005d0 <Read_Reg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
		for(int i = 0; i < receivedCount; i++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <Receive+0x5a>
	}

	return 1;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	bf00      	nop
 80008e0:	08009a6c 	.word	0x08009a6c

080008e4 <Write_Buf>:

void Write_Buf(unsigned char addr, unsigned char *value, unsigned char len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0c4      	sub	sp, #272	; 0x110
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	463b      	mov	r3, r7
 80008ec:	6019      	str	r1, [r3, #0]
 80008ee:	4611      	mov	r1, r2
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	4602      	mov	r2, r0
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	460a      	mov	r2, r1
 80008fa:	701a      	strb	r2, [r3, #0]

	uint8_t reg = addr | 0x80;
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t buf[256];
	for (int i = 0; i < len; i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000910:	e011      	b.n	8000936 <Write_Buf+0x52>
		buf[i] = value[i];
 8000912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000916:	463a      	mov	r2, r7
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	4413      	add	r3, r2
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	f107 0208 	add.w	r2, r7, #8
 8000922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000926:	4413      	add	r3, r2
 8000928:	460a      	mov	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800092c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000930:	3301      	adds	r3, #1
 8000932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000936:	1dbb      	adds	r3, r7, #6
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800093e:	429a      	cmp	r2, r3
 8000940:	dbe7      	blt.n	8000912 <Write_Buf+0x2e>
	}

	SPI_CS_LOW();
 8000942:	f7ff fe2d 	bl	80005a0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000946:	f207 110b 	addw	r1, r7, #267	; 0x10b
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <Write_Buf+0x94>)
 8000952:	f003 fdf4 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, len, HAL_MAX_DELAY);
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29a      	uxth	r2, r3
 800095c:	f107 0108 	add.w	r1, r7, #8
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <Write_Buf+0x94>)
 8000966:	f003 fdea 	bl	800453e <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800096a:	f7ff fe25 	bl	80005b8 <SPI_CS_HIGH>
}
 800096e:	bf00      	nop
 8000970:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200043b4 	.word	0x200043b4

0800097c <Transmit>:

void Transmit(unsigned char *frame, unsigned char datalen) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]

	Write_Reg(REG_HOP_PERIOD,0x00);
 8000988:	2100      	movs	r1, #0
 800098a:	2024      	movs	r0, #36	; 0x24
 800098c:	f7ff fe46 	bl	800061c <Write_Reg>
	Write_Reg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8000990:	21f0      	movs	r1, #240	; 0xf0
 8000992:	2040      	movs	r0, #64	; 0x40
 8000994:	f7ff fe42 	bl	800061c <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS, 0xFF);
 8000998:	21ff      	movs	r1, #255	; 0xff
 800099a:	2012      	movs	r0, #18
 800099c:	f7ff fe3e 	bl	800061c <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS_MASK, ~IRQ_LORA_TXDONE_MASK);
 80009a0:	21f7      	movs	r1, #247	; 0xf7
 80009a2:	2011      	movs	r0, #17
 80009a4:	f7ff fe3a 	bl	800061c <Write_Reg>

	Write_Reg(REG_FIFO_TX_BASE_AD, 0x00);
 80009a8:	2100      	movs	r1, #0
 80009aa:	200e      	movs	r0, #14
 80009ac:	f7ff fe36 	bl	800061c <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, 0x00);
 80009b0:	2100      	movs	r1, #0
 80009b2:	200d      	movs	r0, #13
 80009b4:	f7ff fe32 	bl	800061c <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, datalen);
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	4619      	mov	r1, r3
 80009bc:	2022      	movs	r0, #34	; 0x22
 80009be:	f7ff fe2d 	bl	800061c <Write_Reg>

	Write_Buf(REG_FIFO, frame, datalen);
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	461a      	mov	r2, r3
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff8b 	bl	80008e4 <Write_Buf>
	set_OPMODE(OPMODE_TX);
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff fe4e 	bl	8000670 <set_OPMODE>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <set_Power>:

void set_Power(int8_t pw) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if(pw >= 17) {
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	dd02      	ble.n	80009f4 <set_Power+0x18>
		pw = 15;
 80009ee:	230f      	movs	r3, #15
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e005      	b.n	8000a00 <set_Power+0x24>
	} else if(pw < 2) {
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	dc01      	bgt.n	8000a00 <set_Power+0x24>
		pw = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	71fb      	strb	r3, [r7, #7]
	}
	Write_Reg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	2009      	movs	r0, #9
 8000a14:	f7ff fe02 	bl	800061c <Write_Reg>
	Write_Reg(RegPaDac, Read_Reg(RegPaDac)|0x4);
 8000a18:	205a      	movs	r0, #90	; 0x5a
 8000a1a:	f7ff fdd9 	bl	80005d0 <Read_Reg>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	205a      	movs	r0, #90	; 0x5a
 8000a2a:	f7ff fdf7 	bl	800061c <Write_Reg>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <Mode_Write>:
 *      Author: kus
 */

#include "RTC.h"

void Mode_Write(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SDA_RTC_Pin;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <Mode_Write+0x24>)
 8000a50:	f002 feee 	bl	8003830 <HAL_GPIO_Init>

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020800 	.word	0x40020800

08000a60 <Mode_Read>:

void Mode_Read(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SDA_RTC_Pin;
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <Mode_Read+0x28>)
 8000a7c:	f002 fed8 	bl	8003830 <HAL_GPIO_Init>
}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40020800 	.word	0x40020800

08000a8c <Send_Command>:

void Send_Command(uint8_t command) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < 8; i ++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e01e      	b.n	8000ada <Send_Command+0x4e>

		HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin, (command & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <Send_Command+0x60>)
 8000aaa:	f003 f85d 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <Send_Command+0x60>)
 8000ab4:	f003 f858 	bl	8003b68 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f001 febf 	bl	800283c <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <Send_Command+0x60>)
 8000ac4:	f003 f850 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f001 feb7 	bl	800283c <HAL_Delay>

		command >>= 1;
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < 8; i ++){
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	d9dd      	bls.n	8000a9c <Send_Command+0x10>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40020800 	.word	0x40020800

08000af0 <Write_Byte>:


void Write_Byte(uint8_t address, uint8_t value){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b06:	481d      	ldr	r0, [pc, #116]	; (8000b7c <Write_Byte+0x8c>)
 8000b08:	f003 f82e 	bl	8003b68 <HAL_GPIO_WritePin>
	Send_Command(address);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffbc 	bl	8000a8c <Send_Command>

	for ( uint8_t i = 0; i < 8; i ++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e01e      	b.n	8000b58 <Write_Byte+0x68>
		HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin, (value & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4815      	ldr	r0, [pc, #84]	; (8000b7c <Write_Byte+0x8c>)
 8000b28:	f003 f81e 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <Write_Byte+0x8c>)
 8000b32:	f003 f819 	bl	8003b68 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f001 fe80 	bl	800283c <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <Write_Byte+0x8c>)
 8000b42:	f003 f811 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f001 fe78 	bl	800283c <HAL_Delay>

		value >>= 1;
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	71bb      	strb	r3, [r7, #6]
	for ( uint8_t i = 0; i < 8; i ++) {
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	3301      	adds	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d9dd      	bls.n	8000b1a <Write_Byte+0x2a>
	}

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <Write_Byte+0x8c>)
 8000b66:	f002 ffff 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin,  GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Write_Byte+0x8c>)
 8000b70:	f002 fffa 	bl	8003b68 <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40020800 	.word	0x40020800

08000b80 <Read_Byte>:


uint8_t Read_Byte(uint8_t address)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4822      	ldr	r0, [pc, #136]	; (8000c20 <Read_Byte+0xa0>)
 8000b96:	f002 ffe7 	bl	8003b68 <HAL_GPIO_WritePin>
	address = address | 0x01;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]

	Send_Command(address);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff71 	bl	8000a8c <Send_Command>
	Mode_Read();
 8000baa:	f7ff ff59 	bl	8000a60 <Mode_Read>
	for ( uint8_t i = 0; i < 8; i ++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73bb      	strb	r3, [r7, #14]
 8000bb2:	e020      	b.n	8000bf6 <Read_Byte+0x76>
		Temp >>= 1;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
		if(HAL_GPIO_ReadPin(SDA_RTC_GPIO_Port, SDA_RTC_Pin))
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	4818      	ldr	r0, [pc, #96]	; (8000c20 <Read_Byte+0xa0>)
 8000bbe:	f002 ffbb 	bl	8003b38 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <Read_Byte+0x50>
			Temp |= 0x80;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bce:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <Read_Byte+0xa0>)
 8000bd6:	f002 ffc7 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f001 fe2e 	bl	800283c <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	480e      	ldr	r0, [pc, #56]	; (8000c20 <Read_Byte+0xa0>)
 8000be6:	f002 ffbf 	bl	8003b68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f001 fe26 	bl	800283c <HAL_Delay>
	for ( uint8_t i = 0; i < 8; i ++){
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	73bb      	strb	r3, [r7, #14]
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	2b07      	cmp	r3, #7
 8000bfa:	d9db      	bls.n	8000bb4 <Read_Byte+0x34>
	}
	Mode_Write();
 8000bfc:	f7ff ff1c 	bl	8000a38 <Mode_Write>

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <Read_Byte+0xa0>)
 8000c08:	f002 ffae 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDA_RTC_GPIO_Port, SDA_RTC_Pin,  GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <Read_Byte+0xa0>)
 8000c12:	f002 ffa9 	bl	8003b68 <HAL_GPIO_WritePin>
	return Temp;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020800 	.word	0x40020800

08000c24 <Write_Zero_Seconds>:

	Write_Byte(REG_CONTROL,0x80);
	HAL_Delay(1);
}

void Write_Zero_Seconds(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	Write_Byte(REG_CONTROL,0x00);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	208e      	movs	r0, #142	; 0x8e
 8000c2c:	f7ff ff60 	bl	8000af0 <Write_Byte>
	HAL_Delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 fe03 	bl	800283c <HAL_Delay>

	Write_Byte(REG_SEC,HEX_to_BCD(0));
 8000c36:	2100      	movs	r1, #0
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	f7ff ff59 	bl	8000af0 <Write_Byte>

	Write_Byte(REG_CONTROL,0x80);
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	208e      	movs	r0, #142	; 0x8e
 8000c42:	f7ff ff55 	bl	8000af0 <Write_Byte>
	HAL_Delay(1);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f001 fdf8 	bl	800283c <HAL_Delay>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Read_Time>:

void Read_Time(uint8_t *buffor){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
   	uint8_t Temp;

	Temp = Read_Byte(REG_YEAR);
 8000c58:	208c      	movs	r0, #140	; 0x8c
 8000c5a:	f7ff ff91 	bl	8000b80 <Read_Byte>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
	buffor[1] = BCD_to_Hex(Temp);
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f003 030f 	and.w	r3, r3, #15
 8000c68:	b2d9      	uxtb	r1, r3
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	440a      	add	r2, r1
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_MONTH);
 8000c84:	2088      	movs	r0, #136	; 0x88
 8000c86:	f7ff ff7b 	bl	8000b80 <Read_Byte>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	buffor[2] = BCD_to_Hex(Temp);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	440a      	add	r2, r1
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_DATE);
 8000cb0:	2086      	movs	r0, #134	; 0x86
 8000cb2:	f7ff ff65 	bl	8000b80 <Read_Byte>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]
	buffor[3] = BCD_to_Hex(Temp);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	440a      	add	r2, r1
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_HOUR);
 8000cdc:	2084      	movs	r0, #132	; 0x84
 8000cde:	f7ff ff4f 	bl	8000b80 <Read_Byte>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	73fb      	strb	r3, [r7, #15]
	buffor[4] = BCD_to_Hex(Temp);
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	b2d9      	uxtb	r1, r3
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3304      	adds	r3, #4
 8000d02:	440a      	add	r2, r1
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_MIN);
 8000d08:	2082      	movs	r0, #130	; 0x82
 8000d0a:	f7ff ff39 	bl	8000b80 <Read_Byte>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]
	buffor[5] = BCD_to_Hex(Temp);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	b2d9      	uxtb	r1, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3305      	adds	r3, #5
 8000d2e:	440a      	add	r2, r1
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(  (REG_SEC)  ) & 0x7F ;
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	f7ff ff23 	bl	8000b80 <Read_Byte>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d40:	73fb      	strb	r3, [r7, #15]
	buffor[6] = BCD_to_Hex(Temp);
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	b2d9      	uxtb	r1, r3
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3306      	adds	r3, #6
 8000d5e:	440a      	add	r2, r1
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_DAY);
 8000d64:	208a      	movs	r0, #138	; 0x8a
 8000d66:	f7ff ff0b 	bl	8000b80 <Read_Byte>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	buffor[7] = BCD_to_Hex(Temp);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	b2d9      	uxtb	r1, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3307      	adds	r3, #7
 8000d8a:	440a      	add	r2, r1
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	701a      	strb	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <RTC_Init>:

void RTC_Init(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SCLK_RTC_Pin | SDA_RTC_Pin | RST_RTC_Pin;
 8000d9e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000da2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <RTC_Init+0x50>)
 8000db2:	f002 fd3d 	bl	8003830 <HAL_GPIO_Init>

	Write_Byte(REG_CHARGER,0x00);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2090      	movs	r0, #144	; 0x90
 8000dba:	f7ff fe99 	bl	8000af0 <Write_Byte>

	HAL_GPIO_WritePin(RST_RTC_GPIO_Port, RST_RTC_Pin,  GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <RTC_Init+0x50>)
 8000dc6:	f002 fecf 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_RTC_GPIO_Port, SCLK_RTC_Pin,  GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <RTC_Init+0x50>)
 8000dd0:	f002 feca 	bl	8003b68 <HAL_GPIO_WritePin>

	DWT->CTRL |= 1 ;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <RTC_Init+0x54>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <RTC_Init+0x54>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020800 	.word	0x40020800
 8000dec:	e0001000 	.word	0xe0001000

08000df0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e04:	4a36      	ldr	r2, [pc, #216]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e32:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <MX_ADC1_Init+0xf4>)
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e50:	4822      	ldr	r0, [pc, #136]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e52:	f001 fd17 	bl	8002884 <HAL_ADC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e5c:	f001 f8e6 	bl	800202c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e60:	230a      	movs	r3, #10
 8000e62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e72:	f001 fea9 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e7c:	f001 f8d6 	bl	800202c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e80:	230b      	movs	r3, #11
 8000e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e8e:	f001 fe9b 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e98:	f001 f8c8 	bl	800202c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_ADC1_Init+0xec>)
 8000eaa:	f001 fe8d 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000eb4:	f001 f8ba 	bl	800202c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000eb8:	230d      	movs	r3, #13
 8000eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_ADC1_Init+0xec>)
 8000ec6:	f001 fe7f 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ed0:	f001 f8ac 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20004218 	.word	0x20004218
 8000ee0:	40012000 	.word	0x40012000
 8000ee4:	0f000001 	.word	0x0f000001

08000ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <HAL_ADC_MspInit+0xe8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d15d      	bne.n	8000fc6 <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_ADC_MspInit+0xec>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_ADC_MspInit+0xec>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <HAL_ADC_MspInit+0xec>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_ADC_MspInit+0xec>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <HAL_ADC_MspInit+0xec>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_ADC_MspInit+0xec>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SUN_UP_Pin|SUN_DOWN_Pin|SUN_RIGHT_Pin|SUN_LEFT_Pin;
 8000f42:	230f      	movs	r3, #15
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <HAL_ADC_MspInit+0xf0>)
 8000f56:	f002 fc6b 	bl	8003830 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f5c:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <HAL_ADC_MspInit+0xf8>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f9a:	4810      	ldr	r0, [pc, #64]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000f9c:	f002 f95e 	bl	800325c <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000fa6:	f001 f841 	bl	800202c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_ADC_MspInit+0xf4>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2105      	movs	r1, #5
 8000fba:	2012      	movs	r0, #18
 8000fbc:	f002 f917 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fc0:	2012      	movs	r0, #18
 8000fc2:	f002 f930 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012000 	.word	0x40012000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	20004260 	.word	0x20004260
 8000fe0:	40026410 	.word	0x40026410

08000fe4 <read_data>:
int16_t  dig_P6;
int16_t  dig_P7;
int16_t  dig_P8;
int16_t  dig_P9;

int read_data( uint8_t *addr, int8_t * value , uint8_t len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff8:	480e      	ldr	r0, [pc, #56]	; (8001034 <read_data+0x50>)
 8000ffa:	f002 fdb5 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, addr, 1, 100);
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	2201      	movs	r2, #1
 8001002:	68f9      	ldr	r1, [r7, #12]
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <read_data+0x54>)
 8001006:	f003 fa9a 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, value, len, 100);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	b29a      	uxth	r2, r3
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <read_data+0x54>)
 8001014:	f003 fbcf 	bl	80047b6 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <read_data+0x50>)
 8001020:	f002 fda2 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_Delay(3);
 8001024:	2003      	movs	r0, #3
 8001026:	f001 fc09 	bl	800283c <HAL_Delay>
	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020400 	.word	0x40020400
 8001038:	2000435c 	.word	0x2000435c

0800103c <uread_data>:

int uread_data( uint8_t *addr, uint8_t * value , uint8_t len) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	4613      	mov	r3, r2
 8001048:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <uread_data+0x50>)
 8001052:	f002 fd89 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, addr, 1, 100);
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	2201      	movs	r2, #1
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <uread_data+0x54>)
 800105e:	f003 fa6e 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, value, len, 100);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	b29a      	uxth	r2, r3
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	4809      	ldr	r0, [pc, #36]	; (8001090 <uread_data+0x54>)
 800106c:	f003 fba3 	bl	80047b6 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <uread_data+0x50>)
 8001078:	f002 fd76 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_Delay(3);
 800107c:	2003      	movs	r0, #3
 800107e:	f001 fbdd 	bl	800283c <HAL_Delay>
	return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020400 	.word	0x40020400
 8001090:	2000435c 	.word	0x2000435c

08001094 <setConstants>:

void setConstants(){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	  uread_data(&reg_T1l, dig_T12,2);
 8001098:	2202      	movs	r2, #2
 800109a:	496b      	ldr	r1, [pc, #428]	; (8001248 <setConstants+0x1b4>)
 800109c:	486b      	ldr	r0, [pc, #428]	; (800124c <setConstants+0x1b8>)
 800109e:	f7ff ffcd 	bl	800103c <uread_data>
	  read_data(&reg_T2l, dig_T22,2);
 80010a2:	2202      	movs	r2, #2
 80010a4:	496a      	ldr	r1, [pc, #424]	; (8001250 <setConstants+0x1bc>)
 80010a6:	486b      	ldr	r0, [pc, #428]	; (8001254 <setConstants+0x1c0>)
 80010a8:	f7ff ff9c 	bl	8000fe4 <read_data>
	  read_data(&reg_T3l, dig_T32,2);
 80010ac:	2202      	movs	r2, #2
 80010ae:	496a      	ldr	r1, [pc, #424]	; (8001258 <setConstants+0x1c4>)
 80010b0:	486a      	ldr	r0, [pc, #424]	; (800125c <setConstants+0x1c8>)
 80010b2:	f7ff ff97 	bl	8000fe4 <read_data>
	  uread_data(&reg_P1l, dig_P12,2);
 80010b6:	2202      	movs	r2, #2
 80010b8:	4969      	ldr	r1, [pc, #420]	; (8001260 <setConstants+0x1cc>)
 80010ba:	486a      	ldr	r0, [pc, #424]	; (8001264 <setConstants+0x1d0>)
 80010bc:	f7ff ffbe 	bl	800103c <uread_data>
	  read_data(&reg_P2l, dig_P22,2);
 80010c0:	2202      	movs	r2, #2
 80010c2:	4969      	ldr	r1, [pc, #420]	; (8001268 <setConstants+0x1d4>)
 80010c4:	4869      	ldr	r0, [pc, #420]	; (800126c <setConstants+0x1d8>)
 80010c6:	f7ff ff8d 	bl	8000fe4 <read_data>
	  read_data(&reg_P3l, dig_P32,2);
 80010ca:	2202      	movs	r2, #2
 80010cc:	4968      	ldr	r1, [pc, #416]	; (8001270 <setConstants+0x1dc>)
 80010ce:	4869      	ldr	r0, [pc, #420]	; (8001274 <setConstants+0x1e0>)
 80010d0:	f7ff ff88 	bl	8000fe4 <read_data>
	  read_data(&reg_P4l, dig_P42,2);
 80010d4:	2202      	movs	r2, #2
 80010d6:	4968      	ldr	r1, [pc, #416]	; (8001278 <setConstants+0x1e4>)
 80010d8:	4868      	ldr	r0, [pc, #416]	; (800127c <setConstants+0x1e8>)
 80010da:	f7ff ff83 	bl	8000fe4 <read_data>
	  read_data(&reg_P5l, dig_P52,2);
 80010de:	2202      	movs	r2, #2
 80010e0:	4967      	ldr	r1, [pc, #412]	; (8001280 <setConstants+0x1ec>)
 80010e2:	4868      	ldr	r0, [pc, #416]	; (8001284 <setConstants+0x1f0>)
 80010e4:	f7ff ff7e 	bl	8000fe4 <read_data>
	  read_data(&reg_P6l, dig_P62,2);
 80010e8:	2202      	movs	r2, #2
 80010ea:	4967      	ldr	r1, [pc, #412]	; (8001288 <setConstants+0x1f4>)
 80010ec:	4867      	ldr	r0, [pc, #412]	; (800128c <setConstants+0x1f8>)
 80010ee:	f7ff ff79 	bl	8000fe4 <read_data>
	  read_data(&reg_P7l, dig_P72,2);
 80010f2:	2202      	movs	r2, #2
 80010f4:	4966      	ldr	r1, [pc, #408]	; (8001290 <setConstants+0x1fc>)
 80010f6:	4867      	ldr	r0, [pc, #412]	; (8001294 <setConstants+0x200>)
 80010f8:	f7ff ff74 	bl	8000fe4 <read_data>
	  read_data(&reg_P8l, dig_P82,2);
 80010fc:	2202      	movs	r2, #2
 80010fe:	4966      	ldr	r1, [pc, #408]	; (8001298 <setConstants+0x204>)
 8001100:	4866      	ldr	r0, [pc, #408]	; (800129c <setConstants+0x208>)
 8001102:	f7ff ff6f 	bl	8000fe4 <read_data>
	  read_data(&reg_P9l, dig_P92,2);
 8001106:	2202      	movs	r2, #2
 8001108:	4965      	ldr	r1, [pc, #404]	; (80012a0 <setConstants+0x20c>)
 800110a:	4866      	ldr	r0, [pc, #408]	; (80012a4 <setConstants+0x210>)
 800110c:	f7ff ff6a 	bl	8000fe4 <read_data>

	  dig_T1 = (uint16_t) ((uint16_t)dig_T12[0] | ( (uint16_t) (((uint16_t)dig_T12[1])<<8)));
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <setConstants+0x1b4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <setConstants+0x1b4>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	b29b      	uxth	r3, r3
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <setConstants+0x214>)
 8001126:	801a      	strh	r2, [r3, #0]
	  dig_T2 = (int16_t)  ((int16_t)dig_T22[0]  | ( (int16_t)  (((int16_t)dig_T22[1])<<8)));
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <setConstants+0x1bc>)
 800112a:	f993 3000 	ldrsb.w	r3, [r3]
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <setConstants+0x1bc>)
 8001132:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <setConstants+0x218>)
 8001140:	801a      	strh	r2, [r3, #0]
	  dig_T3 = (int16_t)  ((int16_t)dig_T32[0]  | ( (int16_t)  (((int16_t)dig_T32[1])<<8)));
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <setConstants+0x1c4>)
 8001144:	f993 3000 	ldrsb.w	r3, [r3]
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <setConstants+0x1c4>)
 800114c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <setConstants+0x21c>)
 800115a:	801a      	strh	r2, [r3, #0]
	  dig_P1 = (uint16_t) ((uint16_t)dig_P12[0] | ( (uint16_t) (((uint16_t)dig_P12[1])<<8)));
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <setConstants+0x1cc>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <setConstants+0x1cc>)
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	b29b      	uxth	r3, r3
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <setConstants+0x220>)
 8001172:	801a      	strh	r2, [r3, #0]
	  dig_P2 = (int16_t)  ((int16_t)dig_P22[0]  | ( (int16_t)  (((int16_t)dig_P22[1])<<8)));
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <setConstants+0x1d4>)
 8001176:	f993 3000 	ldrsb.w	r3, [r3]
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <setConstants+0x1d4>)
 800117e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <setConstants+0x224>)
 800118c:	801a      	strh	r2, [r3, #0]
	  dig_P3 = (int16_t)  ((int16_t)dig_P32[0]  | ( (int16_t)  (((int16_t)dig_P32[1])<<8)));
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <setConstants+0x1dc>)
 8001190:	f993 3000 	ldrsb.w	r3, [r3]
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b36      	ldr	r3, [pc, #216]	; (8001270 <setConstants+0x1dc>)
 8001198:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <setConstants+0x228>)
 80011a6:	801a      	strh	r2, [r3, #0]
	  dig_P4 = (int16_t)  ((int16_t)dig_P42[0]  | ( (int16_t)  (((int16_t)dig_P42[1])<<8)));
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <setConstants+0x1e4>)
 80011aa:	f993 3000 	ldrsb.w	r3, [r3]
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <setConstants+0x1e4>)
 80011b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <setConstants+0x22c>)
 80011c0:	801a      	strh	r2, [r3, #0]
	  dig_P5 = (int16_t)  ((int16_t)dig_P52[0]  | ( (int16_t)  (((int16_t)dig_P52[1])<<8)));
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <setConstants+0x1ec>)
 80011c4:	f993 3000 	ldrsb.w	r3, [r3]
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <setConstants+0x1ec>)
 80011cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <setConstants+0x230>)
 80011da:	801a      	strh	r2, [r3, #0]
	  dig_P6 = (int16_t)  ((int16_t)dig_P62[0]  | ( (int16_t)  (((int16_t)dig_P62[1])<<8)));
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <setConstants+0x1f4>)
 80011de:	f993 3000 	ldrsb.w	r3, [r3]
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <setConstants+0x1f4>)
 80011e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <setConstants+0x234>)
 80011f4:	801a      	strh	r2, [r3, #0]
	  dig_P7 = (int16_t)  ((int16_t)dig_P72[0]  | ( (int16_t)  (((int16_t)dig_P72[1])<<8)));
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <setConstants+0x1fc>)
 80011f8:	f993 3000 	ldrsb.w	r3, [r3]
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <setConstants+0x1fc>)
 8001200:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <setConstants+0x238>)
 800120e:	801a      	strh	r2, [r3, #0]
	  dig_P8 = (int16_t)  ((int16_t)dig_P82[0]  | ( (int16_t)  (((int16_t)dig_P82[1])<<8)));
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <setConstants+0x204>)
 8001212:	f993 3000 	ldrsb.w	r3, [r3]
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <setConstants+0x204>)
 800121a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <setConstants+0x23c>)
 8001228:	801a      	strh	r2, [r3, #0]
	  dig_P9 = (int16_t)  ((int16_t)dig_P92[0]  | ( (int16_t)  (((int16_t)dig_P92[1])<<8)));
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <setConstants+0x20c>)
 800122c:	f993 3000 	ldrsb.w	r3, [r3]
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <setConstants+0x20c>)
 8001234:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <setConstants+0x240>)
 8001242:	801a      	strh	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200042e8 	.word	0x200042e8
 800124c:	20000000 	.word	0x20000000
 8001250:	200042c4 	.word	0x200042c4
 8001254:	20000001 	.word	0x20000001
 8001258:	200042d0 	.word	0x200042d0
 800125c:	20000002 	.word	0x20000002
 8001260:	200042d8 	.word	0x200042d8
 8001264:	20000003 	.word	0x20000003
 8001268:	200042c8 	.word	0x200042c8
 800126c:	20000004 	.word	0x20000004
 8001270:	200042cc 	.word	0x200042cc
 8001274:	20000005 	.word	0x20000005
 8001278:	200042fc 	.word	0x200042fc
 800127c:	20000006 	.word	0x20000006
 8001280:	200042ec 	.word	0x200042ec
 8001284:	20000007 	.word	0x20000007
 8001288:	200042e4 	.word	0x200042e4
 800128c:	20000008 	.word	0x20000008
 8001290:	200042f4 	.word	0x200042f4
 8001294:	20000009 	.word	0x20000009
 8001298:	200042dc 	.word	0x200042dc
 800129c:	2000000a 	.word	0x2000000a
 80012a0:	200042e0 	.word	0x200042e0
 80012a4:	2000000b 	.word	0x2000000b
 80012a8:	200042c2 	.word	0x200042c2
 80012ac:	200042c6 	.word	0x200042c6
 80012b0:	200042f8 	.word	0x200042f8
 80012b4:	200042ee 	.word	0x200042ee
 80012b8:	200042d2 	.word	0x200042d2
 80012bc:	200042f0 	.word	0x200042f0
 80012c0:	200042d4 	.word	0x200042d4
 80012c4:	200042e2 	.word	0x200042e2
 80012c8:	200042fe 	.word	0x200042fe
 80012cc:	200042c0 	.word	0x200042c0
 80012d0:	200042f2 	.word	0x200042f2
 80012d4:	200042f6 	.word	0x200042f6

080012d8 <BMP280_setup>:


void BMP280_setup(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e4:	483d      	ldr	r0, [pc, #244]	; (80013dc <BMP280_setup+0x104>)
 80012e6:	f002 fc3f 	bl	8003b68 <HAL_GPIO_WritePin>

	uint8_t ctrl_meas_addr = 0x74;
 80012ea:	2374      	movs	r3, #116	; 0x74
 80012ec:	727b      	strb	r3, [r7, #9]
	uint8_t osrs_p = OSRS_P; // skipped / x1 / x2 / x4 / x8 / x16
 80012ee:	230c      	movs	r3, #12
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t osrs_t = OSRS_T; // skipped / x1 / x2 / x4 / x8 / x16
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	73bb      	strb	r3, [r7, #14]
	uint8_t mode = MODE;    // sleep (00) / forced (01 / 10) / normal (11)
 80012f6:	2303      	movs	r3, #3
 80012f8:	737b      	strb	r3, [r7, #13]

	uint8_t t_sb_filtr_addr = 0x75;
 80012fa:	2375      	movs	r3, #117	; 0x75
 80012fc:	723b      	strb	r3, [r7, #8]
	uint8_t spi3w_en = SPI3W_EN;
 80012fe:	2300      	movs	r3, #0
 8001300:	733b      	strb	r3, [r7, #12]
	uint8_t filter= FILTER ;  // off / 2 / 4 / 8 / 16
 8001302:	2310      	movs	r3, #16
 8001304:	72fb      	strb	r3, [r7, #11]
	uint8_t t_sb= T_SB; // 0.5 / 62.5 / 125 / 250 / 500 / 1000 / 2000 / 4000
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	72bb      	strb	r3, [r7, #10]

//	uint8_t rst_addr= 0xE0;
//	uint8_t rst = 0x00;

	uint8_t read_F4=0xF4;
 800130a:	23f4      	movs	r3, #244	; 0xf4
 800130c:	71fb      	strb	r3, [r7, #7]
	uint8_t czytaj=0;
 800130e:	2300      	movs	r3, #0
 8001310:	71bb      	strb	r3, [r7, #6]

	uint8_t ctrl_meas =  mode | osrs_p | osrs_t;
 8001312:	7b7a      	ldrb	r2, [r7, #13]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	4313      	orrs	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	4313      	orrs	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	717b      	strb	r3, [r7, #5]
	uint8_t tsb_filtr_msk = t_sb | filter | spi3w_en;
 8001322:	7aba      	ldrb	r2, [r7, #10]
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	4313      	orrs	r3, r2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	713b      	strb	r3, [r7, #4]

	// MODE
	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001338:	4828      	ldr	r0, [pc, #160]	; (80013dc <BMP280_setup+0x104>)
 800133a:	f002 fc15 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &read_F4, 1, 100);
 800133e:	1df9      	adds	r1, r7, #7
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	2201      	movs	r2, #1
 8001344:	4826      	ldr	r0, [pc, #152]	; (80013e0 <BMP280_setup+0x108>)
 8001346:	f003 f8fa 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &czytaj, 1, 200);
 800134a:	1db9      	adds	r1, r7, #6
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	2201      	movs	r2, #1
 8001350:	4823      	ldr	r0, [pc, #140]	; (80013e0 <BMP280_setup+0x108>)
 8001352:	f003 fa30 	bl	80047b6 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <BMP280_setup+0x104>)
 800135e:	f002 fc03 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <BMP280_setup+0x104>)
 800136a:	f002 fbfd 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &ctrl_meas_addr, 1, 200);
 800136e:	f107 0109 	add.w	r1, r7, #9
 8001372:	23c8      	movs	r3, #200	; 0xc8
 8001374:	2201      	movs	r2, #1
 8001376:	481a      	ldr	r0, [pc, #104]	; (80013e0 <BMP280_setup+0x108>)
 8001378:	f003 f8e1 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &ctrl_meas, 1, 200);
 800137c:	1d79      	adds	r1, r7, #5
 800137e:	23c8      	movs	r3, #200	; 0xc8
 8001380:	2201      	movs	r2, #1
 8001382:	4817      	ldr	r0, [pc, #92]	; (80013e0 <BMP280_setup+0x108>)
 8001384:	f003 f8db 	bl	800453e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <BMP280_setup+0x104>)
 8001390:	f002 fbea 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001394:	2005      	movs	r0, #5
 8001396:	f001 fa51 	bl	800283c <HAL_Delay>


	// Filter and time standby
	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <BMP280_setup+0x104>)
 80013a2:	f002 fbe1 	bl	8003b68 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &t_sb_filtr_addr, 1, 200);
 80013a6:	f107 0108 	add.w	r1, r7, #8
 80013aa:	23c8      	movs	r3, #200	; 0xc8
 80013ac:	2201      	movs	r2, #1
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <BMP280_setup+0x108>)
 80013b0:	f003 f8c5 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &tsb_filtr_msk, 1, 200);
 80013b4:	1d39      	adds	r1, r7, #4
 80013b6:	23c8      	movs	r3, #200	; 0xc8
 80013b8:	2201      	movs	r2, #1
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <BMP280_setup+0x108>)
 80013bc:	f003 f8bf 	bl	800453e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <BMP280_setup+0x104>)
 80013c8:	f002 fbce 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80013cc:	2005      	movs	r0, #5
 80013ce:	f001 fa35 	bl	800283c <HAL_Delay>

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020400 	.word	0x40020400
 80013e0:	2000435c 	.word	0x2000435c

080013e4 <get_temp_press>:

void get_temp_press(int32_t * temp , uint32_t * press){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	  uint8_t P[3];
	  int32_t PP=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	  uint8_t T[3];
	  int32_t TT=0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38

	  uint8_t A[6];
	  int32_t At=0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
	  int32_t Ap=0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
	  int32_t var1;
	  int32_t var2;
	  int32_t Var1;
	  int32_t Var2;

	  int32_t t_fine=0;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c

	  uint8_t reg_press = BMP280_REG_PRESS_MSB;
 8001402:	23f7      	movs	r3, #247	; 0xf7
 8001404:	72fb      	strb	r3, [r7, #11]
	  uint8_t reg_temp = BMP280_REG_TEMP_MSB;
 8001406:	23fa      	movs	r3, #250	; 0xfa
 8001408:	72bb      	strb	r3, [r7, #10]

	  // Temperatura
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	48a5      	ldr	r0, [pc, #660]	; (80016a8 <get_temp_press+0x2c4>)
 8001412:	f002 fba9 	bl	8003b68 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, &reg_temp, 1, 200);
 8001416:	f107 010a 	add.w	r1, r7, #10
 800141a:	23c8      	movs	r3, #200	; 0xc8
 800141c:	2201      	movs	r2, #1
 800141e:	48a3      	ldr	r0, [pc, #652]	; (80016ac <get_temp_press+0x2c8>)
 8001420:	f003 f88d 	bl	800453e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, &T[0], 3, 200);
 8001424:	f107 0114 	add.w	r1, r7, #20
 8001428:	23c8      	movs	r3, #200	; 0xc8
 800142a:	2203      	movs	r2, #3
 800142c:	489f      	ldr	r0, [pc, #636]	; (80016ac <get_temp_press+0x2c8>)
 800142e:	f003 f9c2 	bl	80047b6 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	489b      	ldr	r0, [pc, #620]	; (80016a8 <get_temp_press+0x2c4>)
 800143a:	f002 fb95 	bl	8003b68 <HAL_GPIO_WritePin>

	  // Ciśnienie
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	4898      	ldr	r0, [pc, #608]	; (80016a8 <get_temp_press+0x2c4>)
 8001446:	f002 fb8f 	bl	8003b68 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, &reg_press, 1, 200);
 800144a:	f107 010b 	add.w	r1, r7, #11
 800144e:	23c8      	movs	r3, #200	; 0xc8
 8001450:	2201      	movs	r2, #1
 8001452:	4896      	ldr	r0, [pc, #600]	; (80016ac <get_temp_press+0x2c8>)
 8001454:	f003 f873 	bl	800453e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, &P[0], 3, 200);
 8001458:	f107 0118 	add.w	r1, r7, #24
 800145c:	23c8      	movs	r3, #200	; 0xc8
 800145e:	2203      	movs	r2, #3
 8001460:	4892      	ldr	r0, [pc, #584]	; (80016ac <get_temp_press+0x2c8>)
 8001462:	f003 f9a8 	bl	80047b6 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	488e      	ldr	r0, [pc, #568]	; (80016a8 <get_temp_press+0x2c4>)
 800146e:	f002 fb7b 	bl	8003b68 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001472:	20c8      	movs	r0, #200	; 0xc8
 8001474:	f001 f9e2 	bl	800283c <HAL_Delay>
//	  HAL_Delay(200);




	  PP = ((uint32_t)( (uint16_t) ((uint16_t)P[0] << 8) | (uint16_t)P[1]) << 4) | ((uint16_t)P[2] >>4    ) ;
 8001478:	7e3b      	ldrb	r3, [r7, #24]
 800147a:	b29b      	uxth	r3, r3
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	7e7b      	ldrb	r3, [r7, #25]
 8001484:	4313      	orrs	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	7eba      	ldrb	r2, [r7, #26]
 800148a:	0912      	lsrs	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	4313      	orrs	r3, r2
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
	  TT = ((uint32_t)( (uint16_t) ((uint16_t)T[0] << 8) | (uint16_t)T[1]) << 4) | (uint16_t)(T[2] >>4    ) ;
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	b29b      	uxth	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	7d7b      	ldrb	r3, [r7, #21]
 800149e:	4313      	orrs	r3, r2
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	7dba      	ldrb	r2, [r7, #22]
 80014a4:	0912      	lsrs	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
//	  At = ((uint32_t)( (uint16_t) ((uint16_t)A[3] << 8) | (uint16_t)A[4]) << 4) | (uint16_t)(A[5] >>4    ) ;
//	  Ap = ((uint32_t)( (uint16_t) ((uint16_t)A[0] << 8) | (uint16_t)A[1]) << 4) | (uint16_t)(A[2] >>4    ) ;

	  HAL_Delay(300);
 80014ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014b0:	f001 f9c4 	bl	800283c <HAL_Delay>

//	  dig_T1 = 28704;
//	  dig_T2 = 26435;
//	  dig_T3 = -1000;

	  dig_T1 = 28800;
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <get_temp_press+0x2cc>)
 80014b6:	f44f 42e1 	mov.w	r2, #28800	; 0x7080
 80014ba:	801a      	strh	r2, [r3, #0]
	  dig_T2 = 26435;
 80014bc:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <get_temp_press+0x2d0>)
 80014be:	f246 7243 	movw	r2, #26435	; 0x6743
 80014c2:	801a      	strh	r2, [r3, #0]
	  dig_T3 = -1000;
 80014c4:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <get_temp_press+0x2d4>)
 80014c6:	f64f 4218 	movw	r2, #64536	; 0xfc18
 80014ca:	801a      	strh	r2, [r3, #0]

//   TEMP

	  var1 = ((((TT>>3)-((int32_t)dig_T1<<1))) *((int32_t)dig_T2))>>11;
 80014cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ce:	10da      	asrs	r2, r3, #3
 80014d0:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <get_temp_press+0x2cc>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a76      	ldr	r2, [pc, #472]	; (80016b4 <get_temp_press+0x2d0>)
 80014da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	12db      	asrs	r3, r3, #11
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
	  var2 = (((((TT>>4) - ((int32_t)dig_T1))*((TT>>4)-((int32_t)dig_T1))) >> 12)*((int32_t)dig_T3))>>14;
 80014e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e8:	111b      	asrs	r3, r3, #4
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <get_temp_press+0x2cc>)
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014f2:	1112      	asrs	r2, r2, #4
 80014f4:	496e      	ldr	r1, [pc, #440]	; (80016b0 <get_temp_press+0x2cc>)
 80014f6:	8809      	ldrh	r1, [r1, #0]
 80014f8:	1a52      	subs	r2, r2, r1
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	131b      	asrs	r3, r3, #12
 8001500:	4a6d      	ldr	r2, [pc, #436]	; (80016b8 <get_temp_press+0x2d4>)
 8001502:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	139b      	asrs	r3, r3, #14
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
	  t_fine = var1+var2;
 800150e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	4413      	add	r3, r2
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *temp = (t_fine*5 + 128) >> 8;
 8001516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3380      	adds	r3, #128	; 0x80
 8001520:	121a      	asrs	r2, r3, #8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
	  *temp = *temp / 100;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a64      	ldr	r2, [pc, #400]	; (80016bc <get_temp_press+0x2d8>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1152      	asrs	r2, r2, #5
 8001532:	17db      	asrs	r3, r3, #31
 8001534:	1ad2      	subs	r2, r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	601a      	str	r2, [r3, #0]

//	  PRESS

	  Var1 = (((int32_t)t_fine)/2) - (int32_t)64000;
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	0fda      	lsrs	r2, r3, #31
 800153e:	4413      	add	r3, r2
 8001540:	105b      	asrs	r3, r3, #1
 8001542:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001546:	623b      	str	r3, [r7, #32]
	  Var2 = (((Var1/4) * (Var1/4)) / 2048 ) * ((int32_t)dig_P6);
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b00      	cmp	r3, #0
 800154c:	da00      	bge.n	8001550 <get_temp_press+0x16c>
 800154e:	3303      	adds	r3, #3
 8001550:	109b      	asrs	r3, r3, #2
 8001552:	461a      	mov	r2, r3
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da00      	bge.n	800155c <get_temp_press+0x178>
 800155a:	3303      	adds	r3, #3
 800155c:	109b      	asrs	r3, r3, #2
 800155e:	fb03 f302 	mul.w	r3, r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	da01      	bge.n	800156a <get_temp_press+0x186>
 8001566:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800156a:	12db      	asrs	r3, r3, #11
 800156c:	461a      	mov	r2, r3
 800156e:	4b54      	ldr	r3, [pc, #336]	; (80016c0 <get_temp_press+0x2dc>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	fb03 f302 	mul.w	r3, r3, r2
 8001578:	61fb      	str	r3, [r7, #28]
	  Var2 = Var2 + ((Var1*((int32_t)dig_P5))<<1);
 800157a:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <get_temp_press+0x2e0>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	461a      	mov	r2, r3
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	fb03 f302 	mul.w	r3, r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
	  Var2 = (Var2>>2)+(((int32_t)dig_P4)<<16);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	109a      	asrs	r2, r3, #2
 8001594:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <get_temp_press+0x2e4>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	4413      	add	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]
	  Var1 = (((dig_P3 * (((Var1>>2) * (Var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) * Var1)>>1))>>18;
 80015a0:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <get_temp_press+0x2e8>)
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	109b      	asrs	r3, r3, #2
 80015ac:	6a3a      	ldr	r2, [r7, #32]
 80015ae:	1092      	asrs	r2, r2, #2
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	135b      	asrs	r3, r3, #13
 80015b6:	fb03 f301 	mul.w	r3, r3, r1
 80015ba:	10da      	asrs	r2, r3, #3
 80015bc:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <get_temp_press+0x2ec>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	4619      	mov	r1, r3
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	fb03 f301 	mul.w	r3, r3, r1
 80015ca:	105b      	asrs	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	149b      	asrs	r3, r3, #18
 80015d0:	623b      	str	r3, [r7, #32]
	  Var1 = ((((32768+Var1))*((int32_t)dig_P1))>>15);
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015d8:	4a3e      	ldr	r2, [pc, #248]	; (80016d4 <get_temp_press+0x2f0>)
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	13db      	asrs	r3, r3, #15
 80015e2:	623b      	str	r3, [r7, #32]
//	  if (Var1 == 0){
//		  return ; // avoid exception caused by division by zero
//	  }
	  *press = (((uint32_t)(  ((int32_t)1048576)-PP )-(Var2>>12)))*3125;
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	131b      	asrs	r3, r3, #12
 80015e8:	461a      	mov	r2, r3
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	4413      	add	r3, r2
 80015ee:	4a3a      	ldr	r2, [pc, #232]	; (80016d8 <get_temp_press+0x2f4>)
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80015f8:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6013      	str	r3, [r2, #0]
	  if (*press < 0x80000000) {
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db08      	blt.n	800161a <get_temp_press+0x236>
		  *press = (*press << 1) / ((uint32_t)Var1);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	005a      	lsls	r2, r3, #1
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	fbb2 f2f3 	udiv	r2, r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e007      	b.n	800162a <get_temp_press+0x246>
	  }
	  else{
		  *press = (*press / (uint32_t)Var1) * 2;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	005a      	lsls	r2, r3, #1
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	601a      	str	r2, [r3, #0]
	  }
	  Var1 = (((int32_t)dig_P9) * ((int32_t)(((*press>>3) * (*press>>3))>>13)))>>12;
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <get_temp_press+0x2f8>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	4619      	mov	r1, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	08d2      	lsrs	r2, r2, #3
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	0b5b      	lsrs	r3, r3, #13
 8001644:	fb03 f301 	mul.w	r3, r3, r1
 8001648:	131b      	asrs	r3, r3, #12
 800164a:	623b      	str	r3, [r7, #32]
	  Var2 = (((int32_t)(*press)/4) * ((int32_t)dig_P8))/8192;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <get_temp_press+0x272>
 8001654:	3303      	adds	r3, #3
 8001656:	109b      	asrs	r3, r3, #2
 8001658:	461a      	mov	r2, r3
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <get_temp_press+0x2fc>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	fb03 f302 	mul.w	r3, r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	da02      	bge.n	800166e <get_temp_press+0x28a>
 8001668:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800166c:	331f      	adds	r3, #31
 800166e:	135b      	asrs	r3, r3, #13
 8001670:	61fb      	str	r3, [r7, #28]
	  *press = (uint32_t)((int32_t)*press + ((Var1 + Var2 + dig_P7) >> 4));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <get_temp_press+0x300>)
 8001680:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001684:	4413      	add	r3, r2
 8001686:	111b      	asrs	r3, r3, #4
 8001688:	440b      	add	r3, r1
 800168a:	461a      	mov	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	601a      	str	r2, [r3, #0]
	  *press = *press/100;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <get_temp_press+0x2d8>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095a      	lsrs	r2, r3, #5
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	601a      	str	r2, [r3, #0]
//	  printf("digital P6: %d \r\n", dig_P6 );
//	  printf("digital P7: %d \r\n", dig_P7 );
//	  printf("digital P8: %d \r\n", dig_P8 );
//	  printf("digital P9: %d \r\n", dig_P9 );

}
 80016a0:	bf00      	nop
 80016a2:	3740      	adds	r7, #64	; 0x40
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40020400 	.word	0x40020400
 80016ac:	2000435c 	.word	0x2000435c
 80016b0:	200042c2 	.word	0x200042c2
 80016b4:	200042c6 	.word	0x200042c6
 80016b8:	200042f8 	.word	0x200042f8
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	200042fe 	.word	0x200042fe
 80016c4:	200042e2 	.word	0x200042e2
 80016c8:	200042d4 	.word	0x200042d4
 80016cc:	200042f0 	.word	0x200042f0
 80016d0:	200042d2 	.word	0x200042d2
 80016d4:	200042ee 	.word	0x200042ee
 80016d8:	fffff3cb 	.word	0xfffff3cb
 80016dc:	200042f6 	.word	0x200042f6
 80016e0:	200042f2 	.word	0x200042f2
 80016e4:	200042c0 	.word	0x200042c0

080016e8 <reset>:

void reset(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	uint8_t reg_reset=0xE0 & 0x7F;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	71fb      	strb	r3, [r7, #7]
	uint8_t value_reset=0xB6;
 80016f2:	23b6      	movs	r3, #182	; 0xb6
 80016f4:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <reset+0x48>)
 80016fe:	f002 fa33 	bl	8003b68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &reg_reset, 1, 200);
 8001702:	1df9      	adds	r1, r7, #7
 8001704:	23c8      	movs	r3, #200	; 0xc8
 8001706:	2201      	movs	r2, #1
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <reset+0x4c>)
 800170a:	f002 ff18 	bl	800453e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &value_reset, 1, 200);
 800170e:	1db9      	adds	r1, r7, #6
 8001710:	23c8      	movs	r3, #200	; 0xc8
 8001712:	2201      	movs	r2, #1
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <reset+0x4c>)
 8001716:	f003 f84e 	bl	80047b6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_BMP_GPIO_Port, CS_BMP_Pin, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <reset+0x48>)
 8001722:	f002 fa21 	bl	8003b68 <HAL_GPIO_WritePin>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020400 	.word	0x40020400
 8001734:	2000435c 	.word	0x2000435c

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_DMA_Init+0x3c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <MX_DMA_Init+0x3c>)
 8001748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_DMA_Init+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2105      	movs	r1, #5
 800175e:	2038      	movs	r0, #56	; 0x38
 8001760:	f001 fd45 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001764:	2038      	movs	r0, #56	; 0x38
 8001766:	f001 fd5e 	bl	8003226 <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <MX_FREERTOS_Init+0x18>)
 800177e:	2100      	movs	r1, #0
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_FREERTOS_Init+0x1c>)
 8001782:	f004 fb45 	bl	8005e10 <osThreadNew>
 8001786:	4603      	mov	r3, r0
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <MX_FREERTOS_Init+0x20>)
 800178a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08009b78 	.word	0x08009b78
 8001794:	0800179d 	.word	0x0800179d
 8001798:	20004300 	.word	0x20004300

0800179c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f004 fbc5 	bl	8005f34 <osDelay>
 80017aa:	e7fb      	b.n	80017a4 <StartDefaultTask+0x8>

080017ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <MX_GPIO_Init+0x158>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <MX_GPIO_Init+0x158>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <MX_GPIO_Init+0x158>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <MX_GPIO_Init+0x158>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a47      	ldr	r2, [pc, #284]	; (8001904 <MX_GPIO_Init+0x158>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b45      	ldr	r3, [pc, #276]	; (8001904 <MX_GPIO_Init+0x158>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <MX_GPIO_Init+0x158>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a40      	ldr	r2, [pc, #256]	; (8001904 <MX_GPIO_Init+0x158>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <MX_GPIO_Init+0x158>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <MX_GPIO_Init+0x158>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a39      	ldr	r2, [pc, #228]	; (8001904 <MX_GPIO_Init+0x158>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <MX_GPIO_Init+0x158>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LORA_Pin|RST_Pin|CS_BMP_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f240 4103 	movw	r1, #1027	; 0x403
 8001838:	4833      	ldr	r0, [pc, #204]	; (8001908 <MX_GPIO_Init+0x15c>)
 800183a:	f002 f995 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LIGHT_KIT_Pin|LIGHT_HALL_Pin|LIGHT_GAR_Pin|CM_BUZZER_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8001844:	4831      	ldr	r0, [pc, #196]	; (800190c <MX_GPIO_Init+0x160>)
 8001846:	f002 f98f 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_RTC_Pin|SDA_RTC_Pin|RST_RTC_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <MX_GPIO_Init+0x164>)
 8001852:	f002 f989 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAR_Pin;
 8001856:	2310      	movs	r3, #16
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185e:	2301      	movs	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAR_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4829      	ldr	r0, [pc, #164]	; (8001910 <MX_GPIO_Init+0x164>)
 800186a:	f001 ffe1 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_LORA_Pin|RST_Pin|CS_BMP_Pin;
 800186e:	f240 4303 	movw	r3, #1027	; 0x403
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4820      	ldr	r0, [pc, #128]	; (8001908 <MX_GPIO_Init+0x15c>)
 8001888:	f001 ffd2 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800188c:	2304      	movs	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	481a      	ldr	r0, [pc, #104]	; (8001908 <MX_GPIO_Init+0x15c>)
 80018a0:	f001 ffc6 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = MOTION_KIT_Pin|MOTION_HALL_Pin|MOTION_GAR_Pin|CMS_Pin
 80018a4:	f24a 3380 	movw	r3, #41856	; 0xa380
 80018a8:	617b      	str	r3, [r7, #20]
                          |DOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4814      	ldr	r0, [pc, #80]	; (800190c <MX_GPIO_Init+0x160>)
 80018ba:	f001 ffb9 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LIGHT_KIT_Pin|LIGHT_HALL_Pin|LIGHT_GAR_Pin|CM_BUZZER_Pin;
 80018be:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <MX_GPIO_Init+0x160>)
 80018d8:	f001 ffaa 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SCLK_RTC_Pin|SDA_RTC_Pin|RST_RTC_Pin;
 80018dc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_GPIO_Init+0x164>)
 80018f6:	f001 ff9b 	bl	8003830 <HAL_GPIO_Init>

}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40021000 	.word	0x40021000
 8001910:	40020800 	.word	0x40020800

08001914 <servo_init>:
}Servo;

Servo Top;
Servo Bottom;

void servo_init(){
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	Top.Kp = 1;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <servo_init+0x4c>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
	Top.Ki = 1;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <servo_init+0x4c>)
 8001920:	2201      	movs	r2, #1
 8001922:	705a      	strb	r2, [r3, #1]
	Top.Kd = 1;
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <servo_init+0x4c>)
 8001926:	2201      	movs	r2, #1
 8001928:	709a      	strb	r2, [r3, #2]
	Top.error = 0;
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <servo_init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	815a      	strh	r2, [r3, #10]
	Top.prev_error = 0;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <servo_init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	819a      	strh	r2, [r3, #12]


	Bottom.Kp = 1;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <servo_init+0x50>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
	Bottom.Ki = 1;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <servo_init+0x50>)
 800193e:	2201      	movs	r2, #1
 8001940:	705a      	strb	r2, [r3, #1]
	Bottom.Kd = 1;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <servo_init+0x50>)
 8001944:	2201      	movs	r2, #1
 8001946:	709a      	strb	r2, [r3, #2]
	Bottom.error = 0;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <servo_init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	815a      	strh	r2, [r3, #10]
	Bottom.prev_error = 0;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <servo_init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	819a      	strh	r2, [r3, #12]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20004334 	.word	0x20004334
 8001964:	2000431c 	.word	0x2000431c

08001968 <light_kitchen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void light_kitchen	(void *pvParameters){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	while(1){

		isKitchenEmpty = HAL_GPIO_ReadPin(MOTION_KIT_GPIO_Port, MOTION_KIT_Pin);
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	4815      	ldr	r0, [pc, #84]	; (80019c8 <light_kitchen+0x60>)
 8001974:	f002 f8e0 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <light_kitchen+0x64>)
 800197e:	701a      	strb	r2, [r3, #0]

		if( !isKitchenEmpty ){
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <light_kitchen+0x64>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10d      	bne.n	80019a4 <light_kitchen+0x3c>
			HAL_GPIO_WritePin(LIGHT_KIT_GPIO_Port, LIGHT_KIT_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <light_kitchen+0x60>)
 8001990:	f002 f8ea 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<4);
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <light_kitchen+0x68>)
 8001996:	7a9b      	ldrb	r3, [r3, #10]
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <light_kitchen+0x68>)
 80019a0:	729a      	strb	r2, [r3, #10]
 80019a2:	e00c      	b.n	80019be <light_kitchen+0x56>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_KIT_GPIO_Port, LIGHT_KIT_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <light_kitchen+0x60>)
 80019ac:	f002 f8dc 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<4);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <light_kitchen+0x68>)
 80019b2:	7a9b      	ldrb	r3, [r3, #10]
 80019b4:	f023 0310 	bic.w	r3, r3, #16
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <light_kitchen+0x68>)
 80019bc:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 10 / portTICK_PERIOD_MS);
 80019be:	200a      	movs	r0, #10
 80019c0:	f005 fa4a 	bl	8006e58 <vTaskDelay>
		isKitchenEmpty = HAL_GPIO_ReadPin(MOTION_KIT_GPIO_Port, MOTION_KIT_Pin);
 80019c4:	e7d4      	b.n	8001970 <light_kitchen+0x8>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	200000b8 	.word	0x200000b8
 80019d0:	20000010 	.word	0x20000010

080019d4 <light_hall>:

	}
	vTaskDelete(NULL);
}

void light_hall		(void *pvParameters){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	while(1){

		isHallEmpty = HAL_GPIO_ReadPin(MOTION_HALL_GPIO_Port, MOTION_HALL_Pin);
 80019dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e0:	4814      	ldr	r0, [pc, #80]	; (8001a34 <light_hall+0x60>)
 80019e2:	f002 f8a9 	bl	8003b38 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <light_hall+0x64>)
 80019ec:	701a      	strb	r2, [r3, #0]

		if( !isHallEmpty ){
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <light_hall+0x64>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10d      	bne.n	8001a12 <light_hall+0x3e>
			HAL_GPIO_WritePin(LIGHT_HALL_GPIO_Port, LIGHT_HALL_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <light_hall+0x60>)
 80019fe:	f002 f8b3 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<3);
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <light_hall+0x68>)
 8001a04:	7a9b      	ldrb	r3, [r3, #10]
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <light_hall+0x68>)
 8001a0e:	729a      	strb	r2, [r3, #10]
 8001a10:	e00c      	b.n	8001a2c <light_hall+0x58>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_HALL_GPIO_Port, LIGHT_HALL_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <light_hall+0x60>)
 8001a1a:	f002 f8a5 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<3);
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <light_hall+0x68>)
 8001a20:	7a9b      	ldrb	r3, [r3, #10]
 8001a22:	f023 0308 	bic.w	r3, r3, #8
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <light_hall+0x68>)
 8001a2a:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001a2c:	200a      	movs	r0, #10
 8001a2e:	f005 fa13 	bl	8006e58 <vTaskDelay>
		isHallEmpty = HAL_GPIO_ReadPin(MOTION_HALL_GPIO_Port, MOTION_HALL_Pin);
 8001a32:	e7d3      	b.n	80019dc <light_hall+0x8>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	200000b9 	.word	0x200000b9
 8001a3c:	20000010 	.word	0x20000010

08001a40 <light_garage>:
	}
	vTaskDelete(NULL);
}

void light_garage	(void *pvParameters){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	while(1){

		isGarageEmpty = HAL_GPIO_ReadPin(MOTION_GAR_GPIO_Port, MOTION_GAR_Pin);
 8001a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4c:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <light_garage+0x60>)
 8001a4e:	f002 f873 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <light_garage+0x64>)
 8001a58:	701a      	strb	r2, [r3, #0]

		if( !isGarageEmpty ){
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <light_garage+0x64>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <light_garage+0x3e>
			HAL_GPIO_WritePin(LIGHT_GAR_GPIO_Port, LIGHT_GAR_Pin, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <light_garage+0x60>)
 8001a6a:	f002 f87d 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<2);
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <light_garage+0x68>)
 8001a70:	7a9b      	ldrb	r3, [r3, #10]
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <light_garage+0x68>)
 8001a7a:	729a      	strb	r2, [r3, #10]
 8001a7c:	e00c      	b.n	8001a98 <light_garage+0x58>
		}
		else{
			HAL_GPIO_WritePin(LIGHT_GAR_GPIO_Port, LIGHT_GAR_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <light_garage+0x60>)
 8001a86:	f002 f86f 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<2);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <light_garage+0x68>)
 8001a8c:	7a9b      	ldrb	r3, [r3, #10]
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <light_garage+0x68>)
 8001a96:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f005 f9dd 	bl	8006e58 <vTaskDelay>
		isGarageEmpty = HAL_GPIO_ReadPin(MOTION_GAR_GPIO_Port, MOTION_GAR_Pin);
 8001a9e:	e7d3      	b.n	8001a48 <light_garage+0x8>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	200000ba 	.word	0x200000ba
 8001aa8:	20000010 	.word	0x20000010

08001aac <carbon_sensor>:

	}
	vTaskDelete(NULL);
}

void carbon_sensor	(void *pvParameters){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	while(1){

		isCMSensor = HAL_GPIO_ReadPin(CMS_GPIO_Port, CMS_Pin);
 8001ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <carbon_sensor+0x60>)
 8001aba:	f002 f83d 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <carbon_sensor+0x64>)
 8001ac4:	701a      	strb	r2, [r3, #0]

		if( !isCMSensor ){
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <carbon_sensor+0x64>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <carbon_sensor+0x3e>
			HAL_GPIO_WritePin(CM_BUZZER_GPIO_Port, CM_BUZZER_Pin, GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <carbon_sensor+0x60>)
 8001ad6:	f002 f847 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] | (1<<1);
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <carbon_sensor+0x68>)
 8001adc:	7a9b      	ldrb	r3, [r3, #10]
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <carbon_sensor+0x68>)
 8001ae6:	729a      	strb	r2, [r3, #10]
 8001ae8:	e00c      	b.n	8001b04 <carbon_sensor+0x58>
		}
		else{
			HAL_GPIO_WritePin(CM_BUZZER_GPIO_Port, CM_BUZZER_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <carbon_sensor+0x60>)
 8001af2:	f002 f839 	bl	8003b68 <HAL_GPIO_WritePin>
			tx_frame[10] = tx_frame[10] & ~(1<<1);
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <carbon_sensor+0x68>)
 8001af8:	7a9b      	ldrb	r3, [r3, #10]
 8001afa:	f023 0302 	bic.w	r3, r3, #2
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <carbon_sensor+0x68>)
 8001b02:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 5 / portTICK_PERIOD_MS);
 8001b04:	2005      	movs	r0, #5
 8001b06:	f005 f9a7 	bl	8006e58 <vTaskDelay>
		isCMSensor = HAL_GPIO_ReadPin(CMS_GPIO_Port, CMS_Pin);
 8001b0a:	e7d3      	b.n	8001ab4 <carbon_sensor+0x8>
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	200000bc 	.word	0x200000bc
 8001b14:	20000010 	.word	0x20000010

08001b18 <clock>:
	}
	vTaskDelete(NULL);
}

void clock			(void *pvParameters){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	while(1){
		Read_Time(buffor);
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <clock+0x78>)
 8001b22:	f7ff f895 	bl	8000c50 <Read_Time>

		year = buffor[1];
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <clock+0x78>)
 8001b28:	785a      	ldrb	r2, [r3, #1]
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <clock+0x7c>)
 8001b2c:	701a      	strb	r2, [r3, #0]
		month = buffor[2];
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <clock+0x78>)
 8001b30:	789a      	ldrb	r2, [r3, #2]
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <clock+0x80>)
 8001b34:	701a      	strb	r2, [r3, #0]
		day = buffor[7];
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <clock+0x78>)
 8001b38:	79da      	ldrb	r2, [r3, #7]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <clock+0x84>)
 8001b3c:	701a      	strb	r2, [r3, #0]

		hours = buffor[4];
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <clock+0x78>)
 8001b40:	791a      	ldrb	r2, [r3, #4]
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <clock+0x88>)
 8001b44:	701a      	strb	r2, [r3, #0]
		minutes = buffor[5];
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <clock+0x78>)
 8001b48:	795a      	ldrb	r2, [r3, #5]
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <clock+0x8c>)
 8001b4c:	701a      	strb	r2, [r3, #0]
		seconds = buffor[6];
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <clock+0x78>)
 8001b50:	799a      	ldrb	r2, [r3, #6]
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <clock+0x90>)
 8001b54:	701a      	strb	r2, [r3, #0]
//		day = 24;
//
//		hours = 9;
//		minutes = 1;

		tx_frame[4] = hours;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <clock+0x88>)
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <clock+0x94>)
 8001b5c:	711a      	strb	r2, [r3, #4]
		tx_frame[5] = minutes;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <clock+0x8c>)
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <clock+0x94>)
 8001b64:	715a      	strb	r2, [r3, #5]
		tx_frame[6] = seconds;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <clock+0x90>)
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <clock+0x94>)
 8001b6c:	719a      	strb	r2, [r3, #6]
		tx_frame[7] = day;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <clock+0x84>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <clock+0x94>)
 8001b74:	71da      	strb	r2, [r3, #7]
		tx_frame[8] = month;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <clock+0x80>)
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <clock+0x94>)
 8001b7c:	721a      	strb	r2, [r3, #8]
		tx_frame[9] = year;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <clock+0x7c>)
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <clock+0x94>)
 8001b84:	725a      	strb	r2, [r3, #9]
//			seconds=0;
//			minutes++;
//		}

//		printf("%d:%d:%d %d-%d-20%d \r\n",hours,minutes,seconds,day,month,year);
		vTaskDelay( 100 / portTICK_PERIOD_MS);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f005 f966 	bl	8006e58 <vTaskDelay>
		Read_Time(buffor);
 8001b8c:	e7c8      	b.n	8001b20 <clock+0x8>
 8001b8e:	bf00      	nop
 8001b90:	20000020 	.word	0x20000020
 8001b94:	200000c2 	.word	0x200000c2
 8001b98:	200000c1 	.word	0x200000c1
 8001b9c:	200000c0 	.word	0x200000c0
 8001ba0:	200000be 	.word	0x200000be
 8001ba4:	200000bf 	.word	0x200000bf
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	20000010 	.word	0x20000010

08001bb0 <door>:
	}
	vTaskDelete(NULL);
}

void door 			(void *pvParameters){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	while(1){
		isDoorClosed = HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin);
 8001bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bbc:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <door+0x48>)
 8001bbe:	f001 ffbb 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <door+0x4c>)
 8001bc8:	701a      	strb	r2, [r3, #0]
		if( !isDoorClosed ){
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <door+0x4c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <door+0x32>
			tx_frame[10] = tx_frame[10] | (1<<5);
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <door+0x50>)
 8001bd4:	7a9b      	ldrb	r3, [r3, #10]
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <door+0x50>)
 8001bde:	729a      	strb	r2, [r3, #10]
 8001be0:	e006      	b.n	8001bf0 <door+0x40>
		}
		else{
			tx_frame[10] = tx_frame[10] & ~(1<<5);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <door+0x50>)
 8001be4:	7a9b      	ldrb	r3, [r3, #10]
 8001be6:	f023 0320 	bic.w	r3, r3, #32
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <door+0x50>)
 8001bee:	729a      	strb	r2, [r3, #10]
		}
		vTaskDelay( 5 / portTICK_PERIOD_MS);
 8001bf0:	2005      	movs	r0, #5
 8001bf2:	f005 f931 	bl	8006e58 <vTaskDelay>
		isDoorClosed = HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin);
 8001bf6:	e7df      	b.n	8001bb8 <door+0x8>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	200000bd 	.word	0x200000bd
 8001c00:	20000010 	.word	0x20000010

08001c04 <car>:
	}
	vTaskDelete(NULL);
}

void car 			(void *pvParameters){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	while(1){
		isCar = HAL_GPIO_ReadPin(CAR_GPIO_Port, CAR_Pin);
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <car+0x48>)
 8001c10:	f001 ff92 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <car+0x4c>)
 8001c1a:	701a      	strb	r2, [r3, #0]
		if( !isCar )
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <car+0x4c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <car+0x30>
			tx_frame[10] = tx_frame[10] | 1;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <car+0x50>)
 8001c26:	7a9b      	ldrb	r3, [r3, #10]
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <car+0x50>)
 8001c30:	729a      	strb	r2, [r3, #10]
 8001c32:	e006      	b.n	8001c42 <car+0x3e>
		else
			tx_frame[10] = tx_frame[10] & ~1;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <car+0x50>)
 8001c36:	7a9b      	ldrb	r3, [r3, #10]
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <car+0x50>)
 8001c40:	729a      	strb	r2, [r3, #10]
		vTaskDelay( 5 / portTICK_PERIOD_MS);
 8001c42:	2005      	movs	r0, #5
 8001c44:	f005 f908 	bl	8006e58 <vTaskDelay>
		isCar = HAL_GPIO_ReadPin(CAR_GPIO_Port, CAR_Pin);
 8001c48:	e7e0      	b.n	8001c0c <car+0x8>
 8001c4a:	bf00      	nop
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	200000bb 	.word	0x200000bb
 8001c54:	20000010 	.word	0x20000010

08001c58 <pressure>:
	}
	vTaskDelete(NULL);
}

void pressure		(void *pvParameters){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	while(1){
		get_temp_press( &temp, &press);
 8001c60:	490b      	ldr	r1, [pc, #44]	; (8001c90 <pressure+0x38>)
 8001c62:	480c      	ldr	r0, [pc, #48]	; (8001c94 <pressure+0x3c>)
 8001c64:	f7ff fbbe 	bl	80013e4 <get_temp_press>
		tx_frame[1] = (uint8_t)(press>>8);
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <pressure+0x38>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <pressure+0x40>)
 8001c72:	705a      	strb	r2, [r3, #1]
		tx_frame[2] = (uint8_t)press;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <pressure+0x38>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <pressure+0x40>)
 8001c7c:	709a      	strb	r2, [r3, #2]
		tx_frame[3] = (uint8_t)temp;
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <pressure+0x3c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <pressure+0x40>)
 8001c86:	70da      	strb	r2, [r3, #3]
//		tx_frame[1] = 0x03;// (press>>8);
//		tx_frame[2] = 0xEF;// (uint8_t)press;
//		tx_frame[3] = 22;//temp;

//		printf("temp=%d \t cis=%d \r\n" , (int)temp , (int)press);
		vTaskDelay( 20 / portTICK_PERIOD_MS);
 8001c88:	2014      	movs	r0, #20
 8001c8a:	f005 f8e5 	bl	8006e58 <vTaskDelay>
		get_temp_press( &temp, &press);
 8001c8e:	e7e7      	b.n	8001c60 <pressure+0x8>
 8001c90:	20004354 	.word	0x20004354
 8001c94:	20004330 	.word	0x20004330
 8001c98:	20000010 	.word	0x20000010

08001c9c <TX_radio>:
	}
	vTaskDelete(NULL);
}


void TX_radio(void *pvParameters){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	vTaskDelay(30 / portTICK_PERIOD_MS);
 8001ca4:	201e      	movs	r0, #30
 8001ca6:	f005 f8d7 	bl	8006e58 <vTaskDelay>
	uint32_t time=0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
	while(1){

		time = HAL_GetTick();
 8001cae:	f000 fdb9 	bl	8002824 <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]
		while( HAL_GetTick() - time < 5 ){
 8001cb4:	e003      	b.n	8001cbe <TX_radio+0x22>
			Transmit(tx_frame, sizeof(tx_frame));
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <TX_radio+0x44>)
 8001cba:	f7fe fe5f 	bl	800097c <Transmit>
		while( HAL_GetTick() - time < 5 ){
 8001cbe:	f000 fdb1 	bl	8002824 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d9f4      	bls.n	8001cb6 <TX_radio+0x1a>
		}
//		Transmit(tx_frame, sizeof(tx_frame));
//		printf("test \r\n");

		vTaskResume(rx_handle);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <TX_radio+0x48>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 f99d 	bl	8007010 <vTaskResume>
		vTaskSuspend( NULL );
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f005 f8f2 	bl	8006ec0 <vTaskSuspend>
		time = HAL_GetTick();
 8001cdc:	e7e7      	b.n	8001cae <TX_radio+0x12>
 8001cde:	bf00      	nop
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20004348 	.word	0x20004348

08001ce8 <RX_radio>:
	}
	vTaskDelete(NULL);
}


void RX_radio(void *pvParameters){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	uint32_t time=0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
	set_OPMODE(OPMODE_RX);
 8001cf4:	2005      	movs	r0, #5
 8001cf6:	f7fe fcbb 	bl	8000670 <set_OPMODE>
	while(1){
		vTaskSuspend(tx_handle);
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <RX_radio+0xc4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f005 f8de 	bl	8006ec0 <vTaskSuspend>

		set_OPMODE(OPMODE_RX);
 8001d04:	2005      	movs	r0, #5
 8001d06:	f7fe fcb3 	bl	8000670 <set_OPMODE>
		while(	HAL_GPIO_ReadPin(DIO0_GPIO_Port, DIO0_Pin) != GPIO_PIN_SET){}
 8001d0a:	bf00      	nop
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4828      	ldr	r0, [pc, #160]	; (8001db0 <RX_radio+0xc8>)
 8001d10:	f001 ff12 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d1f8      	bne.n	8001d0c <RX_radio+0x24>

		if( HAL_GPIO_ReadPin(DIO0_GPIO_Port, DIO0_Pin) == GPIO_PIN_SET ){
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4824      	ldr	r0, [pc, #144]	; (8001db0 <RX_radio+0xc8>)
 8001d1e:	f001 ff0b 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d136      	bne.n	8001d96 <RX_radio+0xae>
			Receive(rx_frame);
 8001d28:	4822      	ldr	r0, [pc, #136]	; (8001db4 <RX_radio+0xcc>)
 8001d2a:	f7fe fd97 	bl	800085c <Receive>
//			printf("Carrier found. \r\n");

			if( rx_frame[0] == 0x01 && rx_frame[1] == STM32F411_DEVICE){
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <RX_radio+0xcc>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d123      	bne.n	8001d7e <RX_radio+0x96>
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <RX_radio+0xcc>)
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d11f      	bne.n	8001d7e <RX_radio+0x96>
				vTaskResume(tx_handle);
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <RX_radio+0xc4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 f964 	bl	8007010 <vTaskResume>
				vTaskSuspend( NULL );
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f005 f8b9 	bl	8006ec0 <vTaskSuspend>

				Write_Reg(REG_HOP_PERIOD,0x00);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2024      	movs	r0, #36	; 0x24
 8001d52:	f7fe fc63 	bl	800061c <Write_Reg>
				Write_Reg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8001d56:	21f0      	movs	r1, #240	; 0xf0
 8001d58:	2040      	movs	r0, #64	; 0x40
 8001d5a:	f7fe fc5f 	bl	800061c <Write_Reg>
				Write_Reg(REG_IRQ_FLAGS, 0xFF);
 8001d5e:	21ff      	movs	r1, #255	; 0xff
 8001d60:	2012      	movs	r0, #18
 8001d62:	f7fe fc5b 	bl	800061c <Write_Reg>
				Write_Reg(REG_IRQ_FLAGS_MASK, ~IRQ_LORA_RXDONE_MASK);
 8001d66:	21bf      	movs	r1, #191	; 0xbf
 8001d68:	2011      	movs	r0, #17
 8001d6a:	f7fe fc57 	bl	800061c <Write_Reg>
				Write_Reg(REG_FIFO_RX_BASE_AD, 0x00);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	200f      	movs	r0, #15
 8001d72:	f7fe fc53 	bl	800061c <Write_Reg>
				Write_Reg(REG_FIFO_ADDR_PTR, 0x00);
 8001d76:	2100      	movs	r1, #0
 8001d78:	200d      	movs	r0, #13
 8001d7a:	f7fe fc4f 	bl	800061c <Write_Reg>
			}
			printf("RPI data = %d - %d - %d \r\n" , rx_frame[0], rx_frame[1], rx_frame[2]);
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <RX_radio+0xcc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <RX_radio+0xcc>)
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <RX_radio+0xcc>)
 8001d8c:	789b      	ldrb	r3, [r3, #2]
 8001d8e:	480a      	ldr	r0, [pc, #40]	; (8001db8 <RX_radio+0xd0>)
 8001d90:	f006 fe8c 	bl	8008aac <iprintf>
 8001d94:	e002      	b.n	8001d9c <RX_radio+0xb4>
		}
		else{
			printf("No carrier found. \r\n");
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <RX_radio+0xd4>)
 8001d98:	f006 ff0e 	bl	8008bb8 <puts>
		}
		rx_frame[0]=0x00;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <RX_radio+0xcc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		rx_frame[1]=0x00;
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <RX_radio+0xcc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(tx_handle);
 8001da8:	e7a7      	b.n	8001cfa <RX_radio+0x12>
 8001daa:	bf00      	nop
 8001dac:	2000430c 	.word	0x2000430c
 8001db0:	40020400 	.word	0x40020400
 8001db4:	200000c4 	.word	0x200000c4
 8001db8:	08009a88 	.word	0x08009a88
 8001dbc:	08009aa4 	.word	0x08009aa4

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc6:	f000 fcc7 	bl	8002758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dca:	f000 f8d1 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dce:	f7ff fced 	bl	80017ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8001dd2:	f000 f931 	bl	8002038 <MX_SPI1_Init>
  MX_DMA_Init();
 8001dd6:	f7ff fcaf 	bl	8001738 <MX_DMA_Init>
  MX_ADC1_Init();
 8001dda:	f7ff f809 	bl	8000df0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001dde:	f000 fc1f 	bl	8002620 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001de2:	f000 fb33 	bl	800244c <MX_TIM1_Init>
  MX_SPI3_Init();
 8001de6:	f000 f95d 	bl	80020a4 <MX_SPI3_Init>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_ADC_Start_DMA(&hadc1, ph_resis, 4);

  // Setting up BMP280
  reset();
 8001dea:	f7ff fc7d 	bl	80016e8 <reset>
  BMP280_setup();
 8001dee:	f7ff fa73 	bl	80012d8 <BMP280_setup>
  setConstants();
 8001df2:	f7ff f94f 	bl	8001094 <setConstants>

  // Setting up Real Time Clock
  RTC_Init();
 8001df6:	f7fe ffcf 	bl	8000d98 <RTC_Init>
  Write_Zero_Seconds();
 8001dfa:	f7fe ff13 	bl	8000c24 <Write_Zero_Seconds>

  // Servo struct definition
  servo_init();
 8001dfe:	f7ff fd89 	bl	8001914 <servo_init>

  // Setting up LoRa
  LoRa_init(868);
 8001e02:	f44f 7059 	mov.w	r0, #868	; 0x364
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	f7fe fce5 	bl	80007d8 <LoRa_init>
  tx_frame[0] = STM32F411_DEVICE;
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <main+0x134>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	701a      	strb	r2, [r3, #0]



  xTaskCreate( TX_radio			, "RADIO_TRANSMIT_TASK"		, 250, NULL, 1, &tx_handle );
 8001e14:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <main+0x138>)
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	22fa      	movs	r2, #250	; 0xfa
 8001e20:	4936      	ldr	r1, [pc, #216]	; (8001efc <main+0x13c>)
 8001e22:	4837      	ldr	r0, [pc, #220]	; (8001f00 <main+0x140>)
 8001e24:	f004 fed3 	bl	8006bce <xTaskCreate>
  xTaskCreate( RX_radio			, "RADIO_RECEIVE_TASK"		, 250, NULL, 1, &rx_handle );
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <main+0x144>)
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2300      	movs	r3, #0
 8001e32:	22fa      	movs	r2, #250	; 0xfa
 8001e34:	4934      	ldr	r1, [pc, #208]	; (8001f08 <main+0x148>)
 8001e36:	4835      	ldr	r0, [pc, #212]	; (8001f0c <main+0x14c>)
 8001e38:	f004 fec9 	bl	8006bce <xTaskCreate>
  xTaskCreate( pressure			, "PRESSURE_TASK"			, 230, NULL, 1, &pressure_handle );
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <main+0x150>)
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2301      	movs	r3, #1
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2300      	movs	r3, #0
 8001e46:	22e6      	movs	r2, #230	; 0xe6
 8001e48:	4932      	ldr	r1, [pc, #200]	; (8001f14 <main+0x154>)
 8001e4a:	4833      	ldr	r0, [pc, #204]	; (8001f18 <main+0x158>)
 8001e4c:	f004 febf 	bl	8006bce <xTaskCreate>
  xTaskCreate( clock			, "CLOCK_TASK"				, 220, NULL, 1, &clock_handle );
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <main+0x15c>)
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	2301      	movs	r3, #1
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	22dc      	movs	r2, #220	; 0xdc
 8001e5c:	4930      	ldr	r1, [pc, #192]	; (8001f20 <main+0x160>)
 8001e5e:	4831      	ldr	r0, [pc, #196]	; (8001f24 <main+0x164>)
 8001e60:	f004 feb5 	bl	8006bce <xTaskCreate>

  xTaskCreate( door				, "DOOR_TASK"				, 90, NULL, 1, &door_handle );
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <main+0x168>)
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	225a      	movs	r2, #90	; 0x5a
 8001e70:	492e      	ldr	r1, [pc, #184]	; (8001f2c <main+0x16c>)
 8001e72:	482f      	ldr	r0, [pc, #188]	; (8001f30 <main+0x170>)
 8001e74:	f004 feab 	bl	8006bce <xTaskCreate>
  xTaskCreate( car				, "CAR_TASK"				, 90, NULL, 1, &car_handle );
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <main+0x174>)
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	225a      	movs	r2, #90	; 0x5a
 8001e84:	492c      	ldr	r1, [pc, #176]	; (8001f38 <main+0x178>)
 8001e86:	482d      	ldr	r0, [pc, #180]	; (8001f3c <main+0x17c>)
 8001e88:	f004 fea1 	bl	8006bce <xTaskCreate>
  xTaskCreate( carbon_sensor	, "CARBON_SENSOR_TASK" 		, 100, NULL, 1, &carbon_sensor_handle );
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <main+0x180>)
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2301      	movs	r3, #1
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	492a      	ldr	r1, [pc, #168]	; (8001f44 <main+0x184>)
 8001e9a:	482b      	ldr	r0, [pc, #172]	; (8001f48 <main+0x188>)
 8001e9c:	f004 fe97 	bl	8006bce <xTaskCreate>

  xTaskCreate( light_kitchen	, "LIGHT_KITCHEN_TASK"		, 70, NULL, 1, &light_kit_handle );
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <main+0x18c>)
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2246      	movs	r2, #70	; 0x46
 8001eac:	4928      	ldr	r1, [pc, #160]	; (8001f50 <main+0x190>)
 8001eae:	4829      	ldr	r0, [pc, #164]	; (8001f54 <main+0x194>)
 8001eb0:	f004 fe8d 	bl	8006bce <xTaskCreate>
  xTaskCreate( light_hall		, "LIGHT_HALL_TASK"			, 70, NULL, 1, &light_hall_handle );
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <main+0x198>)
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2246      	movs	r2, #70	; 0x46
 8001ec0:	4926      	ldr	r1, [pc, #152]	; (8001f5c <main+0x19c>)
 8001ec2:	4827      	ldr	r0, [pc, #156]	; (8001f60 <main+0x1a0>)
 8001ec4:	f004 fe83 	bl	8006bce <xTaskCreate>
  xTaskCreate( light_garage		, "LIGHT_GARAGE_TASK"		, 70, NULL, 1, &light_gar_handle );
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <main+0x1a4>)
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2246      	movs	r2, #70	; 0x46
 8001ed4:	4924      	ldr	r1, [pc, #144]	; (8001f68 <main+0x1a8>)
 8001ed6:	4825      	ldr	r0, [pc, #148]	; (8001f6c <main+0x1ac>)
 8001ed8:	f004 fe79 	bl	8006bce <xTaskCreate>

//  xTaskCreate( sun_tracker		, "SUN_TRACKER_TASK"		, 150, NULL, 1, &sun_tracker_handle);

  vTaskStartScheduler();
 8001edc:	f005 f8f6 	bl	80070cc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ee0:	f003 ff4c 	bl	8005d7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ee4:	f7ff fc48 	bl	8001778 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001ee8:	f003 ff6c 	bl	8005dc4 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001eec:	200a      	movs	r0, #10
 8001eee:	f004 ffb3 	bl	8006e58 <vTaskDelay>
 8001ef2:	e7fb      	b.n	8001eec <main+0x12c>
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	2000430c 	.word	0x2000430c
 8001efc:	08009ab8 	.word	0x08009ab8
 8001f00:	08001c9d 	.word	0x08001c9d
 8001f04:	20004348 	.word	0x20004348
 8001f08:	08009acc 	.word	0x08009acc
 8001f0c:	08001ce9 	.word	0x08001ce9
 8001f10:	2000432c 	.word	0x2000432c
 8001f14:	08009ae0 	.word	0x08009ae0
 8001f18:	08001c59 	.word	0x08001c59
 8001f1c:	20004310 	.word	0x20004310
 8001f20:	08009af0 	.word	0x08009af0
 8001f24:	08001b19 	.word	0x08001b19
 8001f28:	20004358 	.word	0x20004358
 8001f2c:	08009afc 	.word	0x08009afc
 8001f30:	08001bb1 	.word	0x08001bb1
 8001f34:	20004350 	.word	0x20004350
 8001f38:	08009b08 	.word	0x08009b08
 8001f3c:	08001c05 	.word	0x08001c05
 8001f40:	20004304 	.word	0x20004304
 8001f44:	08009b14 	.word	0x08009b14
 8001f48:	08001aad 	.word	0x08001aad
 8001f4c:	20004308 	.word	0x20004308
 8001f50:	08009b28 	.word	0x08009b28
 8001f54:	08001969 	.word	0x08001969
 8001f58:	20004318 	.word	0x20004318
 8001f5c:	08009b3c 	.word	0x08009b3c
 8001f60:	080019d5 	.word	0x080019d5
 8001f64:	20004314 	.word	0x20004314
 8001f68:	08009b4c 	.word	0x08009b4c
 8001f6c:	08001a41 	.word	0x08001a41

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	; 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fd8c 	bl	8008a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <SystemClock_Config+0xb4>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <SystemClock_Config+0xb4>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <SystemClock_Config+0xb4>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <SystemClock_Config+0xb8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <SystemClock_Config+0xb8>)
 8001fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <SystemClock_Config+0xb8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fddb 	bl	8003b9c <HAL_RCC_OscConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001fec:	f000 f81e 	bl	800202c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f002 f83e 	bl	800408c <HAL_RCC_ClockConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002016:	f000 f809 	bl	800202c <Error_Handler>
  }
}
 800201a:	bf00      	nop
 800201c:	3750      	adds	r7, #80	; 0x50
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
}
 8002032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002034:	e7fe      	b.n	8002034 <Error_Handler+0x8>
	...

08002038 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_SPI1_Init+0x64>)
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <MX_SPI1_Init+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <MX_SPI1_Init+0x64>)
 8002044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002048:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_SPI1_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_SPI1_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_SPI1_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_SPI1_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_SPI1_Init+0x64>)
 8002064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002068:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_SPI1_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_SPI1_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_SPI1_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <MX_SPI1_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_SPI1_Init+0x64>)
 8002084:	220a      	movs	r2, #10
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_SPI1_Init+0x64>)
 800208a:	f002 f9cf 	bl	800442c <HAL_SPI_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002094:	f7ff ffca 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200043b4 	.word	0x200043b4
 80020a0:	40013000 	.word	0x40013000

080020a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_SPI3_Init+0x64>)
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <MX_SPI3_Init+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_SPI3_Init+0x64>)
 80020b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_SPI3_Init+0x64>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_SPI3_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_SPI3_Init+0x64>)
 80020c4:	2202      	movs	r2, #2
 80020c6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_SPI3_Init+0x64>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_SPI3_Init+0x64>)
 80020d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_SPI3_Init+0x64>)
 80020d8:	2220      	movs	r2, #32
 80020da:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MX_SPI3_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_SPI3_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <MX_SPI3_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_SPI3_Init+0x64>)
 80020f0:	220a      	movs	r2, #10
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_SPI3_Init+0x64>)
 80020f6:	f002 f999 	bl	800442c <HAL_SPI_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002100:	f7ff ff94 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000435c 	.word	0x2000435c
 800210c:	40003c00 	.word	0x40003c00

08002110 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <HAL_SPI_MspInit+0x128>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12c      	bne.n	800218c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_SPI_MspInit+0x12c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <HAL_SPI_MspInit+0x12c>)
 800213c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_SPI_MspInit+0x12c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_SPI_MspInit+0x12c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a39      	ldr	r2, [pc, #228]	; (800223c <HAL_SPI_MspInit+0x12c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <HAL_SPI_MspInit+0x12c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800216a:	23e0      	movs	r3, #224	; 0xe0
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800217a:	2305      	movs	r3, #5
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	482e      	ldr	r0, [pc, #184]	; (8002240 <HAL_SPI_MspInit+0x130>)
 8002186:	f001 fb53 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800218a:	e050      	b.n	800222e <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <HAL_SPI_MspInit+0x134>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d14b      	bne.n	800222e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <HAL_SPI_MspInit+0x12c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a27      	ldr	r2, [pc, #156]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_SPI_MspInit+0x12c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80021fc:	2307      	movs	r3, #7
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4619      	mov	r1, r3
 8002206:	4810      	ldr	r0, [pc, #64]	; (8002248 <HAL_SPI_MspInit+0x138>)
 8002208:	f001 fb12 	bl	8003830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800220c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800221e:	2306      	movs	r3, #6
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <HAL_SPI_MspInit+0x13c>)
 800222a:	f001 fb01 	bl	8003830 <HAL_GPIO_Init>
}
 800222e:	bf00      	nop
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40013000 	.word	0x40013000
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000
 8002244:	40003c00 	.word	0x40003c00
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_MspInit+0x54>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_MspInit+0x54>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_MspInit+0x54>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_MspInit+0x54>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_MspInit+0x54>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_MspInit+0x54>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	210f      	movs	r1, #15
 8002292:	f06f 0001 	mvn.w	r0, #1
 8002296:	f000 ffaa 	bl	80031ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler+0x4>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d8:	f000 fa90 	bl	80027fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022dc:	f005 fb3e 	bl	800795c <xTaskGetSchedulerState>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022e6:	f006 f927 	bl	8008538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <ADC_IRQHandler+0x10>)
 80022f6:	f000 fb08 	bl	800290a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20004218 	.word	0x20004218

08002304 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <DMA2_Stream0_IRQHandler+0x10>)
 800230a:	f001 f855 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20004260 	.word	0x20004260

08002318 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e00a      	b.n	8002340 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800232a:	f3af 8000 	nop.w
 800232e:	4601      	mov	r1, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	b2ca      	uxtb	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	dbf0      	blt.n	800232a <_read+0x12>
	}

return len;
 8002348:	687b      	ldr	r3, [r7, #4]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	return -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237a:	605a      	str	r2, [r3, #4]
	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_isatty>:

int _isatty(int file)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
	return 1;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
	return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <_sbrk+0x5c>)
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <_sbrk+0x60>)
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_sbrk+0x64>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <_sbrk+0x68>)
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ec:	f006 fb1e 	bl	8008a2c <__errno>
 80023f0:	4603      	mov	r3, r0
 80023f2:	220c      	movs	r2, #12
 80023f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e009      	b.n	8002410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <_sbrk+0x64>)
 800240c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20020000 	.word	0x20020000
 800241c:	00000400 	.word	0x00000400
 8002420:	200000cc 	.word	0x200000cc
 8002424:	200044f0 	.word	0x200044f0

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SystemInit+0x20>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <SystemInit+0x20>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b092      	sub	sp, #72	; 0x48
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800245c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	615a      	str	r2, [r3, #20]
 800246e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2220      	movs	r2, #32
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f006 fb10 	bl	8008a9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800247c:	4b38      	ldr	r3, [pc, #224]	; (8002560 <MX_TIM1_Init+0x114>)
 800247e:	4a39      	ldr	r2, [pc, #228]	; (8002564 <MX_TIM1_Init+0x118>)
 8002480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62;
 8002482:	4b37      	ldr	r3, [pc, #220]	; (8002560 <MX_TIM1_Init+0x114>)
 8002484:	223e      	movs	r2, #62	; 0x3e
 8002486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <MX_TIM1_Init+0x114>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800248e:	4b34      	ldr	r3, [pc, #208]	; (8002560 <MX_TIM1_Init+0x114>)
 8002490:	22ff      	movs	r2, #255	; 0xff
 8002492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <MX_TIM1_Init+0x114>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <MX_TIM1_Init+0x114>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <MX_TIM1_Init+0x114>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024a6:	482e      	ldr	r0, [pc, #184]	; (8002560 <MX_TIM1_Init+0x114>)
 80024a8:	f002 fd68 	bl	8004f7c <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80024b2:	f7ff fdbb 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024c2:	4619      	mov	r1, r3
 80024c4:	4826      	ldr	r0, [pc, #152]	; (8002560 <MX_TIM1_Init+0x114>)
 80024c6:	f003 f873 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80024d0:	f7ff fdac 	bl	800202c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <MX_TIM1_Init+0x114>)
 80024fa:	f002 fd8f 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002504:	f7ff fd92 	bl	800202c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	2204      	movs	r2, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4813      	ldr	r0, [pc, #76]	; (8002560 <MX_TIM1_Init+0x114>)
 8002512:	f002 fd83 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800251c:	f7ff fd86 	bl	800202c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002538:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_TIM1_Init+0x114>)
 8002544:	f003 f8a2 	bl	800568c <HAL_TIMEx_ConfigBreakDeadTime>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800254e:	f7ff fd6d 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <MX_TIM1_Init+0x114>)
 8002554:	f000 f82a 	bl	80025ac <HAL_TIM_MspPostInit>

}
 8002558:	bf00      	nop
 800255a:	3748      	adds	r7, #72	; 0x48
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000440c 	.word	0x2000440c
 8002564:	40010000 	.word	0x40010000

08002568 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_TIM_PWM_MspInit+0x40>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_TIM_PWM_MspInit+0x40>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_TIM_PWM_MspInit+0x40>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40023800 	.word	0x40023800

080025ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_TIM_MspPostInit+0x68>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d11e      	bne.n	800260c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_TIM_MspPostInit+0x6c>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_TIM_MspPostInit+0x6c>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_TIM_MspPostInit+0x6c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_TOP_Pin|PWM_BOTTOM_Pin;
 80025ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	4619      	mov	r1, r3
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <HAL_TIM_MspPostInit+0x70>)
 8002608:	f001 f912 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010000 	.word	0x40010000
 8002618:	40023800 	.word	0x40023800
 800261c:	40020400 	.word	0x40020400

08002620 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <MX_USART2_UART_Init+0x50>)
 8002628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800262c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002658:	f003 f86a 	bl	8005730 <HAL_UART_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002662:	f7ff fce3 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20004454 	.word	0x20004454
 8002670:	40004400 	.word	0x40004400

08002674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0x84>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12b      	bne.n	80026ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_UART_MspInit+0x88>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ce:	230c      	movs	r3, #12
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026de:	2307      	movs	r3, #7
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026ea:	f001 f8a1 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000

08002704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800273c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002708:	480d      	ldr	r0, [pc, #52]	; (8002740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800270a:	490e      	ldr	r1, [pc, #56]	; (8002744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0b      	ldr	r2, [pc, #44]	; (800274c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002720:	4c0b      	ldr	r4, [pc, #44]	; (8002750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800272e:	f7ff fe7b 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002732:	f006 f981 	bl	8008a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002736:	f7ff fb43 	bl	8001dc0 <main>
  bx  lr    
 800273a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800273c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002748:	08009c64 	.word	0x08009c64
  ldr r2, =_sbss
 800274c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002750:	200044ec 	.word	0x200044ec

08002754 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <DMA1_Stream0_IRQHandler>
	...

08002758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_Init+0x40>)
 8002762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_Init+0x40>)
 800276e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_Init+0x40>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f000 fd29 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002786:	200f      	movs	r0, #15
 8002788:	f000 f808 	bl	800279c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800278c:	f7ff fd60 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023c00 	.word	0x40023c00

0800279c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x54>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x58>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd41 	bl	8003242 <HAL_SYSTICK_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00e      	b.n	80027e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d80a      	bhi.n	80027e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d0:	2200      	movs	r2, #0
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f000 fd09 	bl	80031ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <HAL_InitTick+0x5c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000028 	.word	0x20000028
 80027f4:	20000030 	.word	0x20000030
 80027f8:	2000002c 	.word	0x2000002c

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x20>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x24>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_IncTick+0x24>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000030 	.word	0x20000030
 8002820:	20004498 	.word	0x20004498

08002824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_GetTick+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20004498 	.word	0x20004498

0800283c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff ffee 	bl	8002824 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d005      	beq.n	8002862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_Delay+0x44>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002862:	bf00      	nop
 8002864:	f7ff ffde 	bl	8002824 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d8f7      	bhi.n	8002864 <HAL_Delay+0x28>
  {
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000030 	.word	0x20000030

08002884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e033      	b.n	8002902 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fb20 	bl	8000ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ca:	f023 0302 	bic.w	r3, r3, #2
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 faa8 	bl	8002e2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
 80028f2:	e001      	b.n	80028f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b20      	cmp	r3, #32
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d049      	beq.n	80029e0 <HAL_ADC_IRQHandler+0xd6>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d046      	beq.n	80029e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12b      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d127      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002998:	2b00      	cmp	r3, #0
 800299a:	d119      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0220 	bic.w	r2, r2, #32
 80029aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f8db 	bl	8002b8c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0212 	mvn.w	r2, #18
 80029de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d057      	beq.n	8002ac2 <HAL_ADC_IRQHandler+0x1b8>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d054      	beq.n	8002ac2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d139      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d12b      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d124      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d119      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fab6 	bl	8003024 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 020c 	mvn.w	r2, #12
 8002ac0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x21a>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d014      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f843 	bl	8002ba0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0201 	mvn.w	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x27a>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f043 0202 	orr.w	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0220 	mvn.w	r2, #32
 8002b72:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f81d 	bl	8002bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0220 	mvn.w	r2, #32
 8002b82:	601a      	str	r2, [r3, #0]
  }
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1c>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e113      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x244>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b09      	cmp	r3, #9
 8002bf2:	d925      	bls.n	8002c40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	3b1e      	subs	r3, #30
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43da      	mvns	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	400a      	ands	r2, r1
 8002c18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68d9      	ldr	r1, [r3, #12]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4403      	add	r3, r0
 8002c32:	3b1e      	subs	r3, #30
 8002c34:	409a      	lsls	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	e022      	b.n	8002c86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	2207      	movs	r2, #7
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4403      	add	r3, r0
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d824      	bhi.n	8002cd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b05      	subs	r3, #5
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b05      	subs	r3, #5
 8002cca:	fa00 f203 	lsl.w	r2, r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd6:	e04c      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d824      	bhi.n	8002d2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b23      	subs	r3, #35	; 0x23
 8002cf2:	221f      	movs	r2, #31
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	400a      	ands	r2, r1
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b23      	subs	r3, #35	; 0x23
 8002d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	e023      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b41      	subs	r3, #65	; 0x41
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	400a      	ands	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b41      	subs	r3, #65	; 0x41
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d72:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_ADC_ConfigChannel+0x250>)
 8002d74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_ADC_ConfigChannel+0x254>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10f      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1d8>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d10b      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_ADC_ConfigChannel+0x254>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12b      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x23a>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_ADC_ConfigChannel+0x258>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x1f4>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b11      	cmp	r3, #17
 8002dba:	d122      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <HAL_ADC_ConfigChannel+0x258>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d111      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_ADC_ConfigChannel+0x25c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_ADC_ConfigChannel+0x260>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0c9a      	lsrs	r2, r3, #18
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002df4:	e002      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f9      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40012300 	.word	0x40012300
 8002e1c:	40012000 	.word	0x40012000
 8002e20:	10000012 	.word	0x10000012
 8002e24:	20000028 	.word	0x20000028
 8002e28:	431bde83 	.word	0x431bde83

08002e2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e34:	4b79      	ldr	r3, [pc, #484]	; (800301c <ADC_Init+0x1f0>)
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	021a      	lsls	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6899      	ldr	r1, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	4a58      	ldr	r2, [pc, #352]	; (8003020 <ADC_Init+0x1f4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e00f      	b.n	8002f2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0202 	bic.w	r2, r2, #2
 8002f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7e1b      	ldrb	r3, [r3, #24]
 8002f44:	005a      	lsls	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	3b01      	subs	r3, #1
 8002f84:	035a      	lsls	r2, r3, #13
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e007      	b.n	8002fa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	051a      	lsls	r2, r3, #20
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6899      	ldr	r1, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fe2:	025a      	lsls	r2, r3, #9
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	029a      	lsls	r2, r3, #10
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40012300 	.word	0x40012300
 8003020:	0f000001 	.word	0x0f000001

08003024 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff3e 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff8e 	bl	800312c <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5d 	bl	80030d8 <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff31 	bl	800309c <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa2 	bl	8003194 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003268:	f7ff fadc 	bl	8002824 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e099      	b.n	80033ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003298:	e00f      	b.n	80032ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800329a:	f7ff fac3 	bl	8002824 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d908      	bls.n	80032ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e078      	b.n	80033ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e8      	bne.n	800329a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_DMA_Init+0x158>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2b04      	cmp	r3, #4
 8003312:	d107      	bne.n	8003324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	4313      	orrs	r3, r2
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0307 	bic.w	r3, r3, #7
 800333a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2b04      	cmp	r3, #4
 800334c:	d117      	bne.n	800337e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f9e9 	bl	8003738 <DMA_CheckFifoParam>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2240      	movs	r2, #64	; 0x40
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800337a:	2301      	movs	r3, #1
 800337c:	e016      	b.n	80033ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9a0 	bl	80036cc <DMA_CalcBaseAndBitshift>
 800338c:	4603      	mov	r3, r0
 800338e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	223f      	movs	r2, #63	; 0x3f
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	f010803f 	.word	0xf010803f

080033b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c4:	4b92      	ldr	r3, [pc, #584]	; (8003610 <HAL_DMA_IRQHandler+0x258>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a92      	ldr	r2, [pc, #584]	; (8003614 <HAL_DMA_IRQHandler+0x25c>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01a      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2208      	movs	r2, #8
 8003412:	409a      	lsls	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2204      	movs	r2, #4
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	2204      	movs	r2, #4
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	2210      	movs	r2, #16
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d043      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2210      	movs	r2, #16
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d024      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e01f      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e016      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2220      	movs	r2, #32
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 808e 	beq.w	8003656 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8086 	beq.w	8003656 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2220      	movs	r2, #32
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d136      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0216 	bic.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_DMA_IRQHandler+0x1da>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	223f      	movs	r2, #63	; 0x3f
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d07d      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
        }
        return;
 80035ce:	e078      	b.n	80036c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d030      	beq.n	8003656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e02b      	b.n	8003656 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d027      	beq.n	8003656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e022      	b.n	8003656 <HAL_DMA_IRQHandler+0x29e>
 8003610:	20000028 	.word	0x20000028
 8003614:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0210 	bic.w	r2, r2, #16
 8003634:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	2b00      	cmp	r3, #0
 800365c:	d032      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2205      	movs	r2, #5
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	429a      	cmp	r2, r3
 800368c:	d307      	bcc.n	800369e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f2      	bne.n	8003682 <HAL_DMA_IRQHandler+0x2ca>
 800369c:	e000      	b.n	80036a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800369e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e000      	b.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036c2:	bf00      	nop
    }
  }
}
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop

080036cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3b10      	subs	r3, #16
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <DMA_CalcBaseAndBitshift+0x64>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <DMA_CalcBaseAndBitshift+0x68>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d909      	bls.n	800370e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	659a      	str	r2, [r3, #88]	; 0x58
 800370c:	e007      	b.n	800371e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	aaaaaaab 	.word	0xaaaaaaab
 8003734:	08009bb4 	.word	0x08009bb4

08003738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11f      	bne.n	8003792 <DMA_CheckFifoParam+0x5a>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d856      	bhi.n	8003806 <DMA_CheckFifoParam+0xce>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <DMA_CheckFifoParam+0x28>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	08003783 	.word	0x08003783
 8003768:	08003771 	.word	0x08003771
 800376c:	08003807 	.word	0x08003807
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d046      	beq.n	800380a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e043      	b.n	800380a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800378a:	d140      	bne.n	800380e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e03d      	b.n	800380e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379a:	d121      	bne.n	80037e0 <DMA_CheckFifoParam+0xa8>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d837      	bhi.n	8003812 <DMA_CheckFifoParam+0xda>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <DMA_CheckFifoParam+0x70>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037bf 	.word	0x080037bf
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	080037d1 	.word	0x080037d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	e030      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d025      	beq.n	8003816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e022      	b.n	8003816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d8:	d11f      	bne.n	800381a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037de:	e01c      	b.n	800381a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d903      	bls.n	80037ee <DMA_CheckFifoParam+0xb6>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d003      	beq.n	80037f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ec:	e018      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      break;
 80037f2:	e015      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e00b      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 8003806:	bf00      	nop
 8003808:	e00a      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e008      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e006      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e004      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;   
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
    }
  } 
  
  return status; 
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e159      	b.n	8003b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 8148 	bne.w	8003afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	2b02      	cmp	r3, #2
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d017      	beq.n	8003920 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d123      	bne.n	8003974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a2 	beq.w	8003afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a56      	ldr	r2, [pc, #344]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b54      	ldr	r3, [pc, #336]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a49      	ldr	r2, [pc, #292]	; (8003b20 <HAL_GPIO_Init+0x2f0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d019      	beq.n	8003a32 <HAL_GPIO_Init+0x202>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_GPIO_Init+0x2f4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_GPIO_Init+0x1fe>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00d      	beq.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a46      	ldr	r2, [pc, #280]	; (8003b2c <HAL_GPIO_Init+0x2fc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <HAL_GPIO_Init+0x1f6>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a45      	ldr	r2, [pc, #276]	; (8003b30 <HAL_GPIO_Init+0x300>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_GPIO_Init+0x1f2>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e008      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a22:	2307      	movs	r3, #7
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e004      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e002      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a32:	2300      	movs	r3, #0
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f002 0203 	and.w	r2, r2, #3
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a44:	4935      	ldr	r1, [pc, #212]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a76:	4a2f      	ldr	r2, [pc, #188]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa0:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af4:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	f67f aea2 	bls.w	800384c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40020000 	.word	0x40020000
 8003b24:	40020400 	.word	0x40020400
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	40020c00 	.word	0x40020c00
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40013c00 	.word	0x40013c00

08003b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e001      	b.n	8003b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b84:	e003      	b.n	8003b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e264      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d075      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bba:	4ba3      	ldr	r3, [pc, #652]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d00c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4ba0      	ldr	r3, [pc, #640]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d112      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd2:	4b9d      	ldr	r3, [pc, #628]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	4b99      	ldr	r3, [pc, #612]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05b      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x108>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d157      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e23f      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x74>
 8003c02:	4b91      	ldr	r3, [pc, #580]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a90      	ldr	r2, [pc, #576]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e01d      	b.n	8003c4c <HAL_RCC_OscConfig+0xb0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x98>
 8003c1a:	4b8b      	ldr	r3, [pc, #556]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a8a      	ldr	r2, [pc, #552]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a87      	ldr	r2, [pc, #540]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0xb0>
 8003c34:	4b84      	ldr	r3, [pc, #528]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a83      	ldr	r2, [pc, #524]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a80      	ldr	r2, [pc, #512]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fe fde6 	bl	8002824 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe fde2 	bl	8002824 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e204      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b76      	ldr	r3, [pc, #472]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xc0>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fdd2 	bl	8002824 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe fdce 	bl	8002824 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1f0      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	4b6c      	ldr	r3, [pc, #432]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0xe8>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb2:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b62      	ldr	r3, [pc, #392]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x152>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1c4      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4952      	ldr	r1, [pc, #328]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e03a      	b.n	8003d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <HAL_RCC_OscConfig+0x2b0>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe fd87 	bl	8002824 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fd83 	bl	8002824 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1a5      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	4b46      	ldr	r3, [pc, #280]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4940      	ldr	r1, [pc, #256]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4e:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <HAL_RCC_OscConfig+0x2b0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe fd66 	bl	8002824 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fe fd62 	bl	8002824 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e184      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d030      	beq.n	8003de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8e:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <HAL_RCC_OscConfig+0x2b4>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fe fd46 	bl	8002824 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe fd42 	bl	8002824 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e164      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x200>
 8003dba:	e015      	b.n	8003de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbc:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCC_OscConfig+0x2b4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fd2f 	bl	8002824 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fe fd2b 	bl	8002824 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e14d      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f0      	bne.n	8003dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80a0 	beq.w	8003f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_OscConfig+0x2b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d121      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <HAL_RCC_OscConfig+0x2b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <HAL_RCC_OscConfig+0x2b8>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fcf1 	bl	8002824 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e011      	b.n	8003e6a <HAL_RCC_OscConfig+0x2ce>
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	42470000 	.word	0x42470000
 8003e50:	42470e80 	.word	0x42470e80
 8003e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e58:	f7fe fce4 	bl	8002824 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e106      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_RCC_OscConfig+0x4e4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
 8003e7e:	4b81      	ldr	r3, [pc, #516]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a80      	ldr	r2, [pc, #512]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x32a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x312>
 8003e94:	4b7b      	ldr	r3, [pc, #492]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a7a      	ldr	r2, [pc, #488]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b78      	ldr	r3, [pc, #480]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a77      	ldr	r2, [pc, #476]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x32a>
 8003eae:	4b75      	ldr	r3, [pc, #468]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a74      	ldr	r2, [pc, #464]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b72      	ldr	r3, [pc, #456]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a71      	ldr	r2, [pc, #452]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe fca9 	bl	8002824 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe fca5 	bl	8002824 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0c5      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	4b65      	ldr	r3, [pc, #404]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x33a>
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efa:	f7fe fc93 	bl	8002824 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe fc8f 	bl	8002824 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0af      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	4b5a      	ldr	r3, [pc, #360]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b56      	ldr	r3, [pc, #344]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a55      	ldr	r2, [pc, #340]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 809b 	beq.w	8004076 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f40:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d05c      	beq.n	8004006 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d141      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <HAL_RCC_OscConfig+0x4ec>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fc63 	bl	8002824 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fe fc5f 	bl	8002824 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e081      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f74:	4b43      	ldr	r3, [pc, #268]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	019b      	lsls	r3, r3, #6
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	4937      	ldr	r1, [pc, #220]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <HAL_RCC_OscConfig+0x4ec>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fc38 	bl	8002824 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fe fc34 	bl	8002824 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e056      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
 8003fd6:	e04e      	b.n	8004076 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCC_OscConfig+0x4ec>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fe fc21 	bl	8002824 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe fc1d 	bl	8002824 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e03f      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	4b22      	ldr	r3, [pc, #136]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x44a>
 8004004:	e037      	b.n	8004076 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e032      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <HAL_RCC_OscConfig+0x4e8>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d028      	beq.n	8004072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d121      	bne.n	8004072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d11a      	bne.n	8004072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004048:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	3b01      	subs	r3, #1
 800405c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d001      	beq.n	8004076 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40007000 	.word	0x40007000
 8004084:	40023800 	.word	0x40023800
 8004088:	42470060 	.word	0x42470060

0800408c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0cc      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b68      	ldr	r3, [pc, #416]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d90c      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d044      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d119      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e067      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b37      	ldr	r3, [pc, #220]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4934      	ldr	r1, [pc, #208]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7fe fb52 	bl	8002824 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fe fb4e 	bl	8002824 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d20c      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f821 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490a      	ldr	r1, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fab2 	bl	800279c <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	08009b9c 	.word	0x08009b9c
 8004250:	20000028 	.word	0x20000028
 8004254:	2000002c 	.word	0x2000002c

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800425e:	2100      	movs	r1, #0
 8004260:	6079      	str	r1, [r7, #4]
 8004262:	2100      	movs	r1, #0
 8004264:	60f9      	str	r1, [r7, #12]
 8004266:	2100      	movs	r1, #0
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800426a:	2100      	movs	r1, #0
 800426c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426e:	4952      	ldr	r1, [pc, #328]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004270:	6889      	ldr	r1, [r1, #8]
 8004272:	f001 010c 	and.w	r1, r1, #12
 8004276:	2908      	cmp	r1, #8
 8004278:	d00d      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x3e>
 800427a:	2908      	cmp	r1, #8
 800427c:	f200 8094 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x150>
 8004280:	2900      	cmp	r1, #0
 8004282:	d002      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x32>
 8004284:	2904      	cmp	r1, #4
 8004286:	d003      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x38>
 8004288:	e08e      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800428a:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <HAL_RCC_GetSysClockFreq+0x164>)
 800428c:	60bb      	str	r3, [r7, #8]
       break;
 800428e:	e08e      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004290:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004292:	60bb      	str	r3, [r7, #8]
      break;
 8004294:	e08b      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004296:	4948      	ldr	r1, [pc, #288]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004298:	6849      	ldr	r1, [r1, #4]
 800429a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800429e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a0:	4945      	ldr	r1, [pc, #276]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042a2:	6849      	ldr	r1, [r1, #4]
 80042a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042a8:	2900      	cmp	r1, #0
 80042aa:	d024      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ac:	4942      	ldr	r1, [pc, #264]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ae:	6849      	ldr	r1, [r1, #4]
 80042b0:	0989      	lsrs	r1, r1, #6
 80042b2:	4608      	mov	r0, r1
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042bc:	f04f 0500 	mov.w	r5, #0
 80042c0:	ea00 0204 	and.w	r2, r0, r4
 80042c4:	ea01 0305 	and.w	r3, r1, r5
 80042c8:	493d      	ldr	r1, [pc, #244]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80042ca:	fb01 f003 	mul.w	r0, r1, r3
 80042ce:	2100      	movs	r1, #0
 80042d0:	fb01 f102 	mul.w	r1, r1, r2
 80042d4:	1844      	adds	r4, r0, r1
 80042d6:	493a      	ldr	r1, [pc, #232]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80042d8:	fba2 0101 	umull	r0, r1, r2, r1
 80042dc:	1863      	adds	r3, r4, r1
 80042de:	4619      	mov	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f7fb ffca 	bl	8000280 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e04a      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	461a      	mov	r2, r3
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	ea02 0400 	and.w	r4, r2, r0
 800430e:	ea03 0501 	and.w	r5, r3, r1
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	014b      	lsls	r3, r1, #5
 8004320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004324:	0142      	lsls	r2, r0, #5
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	1b00      	subs	r0, r0, r4
 800432c:	eb61 0105 	sbc.w	r1, r1, r5
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	018b      	lsls	r3, r1, #6
 800433a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800433e:	0182      	lsls	r2, r0, #6
 8004340:	1a12      	subs	r2, r2, r0
 8004342:	eb63 0301 	sbc.w	r3, r3, r1
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	00d9      	lsls	r1, r3, #3
 8004350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004354:	00d0      	lsls	r0, r2, #3
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	1912      	adds	r2, r2, r4
 800435c:	eb45 0303 	adc.w	r3, r5, r3
 8004360:	f04f 0000 	mov.w	r0, #0
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	0299      	lsls	r1, r3, #10
 800436a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800436e:	0290      	lsls	r0, r2, #10
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f7fb ff7e 	bl	8000280 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	60bb      	str	r3, [r7, #8]
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_RCC_GetSysClockFreq+0x164>)
 80043aa:	60bb      	str	r3, [r7, #8]
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	68bb      	ldr	r3, [r7, #8]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	017d7840 	.word	0x017d7840

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000028 	.word	0x20000028

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	08009bac 	.word	0x08009bac

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08009bac 	.word	0x08009bac

0800442c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07b      	b.n	8004536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444e:	d009      	beq.n	8004464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
 8004456:	e005      	b.n	8004464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fe46 	bl	8002110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	ea42 0103 	orr.w	r1, r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0104 	and.w	r1, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0210 	and.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b088      	sub	sp, #32
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_SPI_Transmit+0x22>
 800455c:	2302      	movs	r3, #2
 800455e:	e126      	b.n	80047ae <HAL_SPI_Transmit+0x270>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004568:	f7fe f95c 	bl	8002824 <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004582:	e10b      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Transmit+0x52>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004594:	e102      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d10f      	bne.n	80045fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d007      	beq.n	800461c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d14b      	bne.n	80046be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0xf6>
 800462e:	8afb      	ldrh	r3, [r7, #22]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d13e      	bne.n	80046b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004658:	e02b      	b.n	80046b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d112      	bne.n	800468e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	86da      	strh	r2, [r3, #54]	; 0x36
 800468c:	e011      	b.n	80046b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468e:	f7fe f8c9 	bl	8002824 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d803      	bhi.n	80046a6 <HAL_SPI_Transmit+0x168>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_Transmit+0x16e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046b0:	e074      	b.n	800479c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ce      	bne.n	800465a <HAL_SPI_Transmit+0x11c>
 80046bc:	e04c      	b.n	8004758 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x18e>
 80046c6:	8afb      	ldrh	r3, [r7, #22]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d140      	bne.n	800474e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	7812      	ldrb	r2, [r2, #0]
 80046d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046f2:	e02c      	b.n	800474e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d113      	bne.n	800472a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	; 0x36
 8004728:	e011      	b.n	800474e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fe f87b 	bl	8002824 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Transmit+0x204>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Transmit+0x20a>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800474c:	e026      	b.n	800479c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1cd      	bne.n	80046f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fbcb 	bl	8004ef8 <SPI_EndRxTxTransaction>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e000      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

error:
 800479a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b088      	sub	sp, #32
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d2:	d112      	bne.n	80047fa <HAL_SPI_Receive+0x44>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10e      	bne.n	80047fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2204      	movs	r2, #4
 80047e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f8f1 	bl	80049d8 <HAL_SPI_TransmitReceive>
 80047f6:	4603      	mov	r3, r0
 80047f8:	e0ea      	b.n	80049d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_SPI_Receive+0x52>
 8004804:	2302      	movs	r3, #2
 8004806:	e0e3      	b.n	80049d0 <HAL_SPI_Receive+0x21a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004810:	f7fe f808 	bl	8002824 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d002      	beq.n	8004828 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004822:	2302      	movs	r3, #2
 8004824:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004826:	e0ca      	b.n	80049be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_SPI_Receive+0x7e>
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004838:	e0c1      	b.n	80049be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2204      	movs	r2, #4
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	d10f      	bne.n	80048a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d162      	bne.n	800498e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048c8:	e02e      	b.n	8004928 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d115      	bne.n	8004904 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f103 020c 	add.w	r2, r3, #12
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004902:	e011      	b.n	8004928 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004904:	f7fd ff8e 	bl	8002824 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d803      	bhi.n	800491c <HAL_SPI_Receive+0x166>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d102      	bne.n	8004922 <HAL_SPI_Receive+0x16c>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004926:	e04a      	b.n	80049be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1cb      	bne.n	80048ca <HAL_SPI_Receive+0x114>
 8004932:	e031      	b.n	8004998 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d113      	bne.n	800496a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	b292      	uxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004968:	e011      	b.n	800498e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496a:	f7fd ff5b 	bl	8002824 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d803      	bhi.n	8004982 <HAL_SPI_Receive+0x1cc>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d102      	bne.n	8004988 <HAL_SPI_Receive+0x1d2>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800498c:	e017      	b.n	80049be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1cd      	bne.n	8004934 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fa45 	bl	8004e2c <SPI_EndRxTransaction>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
 80049ba:	e000      	b.n	80049be <HAL_SPI_Receive+0x208>
  }

error :
 80049bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049e6:	2301      	movs	r3, #1
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x26>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e18a      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x33c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a06:	f7fd ff0d 	bl	8002824 <HAL_GetTick>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d00f      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x70>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d107      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x68>
 8004a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d003      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a46:	e15b      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x82>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x82>
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a60:	e14e      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d003      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2205      	movs	r2, #5
 8004a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	887a      	ldrh	r2, [r7, #2]
 8004a86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	887a      	ldrh	r2, [r7, #2]
 8004a9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d007      	beq.n	8004aca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d178      	bne.n	8004bc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_TransmitReceive+0x10a>
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d166      	bne.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	881a      	ldrh	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	1c9a      	adds	r2, r3, #2
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b06:	e053      	b.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d11b      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x176>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x176>
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d113      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	1c9a      	adds	r2, r3, #2
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d119      	bne.n	8004b90 <HAL_SPI_TransmitReceive+0x1b8>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b90:	f7fd fe48 	bl	8002824 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d807      	bhi.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d003      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bae:	e0a7      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1a6      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x130>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1a1      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x130>
 8004bc4:	e07c      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x1fc>
 8004bce:	8b7b      	ldrh	r3, [r7, #26]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d16b      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfa:	e057      	b.n	8004cac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11c      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x26c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d017      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x26c>
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d114      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d119      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x2ae>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d014      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c82:	2301      	movs	r3, #1
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c86:	f7fd fdcd 	bl	8002824 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d803      	bhi.n	8004c9e <HAL_SPI_TransmitReceive+0x2c6>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d102      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x2cc>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004caa:	e029      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1a2      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x224>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d19d      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f917 	bl	8004ef8 <SPI_EndRxTxTransaction>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cdc:	e010      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	e000      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3730      	adds	r7, #48	; 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d2c:	f7fd fd7a 	bl	8002824 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d3c:	f7fd fd72 	bl	8002824 <HAL_GetTick>
 8004d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d42:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	015b      	lsls	r3, r3, #5
 8004d48:	0d1b      	lsrs	r3, r3, #20
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d52:	e054      	b.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d050      	beq.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d5c:	f7fd fd62 	bl	8002824 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d902      	bls.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d13d      	bne.n	8004dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8a:	d111      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d94:	d004      	beq.n	8004da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9e:	d107      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db8:	d10f      	bne.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e017      	b.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d19b      	bne.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000028 	.word	0x20000028

08004e2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e40:	d111      	bne.n	8004e66 <SPI_EndRxTransaction+0x3a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4a:	d004      	beq.n	8004e56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d107      	bne.n	8004e66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d12a      	bne.n	8004ec6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d012      	beq.n	8004ea0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff ff49 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02d      	beq.n	8004eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e026      	b.n	8004eee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff ff36 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01a      	beq.n	8004eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e013      	b.n	8004eee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2101      	movs	r1, #1
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff ff23 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e000      	b.n	8004eee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <SPI_EndRxTxTransaction+0x7c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <SPI_EndRxTxTransaction+0x80>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0d5b      	lsrs	r3, r3, #21
 8004f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d112      	bne.n	8004f4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff fef4 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e00f      	b.n	8004f6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d0f2      	beq.n	8004f4a <SPI_EndRxTxTransaction+0x52>
 8004f64:	e000      	b.n	8004f68 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f66:	bf00      	nop
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000028 	.word	0x20000028
 8004f78:	165e9f81 	.word	0x165e9f81

08004f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fd fae0 	bl	8002568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 f8ec 	bl	8005198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005032:	2302      	movs	r3, #2
 8005034:	e0ac      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b0c      	cmp	r3, #12
 8005042:	f200 809f 	bhi.w	8005184 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005081 	.word	0x08005081
 8005050:	08005185 	.word	0x08005185
 8005054:	08005185 	.word	0x08005185
 8005058:	08005185 	.word	0x08005185
 800505c:	080050c1 	.word	0x080050c1
 8005060:	08005185 	.word	0x08005185
 8005064:	08005185 	.word	0x08005185
 8005068:	08005185 	.word	0x08005185
 800506c:	08005103 	.word	0x08005103
 8005070:	08005185 	.word	0x08005185
 8005074:	08005185 	.word	0x08005185
 8005078:	08005185 	.word	0x08005185
 800507c:	08005143 	.word	0x08005143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f906 	bl	8005298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0208 	orr.w	r2, r2, #8
 800509a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6999      	ldr	r1, [r3, #24]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	619a      	str	r2, [r3, #24]
      break;
 80050be:	e062      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f94c 	bl	8005364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6999      	ldr	r1, [r3, #24]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	619a      	str	r2, [r3, #24]
      break;
 8005100:	e041      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f997 	bl	800543c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0208 	orr.w	r2, r2, #8
 800511c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0204 	bic.w	r2, r2, #4
 800512c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69d9      	ldr	r1, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	61da      	str	r2, [r3, #28]
      break;
 8005140:	e021      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f9e1 	bl	8005510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69d9      	ldr	r1, [r3, #28]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	021a      	lsls	r2, r3, #8
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	61da      	str	r2, [r3, #28]
      break;
 8005182:	e000      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a34      	ldr	r2, [pc, #208]	; (800527c <TIM_Base_SetConfig+0xe4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00f      	beq.n	80051d0 <TIM_Base_SetConfig+0x38>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x38>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a31      	ldr	r2, [pc, #196]	; (8005280 <TIM_Base_SetConfig+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x38>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a30      	ldr	r2, [pc, #192]	; (8005284 <TIM_Base_SetConfig+0xec>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a2f      	ldr	r2, [pc, #188]	; (8005288 <TIM_Base_SetConfig+0xf0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <TIM_Base_SetConfig+0xe4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01b      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d017      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a22      	ldr	r2, [pc, #136]	; (8005280 <TIM_Base_SetConfig+0xe8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a21      	ldr	r2, [pc, #132]	; (8005284 <TIM_Base_SetConfig+0xec>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00f      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a20      	ldr	r2, [pc, #128]	; (8005288 <TIM_Base_SetConfig+0xf0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <TIM_Base_SetConfig+0xf4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <TIM_Base_SetConfig+0xf8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <TIM_Base_SetConfig+0xfc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a08      	ldr	r2, [pc, #32]	; (800527c <TIM_Base_SetConfig+0xe4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d103      	bne.n	8005268 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	615a      	str	r2, [r3, #20]
}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0201 	bic.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0302 	bic.w	r3, r3, #2
 80052e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <TIM_OC1_SetConfig+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10c      	bne.n	800530e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0308 	bic.w	r3, r3, #8
 80052fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 0304 	bic.w	r3, r3, #4
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <TIM_OC1_SetConfig+0xc8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d111      	bne.n	800533a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40010000 	.word	0x40010000

08005364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0210 	bic.w	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0320 	bic.w	r3, r3, #32
 80053ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <TIM_OC2_SetConfig+0xd4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10d      	bne.n	80053e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a15      	ldr	r2, [pc, #84]	; (8005438 <TIM_OC2_SetConfig+0xd4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d113      	bne.n	8005410 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000

0800543c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1d      	ldr	r2, [pc, #116]	; (800550c <TIM_OC3_SetConfig+0xd0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10d      	bne.n	80054b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a14      	ldr	r2, [pc, #80]	; (800550c <TIM_OC3_SetConfig+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d113      	bne.n	80054e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40010000 	.word	0x40010000

08005510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a10      	ldr	r2, [pc, #64]	; (80055ac <TIM_OC4_SetConfig+0x9c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d109      	bne.n	8005584 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e050      	b.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d018      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005614:	d013      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d10c      	bne.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4313      	orrs	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40014000 	.word	0x40014000

0800568c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e03d      	b.n	8005724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e03f      	b.n	80057c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc ff8c 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f905 	bl	8005984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08a      	sub	sp, #40	; 0x28
 80057ce:	af02      	add	r7, sp, #8
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d17c      	bne.n	80058e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_UART_Transmit+0x2c>
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e075      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UART_Transmit+0x3e>
 8005804:	2302      	movs	r3, #2
 8005806:	e06e      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2221      	movs	r2, #33	; 0x21
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800581e:	f7fd f801 	bl	8002824 <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005838:	d108      	bne.n	800584c <HAL_UART_Transmit+0x82>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e003      	b.n	8005854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800585c:	e02a      	b.n	80058b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f840 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e036      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	3302      	adds	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e007      	b.n	80058a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1cf      	bne.n	800585e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2140      	movs	r1, #64	; 0x40
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f810 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e006      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e000      	b.n	80058e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	e02c      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d028      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0x30>
 800590e:	f7fc ff89 	bl	8002824 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	429a      	cmp	r2, r3
 800591c:	d21d      	bcs.n	800595a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800592c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00f      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d0c3      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	b09f      	sub	sp, #124	; 0x7c
 800598a:	af00      	add	r7, sp, #0
 800598c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	68d9      	ldr	r1, [r3, #12]
 800599c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	ea40 0301 	orr.w	r3, r0, r1
 80059a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80059be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059c8:	f021 010c 	bic.w	r1, r1, #12
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d2:	430b      	orrs	r3, r1
 80059d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e2:	6999      	ldr	r1, [r3, #24]
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	ea40 0301 	orr.w	r3, r0, r1
 80059ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4bc5      	ldr	r3, [pc, #788]	; (8005d08 <UART_SetConfig+0x384>)
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d004      	beq.n	8005a02 <UART_SetConfig+0x7e>
 80059f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4bc3      	ldr	r3, [pc, #780]	; (8005d0c <UART_SetConfig+0x388>)
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d103      	bne.n	8005a0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a02:	f7fe fcff 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8005a06:	6778      	str	r0, [r7, #116]	; 0x74
 8005a08:	e002      	b.n	8005a10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a0a:	f7fe fce7 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8005a0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a18:	f040 80b6 	bne.w	8005b88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1e:	461c      	mov	r4, r3
 8005a20:	f04f 0500 	mov.w	r5, #0
 8005a24:	4622      	mov	r2, r4
 8005a26:	462b      	mov	r3, r5
 8005a28:	1891      	adds	r1, r2, r2
 8005a2a:	6439      	str	r1, [r7, #64]	; 0x40
 8005a2c:	415b      	adcs	r3, r3
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a34:	1912      	adds	r2, r2, r4
 8005a36:	eb45 0303 	adc.w	r3, r5, r3
 8005a3a:	f04f 0000 	mov.w	r0, #0
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	00d9      	lsls	r1, r3, #3
 8005a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a48:	00d0      	lsls	r0, r2, #3
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	1911      	adds	r1, r2, r4
 8005a50:	6639      	str	r1, [r7, #96]	; 0x60
 8005a52:	416b      	adcs	r3, r5
 8005a54:	667b      	str	r3, [r7, #100]	; 0x64
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	1891      	adds	r1, r2, r2
 8005a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a64:	415b      	adcs	r3, r3
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a70:	f7fa fc06 	bl	8000280 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4ba5      	ldr	r3, [pc, #660]	; (8005d10 <UART_SetConfig+0x38c>)
 8005a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	011e      	lsls	r6, r3, #4
 8005a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a84:	461c      	mov	r4, r3
 8005a86:	f04f 0500 	mov.w	r5, #0
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	1891      	adds	r1, r2, r2
 8005a90:	6339      	str	r1, [r7, #48]	; 0x30
 8005a92:	415b      	adcs	r3, r3
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a9a:	1912      	adds	r2, r2, r4
 8005a9c:	eb45 0303 	adc.w	r3, r5, r3
 8005aa0:	f04f 0000 	mov.w	r0, #0
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	00d9      	lsls	r1, r3, #3
 8005aaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aae:	00d0      	lsls	r0, r2, #3
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	1911      	adds	r1, r2, r4
 8005ab6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ab8:	416b      	adcs	r3, r5
 8005aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	1891      	adds	r1, r2, r2
 8005ac8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005aca:	415b      	adcs	r3, r3
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ad2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ad6:	f7fa fbd3 	bl	8000280 <__aeabi_uldivmod>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4b8c      	ldr	r3, [pc, #560]	; (8005d10 <UART_SetConfig+0x38c>)
 8005ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	2164      	movs	r1, #100	; 0x64
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	3332      	adds	r3, #50	; 0x32
 8005af2:	4a87      	ldr	r2, [pc, #540]	; (8005d10 <UART_SetConfig+0x38c>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b00:	441e      	add	r6, r3
 8005b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b04:	4618      	mov	r0, r3
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	1894      	adds	r4, r2, r2
 8005b10:	623c      	str	r4, [r7, #32]
 8005b12:	415b      	adcs	r3, r3
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b1a:	1812      	adds	r2, r2, r0
 8005b1c:	eb41 0303 	adc.w	r3, r1, r3
 8005b20:	f04f 0400 	mov.w	r4, #0
 8005b24:	f04f 0500 	mov.w	r5, #0
 8005b28:	00dd      	lsls	r5, r3, #3
 8005b2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b2e:	00d4      	lsls	r4, r2, #3
 8005b30:	4622      	mov	r2, r4
 8005b32:	462b      	mov	r3, r5
 8005b34:	1814      	adds	r4, r2, r0
 8005b36:	653c      	str	r4, [r7, #80]	; 0x50
 8005b38:	414b      	adcs	r3, r1
 8005b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	461a      	mov	r2, r3
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	1891      	adds	r1, r2, r2
 8005b48:	61b9      	str	r1, [r7, #24]
 8005b4a:	415b      	adcs	r3, r3
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b56:	f7fa fb93 	bl	8000280 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4b6c      	ldr	r3, [pc, #432]	; (8005d10 <UART_SetConfig+0x38c>)
 8005b60:	fba3 1302 	umull	r1, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2164      	movs	r1, #100	; 0x64
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a67      	ldr	r2, [pc, #412]	; (8005d10 <UART_SetConfig+0x38c>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0207 	and.w	r2, r3, #7
 8005b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4432      	add	r2, r6
 8005b84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b86:	e0b9      	b.n	8005cfc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8a:	461c      	mov	r4, r3
 8005b8c:	f04f 0500 	mov.w	r5, #0
 8005b90:	4622      	mov	r2, r4
 8005b92:	462b      	mov	r3, r5
 8005b94:	1891      	adds	r1, r2, r2
 8005b96:	6139      	str	r1, [r7, #16]
 8005b98:	415b      	adcs	r3, r3
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ba0:	1912      	adds	r2, r2, r4
 8005ba2:	eb45 0303 	adc.w	r3, r5, r3
 8005ba6:	f04f 0000 	mov.w	r0, #0
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	00d9      	lsls	r1, r3, #3
 8005bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bb4:	00d0      	lsls	r0, r2, #3
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	eb12 0804 	adds.w	r8, r2, r4
 8005bbe:	eb43 0905 	adc.w	r9, r3, r5
 8005bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f04f 0100 	mov.w	r1, #0
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	008b      	lsls	r3, r1, #2
 8005bd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bda:	0082      	lsls	r2, r0, #2
 8005bdc:	4640      	mov	r0, r8
 8005bde:	4649      	mov	r1, r9
 8005be0:	f7fa fb4e 	bl	8000280 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4b49      	ldr	r3, [pc, #292]	; (8005d10 <UART_SetConfig+0x38c>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	011e      	lsls	r6, r3, #4
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	1894      	adds	r4, r2, r2
 8005c00:	60bc      	str	r4, [r7, #8]
 8005c02:	415b      	adcs	r3, r3
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c0a:	1812      	adds	r2, r2, r0
 8005c0c:	eb41 0303 	adc.w	r3, r1, r3
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	f04f 0500 	mov.w	r5, #0
 8005c18:	00dd      	lsls	r5, r3, #3
 8005c1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c1e:	00d4      	lsls	r4, r2, #3
 8005c20:	4622      	mov	r2, r4
 8005c22:	462b      	mov	r3, r5
 8005c24:	1814      	adds	r4, r2, r0
 8005c26:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c28:	414b      	adcs	r3, r1
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f04f 0100 	mov.w	r1, #0
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	008b      	lsls	r3, r1, #2
 8005c40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c44:	0082      	lsls	r2, r0, #2
 8005c46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c4a:	f7fa fb19 	bl	8000280 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4b2f      	ldr	r3, [pc, #188]	; (8005d10 <UART_SetConfig+0x38c>)
 8005c54:	fba3 1302 	umull	r1, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	2164      	movs	r1, #100	; 0x64
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	3332      	adds	r3, #50	; 0x32
 8005c66:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <UART_SetConfig+0x38c>)
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c72:	441e      	add	r6, r3
 8005c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c76:	4618      	mov	r0, r3
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	1894      	adds	r4, r2, r2
 8005c82:	603c      	str	r4, [r7, #0]
 8005c84:	415b      	adcs	r3, r3
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8c:	1812      	adds	r2, r2, r0
 8005c8e:	eb41 0303 	adc.w	r3, r1, r3
 8005c92:	f04f 0400 	mov.w	r4, #0
 8005c96:	f04f 0500 	mov.w	r5, #0
 8005c9a:	00dd      	lsls	r5, r3, #3
 8005c9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ca0:	00d4      	lsls	r4, r2, #3
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	eb12 0a00 	adds.w	sl, r2, r0
 8005caa:	eb43 0b01 	adc.w	fp, r3, r1
 8005cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f04f 0100 	mov.w	r1, #0
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	008b      	lsls	r3, r1, #2
 8005cc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cc6:	0082      	lsls	r2, r0, #2
 8005cc8:	4650      	mov	r0, sl
 8005cca:	4659      	mov	r1, fp
 8005ccc:	f7fa fad8 	bl	8000280 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <UART_SetConfig+0x38c>)
 8005cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	2164      	movs	r1, #100	; 0x64
 8005cde:	fb01 f303 	mul.w	r3, r1, r3
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	3332      	adds	r3, #50	; 0x32
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <UART_SetConfig+0x38c>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4432      	add	r2, r6
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	377c      	adds	r7, #124	; 0x7c
 8005d00:	46bd      	mov	sp, r7
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d06:	bf00      	nop
 8005d08:	40011000 	.word	0x40011000
 8005d0c:	40011400 	.word	0x40011400
 8005d10:	51eb851f 	.word	0x51eb851f

08005d14 <__NVIC_SetPriority>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	db0a      	blt.n	8005d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	490c      	ldr	r1, [pc, #48]	; (8005d60 <__NVIC_SetPriority+0x4c>)
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	0112      	lsls	r2, r2, #4
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	440b      	add	r3, r1
 8005d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d3c:	e00a      	b.n	8005d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4908      	ldr	r1, [pc, #32]	; (8005d64 <__NVIC_SetPriority+0x50>)
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	0112      	lsls	r2, r2, #4
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	440b      	add	r3, r1
 8005d52:	761a      	strb	r2, [r3, #24]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	e000e100 	.word	0xe000e100
 8005d64:	e000ed00 	.word	0xe000ed00

08005d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f06f 0004 	mvn.w	r0, #4
 8005d72:	f7ff ffcf 	bl	8005d14 <__NVIC_SetPriority>
#endif
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d82:	f3ef 8305 	mrs	r3, IPSR
 8005d86:	603b      	str	r3, [r7, #0]
  return(result);
 8005d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d8e:	f06f 0305 	mvn.w	r3, #5
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	e00c      	b.n	8005db0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <osKernelInitialize+0x44>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <osKernelInitialize+0x44>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e002      	b.n	8005db0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	200000d0 	.word	0x200000d0

08005dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	603b      	str	r3, [r7, #0]
  return(result);
 8005dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dd6:	f06f 0305 	mvn.w	r3, #5
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e010      	b.n	8005e00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <osKernelStart+0x48>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d109      	bne.n	8005dfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005de6:	f7ff ffbf 	bl	8005d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dea:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <osKernelStart+0x48>)
 8005dec:	2202      	movs	r2, #2
 8005dee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005df0:	f001 f96c 	bl	80070cc <vTaskStartScheduler>
      stat = osOK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e002      	b.n	8005e00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200000d0 	.word	0x200000d0

08005e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	; 0x38
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e20:	f3ef 8305 	mrs	r3, IPSR
 8005e24:	617b      	str	r3, [r7, #20]
  return(result);
 8005e26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d17e      	bne.n	8005f2a <osThreadNew+0x11a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07b      	beq.n	8005f2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e36:	2318      	movs	r3, #24
 8005e38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d045      	beq.n	8005ed6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <osThreadNew+0x48>
        name = attr->name;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <osThreadNew+0x6e>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b38      	cmp	r3, #56	; 0x38
 8005e70:	d805      	bhi.n	8005e7e <osThreadNew+0x6e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <osThreadNew+0x72>
        return (NULL);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e054      	b.n	8005f2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <osThreadNew+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b5b      	cmp	r3, #91	; 0x5b
 8005ea0:	d90a      	bls.n	8005eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <osThreadNew+0xa8>
        mem = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e010      	b.n	8005eda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <osThreadNew+0xca>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <osThreadNew+0xca>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <osThreadNew+0xca>
          mem = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e001      	b.n	8005eda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d110      	bne.n	8005f02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fe0c 	bl	8006b14 <xTaskCreateStatic>
 8005efc:	4603      	mov	r3, r0
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e013      	b.n	8005f2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fe57 	bl	8006bce <xTaskCreate>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <osThreadNew+0x11a>
            hTask = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f2a:	693b      	ldr	r3, [r7, #16]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3728      	adds	r7, #40	; 0x28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f3c:	f3ef 8305 	mrs	r3, IPSR
 8005f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <osDelay+0x1c>
    stat = osErrorISR;
 8005f48:	f06f 0305 	mvn.w	r3, #5
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e007      	b.n	8005f60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 ff7c 	bl	8006e58 <vTaskDelay>
    }
  }

  return (stat);
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a07      	ldr	r2, [pc, #28]	; (8005f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <vApplicationGetIdleTaskMemory+0x30>)
 8005f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2280      	movs	r2, #128	; 0x80
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	200000d4 	.word	0x200000d4
 8005f9c:	20000130 	.word	0x20000130

08005fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8005fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000330 	.word	0x20000330
 8005fd0:	2000038c 	.word	0x2000038c

08005fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 0208 	add.w	r2, r3, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f103 0208 	add.w	r2, r3, #8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0208 	add.w	r2, r3, #8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d103      	bne.n	8006096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e00c      	b.n	80060b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3308      	adds	r3, #8
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e002      	b.n	80060a4 <vListInsert+0x2e>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d2f6      	bcs.n	800609e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6892      	ldr	r2, [r2, #8]
 80060fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6852      	ldr	r2, [r2, #4]
 8006108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d103      	bne.n	800611c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1e5a      	subs	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006166:	f002 f955 	bl	8008414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	3b01      	subs	r3, #1
 8006198:	68f9      	ldr	r1, [r7, #12]
 800619a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	22ff      	movs	r2, #255	; 0xff
 80061b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d114      	bne.n	80061e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01a      	beq.n	80061fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3310      	adds	r3, #16
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fa09 	bl	80075e0 <xTaskRemoveFromEventList>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <xQueueGenericReset+0xcc>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	e009      	b.n	80061fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3310      	adds	r3, #16
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fef2 	bl	8005fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3324      	adds	r3, #36	; 0x24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff feed 	bl	8005fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061fa:	f002 f93b 	bl	8008474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061fe:	2301      	movs	r3, #1
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08e      	sub	sp, #56	; 0x38
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <xQueueGenericCreateStatic+0x52>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <xQueueGenericCreateStatic+0x56>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <xQueueGenericCreateStatic+0x58>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	623b      	str	r3, [r7, #32]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <xQueueGenericCreateStatic+0x7e>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <xQueueGenericCreateStatic+0x82>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueGenericCreateStatic+0x84>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	61fb      	str	r3, [r7, #28]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062aa:	2350      	movs	r3, #80	; 0x50
 80062ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b50      	cmp	r3, #80	; 0x50
 80062b2:	d00a      	beq.n	80062ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	61bb      	str	r3, [r7, #24]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4613      	mov	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f805 	bl	80062fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3730      	adds	r7, #48	; 0x30
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e002      	b.n	800631e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800632a:	2101      	movs	r1, #1
 800632c:	69b8      	ldr	r0, [r7, #24]
 800632e:	f7ff ff05 	bl	800613c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08e      	sub	sp, #56	; 0x38
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xQueueGenericSend+0x32>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <xQueueGenericSend+0x40>
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <xQueueGenericSend+0x44>
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <xQueueGenericSend+0x46>
 8006388:	2300      	movs	r3, #0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <xQueueGenericSend+0x60>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d103      	bne.n	80063b2 <xQueueGenericSend+0x6e>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericSend+0x72>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericSend+0x74>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063d2:	f001 fac3 	bl	800795c <xTaskGetSchedulerState>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <xQueueGenericSend+0x9e>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <xQueueGenericSend+0xa2>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <xQueueGenericSend+0xa4>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <xQueueGenericSend+0xbe>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61fb      	str	r3, [r7, #28]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006402:	f002 f807 	bl	8008414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <xQueueGenericSend+0xd4>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d129      	bne.n	800646c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641e:	f000 fa0b 	bl	8006838 <prvCopyDataToQueue>
 8006422:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	3324      	adds	r3, #36	; 0x24
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f8d5 	bl	80075e0 <xTaskRemoveFromEventList>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d013      	beq.n	8006464 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800643c:	4b3f      	ldr	r3, [pc, #252]	; (800653c <xQueueGenericSend+0x1f8>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	e00a      	b.n	8006464 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006454:	4b39      	ldr	r3, [pc, #228]	; (800653c <xQueueGenericSend+0x1f8>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006464:	f002 f806 	bl	8008474 <vPortExitCritical>
				return pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	e063      	b.n	8006534 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006472:	f001 ffff 	bl	8008474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006476:	2300      	movs	r3, #0
 8006478:	e05c      	b.n	8006534 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006480:	f107 0314 	add.w	r3, r7, #20
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f90f 	bl	80076a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800648e:	f001 fff1 	bl	8008474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006492:	f000 fe81 	bl	8007198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006496:	f001 ffbd 	bl	8008414 <vPortEnterCritical>
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064a0:	b25b      	sxtb	r3, r3
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d103      	bne.n	80064b0 <xQueueGenericSend+0x16c>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b6:	b25b      	sxtb	r3, r3
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d103      	bne.n	80064c6 <xQueueGenericSend+0x182>
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c6:	f001 ffd5 	bl	8008474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ca:	1d3a      	adds	r2, r7, #4
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f8fe 	bl	80076d4 <xTaskCheckForTimeOut>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d124      	bne.n	8006528 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e0:	f000 faa2 	bl	8006a28 <prvIsQueueFull>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	3310      	adds	r3, #16
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 f824 	bl	8007540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064fa:	f000 fa2d 	bl	8006958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064fe:	f000 fe59 	bl	80071b4 <xTaskResumeAll>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	f47f af7c 	bne.w	8006402 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800650a:	4b0c      	ldr	r3, [pc, #48]	; (800653c <xQueueGenericSend+0x1f8>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e772      	b.n	8006402 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800651c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800651e:	f000 fa1b 	bl	8006958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006522:	f000 fe47 	bl	80071b4 <xTaskResumeAll>
 8006526:	e76c      	b.n	8006402 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800652a:	f000 fa15 	bl	8006958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800652e:	f000 fe41 	bl	80071b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006534:	4618      	mov	r0, r3
 8006536:	3738      	adds	r7, #56	; 0x38
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b090      	sub	sp, #64	; 0x40
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <xQueueGenericSendFromISR+0x3c>
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <xQueueGenericSendFromISR+0x40>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <xQueueGenericSendFromISR+0x42>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d103      	bne.n	80065aa <xQueueGenericSendFromISR+0x6a>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <xQueueGenericSendFromISR+0x6e>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueGenericSendFromISR+0x70>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	623b      	str	r3, [r7, #32]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ca:	f002 f805 	bl	80085d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065ce:	f3ef 8211 	mrs	r2, BASEPRI
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d302      	bcc.n	80065fc <xQueueGenericSendFromISR+0xbc>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d12f      	bne.n	800665c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006612:	f000 f911 	bl	8006838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006616:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d112      	bne.n	8006646 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d016      	beq.n	8006656 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	3324      	adds	r3, #36	; 0x24
 800662c:	4618      	mov	r0, r3
 800662e:	f000 ffd7 	bl	80075e0 <xTaskRemoveFromEventList>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e007      	b.n	8006656 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800664a:	3301      	adds	r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	b25a      	sxtb	r2, r3
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006656:	2301      	movs	r3, #1
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800665a:	e001      	b.n	8006660 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800666a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800666e:	4618      	mov	r0, r3
 8006670:	3740      	adds	r7, #64	; 0x40
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <xQueueReceive+0x30>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	623b      	str	r3, [r7, #32]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <xQueueReceive+0x3e>
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <xQueueReceive+0x42>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <xQueueReceive+0x44>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xQueueReceive+0x5e>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	61fb      	str	r3, [r7, #28]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066d6:	f001 f941 	bl	800795c <xTaskGetSchedulerState>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <xQueueReceive+0x6e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <xQueueReceive+0x72>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueReceive+0x74>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueReceive+0x8e>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61bb      	str	r3, [r7, #24]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006706:	f001 fe85 	bl	8008414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01f      	beq.n	8006756 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671a:	f000 f8f7 	bl	800690c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	3310      	adds	r3, #16
 8006732:	4618      	mov	r0, r3
 8006734:	f000 ff54 	bl	80075e0 <xTaskRemoveFromEventList>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800673e:	4b3d      	ldr	r3, [pc, #244]	; (8006834 <xQueueReceive+0x1bc>)
 8006740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800674e:	f001 fe91 	bl	8008474 <vPortExitCritical>
				return pdPASS;
 8006752:	2301      	movs	r3, #1
 8006754:	e069      	b.n	800682a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d103      	bne.n	8006764 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800675c:	f001 fe8a 	bl	8008474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006760:	2300      	movs	r3, #0
 8006762:	e062      	b.n	800682a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676a:	f107 0310 	add.w	r3, r7, #16
 800676e:	4618      	mov	r0, r3
 8006770:	f000 ff9a 	bl	80076a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006778:	f001 fe7c 	bl	8008474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800677c:	f000 fd0c 	bl	8007198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006780:	f001 fe48 	bl	8008414 <vPortEnterCritical>
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d103      	bne.n	800679a <xQueueReceive+0x122>
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d103      	bne.n	80067b0 <xQueueReceive+0x138>
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b0:	f001 fe60 	bl	8008474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b4:	1d3a      	adds	r2, r7, #4
 80067b6:	f107 0310 	add.w	r3, r7, #16
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff89 	bl	80076d4 <xTaskCheckForTimeOut>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d123      	bne.n	8006810 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ca:	f000 f917 	bl	80069fc <prvIsQueueEmpty>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d017      	beq.n	8006804 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 feaf 	bl	8007540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e4:	f000 f8b8 	bl	8006958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067e8:	f000 fce4 	bl	80071b4 <xTaskResumeAll>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d189      	bne.n	8006706 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <xQueueReceive+0x1bc>)
 80067f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	e780      	b.n	8006706 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006806:	f000 f8a7 	bl	8006958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800680a:	f000 fcd3 	bl	80071b4 <xTaskResumeAll>
 800680e:	e77a      	b.n	8006706 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006812:	f000 f8a1 	bl	8006958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006816:	f000 fccd 	bl	80071b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800681a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681c:	f000 f8ee 	bl	80069fc <prvIsQueueEmpty>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	f43f af6f 	beq.w	8006706 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800682a:	4618      	mov	r0, r3
 800682c:	3730      	adds	r7, #48	; 0x30
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d14d      	bne.n	80068fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f001 f898 	bl	8007998 <xTaskPriorityDisinherit>
 8006868:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	e043      	b.n	80068fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d119      	bne.n	80068ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6858      	ldr	r0, [r3, #4]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	461a      	mov	r2, r3
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	f002 f8fc 	bl	8008a80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	441a      	add	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d32b      	bcc.n	80068fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	e026      	b.n	80068fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68d8      	ldr	r0, [r3, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	461a      	mov	r2, r3
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	f002 f8e2 	bl	8008a80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	425b      	negs	r3, r3
 80068c6:	441a      	add	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d207      	bcs.n	80068e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	425b      	negs	r3, r3
 80068e2:	441a      	add	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d105      	bne.n	80068fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006902:	697b      	ldr	r3, [r7, #20]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	429a      	cmp	r2, r3
 8006936:	d303      	bcc.n	8006940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68d9      	ldr	r1, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	461a      	mov	r2, r3
 800694a:	6838      	ldr	r0, [r7, #0]
 800694c:	f002 f898 	bl	8008a80 <memcpy>
	}
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006960:	f001 fd58 	bl	8008414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800696a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800696c:	e011      	b.n	8006992 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d012      	beq.n	800699c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3324      	adds	r3, #36	; 0x24
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fe30 	bl	80075e0 <xTaskRemoveFromEventList>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006986:	f000 ff07 	bl	8007798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	3b01      	subs	r3, #1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	dce9      	bgt.n	800696e <prvUnlockQueue+0x16>
 800699a:	e000      	b.n	800699e <prvUnlockQueue+0x46>
					break;
 800699c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069a6:	f001 fd65 	bl	8008474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069aa:	f001 fd33 	bl	8008414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069b6:	e011      	b.n	80069dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d012      	beq.n	80069e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3310      	adds	r3, #16
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fe0b 	bl	80075e0 <xTaskRemoveFromEventList>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069d0:	f000 fee2 	bl	8007798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dce9      	bgt.n	80069b8 <prvUnlockQueue+0x60>
 80069e4:	e000      	b.n	80069e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	22ff      	movs	r2, #255	; 0xff
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069f0:	f001 fd40 	bl	8008474 <vPortExitCritical>
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a04:	f001 fd06 	bl	8008414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e001      	b.n	8006a1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a1a:	f001 fd2b 	bl	8008474 <vPortExitCritical>

	return xReturn;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a30:	f001 fcf0 	bl	8008414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d102      	bne.n	8006a46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e001      	b.n	8006a4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 fd13 	bl	8008474 <vPortExitCritical>

	return xReturn;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e014      	b.n	8006a92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a68:	4a0f      	ldr	r2, [pc, #60]	; (8006aa8 <vQueueAddToRegistry+0x50>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a74:	490c      	ldr	r1, [pc, #48]	; (8006aa8 <vQueueAddToRegistry+0x50>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a7e:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <vQueueAddToRegistry+0x50>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4413      	add	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a8a:	e006      	b.n	8006a9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b07      	cmp	r3, #7
 8006a96:	d9e7      	bls.n	8006a68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	2000449c 	.word	0x2000449c

08006aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006abc:	f001 fcaa 	bl	8008414 <vPortEnterCritical>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d103      	bne.n	8006ad6 <vQueueWaitForMessageRestricted+0x2a>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d103      	bne.n	8006aec <vQueueWaitForMessageRestricted+0x40>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aec:	f001 fcc2 	bl	8008474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fd41 	bl	8007588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff ff26 	bl	8006958 <prvUnlockQueue>
	}
 8006b0c:	bf00      	nop
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08e      	sub	sp, #56	; 0x38
 8006b18:	af04      	add	r7, sp, #16
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	623b      	str	r3, [r7, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xTaskCreateStatic+0x46>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	61fb      	str	r3, [r7, #28]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b5a:	235c      	movs	r3, #92	; 0x5c
 8006b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b5c      	cmp	r3, #92	; 0x5c
 8006b62:	d00a      	beq.n	8006b7a <xTaskCreateStatic+0x66>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	61bb      	str	r3, [r7, #24]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01e      	beq.n	8006bc0 <xTaskCreateStatic+0xac>
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01b      	beq.n	8006bc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	f107 0314 	add.w	r3, r7, #20
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f850 	bl	8006c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bba:	f000 f8dd 	bl	8006d78 <prvAddNewTaskToReadyList>
 8006bbe:	e001      	b.n	8006bc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bc4:	697b      	ldr	r3, [r7, #20]
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3728      	adds	r7, #40	; 0x28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08c      	sub	sp, #48	; 0x30
 8006bd2:	af04      	add	r7, sp, #16
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 fd38 	bl	8008658 <pvPortMalloc>
 8006be8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bf0:	205c      	movs	r0, #92	; 0x5c
 8006bf2:	f001 fd31 	bl	8008658 <pvPortMalloc>
 8006bf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
 8006c04:	e005      	b.n	8006c12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c06:	6978      	ldr	r0, [r7, #20]
 8006c08:	f001 fdf2 	bl	80087f0 <vPortFree>
 8006c0c:	e001      	b.n	8006c12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d017      	beq.n	8006c48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c20:	88fa      	ldrh	r2, [r7, #6]
 8006c22:	2300      	movs	r3, #0
 8006c24:	9303      	str	r3, [sp, #12]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	9302      	str	r3, [sp, #8]
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f80e 	bl	8006c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c3c:	69f8      	ldr	r0, [r7, #28]
 8006c3e:	f000 f89b 	bl	8006d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c42:	2301      	movs	r3, #1
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	e002      	b.n	8006c4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c48:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	461a      	mov	r2, r3
 8006c70:	21a5      	movs	r1, #165	; 0xa5
 8006c72:	f001 ff13 	bl	8008a9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c80:	3b01      	subs	r3, #1
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	617b      	str	r3, [r7, #20]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d01f      	beq.n	8006cf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e012      	b.n	8006ce2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	7819      	ldrb	r1, [r3, #0]
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	3334      	adds	r3, #52	; 0x34
 8006ccc:	460a      	mov	r2, r1
 8006cce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b0f      	cmp	r3, #15
 8006ce6:	d9e9      	bls.n	8006cbc <prvInitialiseNewTask+0x64>
 8006ce8:	e000      	b.n	8006cec <prvInitialiseNewTask+0x94>
			{
				break;
 8006cea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf4:	e003      	b.n	8006cfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	2b37      	cmp	r3, #55	; 0x37
 8006d02:	d901      	bls.n	8006d08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d04:	2337      	movs	r3, #55	; 0x37
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	2200      	movs	r2, #0
 8006d18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff f978 	bl	8006014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	3318      	adds	r3, #24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff f973 	bl	8006014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2200      	movs	r2, #0
 8006d48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	69b8      	ldr	r0, [r7, #24]
 8006d58:	f001 fa2e 	bl	80081b8 <pxPortInitialiseStack>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6e:	bf00      	nop
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d80:	f001 fb48 	bl	8008414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d84:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8e:	4b2c      	ldr	r3, [pc, #176]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d96:	4a2a      	ldr	r2, [pc, #168]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d9c:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da4:	f000 fd1c 	bl	80077e0 <prvInitialiseTaskLists>
 8006da8:	e00d      	b.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006daa:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d802      	bhi.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a1e      	ldr	r2, [pc, #120]	; (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <prvAddNewTaskToReadyList+0xd4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <prvAddNewTaskToReadyList+0x74>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4a18      	ldr	r2, [pc, #96]	; (8006e4c <prvAddNewTaskToReadyList+0xd4>)
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <prvAddNewTaskToReadyList+0xd8>)
 8006dfa:	441a      	add	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f7ff f913 	bl	800602e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e08:	f001 fb34 	bl	8008474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d207      	bcs.n	8006e32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <prvAddNewTaskToReadyList+0xdc>)
 8006e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000c60 	.word	0x20000c60
 8006e40:	2000078c 	.word	0x2000078c
 8006e44:	20000c6c 	.word	0x20000c6c
 8006e48:	20000c7c 	.word	0x20000c7c
 8006e4c:	20000c68 	.word	0x20000c68
 8006e50:	20000790 	.word	0x20000790
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d017      	beq.n	8006e9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <vTaskDelay+0x60>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <vTaskDelay+0x30>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e88:	f000 f986 	bl	8007198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fdf0 	bl	8007a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e94:	f000 f98e 	bl	80071b4 <xTaskResumeAll>
 8006e98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <vTaskDelay+0x64>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000c88 	.word	0x20000c88
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006ec8:	f001 faa4 	bl	8008414 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <vTaskSuspend+0x18>
 8006ed2:	4b30      	ldr	r3, [pc, #192]	; (8006f94 <vTaskSuspend+0xd4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	e000      	b.n	8006eda <vTaskSuspend+0x1a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff f901 	bl	80060e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3318      	adds	r3, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff f8f8 	bl	80060e8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4826      	ldr	r0, [pc, #152]	; (8006f98 <vTaskSuspend+0xd8>)
 8006f00:	f7ff f895 	bl	800602e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d103      	bne.n	8006f18 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006f18:	f001 faac 	bl	8008474 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <vTaskSuspend+0xdc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006f24:	f001 fa76 	bl	8008414 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006f28:	f000 fcf8 	bl	800791c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006f2c:	f001 faa2 	bl	8008474 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006f30:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <vTaskSuspend+0xd4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d127      	bne.n	8006f8a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <vTaskSuspend+0xdc>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d017      	beq.n	8006f72 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <vTaskSuspend+0xe0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <vTaskSuspend+0xa0>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	60bb      	str	r3, [r7, #8]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <vTaskSuspend+0xe4>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f70:	e00b      	b.n	8006f8a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <vTaskSuspend+0xd8>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <vTaskSuspend+0xe8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d103      	bne.n	8006f86 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006f7e:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <vTaskSuspend+0xd4>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]
	}
 8006f84:	e001      	b.n	8006f8a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006f86:	f000 fa7d 	bl	8007484 <vTaskSwitchContext>
	}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	2000078c 	.word	0x2000078c
 8006f98:	20000c4c 	.word	0x20000c4c
 8006f9c:	20000c6c 	.word	0x20000c6c
 8006fa0:	20000c88 	.word	0x20000c88
 8006fa4:	e000ed04 	.word	0xe000ed04
 8006fa8:	20000c60 	.word	0x20000c60

08006fac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	60fb      	str	r3, [r7, #12]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <prvTaskIsTaskSuspended+0x5c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d10a      	bne.n	8006ff8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <prvTaskIsTaskSuspended+0x60>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d005      	beq.n	8006ff8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ff8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000c4c 	.word	0x20000c4c
 800700c:	20000c20 	.word	0x20000c20

08007010 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <vTaskResume+0x28>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60bb      	str	r3, [r7, #8]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007038:	4b20      	ldr	r3, [pc, #128]	; (80070bc <vTaskResume+0xac>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	429a      	cmp	r2, r3
 8007040:	d038      	beq.n	80070b4 <vTaskResume+0xa4>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d035      	beq.n	80070b4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007048:	f001 f9e4 	bl	8008414 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ffad 	bl	8006fac <prvTaskIsTaskSuspended>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02b      	beq.n	80070b0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3304      	adds	r3, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff f843 	bl	80060e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <vTaskResume+0xb0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d903      	bls.n	8007076 <vTaskResume+0x66>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <vTaskResume+0xb0>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4a10      	ldr	r2, [pc, #64]	; (80070c4 <vTaskResume+0xb4>)
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f7fe ffce 	bl	800602e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <vTaskResume+0xac>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	429a      	cmp	r2, r3
 800709e:	d307      	bcc.n	80070b0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <vTaskResume+0xb8>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80070b0:	f001 f9e0 	bl	8008474 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	2000078c 	.word	0x2000078c
 80070c0:	20000c68 	.word	0x20000c68
 80070c4:	20000790 	.word	0x20000790
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
 80070d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070da:	463a      	mov	r2, r7
 80070dc:	1d39      	adds	r1, r7, #4
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe ff42 	bl	8005f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	9202      	str	r2, [sp, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	2300      	movs	r3, #0
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	460a      	mov	r2, r1
 80070fa:	4921      	ldr	r1, [pc, #132]	; (8007180 <vTaskStartScheduler+0xb4>)
 80070fc:	4821      	ldr	r0, [pc, #132]	; (8007184 <vTaskStartScheduler+0xb8>)
 80070fe:	f7ff fd09 	bl	8006b14 <xTaskCreateStatic>
 8007102:	4603      	mov	r3, r0
 8007104:	4a20      	ldr	r2, [pc, #128]	; (8007188 <vTaskStartScheduler+0xbc>)
 8007106:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007108:	4b1f      	ldr	r3, [pc, #124]	; (8007188 <vTaskStartScheduler+0xbc>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007110:	2301      	movs	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	e001      	b.n	800711a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d102      	bne.n	8007126 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007120:	f000 fcfc 	bl	8007b1c <xTimerCreateTimerTask>
 8007124:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d116      	bne.n	800715a <vTaskStartScheduler+0x8e>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	613b      	str	r3, [r7, #16]
}
 800713e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <vTaskStartScheduler+0xc0>)
 8007142:	f04f 32ff 	mov.w	r2, #4294967295
 8007146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <vTaskStartScheduler+0xc4>)
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <vTaskStartScheduler+0xc8>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007154:	f001 f8bc 	bl	80082d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007158:	e00e      	b.n	8007178 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d10a      	bne.n	8007178 <vTaskStartScheduler+0xac>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60fb      	str	r3, [r7, #12]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <vTaskStartScheduler+0xaa>
}
 8007178:	bf00      	nop
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	08009b60 	.word	0x08009b60
 8007184:	080077b1 	.word	0x080077b1
 8007188:	20000c84 	.word	0x20000c84
 800718c:	20000c80 	.word	0x20000c80
 8007190:	20000c6c 	.word	0x20000c6c
 8007194:	20000c64 	.word	0x20000c64

08007198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <vTaskSuspendAll+0x18>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3301      	adds	r3, #1
 80071a2:	4a03      	ldr	r2, [pc, #12]	; (80071b0 <vTaskSuspendAll+0x18>)
 80071a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071a6:	bf00      	nop
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	20000c88 	.word	0x20000c88

080071b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071c2:	4b42      	ldr	r3, [pc, #264]	; (80072cc <xTaskResumeAll+0x118>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	603b      	str	r3, [r7, #0]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071e0:	f001 f918 	bl	8008414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071e4:	4b39      	ldr	r3, [pc, #228]	; (80072cc <xTaskResumeAll+0x118>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4a38      	ldr	r2, [pc, #224]	; (80072cc <xTaskResumeAll+0x118>)
 80071ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ee:	4b37      	ldr	r3, [pc, #220]	; (80072cc <xTaskResumeAll+0x118>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d162      	bne.n	80072bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071f6:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <xTaskResumeAll+0x11c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d05e      	beq.n	80072bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071fe:	e02f      	b.n	8007260 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007200:	4b34      	ldr	r3, [pc, #208]	; (80072d4 <xTaskResumeAll+0x120>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3318      	adds	r3, #24
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe ff6b 	bl	80060e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3304      	adds	r3, #4
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe ff66 	bl	80060e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <xTaskResumeAll+0x124>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d903      	bls.n	8007230 <xTaskResumeAll+0x7c>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4a2a      	ldr	r2, [pc, #168]	; (80072d8 <xTaskResumeAll+0x124>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4a27      	ldr	r2, [pc, #156]	; (80072dc <xTaskResumeAll+0x128>)
 800723e:	441a      	add	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fef1 	bl	800602e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007250:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <xTaskResumeAll+0x12c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	429a      	cmp	r2, r3
 8007258:	d302      	bcc.n	8007260 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800725a:	4b22      	ldr	r3, [pc, #136]	; (80072e4 <xTaskResumeAll+0x130>)
 800725c:	2201      	movs	r2, #1
 800725e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <xTaskResumeAll+0x120>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1cb      	bne.n	8007200 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800726e:	f000 fb55 	bl	800791c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007272:	4b1d      	ldr	r3, [pc, #116]	; (80072e8 <xTaskResumeAll+0x134>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d010      	beq.n	80072a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800727e:	f000 f847 	bl	8007310 <xTaskIncrementTick>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007288:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <xTaskResumeAll+0x130>)
 800728a:	2201      	movs	r2, #1
 800728c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3b01      	subs	r3, #1
 8007292:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1f1      	bne.n	800727e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <xTaskResumeAll+0x134>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <xTaskResumeAll+0x130>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d009      	beq.n	80072bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <xTaskResumeAll+0x138>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072bc:	f001 f8da 	bl	8008474 <vPortExitCritical>

	return xAlreadyYielded;
 80072c0:	68bb      	ldr	r3, [r7, #8]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000c88 	.word	0x20000c88
 80072d0:	20000c60 	.word	0x20000c60
 80072d4:	20000c20 	.word	0x20000c20
 80072d8:	20000c68 	.word	0x20000c68
 80072dc:	20000790 	.word	0x20000790
 80072e0:	2000078c 	.word	0x2000078c
 80072e4:	20000c74 	.word	0x20000c74
 80072e8:	20000c70 	.word	0x20000c70
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <xTaskGetTickCount+0x1c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072fc:	687b      	ldr	r3, [r7, #4]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000c64 	.word	0x20000c64

08007310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800731a:	4b4f      	ldr	r3, [pc, #316]	; (8007458 <xTaskIncrementTick+0x148>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f040 808f 	bne.w	8007442 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007324:	4b4d      	ldr	r3, [pc, #308]	; (800745c <xTaskIncrementTick+0x14c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800732c:	4a4b      	ldr	r2, [pc, #300]	; (800745c <xTaskIncrementTick+0x14c>)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d120      	bne.n	800737a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007338:	4b49      	ldr	r3, [pc, #292]	; (8007460 <xTaskIncrementTick+0x150>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <xTaskIncrementTick+0x48>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	603b      	str	r3, [r7, #0]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xTaskIncrementTick+0x46>
 8007358:	4b41      	ldr	r3, [pc, #260]	; (8007460 <xTaskIncrementTick+0x150>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	4b41      	ldr	r3, [pc, #260]	; (8007464 <xTaskIncrementTick+0x154>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a3f      	ldr	r2, [pc, #252]	; (8007460 <xTaskIncrementTick+0x150>)
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4a3f      	ldr	r2, [pc, #252]	; (8007464 <xTaskIncrementTick+0x154>)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <xTaskIncrementTick+0x158>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3301      	adds	r3, #1
 8007372:	4a3d      	ldr	r2, [pc, #244]	; (8007468 <xTaskIncrementTick+0x158>)
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	f000 fad1 	bl	800791c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800737a:	4b3c      	ldr	r3, [pc, #240]	; (800746c <xTaskIncrementTick+0x15c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	429a      	cmp	r2, r3
 8007382:	d349      	bcc.n	8007418 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007384:	4b36      	ldr	r3, [pc, #216]	; (8007460 <xTaskIncrementTick+0x150>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d104      	bne.n	8007398 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738e:	4b37      	ldr	r3, [pc, #220]	; (800746c <xTaskIncrementTick+0x15c>)
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	601a      	str	r2, [r3, #0]
					break;
 8007396:	e03f      	b.n	8007418 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007398:	4b31      	ldr	r3, [pc, #196]	; (8007460 <xTaskIncrementTick+0x150>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d203      	bcs.n	80073b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073b0:	4a2e      	ldr	r2, [pc, #184]	; (800746c <xTaskIncrementTick+0x15c>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073b6:	e02f      	b.n	8007418 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fe93 	bl	80060e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d004      	beq.n	80073d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3318      	adds	r3, #24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fe8a 	bl	80060e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <xTaskIncrementTick+0x160>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d903      	bls.n	80073e8 <xTaskIncrementTick+0xd8>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	4a22      	ldr	r2, [pc, #136]	; (8007470 <xTaskIncrementTick+0x160>)
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <xTaskIncrementTick+0x164>)
 80073f6:	441a      	add	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f7fe fe15 	bl	800602e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <xTaskIncrementTick+0x168>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	429a      	cmp	r2, r3
 8007410:	d3b8      	bcc.n	8007384 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007416:	e7b5      	b.n	8007384 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007418:	4b17      	ldr	r3, [pc, #92]	; (8007478 <xTaskIncrementTick+0x168>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741e:	4915      	ldr	r1, [pc, #84]	; (8007474 <xTaskIncrementTick+0x164>)
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d901      	bls.n	8007434 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007434:	4b11      	ldr	r3, [pc, #68]	; (800747c <xTaskIncrementTick+0x16c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e004      	b.n	800744c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007442:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <xTaskIncrementTick+0x170>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <xTaskIncrementTick+0x170>)
 800744a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800744c:	697b      	ldr	r3, [r7, #20]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000c88 	.word	0x20000c88
 800745c:	20000c64 	.word	0x20000c64
 8007460:	20000c18 	.word	0x20000c18
 8007464:	20000c1c 	.word	0x20000c1c
 8007468:	20000c78 	.word	0x20000c78
 800746c:	20000c80 	.word	0x20000c80
 8007470:	20000c68 	.word	0x20000c68
 8007474:	20000790 	.word	0x20000790
 8007478:	2000078c 	.word	0x2000078c
 800747c:	20000c74 	.word	0x20000c74
 8007480:	20000c70 	.word	0x20000c70

08007484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800748a:	4b28      	ldr	r3, [pc, #160]	; (800752c <vTaskSwitchContext+0xa8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007492:	4b27      	ldr	r3, [pc, #156]	; (8007530 <vTaskSwitchContext+0xac>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007498:	e041      	b.n	800751e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800749a:	4b25      	ldr	r3, [pc, #148]	; (8007530 <vTaskSwitchContext+0xac>)
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a0:	4b24      	ldr	r3, [pc, #144]	; (8007534 <vTaskSwitchContext+0xb0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e010      	b.n	80074ca <vTaskSwitchContext+0x46>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <vTaskSwitchContext+0x3e>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	491b      	ldr	r1, [pc, #108]	; (8007538 <vTaskSwitchContext+0xb4>)
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0e4      	beq.n	80074a8 <vTaskSwitchContext+0x24>
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4a13      	ldr	r2, [pc, #76]	; (8007538 <vTaskSwitchContext+0xb4>)
 80074ea:	4413      	add	r3, r2
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3308      	adds	r3, #8
 8007500:	429a      	cmp	r2, r3
 8007502:	d104      	bne.n	800750e <vTaskSwitchContext+0x8a>
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4a09      	ldr	r2, [pc, #36]	; (800753c <vTaskSwitchContext+0xb8>)
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	4a06      	ldr	r2, [pc, #24]	; (8007534 <vTaskSwitchContext+0xb0>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6013      	str	r3, [r2, #0]
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20000c88 	.word	0x20000c88
 8007530:	20000c74 	.word	0x20000c74
 8007534:	20000c68 	.word	0x20000c68
 8007538:	20000790 	.word	0x20000790
 800753c:	2000078c 	.word	0x2000078c

08007540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007566:	4b07      	ldr	r3, [pc, #28]	; (8007584 <vTaskPlaceOnEventList+0x44>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3318      	adds	r3, #24
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fe fd81 	bl	8006076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007574:	2101      	movs	r1, #1
 8007576:	6838      	ldr	r0, [r7, #0]
 8007578:	f000 fa7c 	bl	8007a74 <prvAddCurrentTaskToDelayedList>
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	2000078c 	.word	0x2000078c

08007588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	617b      	str	r3, [r7, #20]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <vTaskPlaceOnEventListRestricted+0x54>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3318      	adds	r3, #24
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7fe fd38 	bl	800602e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f000 fa51 	bl	8007a74 <prvAddCurrentTaskToDelayedList>
	}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	2000078c 	.word	0x2000078c

080075e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60fb      	str	r3, [r7, #12]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3318      	adds	r3, #24
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fd69 	bl	80060e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007616:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <xTaskRemoveFromEventList+0xb0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11d      	bne.n	800765a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fd60 	bl	80060e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762c:	4b19      	ldr	r3, [pc, #100]	; (8007694 <xTaskRemoveFromEventList+0xb4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d903      	bls.n	800763c <xTaskRemoveFromEventList+0x5c>
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4a16      	ldr	r2, [pc, #88]	; (8007694 <xTaskRemoveFromEventList+0xb4>)
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4a13      	ldr	r2, [pc, #76]	; (8007698 <xTaskRemoveFromEventList+0xb8>)
 800764a:	441a      	add	r2, r3
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3304      	adds	r3, #4
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe fceb 	bl	800602e <vListInsertEnd>
 8007658:	e005      	b.n	8007666 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3318      	adds	r3, #24
 800765e:	4619      	mov	r1, r3
 8007660:	480e      	ldr	r0, [pc, #56]	; (800769c <xTaskRemoveFromEventList+0xbc>)
 8007662:	f7fe fce4 	bl	800602e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <xTaskRemoveFromEventList+0xc0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	429a      	cmp	r2, r3
 8007672:	d905      	bls.n	8007680 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007674:	2301      	movs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <xTaskRemoveFromEventList+0xc4>)
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e001      	b.n	8007684 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007684:	697b      	ldr	r3, [r7, #20]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000c88 	.word	0x20000c88
 8007694:	20000c68 	.word	0x20000c68
 8007698:	20000790 	.word	0x20000790
 800769c:	20000c20 	.word	0x20000c20
 80076a0:	2000078c 	.word	0x2000078c
 80076a4:	20000c74 	.word	0x20000c74

080076a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <vTaskInternalSetTimeOutState+0x24>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076b8:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <vTaskInternalSetTimeOutState+0x28>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	605a      	str	r2, [r3, #4]
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20000c78 	.word	0x20000c78
 80076d0:	20000c64 	.word	0x20000c64

080076d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	613b      	str	r3, [r7, #16]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60fb      	str	r3, [r7, #12]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007716:	f000 fe7d 	bl	8008414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800771a:	4b1d      	ldr	r3, [pc, #116]	; (8007790 <xTaskCheckForTimeOut+0xbc>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007732:	d102      	bne.n	800773a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	e023      	b.n	8007782 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <xTaskCheckForTimeOut+0xc0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d007      	beq.n	8007756 <xTaskCheckForTimeOut+0x82>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	429a      	cmp	r2, r3
 800774e:	d302      	bcc.n	8007756 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007750:	2301      	movs	r3, #1
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e015      	b.n	8007782 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	429a      	cmp	r2, r3
 800775e:	d20b      	bcs.n	8007778 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	1ad2      	subs	r2, r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ff9b 	bl	80076a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e004      	b.n	8007782 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800777e:	2301      	movs	r3, #1
 8007780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007782:	f000 fe77 	bl	8008474 <vPortExitCritical>

	return xReturn;
 8007786:	69fb      	ldr	r3, [r7, #28]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000c64 	.word	0x20000c64
 8007794:	20000c78 	.word	0x20000c78

08007798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800779c:	4b03      	ldr	r3, [pc, #12]	; (80077ac <vTaskMissedYield+0x14>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000c74 	.word	0x20000c74

080077b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077b8:	f000 f852 	bl	8007860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <prvIdleTask+0x28>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d9f9      	bls.n	80077b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <prvIdleTask+0x2c>)
 80077c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077d4:	e7f0      	b.n	80077b8 <prvIdleTask+0x8>
 80077d6:	bf00      	nop
 80077d8:	20000790 	.word	0x20000790
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077e6:	2300      	movs	r3, #0
 80077e8:	607b      	str	r3, [r7, #4]
 80077ea:	e00c      	b.n	8007806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4a12      	ldr	r2, [pc, #72]	; (8007840 <prvInitialiseTaskLists+0x60>)
 80077f8:	4413      	add	r3, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fbea 	bl	8005fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3301      	adds	r3, #1
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b37      	cmp	r3, #55	; 0x37
 800780a:	d9ef      	bls.n	80077ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800780c:	480d      	ldr	r0, [pc, #52]	; (8007844 <prvInitialiseTaskLists+0x64>)
 800780e:	f7fe fbe1 	bl	8005fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007812:	480d      	ldr	r0, [pc, #52]	; (8007848 <prvInitialiseTaskLists+0x68>)
 8007814:	f7fe fbde 	bl	8005fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007818:	480c      	ldr	r0, [pc, #48]	; (800784c <prvInitialiseTaskLists+0x6c>)
 800781a:	f7fe fbdb 	bl	8005fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800781e:	480c      	ldr	r0, [pc, #48]	; (8007850 <prvInitialiseTaskLists+0x70>)
 8007820:	f7fe fbd8 	bl	8005fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007824:	480b      	ldr	r0, [pc, #44]	; (8007854 <prvInitialiseTaskLists+0x74>)
 8007826:	f7fe fbd5 	bl	8005fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <prvInitialiseTaskLists+0x78>)
 800782c:	4a05      	ldr	r2, [pc, #20]	; (8007844 <prvInitialiseTaskLists+0x64>)
 800782e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007830:	4b0a      	ldr	r3, [pc, #40]	; (800785c <prvInitialiseTaskLists+0x7c>)
 8007832:	4a05      	ldr	r2, [pc, #20]	; (8007848 <prvInitialiseTaskLists+0x68>)
 8007834:	601a      	str	r2, [r3, #0]
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000790 	.word	0x20000790
 8007844:	20000bf0 	.word	0x20000bf0
 8007848:	20000c04 	.word	0x20000c04
 800784c:	20000c20 	.word	0x20000c20
 8007850:	20000c34 	.word	0x20000c34
 8007854:	20000c4c 	.word	0x20000c4c
 8007858:	20000c18 	.word	0x20000c18
 800785c:	20000c1c 	.word	0x20000c1c

08007860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007866:	e019      	b.n	800789c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007868:	f000 fdd4 	bl	8008414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <prvCheckTasksWaitingTermination+0x50>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fc35 	bl	80060e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800787e:	4b0d      	ldr	r3, [pc, #52]	; (80078b4 <prvCheckTasksWaitingTermination+0x54>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3b01      	subs	r3, #1
 8007884:	4a0b      	ldr	r2, [pc, #44]	; (80078b4 <prvCheckTasksWaitingTermination+0x54>)
 8007886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007888:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <prvCheckTasksWaitingTermination+0x58>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3b01      	subs	r3, #1
 800788e:	4a0a      	ldr	r2, [pc, #40]	; (80078b8 <prvCheckTasksWaitingTermination+0x58>)
 8007890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007892:	f000 fdef 	bl	8008474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f810 	bl	80078bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <prvCheckTasksWaitingTermination+0x58>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e1      	bne.n	8007868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000c34 	.word	0x20000c34
 80078b4:	20000c60 	.word	0x20000c60
 80078b8:	20000c48 	.word	0x20000c48

080078bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d108      	bne.n	80078e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 ff8c 	bl	80087f0 <vPortFree>
				vPortFree( pxTCB );
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 ff89 	bl	80087f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078de:	e018      	b.n	8007912 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d103      	bne.n	80078f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 ff80 	bl	80087f0 <vPortFree>
	}
 80078f0:	e00f      	b.n	8007912 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d00a      	beq.n	8007912 <prvDeleteTCB+0x56>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	60fb      	str	r3, [r7, #12]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <prvDeleteTCB+0x54>
	}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <prvResetNextTaskUnblockTime+0x38>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvResetNextTaskUnblockTime+0x3c>)
 800792e:	f04f 32ff 	mov.w	r2, #4294967295
 8007932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007934:	e008      	b.n	8007948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <prvResetNextTaskUnblockTime+0x38>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a04      	ldr	r2, [pc, #16]	; (8007958 <prvResetNextTaskUnblockTime+0x3c>)
 8007946:	6013      	str	r3, [r2, #0]
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	20000c18 	.word	0x20000c18
 8007958:	20000c80 	.word	0x20000c80

0800795c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007962:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <xTaskGetSchedulerState+0x34>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800796a:	2301      	movs	r3, #1
 800796c:	607b      	str	r3, [r7, #4]
 800796e:	e008      	b.n	8007982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <xTaskGetSchedulerState+0x38>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007978:	2302      	movs	r3, #2
 800797a:	607b      	str	r3, [r7, #4]
 800797c:	e001      	b.n	8007982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800797e:	2300      	movs	r3, #0
 8007980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007982:	687b      	ldr	r3, [r7, #4]
	}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	20000c6c 	.word	0x20000c6c
 8007994:	20000c88 	.word	0x20000c88

08007998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d056      	beq.n	8007a5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ae:	4b2e      	ldr	r3, [pc, #184]	; (8007a68 <xTaskPriorityDisinherit+0xd0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d00a      	beq.n	80079ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	60fb      	str	r3, [r7, #12]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60bb      	str	r3, [r7, #8]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f0:	1e5a      	subs	r2, r3, #1
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d02c      	beq.n	8007a5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d128      	bne.n	8007a5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fb6a 	bl	80060e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <xTaskPriorityDisinherit+0xd4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d903      	bls.n	8007a3c <xTaskPriorityDisinherit+0xa4>
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	4a0c      	ldr	r2, [pc, #48]	; (8007a6c <xTaskPriorityDisinherit+0xd4>)
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <xTaskPriorityDisinherit+0xd8>)
 8007a4a:	441a      	add	r2, r3
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f7fe faeb 	bl	800602e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a5c:	697b      	ldr	r3, [r7, #20]
	}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000078c 	.word	0x2000078c
 8007a6c:	20000c68 	.word	0x20000c68
 8007a70:	20000790 	.word	0x20000790

08007a74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a7e:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a84:	4b20      	ldr	r3, [pc, #128]	; (8007b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fb2c 	bl	80060e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d10a      	bne.n	8007aae <prvAddCurrentTaskToDelayedList+0x3a>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a9e:	4b1a      	ldr	r3, [pc, #104]	; (8007b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4819      	ldr	r0, [pc, #100]	; (8007b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8007aa8:	f7fe fac1 	bl	800602e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007aac:	e026      	b.n	8007afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d209      	bcs.n	8007ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac6:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f7fe facf 	bl	8006076 <vListInsert>
}
 8007ad8:	e010      	b.n	8007afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ada:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fac5 	bl	8006076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d202      	bcs.n	8007afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007af6:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	6013      	str	r3, [r2, #0]
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000c64 	.word	0x20000c64
 8007b08:	2000078c 	.word	0x2000078c
 8007b0c:	20000c4c 	.word	0x20000c4c
 8007b10:	20000c1c 	.word	0x20000c1c
 8007b14:	20000c18 	.word	0x20000c18
 8007b18:	20000c80 	.word	0x20000c80

08007b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b26:	f000 fb07 	bl	8008138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b2a:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <xTimerCreateTimerTask+0x80>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d021      	beq.n	8007b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b3a:	1d3a      	adds	r2, r7, #4
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fa2b 	bl	8005fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	9202      	str	r2, [sp, #8]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	2302      	movs	r3, #2
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	460a      	mov	r2, r1
 8007b5c:	4910      	ldr	r1, [pc, #64]	; (8007ba0 <xTimerCreateTimerTask+0x84>)
 8007b5e:	4811      	ldr	r0, [pc, #68]	; (8007ba4 <xTimerCreateTimerTask+0x88>)
 8007b60:	f7fe ffd8 	bl	8006b14 <xTaskCreateStatic>
 8007b64:	4603      	mov	r3, r0
 8007b66:	4a10      	ldr	r2, [pc, #64]	; (8007ba8 <xTimerCreateTimerTask+0x8c>)
 8007b68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <xTimerCreateTimerTask+0x8c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b72:	2301      	movs	r3, #1
 8007b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	613b      	str	r3, [r7, #16]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b92:	697b      	ldr	r3, [r7, #20]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000cbc 	.word	0x20000cbc
 8007ba0:	08009b68 	.word	0x08009b68
 8007ba4:	08007ce1 	.word	0x08007ce1
 8007ba8:	20000cc0 	.word	0x20000cc0

08007bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xTimerGenericCommand+0x2e>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	623b      	str	r3, [r7, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bda:	4b1a      	ldr	r3, [pc, #104]	; (8007c44 <xTimerGenericCommand+0x98>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02a      	beq.n	8007c38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b05      	cmp	r3, #5
 8007bf2:	dc18      	bgt.n	8007c26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bf4:	f7ff feb2 	bl	800795c <xTaskGetSchedulerState>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d109      	bne.n	8007c12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bfe:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <xTimerGenericCommand+0x98>)
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	f107 0110 	add.w	r1, r7, #16
 8007c06:	2300      	movs	r3, #0
 8007c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0a:	f7fe fb9b 	bl	8006344 <xQueueGenericSend>
 8007c0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c10:	e012      	b.n	8007c38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c12:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <xTimerGenericCommand+0x98>)
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f107 0110 	add.w	r1, r7, #16
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f7fe fb91 	bl	8006344 <xQueueGenericSend>
 8007c22:	6278      	str	r0, [r7, #36]	; 0x24
 8007c24:	e008      	b.n	8007c38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c26:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <xTimerGenericCommand+0x98>)
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	f107 0110 	add.w	r1, r7, #16
 8007c2e:	2300      	movs	r3, #0
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	f7fe fc85 	bl	8006540 <xQueueGenericSendFromISR>
 8007c36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3728      	adds	r7, #40	; 0x28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000cbc 	.word	0x20000cbc

08007c48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c52:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <prvProcessExpiredTimer+0x94>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fa41 	bl	80060e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d022      	beq.n	8007cba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	18d1      	adds	r1, r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	6978      	ldr	r0, [r7, #20]
 8007c82:	f000 f8d1 	bl	8007e28 <prvInsertTimerInActiveList>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01f      	beq.n	8007ccc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2300      	movs	r3, #0
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	2100      	movs	r1, #0
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff88 	bl	8007bac <xTimerGenericCommand>
 8007c9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d113      	bne.n	8007ccc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	60fb      	str	r3, [r7, #12]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	6978      	ldr	r0, [r7, #20]
 8007cd2:	4798      	blx	r3
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000cb4 	.word	0x20000cb4

08007ce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ce8:	f107 0308 	add.w	r3, r7, #8
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 f857 	bl	8007da0 <prvGetNextExpireTime>
 8007cf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f803 	bl	8007d04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cfe:	f000 f8d5 	bl	8007eac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d02:	e7f1      	b.n	8007ce8 <prvTimerTask+0x8>

08007d04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d0e:	f7ff fa43 	bl	8007198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d12:	f107 0308 	add.w	r3, r7, #8
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f866 	bl	8007de8 <prvSampleTimeNow>
 8007d1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d130      	bne.n	8007d86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <prvProcessTimerOrBlockTask+0x3c>
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d806      	bhi.n	8007d40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d32:	f7ff fa3f 	bl	80071b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ff85 	bl	8007c48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d3e:	e024      	b.n	8007d8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d46:	4b13      	ldr	r3, [pc, #76]	; (8007d94 <prvProcessTimerOrBlockTask+0x90>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <prvProcessTimerOrBlockTask+0x50>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <prvProcessTimerOrBlockTask+0x52>
 8007d54:	2300      	movs	r3, #0
 8007d56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <prvProcessTimerOrBlockTask+0x94>)
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	4619      	mov	r1, r3
 8007d66:	f7fe fea1 	bl	8006aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d6a:	f7ff fa23 	bl	80071b4 <xTaskResumeAll>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <prvProcessTimerOrBlockTask+0x98>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
}
 8007d84:	e001      	b.n	8007d8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d86:	f7ff fa15 	bl	80071b4 <xTaskResumeAll>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000cb8 	.word	0x20000cb8
 8007d98:	20000cbc 	.word	0x20000cbc
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <prvGetNextExpireTime+0x44>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <prvGetNextExpireTime+0x16>
 8007db2:	2201      	movs	r2, #1
 8007db4:	e000      	b.n	8007db8 <prvGetNextExpireTime+0x18>
 8007db6:	2200      	movs	r2, #0
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <prvGetNextExpireTime+0x44>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e001      	b.n	8007dd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000cb4 	.word	0x20000cb4

08007de8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007df0:	f7ff fa7e 	bl	80072f0 <xTaskGetTickCount>
 8007df4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007df6:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <prvSampleTimeNow+0x3c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d205      	bcs.n	8007e0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e00:	f000 f936 	bl	8008070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e002      	b.n	8007e12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e12:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <prvSampleTimeNow+0x3c>)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000cc4 	.word	0x20000cc4

08007e28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d812      	bhi.n	8007e74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	1ad2      	subs	r2, r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d302      	bcc.n	8007e62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	e01b      	b.n	8007e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e62:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <prvInsertTimerInActiveList+0x7c>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f7fe f902 	bl	8006076 <vListInsert>
 8007e72:	e012      	b.n	8007e9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d206      	bcs.n	8007e8a <prvInsertTimerInActiveList+0x62>
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d302      	bcc.n	8007e8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e007      	b.n	8007e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e8a:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <prvInsertTimerInActiveList+0x80>)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4619      	mov	r1, r3
 8007e94:	4610      	mov	r0, r2
 8007e96:	f7fe f8ee 	bl	8006076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e9a:	697b      	ldr	r3, [r7, #20]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000cb8 	.word	0x20000cb8
 8007ea8:	20000cb4 	.word	0x20000cb4

08007eac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	; 0x38
 8007eb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eb2:	e0ca      	b.n	800804a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da18      	bge.n	8007eec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	61fb      	str	r3, [r7, #28]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee2:	6850      	ldr	r0, [r2, #4]
 8007ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee6:	6892      	ldr	r2, [r2, #8]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f2c0 80aa 	blt.w	8008048 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe f8ef 	bl	80060e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff ff6b 	bl	8007de8 <prvSampleTimeNow>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	f200 8097 	bhi.w	800804a <prvProcessReceivedCommands+0x19e>
 8007f1c:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <prvProcessReceivedCommands+0x78>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007fc1 	.word	0x08007fc1
 8007f34:	08007fd5 	.word	0x08007fd5
 8007f38:	0800801f 	.word	0x0800801f
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f4d 	.word	0x08007f4d
 8007f44:	08007fc1 	.word	0x08007fc1
 8007f48:	08007fd5 	.word	0x08007fd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	18d1      	adds	r1, r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6c:	f7ff ff5c 	bl	8007e28 <prvInsertTimerInActiveList>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d069      	beq.n	800804a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d05e      	beq.n	800804a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	441a      	add	r2, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9e:	f7ff fe05 	bl	8007bac <xTimerGenericCommand>
 8007fa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d14f      	bne.n	800804a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	61bb      	str	r3, [r7, #24]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fc6:	f023 0301 	bic.w	r3, r3, #1
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007fd2:	e03a      	b.n	800804a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	617b      	str	r3, [r7, #20]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	699a      	ldr	r2, [r3, #24]
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	18d1      	adds	r1, r2, r3
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008018:	f7ff ff06 	bl	8007e28 <prvInsertTimerInActiveList>
					break;
 800801c:	e015      	b.n	800804a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d103      	bne.n	8008034 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800802c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800802e:	f000 fbdf 	bl	80087f0 <vPortFree>
 8008032:	e00a      	b.n	800804a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	b2da      	uxtb	r2, r3
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008046:	e000      	b.n	800804a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <prvProcessReceivedCommands+0x1c0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1d39      	adds	r1, r7, #4
 8008050:	2200      	movs	r2, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fb10 	bl	8006678 <xQueueReceive>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	f47f af2a 	bne.w	8007eb4 <prvProcessReceivedCommands+0x8>
	}
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	3730      	adds	r7, #48	; 0x30
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000cbc 	.word	0x20000cbc

08008070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008076:	e048      	b.n	800810a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008078:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <prvSwitchTimerLists+0xc0>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008082:	4b2b      	ldr	r3, [pc, #172]	; (8008130 <prvSwitchTimerLists+0xc0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe f829 	bl	80060e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d02e      	beq.n	800810a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4413      	add	r3, r2
 80080b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d90e      	bls.n	80080dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ca:	4b19      	ldr	r3, [pc, #100]	; (8008130 <prvSwitchTimerLists+0xc0>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7fd ffce 	bl	8006076 <vListInsert>
 80080da:	e016      	b.n	800810a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080dc:	2300      	movs	r3, #0
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fd60 	bl	8007bac <xTimerGenericCommand>
 80080ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	603b      	str	r3, [r7, #0]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <prvSwitchTimerLists+0xc0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1b1      	bne.n	8008078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008114:	4b06      	ldr	r3, [pc, #24]	; (8008130 <prvSwitchTimerLists+0xc0>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800811a:	4b06      	ldr	r3, [pc, #24]	; (8008134 <prvSwitchTimerLists+0xc4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a04      	ldr	r2, [pc, #16]	; (8008130 <prvSwitchTimerLists+0xc0>)
 8008120:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008122:	4a04      	ldr	r2, [pc, #16]	; (8008134 <prvSwitchTimerLists+0xc4>)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	6013      	str	r3, [r2, #0]
}
 8008128:	bf00      	nop
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000cb4 	.word	0x20000cb4
 8008134:	20000cb8 	.word	0x20000cb8

08008138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800813e:	f000 f969 	bl	8008414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <prvCheckForValidListAndQueue+0x60>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d120      	bne.n	800818c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800814a:	4814      	ldr	r0, [pc, #80]	; (800819c <prvCheckForValidListAndQueue+0x64>)
 800814c:	f7fd ff42 	bl	8005fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008150:	4813      	ldr	r0, [pc, #76]	; (80081a0 <prvCheckForValidListAndQueue+0x68>)
 8008152:	f7fd ff3f 	bl	8005fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <prvCheckForValidListAndQueue+0x6c>)
 8008158:	4a10      	ldr	r2, [pc, #64]	; (800819c <prvCheckForValidListAndQueue+0x64>)
 800815a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800815c:	4b12      	ldr	r3, [pc, #72]	; (80081a8 <prvCheckForValidListAndQueue+0x70>)
 800815e:	4a10      	ldr	r2, [pc, #64]	; (80081a0 <prvCheckForValidListAndQueue+0x68>)
 8008160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008162:	2300      	movs	r3, #0
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	4b11      	ldr	r3, [pc, #68]	; (80081ac <prvCheckForValidListAndQueue+0x74>)
 8008168:	4a11      	ldr	r2, [pc, #68]	; (80081b0 <prvCheckForValidListAndQueue+0x78>)
 800816a:	2110      	movs	r1, #16
 800816c:	200a      	movs	r0, #10
 800816e:	f7fe f84d 	bl	800620c <xQueueGenericCreateStatic>
 8008172:	4603      	mov	r3, r0
 8008174:	4a08      	ldr	r2, [pc, #32]	; (8008198 <prvCheckForValidListAndQueue+0x60>)
 8008176:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008178:	4b07      	ldr	r3, [pc, #28]	; (8008198 <prvCheckForValidListAndQueue+0x60>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008180:	4b05      	ldr	r3, [pc, #20]	; (8008198 <prvCheckForValidListAndQueue+0x60>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	490b      	ldr	r1, [pc, #44]	; (80081b4 <prvCheckForValidListAndQueue+0x7c>)
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fc66 	bl	8006a58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800818c:	f000 f972 	bl	8008474 <vPortExitCritical>
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000cbc 	.word	0x20000cbc
 800819c:	20000c8c 	.word	0x20000c8c
 80081a0:	20000ca0 	.word	0x20000ca0
 80081a4:	20000cb4 	.word	0x20000cb4
 80081a8:	20000cb8 	.word	0x20000cb8
 80081ac:	20000d68 	.word	0x20000d68
 80081b0:	20000cc8 	.word	0x20000cc8
 80081b4:	08009b70 	.word	0x08009b70

080081b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3b04      	subs	r3, #4
 80081c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3b04      	subs	r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f023 0201 	bic.w	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081e8:	4a0c      	ldr	r2, [pc, #48]	; (800821c <pxPortInitialiseStack+0x64>)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3b14      	subs	r3, #20
 80081f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3b04      	subs	r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f06f 0202 	mvn.w	r2, #2
 8008206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3b20      	subs	r3, #32
 800820c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	08008221 	.word	0x08008221

08008220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <prvTaskExitError+0x54>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d00a      	beq.n	800824a <prvTaskExitError+0x2a>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <prvTaskExitError+0x28>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	60bb      	str	r3, [r7, #8]
}
 800825c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800825e:	bf00      	nop
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0fc      	beq.n	8008260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	20000034 	.word	0x20000034
	...

08008280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <pxCurrentTCBConst2>)
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	f380 8809 	msr	PSP, r0
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8811 	msr	BASEPRI, r0
 800829a:	4770      	bx	lr
 800829c:	f3af 8000 	nop.w

080082a0 <pxCurrentTCBConst2>:
 80082a0:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082a8:	4808      	ldr	r0, [pc, #32]	; (80082cc <prvPortStartFirstTask+0x24>)
 80082aa:	6800      	ldr	r0, [r0, #0]
 80082ac:	6800      	ldr	r0, [r0, #0]
 80082ae:	f380 8808 	msr	MSP, r0
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8814 	msr	CONTROL, r0
 80082ba:	b662      	cpsie	i
 80082bc:	b661      	cpsie	f
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	df00      	svc	0
 80082c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ca:	bf00      	nop
 80082cc:	e000ed08 	.word	0xe000ed08

080082d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082d6:	4b46      	ldr	r3, [pc, #280]	; (80083f0 <xPortStartScheduler+0x120>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a46      	ldr	r2, [pc, #280]	; (80083f4 <xPortStartScheduler+0x124>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10a      	bne.n	80082f6 <xPortStartScheduler+0x26>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	613b      	str	r3, [r7, #16]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082f6:	4b3e      	ldr	r3, [pc, #248]	; (80083f0 <xPortStartScheduler+0x120>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <xPortStartScheduler+0x128>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10a      	bne.n	8008316 <xPortStartScheduler+0x46>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008316:	4b39      	ldr	r3, [pc, #228]	; (80083fc <xPortStartScheduler+0x12c>)
 8008318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	22ff      	movs	r2, #255	; 0xff
 8008326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008338:	b2da      	uxtb	r2, r3
 800833a:	4b31      	ldr	r3, [pc, #196]	; (8008400 <xPortStartScheduler+0x130>)
 800833c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800833e:	4b31      	ldr	r3, [pc, #196]	; (8008404 <xPortStartScheduler+0x134>)
 8008340:	2207      	movs	r2, #7
 8008342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008344:	e009      	b.n	800835a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008346:	4b2f      	ldr	r3, [pc, #188]	; (8008404 <xPortStartScheduler+0x134>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3b01      	subs	r3, #1
 800834c:	4a2d      	ldr	r2, [pc, #180]	; (8008404 <xPortStartScheduler+0x134>)
 800834e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	b2db      	uxtb	r3, r3
 8008358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	d0ef      	beq.n	8008346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008366:	4b27      	ldr	r3, [pc, #156]	; (8008404 <xPortStartScheduler+0x134>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f1c3 0307 	rsb	r3, r3, #7
 800836e:	2b04      	cmp	r3, #4
 8008370:	d00a      	beq.n	8008388 <xPortStartScheduler+0xb8>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	60bb      	str	r3, [r7, #8]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008388:	4b1e      	ldr	r3, [pc, #120]	; (8008404 <xPortStartScheduler+0x134>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	4a1d      	ldr	r2, [pc, #116]	; (8008404 <xPortStartScheduler+0x134>)
 8008390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008392:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <xPortStartScheduler+0x134>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800839a:	4a1a      	ldr	r2, [pc, #104]	; (8008404 <xPortStartScheduler+0x134>)
 800839c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083a6:	4b18      	ldr	r3, [pc, #96]	; (8008408 <xPortStartScheduler+0x138>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a17      	ldr	r2, [pc, #92]	; (8008408 <xPortStartScheduler+0x138>)
 80083ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <xPortStartScheduler+0x138>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a14      	ldr	r2, [pc, #80]	; (8008408 <xPortStartScheduler+0x138>)
 80083b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083be:	f000 f8dd 	bl	800857c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <xPortStartScheduler+0x13c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083c8:	f000 f8fc 	bl	80085c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083cc:	4b10      	ldr	r3, [pc, #64]	; (8008410 <xPortStartScheduler+0x140>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0f      	ldr	r2, [pc, #60]	; (8008410 <xPortStartScheduler+0x140>)
 80083d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083d8:	f7ff ff66 	bl	80082a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083dc:	f7ff f852 	bl	8007484 <vTaskSwitchContext>
	prvTaskExitError();
 80083e0:	f7ff ff1e 	bl	8008220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	e000ed00 	.word	0xe000ed00
 80083f4:	410fc271 	.word	0x410fc271
 80083f8:	410fc270 	.word	0x410fc270
 80083fc:	e000e400 	.word	0xe000e400
 8008400:	20000db8 	.word	0x20000db8
 8008404:	20000dbc 	.word	0x20000dbc
 8008408:	e000ed20 	.word	0xe000ed20
 800840c:	20000034 	.word	0x20000034
 8008410:	e000ef34 	.word	0xe000ef34

08008414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	607b      	str	r3, [r7, #4]
}
 800842c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <vPortEnterCritical+0x58>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3301      	adds	r3, #1
 8008434:	4a0d      	ldr	r2, [pc, #52]	; (800846c <vPortEnterCritical+0x58>)
 8008436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008438:	4b0c      	ldr	r3, [pc, #48]	; (800846c <vPortEnterCritical+0x58>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10f      	bne.n	8008460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <vPortEnterCritical+0x5c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <vPortEnterCritical+0x4c>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	603b      	str	r3, [r7, #0]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <vPortEnterCritical+0x4a>
	}
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000034 	.word	0x20000034
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <vPortExitCritical+0x50>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <vPortExitCritical+0x24>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	607b      	str	r3, [r7, #4]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <vPortExitCritical+0x50>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3b01      	subs	r3, #1
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <vPortExitCritical+0x50>)
 80084a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084a2:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <vPortExitCritical+0x50>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d105      	bne.n	80084b6 <vPortExitCritical+0x42>
 80084aa:	2300      	movs	r3, #0
 80084ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	f383 8811 	msr	BASEPRI, r3
}
 80084b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000034 	.word	0x20000034
	...

080084d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084d0:	f3ef 8009 	mrs	r0, PSP
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	4b15      	ldr	r3, [pc, #84]	; (8008530 <pxCurrentTCBConst>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	f01e 0f10 	tst.w	lr, #16
 80084e0:	bf08      	it	eq
 80084e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	6010      	str	r0, [r2, #0]
 80084ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084f4:	f380 8811 	msr	BASEPRI, r0
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f7fe ffc0 	bl	8007484 <vTaskSwitchContext>
 8008504:	f04f 0000 	mov.w	r0, #0
 8008508:	f380 8811 	msr	BASEPRI, r0
 800850c:	bc09      	pop	{r0, r3}
 800850e:	6819      	ldr	r1, [r3, #0]
 8008510:	6808      	ldr	r0, [r1, #0]
 8008512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008516:	f01e 0f10 	tst.w	lr, #16
 800851a:	bf08      	it	eq
 800851c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008520:	f380 8809 	msr	PSP, r0
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w

08008530 <pxCurrentTCBConst>:
 8008530:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop

08008538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008552:	f7fe fedd 	bl	8007310 <xTaskIncrementTick>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <xPortSysTickHandler+0x40>)
 800855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	2300      	movs	r3, #0
 8008566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f383 8811 	msr	BASEPRI, r3
}
 800856e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <vPortSetupTimerInterrupt+0x34>)
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008586:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <vPortSetupTimerInterrupt+0x38>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <vPortSetupTimerInterrupt+0x3c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <vPortSetupTimerInterrupt+0x40>)
 8008592:	fba2 2303 	umull	r2, r3, r2, r3
 8008596:	099b      	lsrs	r3, r3, #6
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <vPortSetupTimerInterrupt+0x44>)
 800859a:	3b01      	subs	r3, #1
 800859c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800859e:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <vPortSetupTimerInterrupt+0x34>)
 80085a0:	2207      	movs	r2, #7
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	e000e010 	.word	0xe000e010
 80085b4:	e000e018 	.word	0xe000e018
 80085b8:	20000028 	.word	0x20000028
 80085bc:	10624dd3 	.word	0x10624dd3
 80085c0:	e000e014 	.word	0xe000e014

080085c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085d4 <vPortEnableVFP+0x10>
 80085c8:	6801      	ldr	r1, [r0, #0]
 80085ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085ce:	6001      	str	r1, [r0, #0]
 80085d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085d2:	bf00      	nop
 80085d4:	e000ed88 	.word	0xe000ed88

080085d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085de:	f3ef 8305 	mrs	r3, IPSR
 80085e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b0f      	cmp	r3, #15
 80085e8:	d914      	bls.n	8008614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085ea:	4a17      	ldr	r2, [pc, #92]	; (8008648 <vPortValidateInterruptPriority+0x70>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085f4:	4b15      	ldr	r3, [pc, #84]	; (800864c <vPortValidateInterruptPriority+0x74>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	7afa      	ldrb	r2, [r7, #11]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d20a      	bcs.n	8008614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008614:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <vPortValidateInterruptPriority+0x78>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800861c:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <vPortValidateInterruptPriority+0x7c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d90a      	bls.n	800863a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	603b      	str	r3, [r7, #0]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <vPortValidateInterruptPriority+0x60>
	}
 800863a:	bf00      	nop
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	e000e3f0 	.word	0xe000e3f0
 800864c:	20000db8 	.word	0x20000db8
 8008650:	e000ed0c 	.word	0xe000ed0c
 8008654:	20000dbc 	.word	0x20000dbc

08008658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	; 0x28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008664:	f7fe fd98 	bl	8007198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008668:	4b5b      	ldr	r3, [pc, #364]	; (80087d8 <pvPortMalloc+0x180>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008670:	f000 f920 	bl	80088b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008674:	4b59      	ldr	r3, [pc, #356]	; (80087dc <pvPortMalloc+0x184>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	f040 8093 	bne.w	80087a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01d      	beq.n	80086c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008688:	2208      	movs	r2, #8
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	2b00      	cmp	r3, #0
 8008698:	d014      	beq.n	80086c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f023 0307 	bic.w	r3, r3, #7
 80086a0:	3308      	adds	r3, #8
 80086a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <pvPortMalloc+0x6c>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	617b      	str	r3, [r7, #20]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d06e      	beq.n	80087a8 <pvPortMalloc+0x150>
 80086ca:	4b45      	ldr	r3, [pc, #276]	; (80087e0 <pvPortMalloc+0x188>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d869      	bhi.n	80087a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086d4:	4b43      	ldr	r3, [pc, #268]	; (80087e4 <pvPortMalloc+0x18c>)
 80086d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086d8:	4b42      	ldr	r3, [pc, #264]	; (80087e4 <pvPortMalloc+0x18c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086de:	e004      	b.n	80086ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d903      	bls.n	80086fc <pvPortMalloc+0xa4>
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f1      	bne.n	80086e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086fc:	4b36      	ldr	r3, [pc, #216]	; (80087d8 <pvPortMalloc+0x180>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008702:	429a      	cmp	r2, r3
 8008704:	d050      	beq.n	80087a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2208      	movs	r2, #8
 800870c:	4413      	add	r3, r2
 800870e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	2308      	movs	r3, #8
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	429a      	cmp	r2, r3
 8008726:	d91f      	bls.n	8008768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <pvPortMalloc+0xf8>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	613b      	str	r3, [r7, #16]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	1ad2      	subs	r2, r2, r3
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008762:	69b8      	ldr	r0, [r7, #24]
 8008764:	f000 f908 	bl	8008978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008768:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <pvPortMalloc+0x188>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	4a1b      	ldr	r2, [pc, #108]	; (80087e0 <pvPortMalloc+0x188>)
 8008774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008776:	4b1a      	ldr	r3, [pc, #104]	; (80087e0 <pvPortMalloc+0x188>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <pvPortMalloc+0x190>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d203      	bcs.n	800878a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008782:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <pvPortMalloc+0x188>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <pvPortMalloc+0x190>)
 8008788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <pvPortMalloc+0x184>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	431a      	orrs	r2, r3
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800879e:	4b13      	ldr	r3, [pc, #76]	; (80087ec <pvPortMalloc+0x194>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	4a11      	ldr	r2, [pc, #68]	; (80087ec <pvPortMalloc+0x194>)
 80087a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087a8:	f7fe fd04 	bl	80071b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <pvPortMalloc+0x174>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60fb      	str	r3, [r7, #12]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <pvPortMalloc+0x172>
	return pvReturn;
 80087cc:	69fb      	ldr	r3, [r7, #28]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3728      	adds	r7, #40	; 0x28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200041f8 	.word	0x200041f8
 80087dc:	2000420c 	.word	0x2000420c
 80087e0:	200041fc 	.word	0x200041fc
 80087e4:	200041f0 	.word	0x200041f0
 80087e8:	20004200 	.word	0x20004200
 80087ec:	20004204 	.word	0x20004204

080087f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d04d      	beq.n	800889e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008802:	2308      	movs	r3, #8
 8008804:	425b      	negs	r3, r3
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4413      	add	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <vPortFree+0xb8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4013      	ands	r3, r2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <vPortFree+0x44>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60fb      	str	r3, [r7, #12]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <vPortFree+0x62>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60bb      	str	r3, [r7, #8]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <vPortFree+0xb8>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01e      	beq.n	800889e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d11a      	bne.n	800889e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <vPortFree+0xb8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	43db      	mvns	r3, r3
 8008872:	401a      	ands	r2, r3
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008878:	f7fe fc8e 	bl	8007198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <vPortFree+0xbc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4413      	add	r3, r2
 8008886:	4a09      	ldr	r2, [pc, #36]	; (80088ac <vPortFree+0xbc>)
 8008888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800888a:	6938      	ldr	r0, [r7, #16]
 800888c:	f000 f874 	bl	8008978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <vPortFree+0xc0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	4a06      	ldr	r2, [pc, #24]	; (80088b0 <vPortFree+0xc0>)
 8008898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800889a:	f7fe fc8b 	bl	80071b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800889e:	bf00      	nop
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	2000420c 	.word	0x2000420c
 80088ac:	200041fc 	.word	0x200041fc
 80088b0:	20004208 	.word	0x20004208

080088b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088ba:	f243 4330 	movw	r3, #13360	; 0x3430
 80088be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088c0:	4b27      	ldr	r3, [pc, #156]	; (8008960 <prvHeapInit+0xac>)
 80088c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3307      	adds	r3, #7
 80088d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0307 	bic.w	r3, r3, #7
 80088da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	4a1f      	ldr	r2, [pc, #124]	; (8008960 <prvHeapInit+0xac>)
 80088e4:	4413      	add	r3, r2
 80088e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088ec:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <prvHeapInit+0xb0>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088f2:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <prvHeapInit+0xb0>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	4413      	add	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008900:	2208      	movs	r2, #8
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0307 	bic.w	r3, r3, #7
 800890e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a15      	ldr	r2, [pc, #84]	; (8008968 <prvHeapInit+0xb4>)
 8008914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008916:	4b14      	ldr	r3, [pc, #80]	; (8008968 <prvHeapInit+0xb4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2200      	movs	r2, #0
 800891c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800891e:	4b12      	ldr	r3, [pc, #72]	; (8008968 <prvHeapInit+0xb4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008934:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvHeapInit+0xb4>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	4a0a      	ldr	r2, [pc, #40]	; (800896c <prvHeapInit+0xb8>)
 8008942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	4a09      	ldr	r2, [pc, #36]	; (8008970 <prvHeapInit+0xbc>)
 800894a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <prvHeapInit+0xc0>)
 800894e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008952:	601a      	str	r2, [r3, #0]
}
 8008954:	bf00      	nop
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20000dc0 	.word	0x20000dc0
 8008964:	200041f0 	.word	0x200041f0
 8008968:	200041f8 	.word	0x200041f8
 800896c:	20004200 	.word	0x20004200
 8008970:	200041fc 	.word	0x200041fc
 8008974:	2000420c 	.word	0x2000420c

08008978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008980:	4b28      	ldr	r3, [pc, #160]	; (8008a24 <prvInsertBlockIntoFreeList+0xac>)
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	e002      	b.n	800898c <prvInsertBlockIntoFreeList+0x14>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d8f7      	bhi.n	8008986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4413      	add	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d108      	bne.n	80089ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	441a      	add	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d118      	bne.n	8008a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <prvInsertBlockIntoFreeList+0xb0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d00d      	beq.n	80089f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	441a      	add	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	e008      	b.n	8008a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <prvInsertBlockIntoFreeList+0xb0>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	e003      	b.n	8008a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d002      	beq.n	8008a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	200041f0 	.word	0x200041f0
 8008a28:	200041f8 	.word	0x200041f8

08008a2c <__errno>:
 8008a2c:	4b01      	ldr	r3, [pc, #4]	; (8008a34 <__errno+0x8>)
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	20000038 	.word	0x20000038

08008a38 <__libc_init_array>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	4d0d      	ldr	r5, [pc, #52]	; (8008a70 <__libc_init_array+0x38>)
 8008a3c:	4c0d      	ldr	r4, [pc, #52]	; (8008a74 <__libc_init_array+0x3c>)
 8008a3e:	1b64      	subs	r4, r4, r5
 8008a40:	10a4      	asrs	r4, r4, #2
 8008a42:	2600      	movs	r6, #0
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	d109      	bne.n	8008a5c <__libc_init_array+0x24>
 8008a48:	4d0b      	ldr	r5, [pc, #44]	; (8008a78 <__libc_init_array+0x40>)
 8008a4a:	4c0c      	ldr	r4, [pc, #48]	; (8008a7c <__libc_init_array+0x44>)
 8008a4c:	f000 fffa 	bl	8009a44 <_init>
 8008a50:	1b64      	subs	r4, r4, r5
 8008a52:	10a4      	asrs	r4, r4, #2
 8008a54:	2600      	movs	r6, #0
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	d105      	bne.n	8008a66 <__libc_init_array+0x2e>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a60:	4798      	blx	r3
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7ee      	b.n	8008a44 <__libc_init_array+0xc>
 8008a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6a:	4798      	blx	r3
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	e7f2      	b.n	8008a56 <__libc_init_array+0x1e>
 8008a70:	08009c5c 	.word	0x08009c5c
 8008a74:	08009c5c 	.word	0x08009c5c
 8008a78:	08009c5c 	.word	0x08009c5c
 8008a7c:	08009c60 	.word	0x08009c60

08008a80 <memcpy>:
 8008a80:	440a      	add	r2, r1
 8008a82:	4291      	cmp	r1, r2
 8008a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a88:	d100      	bne.n	8008a8c <memcpy+0xc>
 8008a8a:	4770      	bx	lr
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a96:	4291      	cmp	r1, r2
 8008a98:	d1f9      	bne.n	8008a8e <memcpy+0xe>
 8008a9a:	bd10      	pop	{r4, pc}

08008a9c <memset>:
 8008a9c:	4402      	add	r2, r0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d100      	bne.n	8008aa6 <memset+0xa>
 8008aa4:	4770      	bx	lr
 8008aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aaa:	e7f9      	b.n	8008aa0 <memset+0x4>

08008aac <iprintf>:
 8008aac:	b40f      	push	{r0, r1, r2, r3}
 8008aae:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <iprintf+0x2c>)
 8008ab0:	b513      	push	{r0, r1, r4, lr}
 8008ab2:	681c      	ldr	r4, [r3, #0]
 8008ab4:	b124      	cbz	r4, 8008ac0 <iprintf+0x14>
 8008ab6:	69a3      	ldr	r3, [r4, #24]
 8008ab8:	b913      	cbnz	r3, 8008ac0 <iprintf+0x14>
 8008aba:	4620      	mov	r0, r4
 8008abc:	f000 fa5e 	bl	8008f7c <__sinit>
 8008ac0:	ab05      	add	r3, sp, #20
 8008ac2:	9a04      	ldr	r2, [sp, #16]
 8008ac4:	68a1      	ldr	r1, [r4, #8]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fc2f 	bl	800932c <_vfiprintf_r>
 8008ace:	b002      	add	sp, #8
 8008ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad4:	b004      	add	sp, #16
 8008ad6:	4770      	bx	lr
 8008ad8:	20000038 	.word	0x20000038

08008adc <_puts_r>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	460e      	mov	r6, r1
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	b118      	cbz	r0, 8008aec <_puts_r+0x10>
 8008ae4:	6983      	ldr	r3, [r0, #24]
 8008ae6:	b90b      	cbnz	r3, 8008aec <_puts_r+0x10>
 8008ae8:	f000 fa48 	bl	8008f7c <__sinit>
 8008aec:	69ab      	ldr	r3, [r5, #24]
 8008aee:	68ac      	ldr	r4, [r5, #8]
 8008af0:	b913      	cbnz	r3, 8008af8 <_puts_r+0x1c>
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 fa42 	bl	8008f7c <__sinit>
 8008af8:	4b2c      	ldr	r3, [pc, #176]	; (8008bac <_puts_r+0xd0>)
 8008afa:	429c      	cmp	r4, r3
 8008afc:	d120      	bne.n	8008b40 <_puts_r+0x64>
 8008afe:	686c      	ldr	r4, [r5, #4]
 8008b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b02:	07db      	lsls	r3, r3, #31
 8008b04:	d405      	bmi.n	8008b12 <_puts_r+0x36>
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	0598      	lsls	r0, r3, #22
 8008b0a:	d402      	bmi.n	8008b12 <_puts_r+0x36>
 8008b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0e:	f000 fad3 	bl	80090b8 <__retarget_lock_acquire_recursive>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	0719      	lsls	r1, r3, #28
 8008b16:	d51d      	bpl.n	8008b54 <_puts_r+0x78>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	b1db      	cbz	r3, 8008b54 <_puts_r+0x78>
 8008b1c:	3e01      	subs	r6, #1
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b24:	3b01      	subs	r3, #1
 8008b26:	60a3      	str	r3, [r4, #8]
 8008b28:	bb39      	cbnz	r1, 8008b7a <_puts_r+0x9e>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da38      	bge.n	8008ba0 <_puts_r+0xc4>
 8008b2e:	4622      	mov	r2, r4
 8008b30:	210a      	movs	r1, #10
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 f848 	bl	8008bc8 <__swbuf_r>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d011      	beq.n	8008b60 <_puts_r+0x84>
 8008b3c:	250a      	movs	r5, #10
 8008b3e:	e011      	b.n	8008b64 <_puts_r+0x88>
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <_puts_r+0xd4>)
 8008b42:	429c      	cmp	r4, r3
 8008b44:	d101      	bne.n	8008b4a <_puts_r+0x6e>
 8008b46:	68ac      	ldr	r4, [r5, #8]
 8008b48:	e7da      	b.n	8008b00 <_puts_r+0x24>
 8008b4a:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <_puts_r+0xd8>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	bf08      	it	eq
 8008b50:	68ec      	ldreq	r4, [r5, #12]
 8008b52:	e7d5      	b.n	8008b00 <_puts_r+0x24>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 f888 	bl	8008c6c <__swsetup_r>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d0dd      	beq.n	8008b1c <_puts_r+0x40>
 8008b60:	f04f 35ff 	mov.w	r5, #4294967295
 8008b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b66:	07da      	lsls	r2, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_puts_r+0x9a>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	059b      	lsls	r3, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_puts_r+0x9a>
 8008b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b72:	f000 faa2 	bl	80090ba <__retarget_lock_release_recursive>
 8008b76:	4628      	mov	r0, r5
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da04      	bge.n	8008b88 <_puts_r+0xac>
 8008b7e:	69a2      	ldr	r2, [r4, #24]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	dc06      	bgt.n	8008b92 <_puts_r+0xb6>
 8008b84:	290a      	cmp	r1, #10
 8008b86:	d004      	beq.n	8008b92 <_puts_r+0xb6>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	6022      	str	r2, [r4, #0]
 8008b8e:	7019      	strb	r1, [r3, #0]
 8008b90:	e7c5      	b.n	8008b1e <_puts_r+0x42>
 8008b92:	4622      	mov	r2, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f817 	bl	8008bc8 <__swbuf_r>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d1bf      	bne.n	8008b1e <_puts_r+0x42>
 8008b9e:	e7df      	b.n	8008b60 <_puts_r+0x84>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	250a      	movs	r5, #10
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	6022      	str	r2, [r4, #0]
 8008ba8:	701d      	strb	r5, [r3, #0]
 8008baa:	e7db      	b.n	8008b64 <_puts_r+0x88>
 8008bac:	08009be0 	.word	0x08009be0
 8008bb0:	08009c00 	.word	0x08009c00
 8008bb4:	08009bc0 	.word	0x08009bc0

08008bb8 <puts>:
 8008bb8:	4b02      	ldr	r3, [pc, #8]	; (8008bc4 <puts+0xc>)
 8008bba:	4601      	mov	r1, r0
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	f7ff bf8d 	b.w	8008adc <_puts_r>
 8008bc2:	bf00      	nop
 8008bc4:	20000038 	.word	0x20000038

08008bc8 <__swbuf_r>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	460e      	mov	r6, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	4605      	mov	r5, r0
 8008bd0:	b118      	cbz	r0, 8008bda <__swbuf_r+0x12>
 8008bd2:	6983      	ldr	r3, [r0, #24]
 8008bd4:	b90b      	cbnz	r3, 8008bda <__swbuf_r+0x12>
 8008bd6:	f000 f9d1 	bl	8008f7c <__sinit>
 8008bda:	4b21      	ldr	r3, [pc, #132]	; (8008c60 <__swbuf_r+0x98>)
 8008bdc:	429c      	cmp	r4, r3
 8008bde:	d12b      	bne.n	8008c38 <__swbuf_r+0x70>
 8008be0:	686c      	ldr	r4, [r5, #4]
 8008be2:	69a3      	ldr	r3, [r4, #24]
 8008be4:	60a3      	str	r3, [r4, #8]
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	071a      	lsls	r2, r3, #28
 8008bea:	d52f      	bpl.n	8008c4c <__swbuf_r+0x84>
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	b36b      	cbz	r3, 8008c4c <__swbuf_r+0x84>
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	6820      	ldr	r0, [r4, #0]
 8008bf4:	1ac0      	subs	r0, r0, r3
 8008bf6:	6963      	ldr	r3, [r4, #20]
 8008bf8:	b2f6      	uxtb	r6, r6
 8008bfa:	4283      	cmp	r3, r0
 8008bfc:	4637      	mov	r7, r6
 8008bfe:	dc04      	bgt.n	8008c0a <__swbuf_r+0x42>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 f926 	bl	8008e54 <_fflush_r>
 8008c08:	bb30      	cbnz	r0, 8008c58 <__swbuf_r+0x90>
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	60a3      	str	r3, [r4, #8]
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	6022      	str	r2, [r4, #0]
 8008c16:	701e      	strb	r6, [r3, #0]
 8008c18:	6963      	ldr	r3, [r4, #20]
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	4283      	cmp	r3, r0
 8008c1e:	d004      	beq.n	8008c2a <__swbuf_r+0x62>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	07db      	lsls	r3, r3, #31
 8008c24:	d506      	bpl.n	8008c34 <__swbuf_r+0x6c>
 8008c26:	2e0a      	cmp	r6, #10
 8008c28:	d104      	bne.n	8008c34 <__swbuf_r+0x6c>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 f911 	bl	8008e54 <_fflush_r>
 8008c32:	b988      	cbnz	r0, 8008c58 <__swbuf_r+0x90>
 8008c34:	4638      	mov	r0, r7
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <__swbuf_r+0x9c>)
 8008c3a:	429c      	cmp	r4, r3
 8008c3c:	d101      	bne.n	8008c42 <__swbuf_r+0x7a>
 8008c3e:	68ac      	ldr	r4, [r5, #8]
 8008c40:	e7cf      	b.n	8008be2 <__swbuf_r+0x1a>
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <__swbuf_r+0xa0>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	bf08      	it	eq
 8008c48:	68ec      	ldreq	r4, [r5, #12]
 8008c4a:	e7ca      	b.n	8008be2 <__swbuf_r+0x1a>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f80c 	bl	8008c6c <__swsetup_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0cb      	beq.n	8008bf0 <__swbuf_r+0x28>
 8008c58:	f04f 37ff 	mov.w	r7, #4294967295
 8008c5c:	e7ea      	b.n	8008c34 <__swbuf_r+0x6c>
 8008c5e:	bf00      	nop
 8008c60:	08009be0 	.word	0x08009be0
 8008c64:	08009c00 	.word	0x08009c00
 8008c68:	08009bc0 	.word	0x08009bc0

08008c6c <__swsetup_r>:
 8008c6c:	4b32      	ldr	r3, [pc, #200]	; (8008d38 <__swsetup_r+0xcc>)
 8008c6e:	b570      	push	{r4, r5, r6, lr}
 8008c70:	681d      	ldr	r5, [r3, #0]
 8008c72:	4606      	mov	r6, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	b125      	cbz	r5, 8008c82 <__swsetup_r+0x16>
 8008c78:	69ab      	ldr	r3, [r5, #24]
 8008c7a:	b913      	cbnz	r3, 8008c82 <__swsetup_r+0x16>
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 f97d 	bl	8008f7c <__sinit>
 8008c82:	4b2e      	ldr	r3, [pc, #184]	; (8008d3c <__swsetup_r+0xd0>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	d10f      	bne.n	8008ca8 <__swsetup_r+0x3c>
 8008c88:	686c      	ldr	r4, [r5, #4]
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c90:	0719      	lsls	r1, r3, #28
 8008c92:	d42c      	bmi.n	8008cee <__swsetup_r+0x82>
 8008c94:	06dd      	lsls	r5, r3, #27
 8008c96:	d411      	bmi.n	8008cbc <__swsetup_r+0x50>
 8008c98:	2309      	movs	r3, #9
 8008c9a:	6033      	str	r3, [r6, #0]
 8008c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca6:	e03e      	b.n	8008d26 <__swsetup_r+0xba>
 8008ca8:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <__swsetup_r+0xd4>)
 8008caa:	429c      	cmp	r4, r3
 8008cac:	d101      	bne.n	8008cb2 <__swsetup_r+0x46>
 8008cae:	68ac      	ldr	r4, [r5, #8]
 8008cb0:	e7eb      	b.n	8008c8a <__swsetup_r+0x1e>
 8008cb2:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <__swsetup_r+0xd8>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	bf08      	it	eq
 8008cb8:	68ec      	ldreq	r4, [r5, #12]
 8008cba:	e7e6      	b.n	8008c8a <__swsetup_r+0x1e>
 8008cbc:	0758      	lsls	r0, r3, #29
 8008cbe:	d512      	bpl.n	8008ce6 <__swsetup_r+0x7a>
 8008cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc2:	b141      	cbz	r1, 8008cd6 <__swsetup_r+0x6a>
 8008cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc8:	4299      	cmp	r1, r3
 8008cca:	d002      	beq.n	8008cd2 <__swsetup_r+0x66>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 fa59 	bl	8009184 <_free_r>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f043 0308 	orr.w	r3, r3, #8
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	b94b      	cbnz	r3, 8008d06 <__swsetup_r+0x9a>
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cfc:	d003      	beq.n	8008d06 <__swsetup_r+0x9a>
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4630      	mov	r0, r6
 8008d02:	f000 f9ff 	bl	8009104 <__smakebuf_r>
 8008d06:	89a0      	ldrh	r0, [r4, #12]
 8008d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d0c:	f010 0301 	ands.w	r3, r0, #1
 8008d10:	d00a      	beq.n	8008d28 <__swsetup_r+0xbc>
 8008d12:	2300      	movs	r3, #0
 8008d14:	60a3      	str	r3, [r4, #8]
 8008d16:	6963      	ldr	r3, [r4, #20]
 8008d18:	425b      	negs	r3, r3
 8008d1a:	61a3      	str	r3, [r4, #24]
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	b943      	cbnz	r3, 8008d32 <__swsetup_r+0xc6>
 8008d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d24:	d1ba      	bne.n	8008c9c <__swsetup_r+0x30>
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	0781      	lsls	r1, r0, #30
 8008d2a:	bf58      	it	pl
 8008d2c:	6963      	ldrpl	r3, [r4, #20]
 8008d2e:	60a3      	str	r3, [r4, #8]
 8008d30:	e7f4      	b.n	8008d1c <__swsetup_r+0xb0>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e7f7      	b.n	8008d26 <__swsetup_r+0xba>
 8008d36:	bf00      	nop
 8008d38:	20000038 	.word	0x20000038
 8008d3c:	08009be0 	.word	0x08009be0
 8008d40:	08009c00 	.word	0x08009c00
 8008d44:	08009bc0 	.word	0x08009bc0

08008d48 <__sflush_r>:
 8008d48:	898a      	ldrh	r2, [r1, #12]
 8008d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4e:	4605      	mov	r5, r0
 8008d50:	0710      	lsls	r0, r2, #28
 8008d52:	460c      	mov	r4, r1
 8008d54:	d458      	bmi.n	8008e08 <__sflush_r+0xc0>
 8008d56:	684b      	ldr	r3, [r1, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dc05      	bgt.n	8008d68 <__sflush_r+0x20>
 8008d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	dc02      	bgt.n	8008d68 <__sflush_r+0x20>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d6a:	2e00      	cmp	r6, #0
 8008d6c:	d0f9      	beq.n	8008d62 <__sflush_r+0x1a>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d74:	682f      	ldr	r7, [r5, #0]
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	d032      	beq.n	8008de0 <__sflush_r+0x98>
 8008d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	075a      	lsls	r2, r3, #29
 8008d80:	d505      	bpl.n	8008d8e <__sflush_r+0x46>
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	1ac0      	subs	r0, r0, r3
 8008d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d88:	b10b      	cbz	r3, 8008d8e <__sflush_r+0x46>
 8008d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d8c:	1ac0      	subs	r0, r0, r3
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4602      	mov	r2, r0
 8008d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d94:	6a21      	ldr	r1, [r4, #32]
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b0      	blx	r6
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	d106      	bne.n	8008dae <__sflush_r+0x66>
 8008da0:	6829      	ldr	r1, [r5, #0]
 8008da2:	291d      	cmp	r1, #29
 8008da4:	d82c      	bhi.n	8008e00 <__sflush_r+0xb8>
 8008da6:	4a2a      	ldr	r2, [pc, #168]	; (8008e50 <__sflush_r+0x108>)
 8008da8:	40ca      	lsrs	r2, r1
 8008daa:	07d6      	lsls	r6, r2, #31
 8008dac:	d528      	bpl.n	8008e00 <__sflush_r+0xb8>
 8008dae:	2200      	movs	r2, #0
 8008db0:	6062      	str	r2, [r4, #4]
 8008db2:	04d9      	lsls	r1, r3, #19
 8008db4:	6922      	ldr	r2, [r4, #16]
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	d504      	bpl.n	8008dc4 <__sflush_r+0x7c>
 8008dba:	1c42      	adds	r2, r0, #1
 8008dbc:	d101      	bne.n	8008dc2 <__sflush_r+0x7a>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	b903      	cbnz	r3, 8008dc4 <__sflush_r+0x7c>
 8008dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8008dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dc6:	602f      	str	r7, [r5, #0]
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	d0ca      	beq.n	8008d62 <__sflush_r+0x1a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__sflush_r+0x92>
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 f9d5 	bl	8009184 <_free_r>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8008dde:	e7c1      	b.n	8008d64 <__sflush_r+0x1c>
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	2301      	movs	r3, #1
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b0      	blx	r6
 8008de8:	1c41      	adds	r1, r0, #1
 8008dea:	d1c7      	bne.n	8008d7c <__sflush_r+0x34>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0c4      	beq.n	8008d7c <__sflush_r+0x34>
 8008df2:	2b1d      	cmp	r3, #29
 8008df4:	d001      	beq.n	8008dfa <__sflush_r+0xb2>
 8008df6:	2b16      	cmp	r3, #22
 8008df8:	d101      	bne.n	8008dfe <__sflush_r+0xb6>
 8008dfa:	602f      	str	r7, [r5, #0]
 8008dfc:	e7b1      	b.n	8008d62 <__sflush_r+0x1a>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	e7ad      	b.n	8008d64 <__sflush_r+0x1c>
 8008e08:	690f      	ldr	r7, [r1, #16]
 8008e0a:	2f00      	cmp	r7, #0
 8008e0c:	d0a9      	beq.n	8008d62 <__sflush_r+0x1a>
 8008e0e:	0793      	lsls	r3, r2, #30
 8008e10:	680e      	ldr	r6, [r1, #0]
 8008e12:	bf08      	it	eq
 8008e14:	694b      	ldreq	r3, [r1, #20]
 8008e16:	600f      	str	r7, [r1, #0]
 8008e18:	bf18      	it	ne
 8008e1a:	2300      	movne	r3, #0
 8008e1c:	eba6 0807 	sub.w	r8, r6, r7
 8008e20:	608b      	str	r3, [r1, #8]
 8008e22:	f1b8 0f00 	cmp.w	r8, #0
 8008e26:	dd9c      	ble.n	8008d62 <__sflush_r+0x1a>
 8008e28:	6a21      	ldr	r1, [r4, #32]
 8008e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e2c:	4643      	mov	r3, r8
 8008e2e:	463a      	mov	r2, r7
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b0      	blx	r6
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dc06      	bgt.n	8008e46 <__sflush_r+0xfe>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295
 8008e44:	e78e      	b.n	8008d64 <__sflush_r+0x1c>
 8008e46:	4407      	add	r7, r0
 8008e48:	eba8 0800 	sub.w	r8, r8, r0
 8008e4c:	e7e9      	b.n	8008e22 <__sflush_r+0xda>
 8008e4e:	bf00      	nop
 8008e50:	20400001 	.word	0x20400001

08008e54 <_fflush_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	690b      	ldr	r3, [r1, #16]
 8008e58:	4605      	mov	r5, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	b913      	cbnz	r3, 8008e64 <_fflush_r+0x10>
 8008e5e:	2500      	movs	r5, #0
 8008e60:	4628      	mov	r0, r5
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	b118      	cbz	r0, 8008e6e <_fflush_r+0x1a>
 8008e66:	6983      	ldr	r3, [r0, #24]
 8008e68:	b90b      	cbnz	r3, 8008e6e <_fflush_r+0x1a>
 8008e6a:	f000 f887 	bl	8008f7c <__sinit>
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <_fflush_r+0x6c>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	d11b      	bne.n	8008eac <_fflush_r+0x58>
 8008e74:	686c      	ldr	r4, [r5, #4]
 8008e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0ef      	beq.n	8008e5e <_fflush_r+0xa>
 8008e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e80:	07d0      	lsls	r0, r2, #31
 8008e82:	d404      	bmi.n	8008e8e <_fflush_r+0x3a>
 8008e84:	0599      	lsls	r1, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_fflush_r+0x3a>
 8008e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e8a:	f000 f915 	bl	80090b8 <__retarget_lock_acquire_recursive>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	4621      	mov	r1, r4
 8008e92:	f7ff ff59 	bl	8008d48 <__sflush_r>
 8008e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e98:	07da      	lsls	r2, r3, #31
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	d4e0      	bmi.n	8008e60 <_fflush_r+0xc>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	059b      	lsls	r3, r3, #22
 8008ea2:	d4dd      	bmi.n	8008e60 <_fflush_r+0xc>
 8008ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ea6:	f000 f908 	bl	80090ba <__retarget_lock_release_recursive>
 8008eaa:	e7d9      	b.n	8008e60 <_fflush_r+0xc>
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <_fflush_r+0x70>)
 8008eae:	429c      	cmp	r4, r3
 8008eb0:	d101      	bne.n	8008eb6 <_fflush_r+0x62>
 8008eb2:	68ac      	ldr	r4, [r5, #8]
 8008eb4:	e7df      	b.n	8008e76 <_fflush_r+0x22>
 8008eb6:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <_fflush_r+0x74>)
 8008eb8:	429c      	cmp	r4, r3
 8008eba:	bf08      	it	eq
 8008ebc:	68ec      	ldreq	r4, [r5, #12]
 8008ebe:	e7da      	b.n	8008e76 <_fflush_r+0x22>
 8008ec0:	08009be0 	.word	0x08009be0
 8008ec4:	08009c00 	.word	0x08009c00
 8008ec8:	08009bc0 	.word	0x08009bc0

08008ecc <std>:
 8008ecc:	2300      	movs	r3, #0
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eda:	6083      	str	r3, [r0, #8]
 8008edc:	8181      	strh	r1, [r0, #12]
 8008ede:	6643      	str	r3, [r0, #100]	; 0x64
 8008ee0:	81c2      	strh	r2, [r0, #14]
 8008ee2:	6183      	str	r3, [r0, #24]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	305c      	adds	r0, #92	; 0x5c
 8008eea:	f7ff fdd7 	bl	8008a9c <memset>
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <std+0x38>)
 8008ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ef2:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <std+0x3c>)
 8008ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <std+0x40>)
 8008ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <std+0x44>)
 8008efc:	6224      	str	r4, [r4, #32]
 8008efe:	6323      	str	r3, [r4, #48]	; 0x30
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	bf00      	nop
 8008f04:	080098d5 	.word	0x080098d5
 8008f08:	080098f7 	.word	0x080098f7
 8008f0c:	0800992f 	.word	0x0800992f
 8008f10:	08009953 	.word	0x08009953

08008f14 <_cleanup_r>:
 8008f14:	4901      	ldr	r1, [pc, #4]	; (8008f1c <_cleanup_r+0x8>)
 8008f16:	f000 b8af 	b.w	8009078 <_fwalk_reent>
 8008f1a:	bf00      	nop
 8008f1c:	08008e55 	.word	0x08008e55

08008f20 <__sfmoreglue>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	1e4a      	subs	r2, r1, #1
 8008f24:	2568      	movs	r5, #104	; 0x68
 8008f26:	4355      	muls	r5, r2
 8008f28:	460e      	mov	r6, r1
 8008f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f2e:	f000 f979 	bl	8009224 <_malloc_r>
 8008f32:	4604      	mov	r4, r0
 8008f34:	b140      	cbz	r0, 8008f48 <__sfmoreglue+0x28>
 8008f36:	2100      	movs	r1, #0
 8008f38:	e9c0 1600 	strd	r1, r6, [r0]
 8008f3c:	300c      	adds	r0, #12
 8008f3e:	60a0      	str	r0, [r4, #8]
 8008f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f44:	f7ff fdaa 	bl	8008a9c <memset>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}

08008f4c <__sfp_lock_acquire>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sfp_lock_acquire+0x8>)
 8008f4e:	f000 b8b3 	b.w	80090b8 <__retarget_lock_acquire_recursive>
 8008f52:	bf00      	nop
 8008f54:	200044e4 	.word	0x200044e4

08008f58 <__sfp_lock_release>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sfp_lock_release+0x8>)
 8008f5a:	f000 b8ae 	b.w	80090ba <__retarget_lock_release_recursive>
 8008f5e:	bf00      	nop
 8008f60:	200044e4 	.word	0x200044e4

08008f64 <__sinit_lock_acquire>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sinit_lock_acquire+0x8>)
 8008f66:	f000 b8a7 	b.w	80090b8 <__retarget_lock_acquire_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	200044df 	.word	0x200044df

08008f70 <__sinit_lock_release>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sinit_lock_release+0x8>)
 8008f72:	f000 b8a2 	b.w	80090ba <__retarget_lock_release_recursive>
 8008f76:	bf00      	nop
 8008f78:	200044df 	.word	0x200044df

08008f7c <__sinit>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	4604      	mov	r4, r0
 8008f80:	f7ff fff0 	bl	8008f64 <__sinit_lock_acquire>
 8008f84:	69a3      	ldr	r3, [r4, #24]
 8008f86:	b11b      	cbz	r3, 8008f90 <__sinit+0x14>
 8008f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f8c:	f7ff bff0 	b.w	8008f70 <__sinit_lock_release>
 8008f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f94:	6523      	str	r3, [r4, #80]	; 0x50
 8008f96:	4b13      	ldr	r3, [pc, #76]	; (8008fe4 <__sinit+0x68>)
 8008f98:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <__sinit+0x6c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f9e:	42a3      	cmp	r3, r4
 8008fa0:	bf04      	itt	eq
 8008fa2:	2301      	moveq	r3, #1
 8008fa4:	61a3      	streq	r3, [r4, #24]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 f820 	bl	8008fec <__sfp>
 8008fac:	6060      	str	r0, [r4, #4]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f81c 	bl	8008fec <__sfp>
 8008fb4:	60a0      	str	r0, [r4, #8]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f818 	bl	8008fec <__sfp>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	60e0      	str	r0, [r4, #12]
 8008fc0:	2104      	movs	r1, #4
 8008fc2:	6860      	ldr	r0, [r4, #4]
 8008fc4:	f7ff ff82 	bl	8008ecc <std>
 8008fc8:	68a0      	ldr	r0, [r4, #8]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	2109      	movs	r1, #9
 8008fce:	f7ff ff7d 	bl	8008ecc <std>
 8008fd2:	68e0      	ldr	r0, [r4, #12]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	2112      	movs	r1, #18
 8008fd8:	f7ff ff78 	bl	8008ecc <std>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	61a3      	str	r3, [r4, #24]
 8008fe0:	e7d2      	b.n	8008f88 <__sinit+0xc>
 8008fe2:	bf00      	nop
 8008fe4:	08009bbc 	.word	0x08009bbc
 8008fe8:	08008f15 	.word	0x08008f15

08008fec <__sfp>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	4607      	mov	r7, r0
 8008ff0:	f7ff ffac 	bl	8008f4c <__sfp_lock_acquire>
 8008ff4:	4b1e      	ldr	r3, [pc, #120]	; (8009070 <__sfp+0x84>)
 8008ff6:	681e      	ldr	r6, [r3, #0]
 8008ff8:	69b3      	ldr	r3, [r6, #24]
 8008ffa:	b913      	cbnz	r3, 8009002 <__sfp+0x16>
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff ffbd 	bl	8008f7c <__sinit>
 8009002:	3648      	adds	r6, #72	; 0x48
 8009004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009008:	3b01      	subs	r3, #1
 800900a:	d503      	bpl.n	8009014 <__sfp+0x28>
 800900c:	6833      	ldr	r3, [r6, #0]
 800900e:	b30b      	cbz	r3, 8009054 <__sfp+0x68>
 8009010:	6836      	ldr	r6, [r6, #0]
 8009012:	e7f7      	b.n	8009004 <__sfp+0x18>
 8009014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009018:	b9d5      	cbnz	r5, 8009050 <__sfp+0x64>
 800901a:	4b16      	ldr	r3, [pc, #88]	; (8009074 <__sfp+0x88>)
 800901c:	60e3      	str	r3, [r4, #12]
 800901e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009022:	6665      	str	r5, [r4, #100]	; 0x64
 8009024:	f000 f847 	bl	80090b6 <__retarget_lock_init_recursive>
 8009028:	f7ff ff96 	bl	8008f58 <__sfp_lock_release>
 800902c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009034:	6025      	str	r5, [r4, #0]
 8009036:	61a5      	str	r5, [r4, #24]
 8009038:	2208      	movs	r2, #8
 800903a:	4629      	mov	r1, r5
 800903c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009040:	f7ff fd2c 	bl	8008a9c <memset>
 8009044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800904c:	4620      	mov	r0, r4
 800904e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009050:	3468      	adds	r4, #104	; 0x68
 8009052:	e7d9      	b.n	8009008 <__sfp+0x1c>
 8009054:	2104      	movs	r1, #4
 8009056:	4638      	mov	r0, r7
 8009058:	f7ff ff62 	bl	8008f20 <__sfmoreglue>
 800905c:	4604      	mov	r4, r0
 800905e:	6030      	str	r0, [r6, #0]
 8009060:	2800      	cmp	r0, #0
 8009062:	d1d5      	bne.n	8009010 <__sfp+0x24>
 8009064:	f7ff ff78 	bl	8008f58 <__sfp_lock_release>
 8009068:	230c      	movs	r3, #12
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	e7ee      	b.n	800904c <__sfp+0x60>
 800906e:	bf00      	nop
 8009070:	08009bbc 	.word	0x08009bbc
 8009074:	ffff0001 	.word	0xffff0001

08009078 <_fwalk_reent>:
 8009078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800907c:	4606      	mov	r6, r0
 800907e:	4688      	mov	r8, r1
 8009080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009084:	2700      	movs	r7, #0
 8009086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800908a:	f1b9 0901 	subs.w	r9, r9, #1
 800908e:	d505      	bpl.n	800909c <_fwalk_reent+0x24>
 8009090:	6824      	ldr	r4, [r4, #0]
 8009092:	2c00      	cmp	r4, #0
 8009094:	d1f7      	bne.n	8009086 <_fwalk_reent+0xe>
 8009096:	4638      	mov	r0, r7
 8009098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909c:	89ab      	ldrh	r3, [r5, #12]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d907      	bls.n	80090b2 <_fwalk_reent+0x3a>
 80090a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090a6:	3301      	adds	r3, #1
 80090a8:	d003      	beq.n	80090b2 <_fwalk_reent+0x3a>
 80090aa:	4629      	mov	r1, r5
 80090ac:	4630      	mov	r0, r6
 80090ae:	47c0      	blx	r8
 80090b0:	4307      	orrs	r7, r0
 80090b2:	3568      	adds	r5, #104	; 0x68
 80090b4:	e7e9      	b.n	800908a <_fwalk_reent+0x12>

080090b6 <__retarget_lock_init_recursive>:
 80090b6:	4770      	bx	lr

080090b8 <__retarget_lock_acquire_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_release_recursive>:
 80090ba:	4770      	bx	lr

080090bc <__swhatbuf_r>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	460e      	mov	r6, r1
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	2900      	cmp	r1, #0
 80090c6:	b096      	sub	sp, #88	; 0x58
 80090c8:	4614      	mov	r4, r2
 80090ca:	461d      	mov	r5, r3
 80090cc:	da07      	bge.n	80090de <__swhatbuf_r+0x22>
 80090ce:	2300      	movs	r3, #0
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	89b3      	ldrh	r3, [r6, #12]
 80090d4:	061a      	lsls	r2, r3, #24
 80090d6:	d410      	bmi.n	80090fa <__swhatbuf_r+0x3e>
 80090d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090dc:	e00e      	b.n	80090fc <__swhatbuf_r+0x40>
 80090de:	466a      	mov	r2, sp
 80090e0:	f000 fc5e 	bl	80099a0 <_fstat_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	dbf2      	blt.n	80090ce <__swhatbuf_r+0x12>
 80090e8:	9a01      	ldr	r2, [sp, #4]
 80090ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090f2:	425a      	negs	r2, r3
 80090f4:	415a      	adcs	r2, r3
 80090f6:	602a      	str	r2, [r5, #0]
 80090f8:	e7ee      	b.n	80090d8 <__swhatbuf_r+0x1c>
 80090fa:	2340      	movs	r3, #64	; 0x40
 80090fc:	2000      	movs	r0, #0
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	b016      	add	sp, #88	; 0x58
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <__smakebuf_r>:
 8009104:	898b      	ldrh	r3, [r1, #12]
 8009106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009108:	079d      	lsls	r5, r3, #30
 800910a:	4606      	mov	r6, r0
 800910c:	460c      	mov	r4, r1
 800910e:	d507      	bpl.n	8009120 <__smakebuf_r+0x1c>
 8009110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	2301      	movs	r3, #1
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	b002      	add	sp, #8
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	ab01      	add	r3, sp, #4
 8009122:	466a      	mov	r2, sp
 8009124:	f7ff ffca 	bl	80090bc <__swhatbuf_r>
 8009128:	9900      	ldr	r1, [sp, #0]
 800912a:	4605      	mov	r5, r0
 800912c:	4630      	mov	r0, r6
 800912e:	f000 f879 	bl	8009224 <_malloc_r>
 8009132:	b948      	cbnz	r0, 8009148 <__smakebuf_r+0x44>
 8009134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009138:	059a      	lsls	r2, r3, #22
 800913a:	d4ef      	bmi.n	800911c <__smakebuf_r+0x18>
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	f043 0302 	orr.w	r3, r3, #2
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	e7e3      	b.n	8009110 <__smakebuf_r+0xc>
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <__smakebuf_r+0x7c>)
 800914a:	62b3      	str	r3, [r6, #40]	; 0x28
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	6020      	str	r0, [r4, #0]
 8009150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	9b00      	ldr	r3, [sp, #0]
 8009158:	6163      	str	r3, [r4, #20]
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	6120      	str	r0, [r4, #16]
 800915e:	b15b      	cbz	r3, 8009178 <__smakebuf_r+0x74>
 8009160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009164:	4630      	mov	r0, r6
 8009166:	f000 fc2d 	bl	80099c4 <_isatty_r>
 800916a:	b128      	cbz	r0, 8009178 <__smakebuf_r+0x74>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	89a0      	ldrh	r0, [r4, #12]
 800917a:	4305      	orrs	r5, r0
 800917c:	81a5      	strh	r5, [r4, #12]
 800917e:	e7cd      	b.n	800911c <__smakebuf_r+0x18>
 8009180:	08008f15 	.word	0x08008f15

08009184 <_free_r>:
 8009184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009186:	2900      	cmp	r1, #0
 8009188:	d048      	beq.n	800921c <_free_r+0x98>
 800918a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800918e:	9001      	str	r0, [sp, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	f1a1 0404 	sub.w	r4, r1, #4
 8009196:	bfb8      	it	lt
 8009198:	18e4      	addlt	r4, r4, r3
 800919a:	f000 fc35 	bl	8009a08 <__malloc_lock>
 800919e:	4a20      	ldr	r2, [pc, #128]	; (8009220 <_free_r+0x9c>)
 80091a0:	9801      	ldr	r0, [sp, #4]
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	4615      	mov	r5, r2
 80091a6:	b933      	cbnz	r3, 80091b6 <_free_r+0x32>
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	6014      	str	r4, [r2, #0]
 80091ac:	b003      	add	sp, #12
 80091ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091b2:	f000 bc2f 	b.w	8009a14 <__malloc_unlock>
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	d90b      	bls.n	80091d2 <_free_r+0x4e>
 80091ba:	6821      	ldr	r1, [r4, #0]
 80091bc:	1862      	adds	r2, r4, r1
 80091be:	4293      	cmp	r3, r2
 80091c0:	bf04      	itt	eq
 80091c2:	681a      	ldreq	r2, [r3, #0]
 80091c4:	685b      	ldreq	r3, [r3, #4]
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	bf04      	itt	eq
 80091ca:	1852      	addeq	r2, r2, r1
 80091cc:	6022      	streq	r2, [r4, #0]
 80091ce:	602c      	str	r4, [r5, #0]
 80091d0:	e7ec      	b.n	80091ac <_free_r+0x28>
 80091d2:	461a      	mov	r2, r3
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	b10b      	cbz	r3, 80091dc <_free_r+0x58>
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d9fa      	bls.n	80091d2 <_free_r+0x4e>
 80091dc:	6811      	ldr	r1, [r2, #0]
 80091de:	1855      	adds	r5, r2, r1
 80091e0:	42a5      	cmp	r5, r4
 80091e2:	d10b      	bne.n	80091fc <_free_r+0x78>
 80091e4:	6824      	ldr	r4, [r4, #0]
 80091e6:	4421      	add	r1, r4
 80091e8:	1854      	adds	r4, r2, r1
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	6011      	str	r1, [r2, #0]
 80091ee:	d1dd      	bne.n	80091ac <_free_r+0x28>
 80091f0:	681c      	ldr	r4, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	6053      	str	r3, [r2, #4]
 80091f6:	4421      	add	r1, r4
 80091f8:	6011      	str	r1, [r2, #0]
 80091fa:	e7d7      	b.n	80091ac <_free_r+0x28>
 80091fc:	d902      	bls.n	8009204 <_free_r+0x80>
 80091fe:	230c      	movs	r3, #12
 8009200:	6003      	str	r3, [r0, #0]
 8009202:	e7d3      	b.n	80091ac <_free_r+0x28>
 8009204:	6825      	ldr	r5, [r4, #0]
 8009206:	1961      	adds	r1, r4, r5
 8009208:	428b      	cmp	r3, r1
 800920a:	bf04      	itt	eq
 800920c:	6819      	ldreq	r1, [r3, #0]
 800920e:	685b      	ldreq	r3, [r3, #4]
 8009210:	6063      	str	r3, [r4, #4]
 8009212:	bf04      	itt	eq
 8009214:	1949      	addeq	r1, r1, r5
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	6054      	str	r4, [r2, #4]
 800921a:	e7c7      	b.n	80091ac <_free_r+0x28>
 800921c:	b003      	add	sp, #12
 800921e:	bd30      	pop	{r4, r5, pc}
 8009220:	20004210 	.word	0x20004210

08009224 <_malloc_r>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	1ccd      	adds	r5, r1, #3
 8009228:	f025 0503 	bic.w	r5, r5, #3
 800922c:	3508      	adds	r5, #8
 800922e:	2d0c      	cmp	r5, #12
 8009230:	bf38      	it	cc
 8009232:	250c      	movcc	r5, #12
 8009234:	2d00      	cmp	r5, #0
 8009236:	4606      	mov	r6, r0
 8009238:	db01      	blt.n	800923e <_malloc_r+0x1a>
 800923a:	42a9      	cmp	r1, r5
 800923c:	d903      	bls.n	8009246 <_malloc_r+0x22>
 800923e:	230c      	movs	r3, #12
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	2000      	movs	r0, #0
 8009244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009246:	f000 fbdf 	bl	8009a08 <__malloc_lock>
 800924a:	4921      	ldr	r1, [pc, #132]	; (80092d0 <_malloc_r+0xac>)
 800924c:	680a      	ldr	r2, [r1, #0]
 800924e:	4614      	mov	r4, r2
 8009250:	b99c      	cbnz	r4, 800927a <_malloc_r+0x56>
 8009252:	4f20      	ldr	r7, [pc, #128]	; (80092d4 <_malloc_r+0xb0>)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	b923      	cbnz	r3, 8009262 <_malloc_r+0x3e>
 8009258:	4621      	mov	r1, r4
 800925a:	4630      	mov	r0, r6
 800925c:	f000 fb2a 	bl	80098b4 <_sbrk_r>
 8009260:	6038      	str	r0, [r7, #0]
 8009262:	4629      	mov	r1, r5
 8009264:	4630      	mov	r0, r6
 8009266:	f000 fb25 	bl	80098b4 <_sbrk_r>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d123      	bne.n	80092b6 <_malloc_r+0x92>
 800926e:	230c      	movs	r3, #12
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	4630      	mov	r0, r6
 8009274:	f000 fbce 	bl	8009a14 <__malloc_unlock>
 8009278:	e7e3      	b.n	8009242 <_malloc_r+0x1e>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	1b5b      	subs	r3, r3, r5
 800927e:	d417      	bmi.n	80092b0 <_malloc_r+0x8c>
 8009280:	2b0b      	cmp	r3, #11
 8009282:	d903      	bls.n	800928c <_malloc_r+0x68>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	441c      	add	r4, r3
 8009288:	6025      	str	r5, [r4, #0]
 800928a:	e004      	b.n	8009296 <_malloc_r+0x72>
 800928c:	6863      	ldr	r3, [r4, #4]
 800928e:	42a2      	cmp	r2, r4
 8009290:	bf0c      	ite	eq
 8009292:	600b      	streq	r3, [r1, #0]
 8009294:	6053      	strne	r3, [r2, #4]
 8009296:	4630      	mov	r0, r6
 8009298:	f000 fbbc 	bl	8009a14 <__malloc_unlock>
 800929c:	f104 000b 	add.w	r0, r4, #11
 80092a0:	1d23      	adds	r3, r4, #4
 80092a2:	f020 0007 	bic.w	r0, r0, #7
 80092a6:	1ac2      	subs	r2, r0, r3
 80092a8:	d0cc      	beq.n	8009244 <_malloc_r+0x20>
 80092aa:	1a1b      	subs	r3, r3, r0
 80092ac:	50a3      	str	r3, [r4, r2]
 80092ae:	e7c9      	b.n	8009244 <_malloc_r+0x20>
 80092b0:	4622      	mov	r2, r4
 80092b2:	6864      	ldr	r4, [r4, #4]
 80092b4:	e7cc      	b.n	8009250 <_malloc_r+0x2c>
 80092b6:	1cc4      	adds	r4, r0, #3
 80092b8:	f024 0403 	bic.w	r4, r4, #3
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d0e3      	beq.n	8009288 <_malloc_r+0x64>
 80092c0:	1a21      	subs	r1, r4, r0
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 faf6 	bl	80098b4 <_sbrk_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d1dd      	bne.n	8009288 <_malloc_r+0x64>
 80092cc:	e7cf      	b.n	800926e <_malloc_r+0x4a>
 80092ce:	bf00      	nop
 80092d0:	20004210 	.word	0x20004210
 80092d4:	20004214 	.word	0x20004214

080092d8 <__sfputc_r>:
 80092d8:	6893      	ldr	r3, [r2, #8]
 80092da:	3b01      	subs	r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	b410      	push	{r4}
 80092e0:	6093      	str	r3, [r2, #8]
 80092e2:	da08      	bge.n	80092f6 <__sfputc_r+0x1e>
 80092e4:	6994      	ldr	r4, [r2, #24]
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	db01      	blt.n	80092ee <__sfputc_r+0x16>
 80092ea:	290a      	cmp	r1, #10
 80092ec:	d103      	bne.n	80092f6 <__sfputc_r+0x1e>
 80092ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f2:	f7ff bc69 	b.w	8008bc8 <__swbuf_r>
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	1c58      	adds	r0, r3, #1
 80092fa:	6010      	str	r0, [r2, #0]
 80092fc:	7019      	strb	r1, [r3, #0]
 80092fe:	4608      	mov	r0, r1
 8009300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009304:	4770      	bx	lr

08009306 <__sfputs_r>:
 8009306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	4614      	mov	r4, r2
 800930e:	18d5      	adds	r5, r2, r3
 8009310:	42ac      	cmp	r4, r5
 8009312:	d101      	bne.n	8009318 <__sfputs_r+0x12>
 8009314:	2000      	movs	r0, #0
 8009316:	e007      	b.n	8009328 <__sfputs_r+0x22>
 8009318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931c:	463a      	mov	r2, r7
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff ffda 	bl	80092d8 <__sfputc_r>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d1f3      	bne.n	8009310 <__sfputs_r+0xa>
 8009328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800932c <_vfiprintf_r>:
 800932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	460d      	mov	r5, r1
 8009332:	b09d      	sub	sp, #116	; 0x74
 8009334:	4614      	mov	r4, r2
 8009336:	4698      	mov	r8, r3
 8009338:	4606      	mov	r6, r0
 800933a:	b118      	cbz	r0, 8009344 <_vfiprintf_r+0x18>
 800933c:	6983      	ldr	r3, [r0, #24]
 800933e:	b90b      	cbnz	r3, 8009344 <_vfiprintf_r+0x18>
 8009340:	f7ff fe1c 	bl	8008f7c <__sinit>
 8009344:	4b89      	ldr	r3, [pc, #548]	; (800956c <_vfiprintf_r+0x240>)
 8009346:	429d      	cmp	r5, r3
 8009348:	d11b      	bne.n	8009382 <_vfiprintf_r+0x56>
 800934a:	6875      	ldr	r5, [r6, #4]
 800934c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800934e:	07d9      	lsls	r1, r3, #31
 8009350:	d405      	bmi.n	800935e <_vfiprintf_r+0x32>
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	059a      	lsls	r2, r3, #22
 8009356:	d402      	bmi.n	800935e <_vfiprintf_r+0x32>
 8009358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935a:	f7ff fead 	bl	80090b8 <__retarget_lock_acquire_recursive>
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	071b      	lsls	r3, r3, #28
 8009362:	d501      	bpl.n	8009368 <_vfiprintf_r+0x3c>
 8009364:	692b      	ldr	r3, [r5, #16]
 8009366:	b9eb      	cbnz	r3, 80093a4 <_vfiprintf_r+0x78>
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff fc7e 	bl	8008c6c <__swsetup_r>
 8009370:	b1c0      	cbz	r0, 80093a4 <_vfiprintf_r+0x78>
 8009372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009374:	07dc      	lsls	r4, r3, #31
 8009376:	d50e      	bpl.n	8009396 <_vfiprintf_r+0x6a>
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	b01d      	add	sp, #116	; 0x74
 800937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009382:	4b7b      	ldr	r3, [pc, #492]	; (8009570 <_vfiprintf_r+0x244>)
 8009384:	429d      	cmp	r5, r3
 8009386:	d101      	bne.n	800938c <_vfiprintf_r+0x60>
 8009388:	68b5      	ldr	r5, [r6, #8]
 800938a:	e7df      	b.n	800934c <_vfiprintf_r+0x20>
 800938c:	4b79      	ldr	r3, [pc, #484]	; (8009574 <_vfiprintf_r+0x248>)
 800938e:	429d      	cmp	r5, r3
 8009390:	bf08      	it	eq
 8009392:	68f5      	ldreq	r5, [r6, #12]
 8009394:	e7da      	b.n	800934c <_vfiprintf_r+0x20>
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	0598      	lsls	r0, r3, #22
 800939a:	d4ed      	bmi.n	8009378 <_vfiprintf_r+0x4c>
 800939c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800939e:	f7ff fe8c 	bl	80090ba <__retarget_lock_release_recursive>
 80093a2:	e7e9      	b.n	8009378 <_vfiprintf_r+0x4c>
 80093a4:	2300      	movs	r3, #0
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	2320      	movs	r3, #32
 80093aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80093b2:	2330      	movs	r3, #48	; 0x30
 80093b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009578 <_vfiprintf_r+0x24c>
 80093b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093bc:	f04f 0901 	mov.w	r9, #1
 80093c0:	4623      	mov	r3, r4
 80093c2:	469a      	mov	sl, r3
 80093c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093c8:	b10a      	cbz	r2, 80093ce <_vfiprintf_r+0xa2>
 80093ca:	2a25      	cmp	r2, #37	; 0x25
 80093cc:	d1f9      	bne.n	80093c2 <_vfiprintf_r+0x96>
 80093ce:	ebba 0b04 	subs.w	fp, sl, r4
 80093d2:	d00b      	beq.n	80093ec <_vfiprintf_r+0xc0>
 80093d4:	465b      	mov	r3, fp
 80093d6:	4622      	mov	r2, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ff93 	bl	8009306 <__sfputs_r>
 80093e0:	3001      	adds	r0, #1
 80093e2:	f000 80aa 	beq.w	800953a <_vfiprintf_r+0x20e>
 80093e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e8:	445a      	add	r2, fp
 80093ea:	9209      	str	r2, [sp, #36]	; 0x24
 80093ec:	f89a 3000 	ldrb.w	r3, [sl]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 80a2 	beq.w	800953a <_vfiprintf_r+0x20e>
 80093f6:	2300      	movs	r3, #0
 80093f8:	f04f 32ff 	mov.w	r2, #4294967295
 80093fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009400:	f10a 0a01 	add.w	sl, sl, #1
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	9307      	str	r3, [sp, #28]
 8009408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800940c:	931a      	str	r3, [sp, #104]	; 0x68
 800940e:	4654      	mov	r4, sl
 8009410:	2205      	movs	r2, #5
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	4858      	ldr	r0, [pc, #352]	; (8009578 <_vfiprintf_r+0x24c>)
 8009418:	f7f6 fee2 	bl	80001e0 <memchr>
 800941c:	9a04      	ldr	r2, [sp, #16]
 800941e:	b9d8      	cbnz	r0, 8009458 <_vfiprintf_r+0x12c>
 8009420:	06d1      	lsls	r1, r2, #27
 8009422:	bf44      	itt	mi
 8009424:	2320      	movmi	r3, #32
 8009426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800942a:	0713      	lsls	r3, r2, #28
 800942c:	bf44      	itt	mi
 800942e:	232b      	movmi	r3, #43	; 0x2b
 8009430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009434:	f89a 3000 	ldrb.w	r3, [sl]
 8009438:	2b2a      	cmp	r3, #42	; 0x2a
 800943a:	d015      	beq.n	8009468 <_vfiprintf_r+0x13c>
 800943c:	9a07      	ldr	r2, [sp, #28]
 800943e:	4654      	mov	r4, sl
 8009440:	2000      	movs	r0, #0
 8009442:	f04f 0c0a 	mov.w	ip, #10
 8009446:	4621      	mov	r1, r4
 8009448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800944c:	3b30      	subs	r3, #48	; 0x30
 800944e:	2b09      	cmp	r3, #9
 8009450:	d94e      	bls.n	80094f0 <_vfiprintf_r+0x1c4>
 8009452:	b1b0      	cbz	r0, 8009482 <_vfiprintf_r+0x156>
 8009454:	9207      	str	r2, [sp, #28]
 8009456:	e014      	b.n	8009482 <_vfiprintf_r+0x156>
 8009458:	eba0 0308 	sub.w	r3, r0, r8
 800945c:	fa09 f303 	lsl.w	r3, r9, r3
 8009460:	4313      	orrs	r3, r2
 8009462:	9304      	str	r3, [sp, #16]
 8009464:	46a2      	mov	sl, r4
 8009466:	e7d2      	b.n	800940e <_vfiprintf_r+0xe2>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	1d19      	adds	r1, r3, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	9103      	str	r1, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	bfbb      	ittet	lt
 8009474:	425b      	neglt	r3, r3
 8009476:	f042 0202 	orrlt.w	r2, r2, #2
 800947a:	9307      	strge	r3, [sp, #28]
 800947c:	9307      	strlt	r3, [sp, #28]
 800947e:	bfb8      	it	lt
 8009480:	9204      	strlt	r2, [sp, #16]
 8009482:	7823      	ldrb	r3, [r4, #0]
 8009484:	2b2e      	cmp	r3, #46	; 0x2e
 8009486:	d10c      	bne.n	80094a2 <_vfiprintf_r+0x176>
 8009488:	7863      	ldrb	r3, [r4, #1]
 800948a:	2b2a      	cmp	r3, #42	; 0x2a
 800948c:	d135      	bne.n	80094fa <_vfiprintf_r+0x1ce>
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	1d1a      	adds	r2, r3, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	9203      	str	r2, [sp, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfb8      	it	lt
 800949a:	f04f 33ff 	movlt.w	r3, #4294967295
 800949e:	3402      	adds	r4, #2
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009588 <_vfiprintf_r+0x25c>
 80094a6:	7821      	ldrb	r1, [r4, #0]
 80094a8:	2203      	movs	r2, #3
 80094aa:	4650      	mov	r0, sl
 80094ac:	f7f6 fe98 	bl	80001e0 <memchr>
 80094b0:	b140      	cbz	r0, 80094c4 <_vfiprintf_r+0x198>
 80094b2:	2340      	movs	r3, #64	; 0x40
 80094b4:	eba0 000a 	sub.w	r0, r0, sl
 80094b8:	fa03 f000 	lsl.w	r0, r3, r0
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	4303      	orrs	r3, r0
 80094c0:	3401      	adds	r4, #1
 80094c2:	9304      	str	r3, [sp, #16]
 80094c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c8:	482c      	ldr	r0, [pc, #176]	; (800957c <_vfiprintf_r+0x250>)
 80094ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ce:	2206      	movs	r2, #6
 80094d0:	f7f6 fe86 	bl	80001e0 <memchr>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d03f      	beq.n	8009558 <_vfiprintf_r+0x22c>
 80094d8:	4b29      	ldr	r3, [pc, #164]	; (8009580 <_vfiprintf_r+0x254>)
 80094da:	bb1b      	cbnz	r3, 8009524 <_vfiprintf_r+0x1f8>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	3307      	adds	r3, #7
 80094e0:	f023 0307 	bic.w	r3, r3, #7
 80094e4:	3308      	adds	r3, #8
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ea:	443b      	add	r3, r7
 80094ec:	9309      	str	r3, [sp, #36]	; 0x24
 80094ee:	e767      	b.n	80093c0 <_vfiprintf_r+0x94>
 80094f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80094f4:	460c      	mov	r4, r1
 80094f6:	2001      	movs	r0, #1
 80094f8:	e7a5      	b.n	8009446 <_vfiprintf_r+0x11a>
 80094fa:	2300      	movs	r3, #0
 80094fc:	3401      	adds	r4, #1
 80094fe:	9305      	str	r3, [sp, #20]
 8009500:	4619      	mov	r1, r3
 8009502:	f04f 0c0a 	mov.w	ip, #10
 8009506:	4620      	mov	r0, r4
 8009508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800950c:	3a30      	subs	r2, #48	; 0x30
 800950e:	2a09      	cmp	r2, #9
 8009510:	d903      	bls.n	800951a <_vfiprintf_r+0x1ee>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0c5      	beq.n	80094a2 <_vfiprintf_r+0x176>
 8009516:	9105      	str	r1, [sp, #20]
 8009518:	e7c3      	b.n	80094a2 <_vfiprintf_r+0x176>
 800951a:	fb0c 2101 	mla	r1, ip, r1, r2
 800951e:	4604      	mov	r4, r0
 8009520:	2301      	movs	r3, #1
 8009522:	e7f0      	b.n	8009506 <_vfiprintf_r+0x1da>
 8009524:	ab03      	add	r3, sp, #12
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	462a      	mov	r2, r5
 800952a:	4b16      	ldr	r3, [pc, #88]	; (8009584 <_vfiprintf_r+0x258>)
 800952c:	a904      	add	r1, sp, #16
 800952e:	4630      	mov	r0, r6
 8009530:	f3af 8000 	nop.w
 8009534:	4607      	mov	r7, r0
 8009536:	1c78      	adds	r0, r7, #1
 8009538:	d1d6      	bne.n	80094e8 <_vfiprintf_r+0x1bc>
 800953a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800953c:	07d9      	lsls	r1, r3, #31
 800953e:	d405      	bmi.n	800954c <_vfiprintf_r+0x220>
 8009540:	89ab      	ldrh	r3, [r5, #12]
 8009542:	059a      	lsls	r2, r3, #22
 8009544:	d402      	bmi.n	800954c <_vfiprintf_r+0x220>
 8009546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009548:	f7ff fdb7 	bl	80090ba <__retarget_lock_release_recursive>
 800954c:	89ab      	ldrh	r3, [r5, #12]
 800954e:	065b      	lsls	r3, r3, #25
 8009550:	f53f af12 	bmi.w	8009378 <_vfiprintf_r+0x4c>
 8009554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009556:	e711      	b.n	800937c <_vfiprintf_r+0x50>
 8009558:	ab03      	add	r3, sp, #12
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	462a      	mov	r2, r5
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <_vfiprintf_r+0x258>)
 8009560:	a904      	add	r1, sp, #16
 8009562:	4630      	mov	r0, r6
 8009564:	f000 f880 	bl	8009668 <_printf_i>
 8009568:	e7e4      	b.n	8009534 <_vfiprintf_r+0x208>
 800956a:	bf00      	nop
 800956c:	08009be0 	.word	0x08009be0
 8009570:	08009c00 	.word	0x08009c00
 8009574:	08009bc0 	.word	0x08009bc0
 8009578:	08009c20 	.word	0x08009c20
 800957c:	08009c2a 	.word	0x08009c2a
 8009580:	00000000 	.word	0x00000000
 8009584:	08009307 	.word	0x08009307
 8009588:	08009c26 	.word	0x08009c26

0800958c <_printf_common>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	4616      	mov	r6, r2
 8009592:	4699      	mov	r9, r3
 8009594:	688a      	ldr	r2, [r1, #8]
 8009596:	690b      	ldr	r3, [r1, #16]
 8009598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800959c:	4293      	cmp	r3, r2
 800959e:	bfb8      	it	lt
 80095a0:	4613      	movlt	r3, r2
 80095a2:	6033      	str	r3, [r6, #0]
 80095a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095a8:	4607      	mov	r7, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	b10a      	cbz	r2, 80095b2 <_printf_common+0x26>
 80095ae:	3301      	adds	r3, #1
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	0699      	lsls	r1, r3, #26
 80095b6:	bf42      	ittt	mi
 80095b8:	6833      	ldrmi	r3, [r6, #0]
 80095ba:	3302      	addmi	r3, #2
 80095bc:	6033      	strmi	r3, [r6, #0]
 80095be:	6825      	ldr	r5, [r4, #0]
 80095c0:	f015 0506 	ands.w	r5, r5, #6
 80095c4:	d106      	bne.n	80095d4 <_printf_common+0x48>
 80095c6:	f104 0a19 	add.w	sl, r4, #25
 80095ca:	68e3      	ldr	r3, [r4, #12]
 80095cc:	6832      	ldr	r2, [r6, #0]
 80095ce:	1a9b      	subs	r3, r3, r2
 80095d0:	42ab      	cmp	r3, r5
 80095d2:	dc26      	bgt.n	8009622 <_printf_common+0x96>
 80095d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095d8:	1e13      	subs	r3, r2, #0
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	bf18      	it	ne
 80095de:	2301      	movne	r3, #1
 80095e0:	0692      	lsls	r2, r2, #26
 80095e2:	d42b      	bmi.n	800963c <_printf_common+0xb0>
 80095e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095e8:	4649      	mov	r1, r9
 80095ea:	4638      	mov	r0, r7
 80095ec:	47c0      	blx	r8
 80095ee:	3001      	adds	r0, #1
 80095f0:	d01e      	beq.n	8009630 <_printf_common+0xa4>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	68e5      	ldr	r5, [r4, #12]
 80095f6:	6832      	ldr	r2, [r6, #0]
 80095f8:	f003 0306 	and.w	r3, r3, #6
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	bf08      	it	eq
 8009600:	1aad      	subeq	r5, r5, r2
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	6922      	ldr	r2, [r4, #16]
 8009606:	bf0c      	ite	eq
 8009608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800960c:	2500      	movne	r5, #0
 800960e:	4293      	cmp	r3, r2
 8009610:	bfc4      	itt	gt
 8009612:	1a9b      	subgt	r3, r3, r2
 8009614:	18ed      	addgt	r5, r5, r3
 8009616:	2600      	movs	r6, #0
 8009618:	341a      	adds	r4, #26
 800961a:	42b5      	cmp	r5, r6
 800961c:	d11a      	bne.n	8009654 <_printf_common+0xc8>
 800961e:	2000      	movs	r0, #0
 8009620:	e008      	b.n	8009634 <_printf_common+0xa8>
 8009622:	2301      	movs	r3, #1
 8009624:	4652      	mov	r2, sl
 8009626:	4649      	mov	r1, r9
 8009628:	4638      	mov	r0, r7
 800962a:	47c0      	blx	r8
 800962c:	3001      	adds	r0, #1
 800962e:	d103      	bne.n	8009638 <_printf_common+0xac>
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009638:	3501      	adds	r5, #1
 800963a:	e7c6      	b.n	80095ca <_printf_common+0x3e>
 800963c:	18e1      	adds	r1, r4, r3
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	2030      	movs	r0, #48	; 0x30
 8009642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009646:	4422      	add	r2, r4
 8009648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800964c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009650:	3302      	adds	r3, #2
 8009652:	e7c7      	b.n	80095e4 <_printf_common+0x58>
 8009654:	2301      	movs	r3, #1
 8009656:	4622      	mov	r2, r4
 8009658:	4649      	mov	r1, r9
 800965a:	4638      	mov	r0, r7
 800965c:	47c0      	blx	r8
 800965e:	3001      	adds	r0, #1
 8009660:	d0e6      	beq.n	8009630 <_printf_common+0xa4>
 8009662:	3601      	adds	r6, #1
 8009664:	e7d9      	b.n	800961a <_printf_common+0x8e>
	...

08009668 <_printf_i>:
 8009668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	4691      	mov	r9, r2
 8009670:	7e27      	ldrb	r7, [r4, #24]
 8009672:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009674:	2f78      	cmp	r7, #120	; 0x78
 8009676:	4680      	mov	r8, r0
 8009678:	469a      	mov	sl, r3
 800967a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800967e:	d807      	bhi.n	8009690 <_printf_i+0x28>
 8009680:	2f62      	cmp	r7, #98	; 0x62
 8009682:	d80a      	bhi.n	800969a <_printf_i+0x32>
 8009684:	2f00      	cmp	r7, #0
 8009686:	f000 80d8 	beq.w	800983a <_printf_i+0x1d2>
 800968a:	2f58      	cmp	r7, #88	; 0x58
 800968c:	f000 80a3 	beq.w	80097d6 <_printf_i+0x16e>
 8009690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009698:	e03a      	b.n	8009710 <_printf_i+0xa8>
 800969a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800969e:	2b15      	cmp	r3, #21
 80096a0:	d8f6      	bhi.n	8009690 <_printf_i+0x28>
 80096a2:	a001      	add	r0, pc, #4	; (adr r0, 80096a8 <_printf_i+0x40>)
 80096a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096a8:	08009701 	.word	0x08009701
 80096ac:	08009715 	.word	0x08009715
 80096b0:	08009691 	.word	0x08009691
 80096b4:	08009691 	.word	0x08009691
 80096b8:	08009691 	.word	0x08009691
 80096bc:	08009691 	.word	0x08009691
 80096c0:	08009715 	.word	0x08009715
 80096c4:	08009691 	.word	0x08009691
 80096c8:	08009691 	.word	0x08009691
 80096cc:	08009691 	.word	0x08009691
 80096d0:	08009691 	.word	0x08009691
 80096d4:	08009821 	.word	0x08009821
 80096d8:	08009745 	.word	0x08009745
 80096dc:	08009803 	.word	0x08009803
 80096e0:	08009691 	.word	0x08009691
 80096e4:	08009691 	.word	0x08009691
 80096e8:	08009843 	.word	0x08009843
 80096ec:	08009691 	.word	0x08009691
 80096f0:	08009745 	.word	0x08009745
 80096f4:	08009691 	.word	0x08009691
 80096f8:	08009691 	.word	0x08009691
 80096fc:	0800980b 	.word	0x0800980b
 8009700:	680b      	ldr	r3, [r1, #0]
 8009702:	1d1a      	adds	r2, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	600a      	str	r2, [r1, #0]
 8009708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800970c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009710:	2301      	movs	r3, #1
 8009712:	e0a3      	b.n	800985c <_printf_i+0x1f4>
 8009714:	6825      	ldr	r5, [r4, #0]
 8009716:	6808      	ldr	r0, [r1, #0]
 8009718:	062e      	lsls	r6, r5, #24
 800971a:	f100 0304 	add.w	r3, r0, #4
 800971e:	d50a      	bpl.n	8009736 <_printf_i+0xce>
 8009720:	6805      	ldr	r5, [r0, #0]
 8009722:	600b      	str	r3, [r1, #0]
 8009724:	2d00      	cmp	r5, #0
 8009726:	da03      	bge.n	8009730 <_printf_i+0xc8>
 8009728:	232d      	movs	r3, #45	; 0x2d
 800972a:	426d      	negs	r5, r5
 800972c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009730:	485e      	ldr	r0, [pc, #376]	; (80098ac <_printf_i+0x244>)
 8009732:	230a      	movs	r3, #10
 8009734:	e019      	b.n	800976a <_printf_i+0x102>
 8009736:	f015 0f40 	tst.w	r5, #64	; 0x40
 800973a:	6805      	ldr	r5, [r0, #0]
 800973c:	600b      	str	r3, [r1, #0]
 800973e:	bf18      	it	ne
 8009740:	b22d      	sxthne	r5, r5
 8009742:	e7ef      	b.n	8009724 <_printf_i+0xbc>
 8009744:	680b      	ldr	r3, [r1, #0]
 8009746:	6825      	ldr	r5, [r4, #0]
 8009748:	1d18      	adds	r0, r3, #4
 800974a:	6008      	str	r0, [r1, #0]
 800974c:	0628      	lsls	r0, r5, #24
 800974e:	d501      	bpl.n	8009754 <_printf_i+0xec>
 8009750:	681d      	ldr	r5, [r3, #0]
 8009752:	e002      	b.n	800975a <_printf_i+0xf2>
 8009754:	0669      	lsls	r1, r5, #25
 8009756:	d5fb      	bpl.n	8009750 <_printf_i+0xe8>
 8009758:	881d      	ldrh	r5, [r3, #0]
 800975a:	4854      	ldr	r0, [pc, #336]	; (80098ac <_printf_i+0x244>)
 800975c:	2f6f      	cmp	r7, #111	; 0x6f
 800975e:	bf0c      	ite	eq
 8009760:	2308      	moveq	r3, #8
 8009762:	230a      	movne	r3, #10
 8009764:	2100      	movs	r1, #0
 8009766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800976a:	6866      	ldr	r6, [r4, #4]
 800976c:	60a6      	str	r6, [r4, #8]
 800976e:	2e00      	cmp	r6, #0
 8009770:	bfa2      	ittt	ge
 8009772:	6821      	ldrge	r1, [r4, #0]
 8009774:	f021 0104 	bicge.w	r1, r1, #4
 8009778:	6021      	strge	r1, [r4, #0]
 800977a:	b90d      	cbnz	r5, 8009780 <_printf_i+0x118>
 800977c:	2e00      	cmp	r6, #0
 800977e:	d04d      	beq.n	800981c <_printf_i+0x1b4>
 8009780:	4616      	mov	r6, r2
 8009782:	fbb5 f1f3 	udiv	r1, r5, r3
 8009786:	fb03 5711 	mls	r7, r3, r1, r5
 800978a:	5dc7      	ldrb	r7, [r0, r7]
 800978c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009790:	462f      	mov	r7, r5
 8009792:	42bb      	cmp	r3, r7
 8009794:	460d      	mov	r5, r1
 8009796:	d9f4      	bls.n	8009782 <_printf_i+0x11a>
 8009798:	2b08      	cmp	r3, #8
 800979a:	d10b      	bne.n	80097b4 <_printf_i+0x14c>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	07df      	lsls	r7, r3, #31
 80097a0:	d508      	bpl.n	80097b4 <_printf_i+0x14c>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	6861      	ldr	r1, [r4, #4]
 80097a6:	4299      	cmp	r1, r3
 80097a8:	bfde      	ittt	le
 80097aa:	2330      	movle	r3, #48	; 0x30
 80097ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097b4:	1b92      	subs	r2, r2, r6
 80097b6:	6122      	str	r2, [r4, #16]
 80097b8:	f8cd a000 	str.w	sl, [sp]
 80097bc:	464b      	mov	r3, r9
 80097be:	aa03      	add	r2, sp, #12
 80097c0:	4621      	mov	r1, r4
 80097c2:	4640      	mov	r0, r8
 80097c4:	f7ff fee2 	bl	800958c <_printf_common>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d14c      	bne.n	8009866 <_printf_i+0x1fe>
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	b004      	add	sp, #16
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	4835      	ldr	r0, [pc, #212]	; (80098ac <_printf_i+0x244>)
 80097d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	680e      	ldr	r6, [r1, #0]
 80097e0:	061f      	lsls	r7, r3, #24
 80097e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80097e6:	600e      	str	r6, [r1, #0]
 80097e8:	d514      	bpl.n	8009814 <_printf_i+0x1ac>
 80097ea:	07d9      	lsls	r1, r3, #31
 80097ec:	bf44      	itt	mi
 80097ee:	f043 0320 	orrmi.w	r3, r3, #32
 80097f2:	6023      	strmi	r3, [r4, #0]
 80097f4:	b91d      	cbnz	r5, 80097fe <_printf_i+0x196>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	f023 0320 	bic.w	r3, r3, #32
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	2310      	movs	r3, #16
 8009800:	e7b0      	b.n	8009764 <_printf_i+0xfc>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	2378      	movs	r3, #120	; 0x78
 800980c:	4828      	ldr	r0, [pc, #160]	; (80098b0 <_printf_i+0x248>)
 800980e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009812:	e7e3      	b.n	80097dc <_printf_i+0x174>
 8009814:	065e      	lsls	r6, r3, #25
 8009816:	bf48      	it	mi
 8009818:	b2ad      	uxthmi	r5, r5
 800981a:	e7e6      	b.n	80097ea <_printf_i+0x182>
 800981c:	4616      	mov	r6, r2
 800981e:	e7bb      	b.n	8009798 <_printf_i+0x130>
 8009820:	680b      	ldr	r3, [r1, #0]
 8009822:	6826      	ldr	r6, [r4, #0]
 8009824:	6960      	ldr	r0, [r4, #20]
 8009826:	1d1d      	adds	r5, r3, #4
 8009828:	600d      	str	r5, [r1, #0]
 800982a:	0635      	lsls	r5, r6, #24
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	d501      	bpl.n	8009834 <_printf_i+0x1cc>
 8009830:	6018      	str	r0, [r3, #0]
 8009832:	e002      	b.n	800983a <_printf_i+0x1d2>
 8009834:	0671      	lsls	r1, r6, #25
 8009836:	d5fb      	bpl.n	8009830 <_printf_i+0x1c8>
 8009838:	8018      	strh	r0, [r3, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	4616      	mov	r6, r2
 8009840:	e7ba      	b.n	80097b8 <_printf_i+0x150>
 8009842:	680b      	ldr	r3, [r1, #0]
 8009844:	1d1a      	adds	r2, r3, #4
 8009846:	600a      	str	r2, [r1, #0]
 8009848:	681e      	ldr	r6, [r3, #0]
 800984a:	6862      	ldr	r2, [r4, #4]
 800984c:	2100      	movs	r1, #0
 800984e:	4630      	mov	r0, r6
 8009850:	f7f6 fcc6 	bl	80001e0 <memchr>
 8009854:	b108      	cbz	r0, 800985a <_printf_i+0x1f2>
 8009856:	1b80      	subs	r0, r0, r6
 8009858:	6060      	str	r0, [r4, #4]
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	2300      	movs	r3, #0
 8009860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009864:	e7a8      	b.n	80097b8 <_printf_i+0x150>
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	4632      	mov	r2, r6
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d0ab      	beq.n	80097cc <_printf_i+0x164>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	079b      	lsls	r3, r3, #30
 8009878:	d413      	bmi.n	80098a2 <_printf_i+0x23a>
 800987a:	68e0      	ldr	r0, [r4, #12]
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	4298      	cmp	r0, r3
 8009880:	bfb8      	it	lt
 8009882:	4618      	movlt	r0, r3
 8009884:	e7a4      	b.n	80097d0 <_printf_i+0x168>
 8009886:	2301      	movs	r3, #1
 8009888:	4632      	mov	r2, r6
 800988a:	4649      	mov	r1, r9
 800988c:	4640      	mov	r0, r8
 800988e:	47d0      	blx	sl
 8009890:	3001      	adds	r0, #1
 8009892:	d09b      	beq.n	80097cc <_printf_i+0x164>
 8009894:	3501      	adds	r5, #1
 8009896:	68e3      	ldr	r3, [r4, #12]
 8009898:	9903      	ldr	r1, [sp, #12]
 800989a:	1a5b      	subs	r3, r3, r1
 800989c:	42ab      	cmp	r3, r5
 800989e:	dcf2      	bgt.n	8009886 <_printf_i+0x21e>
 80098a0:	e7eb      	b.n	800987a <_printf_i+0x212>
 80098a2:	2500      	movs	r5, #0
 80098a4:	f104 0619 	add.w	r6, r4, #25
 80098a8:	e7f5      	b.n	8009896 <_printf_i+0x22e>
 80098aa:	bf00      	nop
 80098ac:	08009c31 	.word	0x08009c31
 80098b0:	08009c42 	.word	0x08009c42

080098b4 <_sbrk_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d06      	ldr	r5, [pc, #24]	; (80098d0 <_sbrk_r+0x1c>)
 80098b8:	2300      	movs	r3, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	602b      	str	r3, [r5, #0]
 80098c0:	f7f8 fd7c 	bl	80023bc <_sbrk>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_sbrk_r+0x1a>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_sbrk_r+0x1a>
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	200044e8 	.word	0x200044e8

080098d4 <__sread>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098dc:	f000 f8a0 	bl	8009a20 <_read_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	bfab      	itete	ge
 80098e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098e6:	89a3      	ldrhlt	r3, [r4, #12]
 80098e8:	181b      	addge	r3, r3, r0
 80098ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098ee:	bfac      	ite	ge
 80098f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098f2:	81a3      	strhlt	r3, [r4, #12]
 80098f4:	bd10      	pop	{r4, pc}

080098f6 <__swrite>:
 80098f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	461f      	mov	r7, r3
 80098fc:	898b      	ldrh	r3, [r1, #12]
 80098fe:	05db      	lsls	r3, r3, #23
 8009900:	4605      	mov	r5, r0
 8009902:	460c      	mov	r4, r1
 8009904:	4616      	mov	r6, r2
 8009906:	d505      	bpl.n	8009914 <__swrite+0x1e>
 8009908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990c:	2302      	movs	r3, #2
 800990e:	2200      	movs	r2, #0
 8009910:	f000 f868 	bl	80099e4 <_lseek_r>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800991a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	4632      	mov	r2, r6
 8009922:	463b      	mov	r3, r7
 8009924:	4628      	mov	r0, r5
 8009926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	f000 b817 	b.w	800995c <_write_r>

0800992e <__sseek>:
 800992e:	b510      	push	{r4, lr}
 8009930:	460c      	mov	r4, r1
 8009932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009936:	f000 f855 	bl	80099e4 <_lseek_r>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	bf15      	itete	ne
 8009940:	6560      	strne	r0, [r4, #84]	; 0x54
 8009942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800994a:	81a3      	strheq	r3, [r4, #12]
 800994c:	bf18      	it	ne
 800994e:	81a3      	strhne	r3, [r4, #12]
 8009950:	bd10      	pop	{r4, pc}

08009952 <__sclose>:
 8009952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009956:	f000 b813 	b.w	8009980 <_close_r>
	...

0800995c <_write_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d07      	ldr	r5, [pc, #28]	; (800997c <_write_r+0x20>)
 8009960:	4604      	mov	r4, r0
 8009962:	4608      	mov	r0, r1
 8009964:	4611      	mov	r1, r2
 8009966:	2200      	movs	r2, #0
 8009968:	602a      	str	r2, [r5, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	f7f6 fe04 	bl	8000578 <_write>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_write_r+0x1e>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_write_r+0x1e>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	200044e8 	.word	0x200044e8

08009980 <_close_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d06      	ldr	r5, [pc, #24]	; (800999c <_close_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f8 fce1 	bl	8002352 <_close>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_close_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_close_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	200044e8 	.word	0x200044e8

080099a0 <_fstat_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d07      	ldr	r5, [pc, #28]	; (80099c0 <_fstat_r+0x20>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	f7f8 fcdc 	bl	800236a <_fstat>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d102      	bne.n	80099bc <_fstat_r+0x1c>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b103      	cbz	r3, 80099bc <_fstat_r+0x1c>
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	200044e8 	.word	0x200044e8

080099c4 <_isatty_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d06      	ldr	r5, [pc, #24]	; (80099e0 <_isatty_r+0x1c>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	f7f8 fcdb 	bl	800238a <_isatty>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_isatty_r+0x1a>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_isatty_r+0x1a>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	200044e8 	.word	0x200044e8

080099e4 <_lseek_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	; (8009a04 <_lseek_r+0x20>)
 80099e8:	4604      	mov	r4, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7f8 fcd4 	bl	80023a0 <_lseek>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_lseek_r+0x1e>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_lseek_r+0x1e>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	200044e8 	.word	0x200044e8

08009a08 <__malloc_lock>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__malloc_lock+0x8>)
 8009a0a:	f7ff bb55 	b.w	80090b8 <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	200044e0 	.word	0x200044e0

08009a14 <__malloc_unlock>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__malloc_unlock+0x8>)
 8009a16:	f7ff bb50 	b.w	80090ba <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	200044e0 	.word	0x200044e0

08009a20 <_read_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4d07      	ldr	r5, [pc, #28]	; (8009a40 <_read_r+0x20>)
 8009a24:	4604      	mov	r4, r0
 8009a26:	4608      	mov	r0, r1
 8009a28:	4611      	mov	r1, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7f8 fc72 	bl	8002318 <_read>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_read_r+0x1e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_read_r+0x1e>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	200044e8 	.word	0x200044e8

08009a44 <_init>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	bf00      	nop
 8009a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4a:	bc08      	pop	{r3}
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	4770      	bx	lr

08009a50 <_fini>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	bf00      	nop
 8009a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a56:	bc08      	pop	{r3}
 8009a58:	469e      	mov	lr, r3
 8009a5a:	4770      	bx	lr


Kitchen_Hall_Garage_Rooms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800843c  0800843c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008444  08008444  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800844c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d10  2000007c  080084c8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d8c  080084c8  00024d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002206b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004439  00000000  00000000  00042117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00046550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00047e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c362  00000000  00000000  00049568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca94  00000000  00000000  000658ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8443  00000000  00000000  0008235e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a7a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f18  00000000  00000000  0012a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008268 	.word	0x08008268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008268 	.word	0x08008268

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:
 *      Author: kus
 */

#include "LoRa.h"

int _write(int file , char *ptr , int len){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2 , ptr , len , 50);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	2332      	movs	r3, #50	; 0x32
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <_write+0x24>)
 800059e:	f003 fe80 	bl	80042a2 <HAL_UART_Transmit>
  return len;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20004cf4 	.word	0x20004cf4

080005b0 <SPI_CS_LOW>:

void SPI_CS_LOW(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <SPI_CS_LOW+0x14>)
 80005ba:	f002 f863 	bl	8002684 <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400

080005c8 <SPI_CS_HIGH>:

void SPI_CS_HIGH(){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <SPI_CS_HIGH+0x14>)
 80005d2:	f002 f857 	bl	8002684 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020400 	.word	0x40020400

080005e0 <Read_Reg>:

unsigned char Read_Reg(unsigned char addr){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = addr & 0x7F;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	SPI_CS_LOW();
 80005f4:	f7ff ffdc 	bl	80005b0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1 , HAL_MAX_DELAY);
 80005f8:	f107 010f 	add.w	r1, r7, #15
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <Read_Reg+0x48>)
 8000604:	f002 fd55 	bl	80030b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000608:	f107 010e 	add.w	r1, r7, #14
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	2201      	movs	r2, #1
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <Read_Reg+0x48>)
 8000614:	f002 fe89 	bl	800332a <HAL_SPI_Receive>
	SPI_CS_HIGH();
 8000618:	f7ff ffd6 	bl	80005c8 <SPI_CS_HIGH>

	return data;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20004c54 	.word	0x20004c54

0800062c <Write_Reg>:

void Write_Reg(unsigned char addr , unsigned char value){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000642:	b2db      	uxtb	r3, r3
 8000644:	73fb      	strb	r3, [r7, #15]
	uint8_t Value = value;
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	73bb      	strb	r3, [r7, #14]

	SPI_CS_LOW();
 800064a:	f7ff ffb1 	bl	80005b0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg,	1 , HAL_MAX_DELAY);
 800064e:	f107 010f 	add.w	r1, r7, #15
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2201      	movs	r2, #1
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <Write_Reg+0x50>)
 800065a:	f002 fd2a 	bl	80030b2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &Value,1 , HAL_MAX_DELAY);
 800065e:	f107 010e 	add.w	r1, r7, #14
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	2201      	movs	r2, #1
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <Write_Reg+0x50>)
 800066a:	f002 fd22 	bl	80030b2 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800066e:	f7ff ffab 	bl	80005c8 <SPI_CS_HIGH>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20004c54 	.word	0x20004c54

08000680 <set_OPMODE>:

void set_OPMODE(uint8_t mode){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, Read_Reg(REG_OPMODE) & ~OPMODE_MASK | mode );
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ffa8 	bl	80005e0 <Read_Reg>
 8000690:	4603      	mov	r3, r0
 8000692:	b25b      	sxtb	r3, r3
 8000694:	f023 0307 	bic.w	r3, r3, #7
 8000698:	b25a      	sxtb	r2, r3
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	4313      	orrs	r3, r2
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ffc0 	bl	800062c <Write_Reg>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <set_LoRa_mode>:

void set_LoRa_mode(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ffe0 	bl	8000680 <set_OPMODE>
	HAL_Delay(15);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f001 fac7 	bl	8001c54 <HAL_Delay>

	uint8_t data = OPMODE_LORA;
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	71fb      	strb	r3, [r7, #7]
	Write_Reg(REG_OPMODE, data);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4619      	mov	r1, r3
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ffac 	bl	800062c <Write_Reg>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <set_Freq>:

void set_Freq(uint64_t freq){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	e9c7 0100 	strd	r0, r1, [r7]
	set_OPMODE(OPMODE_SLEEP);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ffca 	bl	8000680 <set_OPMODE>
	HAL_Delay(15);
 80006ec:	200f      	movs	r0, #15
 80006ee:	f001 fab1 	bl	8001c54 <HAL_Delay>

	uint64_t frf = (( uint64_t)freq <<14 );  // freq *  2^19 / 32
 80006f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	038b      	lsls	r3, r1, #14
 8000700:	ea43 4390 	orr.w	r3, r3, r0, lsr #18
 8000704:	0382      	lsls	r2, r0, #14
 8000706:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Write_Reg(REG_FRF_MSB, (uint8_t)(frf>>16) );
 800070a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800070e:	f04f 0200 	mov.w	r2, #0
 8000712:	f04f 0300 	mov.w	r3, #0
 8000716:	0c02      	lsrs	r2, r0, #16
 8000718:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800071c:	0c0b      	lsrs	r3, r1, #16
 800071e:	b2d3      	uxtb	r3, r2
 8000720:	4619      	mov	r1, r3
 8000722:	2006      	movs	r0, #6
 8000724:	f7ff ff82 	bl	800062c <Write_Reg>
	Write_Reg(REG_FRF_MID, (uint8_t)(frf>>8) );
 8000728:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800072c:	f04f 0200 	mov.w	r2, #0
 8000730:	f04f 0300 	mov.w	r3, #0
 8000734:	0a02      	lsrs	r2, r0, #8
 8000736:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800073a:	0a0b      	lsrs	r3, r1, #8
 800073c:	b2d3      	uxtb	r3, r2
 800073e:	4619      	mov	r1, r3
 8000740:	2007      	movs	r0, #7
 8000742:	f7ff ff73 	bl	800062c <Write_Reg>
	Write_Reg(REG_FRF_LSB, (uint8_t)(frf>>0) );
 8000746:	7a3b      	ldrb	r3, [r7, #8]
 8000748:	4619      	mov	r1, r3
 800074a:	2008      	movs	r0, #8
 800074c:	f7ff ff6e 	bl	800062c <Write_Reg>
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <set_config>:

void set_config(){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	set_OPMODE(OPMODE_SLEEP);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff8e 	bl	8000680 <set_OPMODE>
	HAL_Delay(15);
 8000764:	200f      	movs	r0, #15
 8000766:	f001 fa75 	bl	8001c54 <HAL_Delay>

	set_LoRa_mode();
 800076a:	f7ff ffa3 	bl	80006b4 <set_LoRa_mode>

	unsigned char version = Read_Reg(REG_VERSION);
 800076e:	2042      	movs	r0, #66	; 0x42
 8000770:	f7ff ff36 	bl	80005e0 <Read_Reg>
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]

	printf("%d version \n\r", version);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4619      	mov	r1, r3
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <set_config+0x8c>)
 800077e:	f006 fe1d 	bl	80073bc <iprintf>

	Write_Reg(REG_SYNC_WORD, 0x34);
 8000782:	2134      	movs	r1, #52	; 0x34
 8000784:	2039      	movs	r0, #57	; 0x39
 8000786:	f7ff ff51 	bl	800062c <Write_Reg>


	Write_Reg(REG_MODEM_CONFIG3,0x04);
 800078a:	2104      	movs	r1, #4
 800078c:	2026      	movs	r0, #38	; 0x26
 800078e:	f7ff ff4d 	bl	800062c <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG,0x72);
 8000792:	2172      	movs	r1, #114	; 0x72
 8000794:	201d      	movs	r0, #29
 8000796:	f7ff ff49 	bl	800062c <Write_Reg>
	Write_Reg(REG_MODEM_CONFIG2, (0x07<<4) | 0x04);
 800079a:	2174      	movs	r1, #116	; 0x74
 800079c:	201e      	movs	r0, #30
 800079e:	f7ff ff45 	bl	800062c <Write_Reg>

	Write_Reg(REG_SYMB_TIMEOUT_LSB,0x08);
 80007a2:	2108      	movs	r1, #8
 80007a4:	201f      	movs	r0, #31
 80007a6:	f7ff ff41 	bl	800062c <Write_Reg>

	Write_Reg(REG_MAX_PAYLOAD_LENGTH, 0x80);
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	2023      	movs	r0, #35	; 0x23
 80007ae:	f7ff ff3d 	bl	800062c <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, PAYLOAD_LENGTH);
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	2022      	movs	r0, #34	; 0x22
 80007b6:	f7ff ff39 	bl	800062c <Write_Reg>
	Write_Reg(REG_HOP_PERIOD, 0xFF);
 80007ba:	21ff      	movs	r1, #255	; 0xff
 80007bc:	2024      	movs	r0, #36	; 0x24
 80007be:	f7ff ff35 	bl	800062c <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, Read_Reg(REG_FIFO_TX_BASE_AD));
 80007c2:	200e      	movs	r0, #14
 80007c4:	f7ff ff0c 	bl	80005e0 <Read_Reg>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4619      	mov	r1, r3
 80007cc:	200d      	movs	r0, #13
 80007ce:	f7ff ff2d 	bl	800062c <Write_Reg>

	Write_Reg(REG_LNA, LNA_MAX_GAIN);
 80007d2:	2123      	movs	r1, #35	; 0x23
 80007d4:	200c      	movs	r0, #12
 80007d6:	f7ff ff29 	bl	800062c <Write_Reg>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	08008280 	.word	0x08008280

080007e8 <LoRa_init>:

void LoRa_init(uint64_t freq){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2102      	movs	r1, #2
 80007f6:	481c      	ldr	r0, [pc, #112]	; (8000868 <LoRa_init+0x80>)
 80007f8:	f001 ff44 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007fc:	2064      	movs	r0, #100	; 0x64
 80007fe:	f001 fa29 	bl	8001c54 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2102      	movs	r1, #2
 8000806:	4818      	ldr	r0, [pc, #96]	; (8000868 <LoRa_init+0x80>)
 8000808:	f001 ff3c 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f001 fa21 	bl	8001c54 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2102      	movs	r1, #2
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <LoRa_init+0x80>)
 8000818:	f001 ff34 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	f001 fa19 	bl	8001c54 <HAL_Delay>

	set_Freq(freq);
 8000822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000826:	f7ff ff59 	bl	80006dc <set_Freq>
	set_config();
 800082a:	f7ff ff95 	bl	8000758 <set_config>
	set_LoRa_mode();
 800082e:	f7ff ff41 	bl	80006b4 <set_LoRa_mode>

	set_OPMODE(OPMODE_STANDBY);
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ff24 	bl	8000680 <set_OPMODE>
	Write_Reg(RegPaRamp, (Read_Reg(RegPaRamp)& 0xF0) | 0x80 );
 8000838:	200a      	movs	r0, #10
 800083a:	f7ff fed1 	bl	80005e0 <Read_Reg>
 800083e:	4603      	mov	r3, r0
 8000840:	b25b      	sxtb	r3, r3
 8000842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000846:	b25b      	sxtb	r3, r3
 8000848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800084c:	b25b      	sxtb	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4619      	mov	r1, r3
 8000852:	200a      	movs	r0, #10
 8000854:	f7ff feea 	bl	800062c <Write_Reg>
	set_Power(23);
 8000858:	2017      	movs	r0, #23
 800085a:	f000 f8c7 	bl	80009ec <set_Power>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020400 	.word	0x40020400

0800086c <Receive>:


uint8_t Receive(char *payload){
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	Write_Reg(REG_IRQ_FLAGS, 0x40);
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	2012      	movs	r0, #18
 8000878:	f7ff fed8 	bl	800062c <Write_Reg>

	int IRQ = Read_Reg(REG_IRQ_FLAGS);
 800087c:	2012      	movs	r0, #18
 800087e:	f7ff feaf 	bl	80005e0 <Read_Reg>
 8000882:	4603      	mov	r3, r0
 8000884:	613b      	str	r3, [r7, #16]

	if(( IRQ & 0x20) == 0x20){
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	f003 0320 	and.w	r3, r3, #32
 800088c:	2b00      	cmp	r3, #0
 800088e:	d008      	beq.n	80008a2 <Receive+0x36>
		printf("CRC error \n\r");
 8000890:	4817      	ldr	r0, [pc, #92]	; (80008f0 <Receive+0x84>)
 8000892:	f006 fd93 	bl	80073bc <iprintf>
		Write_Reg(REG_IRQ_FLAGS, 0x20);
 8000896:	2120      	movs	r1, #32
 8000898:	2012      	movs	r0, #18
 800089a:	f7ff fec7 	bl	800062c <Write_Reg>
		return 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	e021      	b.n	80008e6 <Receive+0x7a>
	}
	else {
		uint8_t currentAddr = Read_Reg(REG_FIFO_RX_CURRENT_ADDR);
 80008a2:	2010      	movs	r0, #16
 80008a4:	f7ff fe9c 	bl	80005e0 <Read_Reg>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedCount = Read_Reg(REG_RX_NB_BYTES);
 80008ac:	2013      	movs	r0, #19
 80008ae:	f7ff fe97 	bl	80005e0 <Read_Reg>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73bb      	strb	r3, [r7, #14]

		Write_Reg(REG_FIFO_ADDR_PTR, currentAddr);
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	4619      	mov	r1, r3
 80008ba:	200d      	movs	r0, #13
 80008bc:	f7ff feb6 	bl	800062c <Write_Reg>

		for(int i = 0; i < receivedCount; i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e00a      	b.n	80008dc <Receive+0x70>
			payload[i] = (char)Read_Reg(REG_FIFO);
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	18d4      	adds	r4, r2, r3
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fe87 	bl	80005e0 <Read_Reg>
 80008d2:	4603      	mov	r3, r0
 80008d4:	7023      	strb	r3, [r4, #0]
		for(int i = 0; i < receivedCount; i++)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	3301      	adds	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dbf0      	blt.n	80008c6 <Receive+0x5a>
	}

	return 1;
 80008e4:	2301      	movs	r3, #1
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	371c      	adds	r7, #28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08008290 	.word	0x08008290

080008f4 <Write_Buf>:

void Write_Buf(unsigned char addr, unsigned char *value, unsigned char len) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0c4      	sub	sp, #272	; 0x110
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	463b      	mov	r3, r7
 80008fc:	6019      	str	r1, [r3, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	4602      	mov	r2, r0
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	460a      	mov	r2, r1
 800090a:	701a      	strb	r2, [r3, #0]

	uint8_t reg = addr | 0x80;
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000914:	b2db      	uxtb	r3, r3
 8000916:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t buf[256];
	for (int i = 0; i < len; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000920:	e011      	b.n	8000946 <Write_Buf+0x52>
		buf[i] = value[i];
 8000922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000926:	463a      	mov	r2, r7
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	4413      	add	r3, r2
 800092c:	7819      	ldrb	r1, [r3, #0]
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000936:	4413      	add	r3, r2
 8000938:	460a      	mov	r2, r1
 800093a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800093c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000940:	3301      	adds	r3, #1
 8000942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000946:	1dbb      	adds	r3, r7, #6
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800094e:	429a      	cmp	r2, r3
 8000950:	dbe7      	blt.n	8000922 <Write_Buf+0x2e>
	}

	SPI_CS_LOW();
 8000952:	f7ff fe2d 	bl	80005b0 <SPI_CS_LOW>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000956:	f207 110b 	addw	r1, r7, #267	; 0x10b
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	2201      	movs	r2, #1
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <Write_Buf+0x94>)
 8000962:	f002 fba6 	bl	80030b2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, len, HAL_MAX_DELAY);
 8000966:	1dbb      	adds	r3, r7, #6
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b29a      	uxth	r2, r3
 800096c:	f107 0108 	add.w	r1, r7, #8
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <Write_Buf+0x94>)
 8000976:	f002 fb9c 	bl	80030b2 <HAL_SPI_Transmit>
	SPI_CS_HIGH();
 800097a:	f7ff fe25 	bl	80005c8 <SPI_CS_HIGH>
}
 800097e:	bf00      	nop
 8000980:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20004c54 	.word	0x20004c54

0800098c <Transmit>:

void Transmit(unsigned char *frame, unsigned char datalen) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]

	Write_Reg(REG_HOP_PERIOD,0x00);
 8000998:	2100      	movs	r1, #0
 800099a:	2024      	movs	r0, #36	; 0x24
 800099c:	f7ff fe46 	bl	800062c <Write_Reg>
	Write_Reg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 80009a0:	21f0      	movs	r1, #240	; 0xf0
 80009a2:	2040      	movs	r0, #64	; 0x40
 80009a4:	f7ff fe42 	bl	800062c <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS, 0xFF);
 80009a8:	21ff      	movs	r1, #255	; 0xff
 80009aa:	2012      	movs	r0, #18
 80009ac:	f7ff fe3e 	bl	800062c <Write_Reg>
	Write_Reg(REG_IRQ_FLAGS_MASK, ~IRQ_LORA_TXDONE_MASK);
 80009b0:	21f7      	movs	r1, #247	; 0xf7
 80009b2:	2011      	movs	r0, #17
 80009b4:	f7ff fe3a 	bl	800062c <Write_Reg>

	Write_Reg(REG_FIFO_TX_BASE_AD, 0x00);
 80009b8:	2100      	movs	r1, #0
 80009ba:	200e      	movs	r0, #14
 80009bc:	f7ff fe36 	bl	800062c <Write_Reg>
	Write_Reg(REG_FIFO_ADDR_PTR, 0x00);
 80009c0:	2100      	movs	r1, #0
 80009c2:	200d      	movs	r0, #13
 80009c4:	f7ff fe32 	bl	800062c <Write_Reg>
	Write_Reg(REG_PAYLOAD_LENGTH, datalen);
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	4619      	mov	r1, r3
 80009cc:	2022      	movs	r0, #34	; 0x22
 80009ce:	f7ff fe2d 	bl	800062c <Write_Reg>

	Write_Buf(REG_FIFO, frame, datalen);
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	461a      	mov	r2, r3
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff ff8b 	bl	80008f4 <Write_Buf>
	set_OPMODE(OPMODE_TX);
 80009de:	2003      	movs	r0, #3
 80009e0:	f7ff fe4e 	bl	8000680 <set_OPMODE>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <set_Power>:

void set_Power(int8_t pw) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	if(pw >= 17) {
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b10      	cmp	r3, #16
 80009fc:	dd02      	ble.n	8000a04 <set_Power+0x18>
		pw = 15;
 80009fe:	230f      	movs	r3, #15
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e005      	b.n	8000a10 <set_Power+0x24>
	} else if(pw < 2) {
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	dc01      	bgt.n	8000a10 <set_Power+0x24>
		pw = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	71fb      	strb	r3, [r7, #7]
	}
	Write_Reg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	2009      	movs	r0, #9
 8000a24:	f7ff fe02 	bl	800062c <Write_Reg>
	Write_Reg(RegPaDac, Read_Reg(RegPaDac)|0x4);
 8000a28:	205a      	movs	r0, #90	; 0x5a
 8000a2a:	f7ff fdd9 	bl	80005e0 <Read_Reg>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	205a      	movs	r0, #90	; 0x5a
 8000a3a:	f7ff fdf7 	bl	800062c <Write_Reg>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <Mode_Write>:
 *      Author: kus
 */

#include "RTC.h"

static void Mode_Write(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SDA;
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <Mode_Write+0x24>)
 8000a60:	f001 fc74 	bl	800234c <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020800 	.word	0x40020800

08000a70 <Mode_Read>:

static void Mode_Read(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SDA;
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <Mode_Read+0x28>)
 8000a8c:	f001 fc5e 	bl	800234c <HAL_GPIO_Init>
}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40020800 	.word	0x40020800

08000a9c <Send_Command>:

static void Send_Command(uint8_t command) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < 8; i ++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e01e      	b.n	8000aea <Send_Command+0x4e>

		HAL_GPIO_WritePin(GPIOC, SDA, (command & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <Send_Command+0x60>)
 8000aba:	f001 fde3 	bl	8002684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <Send_Command+0x60>)
 8000ac4:	f001 fdde 	bl	8002684 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f001 f8c3 	bl	8001c54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	480a      	ldr	r0, [pc, #40]	; (8000afc <Send_Command+0x60>)
 8000ad4:	f001 fdd6 	bl	8002684 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f001 f8bb 	bl	8001c54 <HAL_Delay>

		command >>= 1;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	085b      	lsrs	r3, r3, #1
 8000ae2:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < 8; i ++){
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	2b07      	cmp	r3, #7
 8000aee:	d9dd      	bls.n	8000aac <Send_Command+0x10>
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020800 	.word	0x40020800

08000b00 <Write_Byte>:


static void Write_Byte(uint8_t address, uint8_t value){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOC, RST_RTC,  GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <Write_Byte+0x8c>)
 8000b18:	f001 fdb4 	bl	8002684 <HAL_GPIO_WritePin>
	Send_Command(address);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ffbc 	bl	8000a9c <Send_Command>

	for ( uint8_t i = 0; i < 8; i ++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e01e      	b.n	8000b68 <Write_Byte+0x68>
		HAL_GPIO_WritePin(GPIOC, SDA, (value & 1) ?  GPIO_PIN_SET :  GPIO_PIN_RESET);
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <Write_Byte+0x8c>)
 8000b38:	f001 fda4 	bl	8002684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <Write_Byte+0x8c>)
 8000b42:	f001 fd9f 	bl	8002684 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f001 f884 	bl	8001c54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	480e      	ldr	r0, [pc, #56]	; (8000b8c <Write_Byte+0x8c>)
 8000b52:	f001 fd97 	bl	8002684 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f001 f87c 	bl	8001c54 <HAL_Delay>

		value >>= 1;
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	71bb      	strb	r3, [r7, #6]
	for ( uint8_t i = 0; i < 8; i ++) {
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	3301      	adds	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	d9dd      	bls.n	8000b2a <Write_Byte+0x2a>
	}

	HAL_GPIO_WritePin(GPIOC, RST_RTC,  GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <Write_Byte+0x8c>)
 8000b76:	f001 fd85 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SDA,  GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <Write_Byte+0x8c>)
 8000b80:	f001 fd80 	bl	8002684 <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40020800 	.word	0x40020800

08000b90 <Read_Byte>:


static uint8_t Read_Byte(uint8_t address)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOC, RST_RTC,  GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	4822      	ldr	r0, [pc, #136]	; (8000c30 <Read_Byte+0xa0>)
 8000ba6:	f001 fd6d 	bl	8002684 <HAL_GPIO_WritePin>
	address = address | 0x01;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]

	Send_Command(address);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff71 	bl	8000a9c <Send_Command>
	Mode_Read();
 8000bba:	f7ff ff59 	bl	8000a70 <Mode_Read>
	for ( uint8_t i = 0; i < 8; i ++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73bb      	strb	r3, [r7, #14]
 8000bc2:	e020      	b.n	8000c06 <Read_Byte+0x76>
		Temp >>= 1;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
		if(HAL_GPIO_ReadPin(GPIOC, SDA))
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <Read_Byte+0xa0>)
 8000bce:	f001 fd41 	bl	8002654 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <Read_Byte+0x50>
			Temp |= 0x80;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bde:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <Read_Byte+0xa0>)
 8000be6:	f001 fd4d 	bl	8002684 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f001 f832 	bl	8001c54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	480e      	ldr	r0, [pc, #56]	; (8000c30 <Read_Byte+0xa0>)
 8000bf6:	f001 fd45 	bl	8002684 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f001 f82a 	bl	8001c54 <HAL_Delay>
	for ( uint8_t i = 0; i < 8; i ++){
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	3301      	adds	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d9db      	bls.n	8000bc4 <Read_Byte+0x34>
	}
	Mode_Write();
 8000c0c:	f7ff ff1c 	bl	8000a48 <Mode_Write>

	HAL_GPIO_WritePin(GPIOC, RST_RTC,  GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <Read_Byte+0xa0>)
 8000c18:	f001 fd34 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SDA,  GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <Read_Byte+0xa0>)
 8000c22:	f001 fd2f 	bl	8002684 <HAL_GPIO_WritePin>
	return Temp;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020800 	.word	0x40020800

08000c34 <Read_Time>:
	Write_Byte(REG_CONTROL,0x80);
	HAL_Delay(1);
}


void Read_Time(uint8_t *buffor){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
   	uint8_t Temp;

	Temp = Read_Byte(REG_YEAR);
 8000c3c:	208c      	movs	r0, #140	; 0x8c
 8000c3e:	f7ff ffa7 	bl	8000b90 <Read_Byte>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]
	buffor[1] = BCD_to_Hex(Temp);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3301      	adds	r3, #1
 8000c62:	440a      	add	r2, r1
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_MONTH);
 8000c68:	2088      	movs	r0, #136	; 0x88
 8000c6a:	f7ff ff91 	bl	8000b90 <Read_Byte>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	73fb      	strb	r3, [r7, #15]
	buffor[2] = BCD_to_Hex(Temp);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	440a      	add	r2, r1
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_DATE);
 8000c94:	2086      	movs	r0, #134	; 0x86
 8000c96:	f7ff ff7b 	bl	8000b90 <Read_Byte>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	73fb      	strb	r3, [r7, #15]
	buffor[3] = BCD_to_Hex(Temp);
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	b2d9      	uxtb	r1, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3303      	adds	r3, #3
 8000cba:	440a      	add	r2, r1
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_HOUR);
 8000cc0:	2084      	movs	r0, #132	; 0x84
 8000cc2:	f7ff ff65 	bl	8000b90 <Read_Byte>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
	buffor[4] = BCD_to_Hex(Temp);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	b2d9      	uxtb	r1, r3
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	440a      	add	r2, r1
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_MIN);
 8000cec:	2082      	movs	r0, #130	; 0x82
 8000cee:	f7ff ff4f 	bl	8000b90 <Read_Byte>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
	buffor[5] = BCD_to_Hex(Temp);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	b2d9      	uxtb	r1, r3
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3305      	adds	r3, #5
 8000d12:	440a      	add	r2, r1
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(  (REG_SEC)  ) & 0x7F ;
 8000d18:	2080      	movs	r0, #128	; 0x80
 8000d1a:	f7ff ff39 	bl	8000b90 <Read_Byte>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d24:	73fb      	strb	r3, [r7, #15]
	buffor[6] = BCD_to_Hex(Temp);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3306      	adds	r3, #6
 8000d42:	440a      	add	r2, r1
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	701a      	strb	r2, [r3, #0]
	Temp = Read_Byte(REG_DAY);
 8000d48:	208a      	movs	r0, #138	; 0x8a
 8000d4a:	f7ff ff21 	bl	8000b90 <Read_Byte>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
	buffor[7] = BCD_to_Hex(Temp);
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	b2d9      	uxtb	r1, r3
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3307      	adds	r3, #7
 8000d6e:	440a      	add	r2, r1
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <RTC_Init>:

void RTC_Init(void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = SCLK | SDA | RST_RTC;
 8000d82:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d86:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode =  GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <RTC_Init+0x50>)
 8000d96:	f001 fad9 	bl	800234c <HAL_GPIO_Init>

	Write_Byte(REG_CHARGER,0x00);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2090      	movs	r0, #144	; 0x90
 8000d9e:	f7ff feaf 	bl	8000b00 <Write_Byte>

	HAL_GPIO_WritePin(GPIOC, RST_RTC,  GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <RTC_Init+0x50>)
 8000daa:	f001 fc6b 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SCLK,  GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <RTC_Init+0x50>)
 8000db4:	f001 fc66 	bl	8002684 <HAL_GPIO_WritePin>

	DWT->CTRL |= 1 ;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <RTC_Init+0x54>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <RTC_Init+0x54>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	e0001000 	.word	0xe0001000

08000dd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_ADC1_Init+0x9c>)
 8000dea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000dee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000df2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_ADC1_Init+0xa0>)
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e36:	f000 ff31 	bl	8001c9c <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e40:	f000 fbce 	bl	80015e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e44:	230c      	movs	r3, #12
 8000e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e56:	f000 ff65 	bl	8001d24 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e60:	f000 fbbe 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20004be0 	.word	0x20004be0
 8000e70:	40012000 	.word	0x40012000
 8000e74:	0f000001 	.word	0x0f000001

08000e78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_ADC_MspInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d127      	bne.n	8000eea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SUN_UP_Pin|SUN_DOWN_Pin|SUN_LEFT_Pin|SUN_RIGHT_Pin;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_ADC_MspInit+0x84>)
 8000ee6:	f001 fa31 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40012000 	.word	0x40012000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020800 	.word	0x40020800

08000f00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <MX_FREERTOS_Init+0x18>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_FREERTOS_Init+0x1c>)
 8000f0a:	f003 fd11 	bl	8004930 <osThreadNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <MX_FREERTOS_Init+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08008368 	.word	0x08008368
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	20004c28 	.word	0x20004c28

08000f24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f003 fd91 	bl	8004a54 <osDelay>
 8000f32:	e7fb      	b.n	8000f2c <StartDefaultTask+0x8>

08000f34 <MX_GPIO_Init>:
     PB12   ------> I2S2_WS
     PC7   ------> I2S3_MCK
     PA9   ------> USB_OTG_FS_VBUS
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	4b7a      	ldr	r3, [pc, #488]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a79      	ldr	r2, [pc, #484]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b77      	ldr	r3, [pc, #476]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a72      	ldr	r2, [pc, #456]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b70      	ldr	r3, [pc, #448]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b69      	ldr	r3, [pc, #420]	; (8001138 <MX_GPIO_Init+0x204>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b65      	ldr	r3, [pc, #404]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a64      	ldr	r2, [pc, #400]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a5d      	ldr	r2, [pc, #372]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b57      	ldr	r3, [pc, #348]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a56      	ldr	r2, [pc, #344]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b54      	ldr	r3, [pc, #336]	; (8001138 <MX_GPIO_Init+0x204>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|LIGHT_KIT_Pin|LIGHT_HALL_Pin|LIGHT_GAR_Pin
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f645 4108 	movw	r1, #23560	; 0x5c08
 8000ff8:	4850      	ldr	r0, [pc, #320]	; (800113c <MX_GPIO_Init+0x208>)
 8000ffa:	f001 fb43 	bl	8002684 <HAL_GPIO_WritePin>
                          |CM_BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2103      	movs	r1, #3
 8001002:	484f      	ldr	r0, [pc, #316]	; (8001140 <MX_GPIO_Init+0x20c>)
 8001004:	f001 fb3e 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800100e:	484d      	ldr	r0, [pc, #308]	; (8001144 <MX_GPIO_Init+0x210>)
 8001010:	f001 fb38 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin|MOTION_KIT_Pin|MOTION_HALL_Pin|MOTION_GAR_Pin
 8001014:	f24a 3384 	movw	r3, #41860	; 0xa384
 8001018:	61fb      	str	r3, [r7, #28]
                          |CMS_Pin|DOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4844      	ldr	r0, [pc, #272]	; (800113c <MX_GPIO_Init+0x208>)
 800102a:	f001 f98f 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LIGHT_KIT_Pin|LIGHT_HALL_Pin|LIGHT_GAR_Pin
 800102e:	f645 4308 	movw	r3, #23560	; 0x5c08
 8001032:	61fb      	str	r3, [r7, #28]
                          |CM_BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	483d      	ldr	r0, [pc, #244]	; (800113c <MX_GPIO_Init+0x208>)
 8001048:	f001 f980 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800104c:	2332      	movs	r3, #50	; 0x32
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001050:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4836      	ldr	r0, [pc, #216]	; (800113c <MX_GPIO_Init+0x208>)
 8001062:	f001 f973 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001066:	2301      	movs	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800106a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4833      	ldr	r0, [pc, #204]	; (8001148 <MX_GPIO_Init+0x214>)
 800107c:	f001 f966 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 8001080:	2303      	movs	r3, #3
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	482a      	ldr	r0, [pc, #168]	; (8001140 <MX_GPIO_Init+0x20c>)
 8001098:	f001 f958 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109c:	2304      	movs	r3, #4
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4824      	ldr	r0, [pc, #144]	; (8001140 <MX_GPIO_Init+0x20c>)
 80010b0:	f001 f94c 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80010b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c6:	2305      	movs	r3, #5
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	481b      	ldr	r0, [pc, #108]	; (8001140 <MX_GPIO_Init+0x20c>)
 80010d2:	f001 f93b 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80010d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4815      	ldr	r0, [pc, #84]	; (8001144 <MX_GPIO_Init+0x210>)
 80010f0:	f001 f92c 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001104:	2306      	movs	r3, #6
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <MX_GPIO_Init+0x218>)
 8001110:	f001 f91c 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_GPIO_Init+0x214>)
 800112a:	f001 f90f 	bl	800234c <HAL_GPIO_Init>

}
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40021000 	.word	0x40021000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40020000 	.word	0x40020000
 800114c:	40020800 	.word	0x40020800

08001150 <light_kitchen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void light_kitchen	(void *pvParameters){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	while(1){

		isKitchenEmpty = HAL_GPIO_ReadPin(MOTION_KIT_GPIO_Port, MOTION_KIT_Pin);
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <light_kitchen+0x44>)
 800115c:	f001 fa7a 	bl	8002654 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <light_kitchen+0x48>)
 8001166:	701a      	strb	r2, [r3, #0]

		if( !isKitchenEmpty )
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <light_kitchen+0x48>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <light_kitchen+0x2e>
			HAL_GPIO_WritePin(LIGHT_KIT_GPIO_Port, LIGHT_KIT_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <light_kitchen+0x44>)
 8001178:	f001 fa84 	bl	8002684 <HAL_GPIO_WritePin>
 800117c:	e005      	b.n	800118a <light_kitchen+0x3a>
		else
			HAL_GPIO_WritePin(LIGHT_KIT_GPIO_Port, LIGHT_KIT_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <light_kitchen+0x44>)
 8001186:	f001 fa7d 	bl	8002684 <HAL_GPIO_WritePin>

		vTaskDelay( 100 / portTICK_PERIOD_MS);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f004 fbf4 	bl	8005978 <vTaskDelay>
		isKitchenEmpty = HAL_GPIO_ReadPin(MOTION_KIT_GPIO_Port, MOTION_KIT_Pin);
 8001190:	e7e2      	b.n	8001158 <light_kitchen+0x8>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	20000098 	.word	0x20000098

0800119c <light_hall>:

	}
	vTaskDelete(NULL);
}

void light_hall		(void *pvParameters){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	while(1){

		isHallEmpty = HAL_GPIO_ReadPin(MOTION_HALL_GPIO_Port, MOTION_HALL_Pin);
 80011a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <light_hall+0x44>)
 80011aa:	f001 fa53 	bl	8002654 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <light_hall+0x48>)
 80011b4:	701a      	strb	r2, [r3, #0]

		if( !isHallEmpty )
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <light_hall+0x48>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <light_hall+0x30>
			HAL_GPIO_WritePin(LIGHT_HALL_GPIO_Port, LIGHT_HALL_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <light_hall+0x44>)
 80011c6:	f001 fa5d 	bl	8002684 <HAL_GPIO_WritePin>
 80011ca:	e005      	b.n	80011d8 <light_hall+0x3c>
		else
			HAL_GPIO_WritePin(LIGHT_HALL_GPIO_Port, LIGHT_HALL_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <light_hall+0x44>)
 80011d4:	f001 fa56 	bl	8002684 <HAL_GPIO_WritePin>

		vTaskDelay( 100 / portTICK_PERIOD_MS);
 80011d8:	2064      	movs	r0, #100	; 0x64
 80011da:	f004 fbcd 	bl	8005978 <vTaskDelay>
		isHallEmpty = HAL_GPIO_ReadPin(MOTION_HALL_GPIO_Port, MOTION_HALL_Pin);
 80011de:	e7e1      	b.n	80011a4 <light_hall+0x8>
 80011e0:	40021000 	.word	0x40021000
 80011e4:	20000099 	.word	0x20000099

080011e8 <light_garage>:

	}
	vTaskDelete(NULL);
}

void light_garage	(void *pvParameters){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	while(1){

		isGarageEmpty = HAL_GPIO_ReadPin(MOTION_GAR_GPIO_Port, MOTION_GAR_Pin);
 80011f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <light_garage+0x44>)
 80011f6:	f001 fa2d 	bl	8002654 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <light_garage+0x48>)
 8001200:	701a      	strb	r2, [r3, #0]

		if( !isGarageEmpty )
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <light_garage+0x48>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <light_garage+0x30>
			HAL_GPIO_WritePin(LIGHT_GAR_GPIO_Port, LIGHT_GAR_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <light_garage+0x44>)
 8001212:	f001 fa37 	bl	8002684 <HAL_GPIO_WritePin>
 8001216:	e005      	b.n	8001224 <light_garage+0x3c>
		else
			HAL_GPIO_WritePin(LIGHT_GAR_GPIO_Port, LIGHT_GAR_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <light_garage+0x44>)
 8001220:	f001 fa30 	bl	8002684 <HAL_GPIO_WritePin>

		vTaskDelay( 100 / portTICK_PERIOD_MS);
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f004 fba7 	bl	8005978 <vTaskDelay>
		isGarageEmpty = HAL_GPIO_ReadPin(MOTION_GAR_GPIO_Port, MOTION_GAR_Pin);
 800122a:	e7e1      	b.n	80011f0 <light_garage+0x8>
 800122c:	40021000 	.word	0x40021000
 8001230:	2000009a 	.word	0x2000009a

08001234 <carbon_sensor>:

	}
	vTaskDelete(NULL);
}

void carbon_sensor	(void *pvParameters){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	while(1){

		isCMSensor = HAL_GPIO_ReadPin(CMS_GPIO_Port, CMS_Pin);
 800123c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <carbon_sensor+0x44>)
 8001242:	f001 fa07 	bl	8002654 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <carbon_sensor+0x48>)
 800124c:	701a      	strb	r2, [r3, #0]

		if( !isGarageEmpty )
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <carbon_sensor+0x4c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <carbon_sensor+0x30>
			HAL_GPIO_WritePin(CM_BUZZER_GPIO_Port, CM_BUZZER_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <carbon_sensor+0x44>)
 800125e:	f001 fa11 	bl	8002684 <HAL_GPIO_WritePin>
 8001262:	e005      	b.n	8001270 <carbon_sensor+0x3c>
		else
			HAL_GPIO_WritePin(CM_BUZZER_GPIO_Port, CM_BUZZER_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <carbon_sensor+0x44>)
 800126c:	f001 fa0a 	bl	8002684 <HAL_GPIO_WritePin>

		vTaskDelay( 10 / portTICK_PERIOD_MS);
 8001270:	200a      	movs	r0, #10
 8001272:	f004 fb81 	bl	8005978 <vTaskDelay>
		isCMSensor = HAL_GPIO_ReadPin(CMS_GPIO_Port, CMS_Pin);
 8001276:	e7e1      	b.n	800123c <carbon_sensor+0x8>
 8001278:	40021000 	.word	0x40021000
 800127c:	2000009b 	.word	0x2000009b
 8001280:	2000009a 	.word	0x2000009a

08001284 <temp_humid>:
	}
	vTaskDelete(NULL);
}

void temp_humid 	(void *pvParameters){
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	while(1){
 800128c:	e7fe      	b.n	800128c <temp_humid+0x8>
	...

08001290 <clock>:

	}
	vTaskDelete(NULL);
}

void clock			(void *pvParameters){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	while(1){
		Read_Time(buffor);
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <clock+0x48>)
 800129a:	f7ff fccb 	bl	8000c34 <Read_Time>

		year = buffor[1];
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <clock+0x48>)
 80012a0:	785a      	ldrb	r2, [r3, #1]
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <clock+0x4c>)
 80012a4:	701a      	strb	r2, [r3, #0]
		month = buffor[2];
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <clock+0x48>)
 80012a8:	789a      	ldrb	r2, [r3, #2]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <clock+0x50>)
 80012ac:	701a      	strb	r2, [r3, #0]
		day = buffor[3];
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <clock+0x48>)
 80012b0:	78da      	ldrb	r2, [r3, #3]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <clock+0x54>)
 80012b4:	701a      	strb	r2, [r3, #0]

		hours = buffor[4];
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <clock+0x48>)
 80012b8:	791a      	ldrb	r2, [r3, #4]
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <clock+0x58>)
 80012bc:	701a      	strb	r2, [r3, #0]
		minutes = buffor[5];
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <clock+0x48>)
 80012c0:	795a      	ldrb	r2, [r3, #5]
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <clock+0x5c>)
 80012c4:	701a      	strb	r2, [r3, #0]
		seconds = buffor[6];
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <clock+0x48>)
 80012c8:	799a      	ldrb	r2, [r3, #6]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <clock+0x60>)
 80012cc:	701a      	strb	r2, [r3, #0]

		vTaskDelay( 500 / portTICK_PERIOD_MS);
 80012ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d2:	f004 fb51 	bl	8005978 <vTaskDelay>
		Read_Time(buffor);
 80012d6:	e7df      	b.n	8001298 <clock+0x8>
 80012d8:	20000000 	.word	0x20000000
 80012dc:	200000a2 	.word	0x200000a2
 80012e0:	200000a1 	.word	0x200000a1
 80012e4:	200000a0 	.word	0x200000a0
 80012e8:	2000009d 	.word	0x2000009d
 80012ec:	2000009e 	.word	0x2000009e
 80012f0:	2000009f 	.word	0x2000009f

080012f4 <door>:
	}
	vTaskDelete(NULL);
}

void door 			(void *pvParameters){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	while(1){
		isDoorClosed = HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin);
 80012fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <door+0x24>)
 8001302:	f001 f9a7 	bl	8002654 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <door+0x28>)
 800130c:	701a      	strb	r2, [r3, #0]
		vTaskDelay( 300 / portTICK_PERIOD_MS);
 800130e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001312:	f004 fb31 	bl	8005978 <vTaskDelay>
		isDoorClosed = HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin);
 8001316:	e7f1      	b.n	80012fc <door+0x8>
 8001318:	40021000 	.word	0x40021000
 800131c:	2000009c 	.word	0x2000009c

08001320 <pressure>:
	}
	vTaskDelete(NULL);
}

void pressure		(void *pvParameters){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	while(1){
 8001328:	e7fe      	b.n	8001328 <pressure+0x8>
	...

0800132c <TX_radio>:
	vTaskDelete(NULL);
}



void TX_radio(void *pvParameters){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	while(1){
		set_OPMODE(OPMODE_TX);
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff f9a3 	bl	8000680 <set_OPMODE>
		Transmit(tx_data, strlen((char*)tx_data));
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <TX_radio+0x28>)
 800133c:	f7fe ff50 	bl	80001e0 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <TX_radio+0x28>)
 8001348:	f7ff fb20 	bl	800098c <Transmit>
		vTaskDelay( 100 / portTICK_PERIOD_MS);
 800134c:	2064      	movs	r0, #100	; 0x64
 800134e:	f004 fb13 	bl	8005978 <vTaskDelay>
	while(1){
 8001352:	e7ef      	b.n	8001334 <TX_radio+0x8>
 8001354:	20004ae0 	.word	0x20004ae0

08001358 <RX_radio>:
	}
	vTaskDelete(NULL);
}

void RX_radio(void *pvParameters){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	while(1){
		set_OPMODE(OPMODE_RX);
 8001360:	2005      	movs	r0, #5
 8001362:	f7ff f98d 	bl	8000680 <set_OPMODE>
		Receive(rx_data);
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <RX_radio+0x20>)
 8001368:	f7ff fa80 	bl	800086c <Receive>
		vTaskDelay( 400 / portTICK_PERIOD_MS);
 800136c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001370:	f004 fb02 	bl	8005978 <vTaskDelay>
		set_OPMODE(OPMODE_RX);
 8001374:	e7f4      	b.n	8001360 <RX_radio+0x8>
 8001376:	bf00      	nop
 8001378:	200049e0 	.word	0x200049e0

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001382:	f000 fbf5 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f8c3 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f7ff fdd3 	bl	8000f34 <MX_GPIO_Init>
  MX_SPI1_Init();
 800138e:	f000 f92d 	bl	80015ec <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001392:	f000 fb51 	bl	8001a38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001396:	f7ff fd1d 	bl	8000dd4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800139a:	f000 fa8d 	bl	80018b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate( light_kitchen	, "LIGHT_KITCHEN_TASK"		, 100, NULL, 1, light_kit_handle );
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <main+0x11c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	2264      	movs	r2, #100	; 0x64
 80013ac:	493b      	ldr	r1, [pc, #236]	; (800149c <main+0x120>)
 80013ae:	483c      	ldr	r0, [pc, #240]	; (80014a0 <main+0x124>)
 80013b0:	f004 f99d 	bl	80056ee <xTaskCreate>
  xTaskCreate( light_hall		, "LIGHT_HALL_TASK"			, 100, NULL, 1, light_hall_handle );
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <main+0x128>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	2264      	movs	r2, #100	; 0x64
 80013c2:	4939      	ldr	r1, [pc, #228]	; (80014a8 <main+0x12c>)
 80013c4:	4839      	ldr	r0, [pc, #228]	; (80014ac <main+0x130>)
 80013c6:	f004 f992 	bl	80056ee <xTaskCreate>
  xTaskCreate( light_garage		, "LIGHT_GARAGE_TASK"		, 100, NULL, 1, light_gar_handle );
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <main+0x134>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	2264      	movs	r2, #100	; 0x64
 80013d8:	4936      	ldr	r1, [pc, #216]	; (80014b4 <main+0x138>)
 80013da:	4837      	ldr	r0, [pc, #220]	; (80014b8 <main+0x13c>)
 80013dc:	f004 f987 	bl	80056ee <xTaskCreate>

  xTaskCreate( carbon_sensor	, "CARBON_SENSOR_TASK" 		, 100, NULL, 1, carbon_sensor_handle );
 80013e0:	4b36      	ldr	r3, [pc, #216]	; (80014bc <main+0x140>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2300      	movs	r3, #0
 80013ec:	2264      	movs	r2, #100	; 0x64
 80013ee:	4934      	ldr	r1, [pc, #208]	; (80014c0 <main+0x144>)
 80013f0:	4834      	ldr	r0, [pc, #208]	; (80014c4 <main+0x148>)
 80013f2:	f004 f97c 	bl	80056ee <xTaskCreate>
  xTaskCreate( temp_humid 		, "FLOOD_PROTECTION_TASK"	, 200, NULL, 2, temp_humid_handle );
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <main+0x14c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2302      	movs	r3, #2
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2300      	movs	r3, #0
 8001402:	22c8      	movs	r2, #200	; 0xc8
 8001404:	4931      	ldr	r1, [pc, #196]	; (80014cc <main+0x150>)
 8001406:	4832      	ldr	r0, [pc, #200]	; (80014d0 <main+0x154>)
 8001408:	f004 f971 	bl	80056ee <xTaskCreate>
  xTaskCreate( pressure			, "PRESSURE_TASK"			, 100, NULL, 1, pressure_handle );
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <main+0x158>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2301      	movs	r3, #1
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2264      	movs	r2, #100	; 0x64
 800141a:	492f      	ldr	r1, [pc, #188]	; (80014d8 <main+0x15c>)
 800141c:	482f      	ldr	r0, [pc, #188]	; (80014dc <main+0x160>)
 800141e:	f004 f966 	bl	80056ee <xTaskCreate>

  xTaskCreate( clock			, "CLOCK"					, 100, NULL, 2, clock_handle );
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <main+0x164>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2302      	movs	r3, #2
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2264      	movs	r2, #100	; 0x64
 8001430:	492c      	ldr	r1, [pc, #176]	; (80014e4 <main+0x168>)
 8001432:	482d      	ldr	r0, [pc, #180]	; (80014e8 <main+0x16c>)
 8001434:	f004 f95b 	bl	80056ee <xTaskCreate>
  xTaskCreate( door				, "DOOR"					, 100, NULL, 1, door_handle );
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <main+0x170>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2301      	movs	r3, #1
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	2264      	movs	r2, #100	; 0x64
 8001446:	492a      	ldr	r1, [pc, #168]	; (80014f0 <main+0x174>)
 8001448:	482a      	ldr	r0, [pc, #168]	; (80014f4 <main+0x178>)
 800144a:	f004 f950 	bl	80056ee <xTaskCreate>

  xTaskCreate( TX_radio			, "RADIO_TRANSMIT"			, 100, NULL, 2, tx_handle );
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <main+0x17c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2302      	movs	r3, #2
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	4927      	ldr	r1, [pc, #156]	; (80014fc <main+0x180>)
 800145e:	4828      	ldr	r0, [pc, #160]	; (8001500 <main+0x184>)
 8001460:	f004 f945 	bl	80056ee <xTaskCreate>
  xTaskCreate( RX_radio			, "RADIO_RECEIVE"			, 100, NULL, 1, rx_handle );
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <main+0x188>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2301      	movs	r3, #1
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	2264      	movs	r2, #100	; 0x64
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <main+0x18c>)
 8001474:	4825      	ldr	r0, [pc, #148]	; (800150c <main+0x190>)
 8001476:	f004 f93a 	bl	80056ee <xTaskCreate>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800147a:	f003 fa0f 	bl	800489c <osKernelInitialize>
  MX_FREERTOS_Init();
 800147e:	f7ff fd3f 	bl	8000f00 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001482:	f003 fa2f 	bl	80048e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RTC_Init();
 8001486:	f7ff fc79 	bl	8000d7c <RTC_Init>
  LoRa_init(868);
 800148a:	f44f 7059 	mov.w	r0, #868	; 0x364
 800148e:	f04f 0100 	mov.w	r1, #0
 8001492:	f7ff f9a9 	bl	80007e8 <LoRa_init>

  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0x11a>
 8001498:	20004c30 	.word	0x20004c30
 800149c:	080082ac 	.word	0x080082ac
 80014a0:	08001151 	.word	0x08001151
 80014a4:	20004c40 	.word	0x20004c40
 80014a8:	080082c0 	.word	0x080082c0
 80014ac:	0800119d 	.word	0x0800119d
 80014b0:	20004c3c 	.word	0x20004c3c
 80014b4:	080082d0 	.word	0x080082d0
 80014b8:	080011e9 	.word	0x080011e9
 80014bc:	20004c2c 	.word	0x20004c2c
 80014c0:	080082e4 	.word	0x080082e4
 80014c4:	08001235 	.word	0x08001235
 80014c8:	20004c4c 	.word	0x20004c4c
 80014cc:	080082f8 	.word	0x080082f8
 80014d0:	08001285 	.word	0x08001285
 80014d4:	20004c44 	.word	0x20004c44
 80014d8:	08008310 	.word	0x08008310
 80014dc:	08001321 	.word	0x08001321
 80014e0:	20004c38 	.word	0x20004c38
 80014e4:	08008320 	.word	0x08008320
 80014e8:	08001291 	.word	0x08001291
 80014ec:	20004c50 	.word	0x20004c50
 80014f0:	08008328 	.word	0x08008328
 80014f4:	080012f5 	.word	0x080012f5
 80014f8:	20004c34 	.word	0x20004c34
 80014fc:	08008330 	.word	0x08008330
 8001500:	0800132d 	.word	0x0800132d
 8001504:	20004c48 	.word	0x20004c48
 8001508:	08008340 	.word	0x08008340
 800150c:	08001359 	.word	0x08001359

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	2230      	movs	r2, #48	; 0x30
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f005 ff44 	bl	80073ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <SystemClock_Config+0xc8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <SystemClock_Config+0xc8>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <SystemClock_Config+0xc8>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <SystemClock_Config+0xcc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <SystemClock_Config+0xcc>)
 800155a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <SystemClock_Config+0xcc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800156c:	2301      	movs	r3, #1
 800156e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001570:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001576:	2302      	movs	r3, #2
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001584:	23c0      	movs	r3, #192	; 0xc0
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001588:	2304      	movs	r3, #4
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800158c:	2308      	movs	r3, #8
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f001 f88f 	bl	80026b8 <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a0:	f000 f81e 	bl	80015e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2103      	movs	r1, #3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 faf1 	bl	8002ba8 <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015cc:	f000 f808 	bl	80015e0 <Error_Handler>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3750      	adds	r7, #80	; 0x50
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_SPI1_Init+0x64>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <MX_SPI1_Init+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI1_Init+0x64>)
 80015f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI1_Init+0x64>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI1_Init+0x64>)
 8001638:	220a      	movs	r2, #10
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_SPI1_Init+0x64>)
 800163e:	f001 fcaf 	bl	8002fa0 <HAL_SPI_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001648:	f7ff ffca 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20004c54 	.word	0x20004c54
 8001654:	40013000 	.word	0x40013000

08001658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_SPI_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12b      	bne.n	80016d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016b2:	23e0      	movs	r3, #224	; 0xe0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c2:	2305      	movs	r3, #5
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <HAL_SPI_MspInit+0x8c>)
 80016ce:	f000 fe3d 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40013000 	.word	0x40013000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_MspInit+0x54>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_MspInit+0x54>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_MspInit+0x54>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_MspInit+0x54>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_MspInit+0x54>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210f      	movs	r1, #15
 800172a:	f06f 0001 	mvn.w	r0, #1
 800172e:	f000 fde4 	bl	80022fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 fa50 	bl	8001c14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001774:	f004 fd7c 	bl	8006270 <xTaskGetSchedulerState>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d001      	beq.n	8001782 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800177e:	f005 fb63 	bl	8006e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e00a      	b.n	80017ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001798:	f3af 8000 	nop.w
 800179c:	4601      	mov	r1, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf0      	blt.n	8001798 <_read+0x12>
	}

return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e8:	605a      	str	r2, [r3, #4]
	return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_isatty>:

int _isatty(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f005 fd70 	bl	800733c <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20020000 	.word	0x20020000
 8001888:	00000400 	.word	0x00000400
 800188c:	200000a4 	.word	0x200000a4
 8001890:	20004d90 	.word	0x20004d90

08001894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <MX_TIM4_Init+0xc0>)
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <MX_TIM4_Init+0xc4>)
 80018de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <MX_TIM4_Init+0xc0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <MX_TIM4_Init+0xc0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MX_TIM4_Init+0xc0>)
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <MX_TIM4_Init+0xc0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_TIM4_Init+0xc0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001900:	481d      	ldr	r0, [pc, #116]	; (8001978 <MX_TIM4_Init+0xc0>)
 8001902:	f002 f8f5 	bl	8003af0 <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800190c:	f7ff fe68 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4619      	mov	r1, r3
 800191e:	4816      	ldr	r0, [pc, #88]	; (8001978 <MX_TIM4_Init+0xc0>)
 8001920:	f002 fc04 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800192a:	f7ff fe59 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192e:	2360      	movs	r3, #96	; 0x60
 8001930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2208      	movs	r2, #8
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM4_Init+0xc0>)
 8001946:	f002 f923 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001950:	f7ff fe46 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	220c      	movs	r2, #12
 8001958:	4619      	mov	r1, r3
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <MX_TIM4_Init+0xc0>)
 800195c:	f002 f918 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001966:	f7ff fe3b 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <MX_TIM4_Init+0xc0>)
 800196c:	f000 f82a 	bl	80019c4 <HAL_TIM_MspPostInit>

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20004cac 	.word	0x20004cac
 800197c:	40000800 	.word	0x40000800

08001980 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_TIM_PWM_MspInit+0x3c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10d      	bne.n	80019ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_TIM_PWM_MspInit+0x40>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_TIM_PWM_MspInit+0x40>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_TIM_PWM_MspInit+0x40>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40000800 	.word	0x40000800
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_TIM_MspPostInit+0x68>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d11e      	bne.n	8001a24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ST_TOP_Pin|ST_BOTTOM_Pin;
 8001a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <HAL_TIM_MspPostInit+0x70>)
 8001a20:	f000 fc94 	bl	800234c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40000800 	.word	0x40000800
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020400 	.word	0x40020400

08001a38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART2_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f002 fbca 	bl	8004208 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f7ff fdb1 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20004cf4 	.word	0x20004cf4
 8001a88:	40004400 	.word	0x40004400

08001a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_UART_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af6:	2307      	movs	r3, #7
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_UART_MspInit+0x8c>)
 8001b02:	f000 fc23 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b46:	f7ff fea5 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f005 fbfd 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fc15 	bl	800137c <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b60:	0800844c 	.word	0x0800844c
  ldr r2, =_sbss
 8001b64:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b68:	20004d8c 	.word	0x20004d8c

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_Init+0x40>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_Init+0x40>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x40>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 fba3 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	200f      	movs	r0, #15
 8001ba0:	f000 f808 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fda0 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fbad 	bl	8002332 <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 fb83 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000010 	.word	0x20000010
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000010 	.word	0x20000010
 8001c38:	20004d38 	.word	0x20004d38

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20004d38 	.word	0x20004d38

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000010 	.word	0x20000010

08001c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e033      	b.n	8001d1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff f8dc 	bl	8000e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ce2:	f023 0302 	bic.w	r3, r3, #2
 8001ce6:	f043 0202 	orr.w	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f94a 	bl	8001f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
 8001d0a:	e001      	b.n	8001d10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x1c>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e113      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x244>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	d925      	bls.n	8001d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68d9      	ldr	r1, [r3, #12]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	3b1e      	subs	r3, #30
 8001d66:	2207      	movs	r2, #7
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	400a      	ands	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68d9      	ldr	r1, [r3, #12]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4403      	add	r3, r0
 8001d8e:	3b1e      	subs	r3, #30
 8001d90:	409a      	lsls	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	e022      	b.n	8001de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	2207      	movs	r2, #7
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4403      	add	r3, r0
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d824      	bhi.n	8001e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b05      	subs	r3, #5
 8001dfc:	221f      	movs	r2, #31
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b05      	subs	r3, #5
 8001e26:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
 8001e32:	e04c      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d824      	bhi.n	8001e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b23      	subs	r3, #35	; 0x23
 8001e4e:	221f      	movs	r2, #31
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43da      	mvns	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b23      	subs	r3, #35	; 0x23
 8001e78:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
 8001e84:	e023      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3b41      	subs	r3, #65	; 0x41
 8001e98:	221f      	movs	r2, #31
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b41      	subs	r3, #65	; 0x41
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_ADC_ConfigChannel+0x250>)
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_ADC_ConfigChannel+0x254>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d10f      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d8>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b12      	cmp	r3, #18
 8001ee2:	d10b      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_ADC_ConfigChannel+0x254>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12b      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x23a>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_ADC_ConfigChannel+0x258>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d003      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x1f4>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d122      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_ADC_ConfigChannel+0x258>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d111      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_ADC_ConfigChannel+0x25c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_ADC_ConfigChannel+0x260>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	0c9a      	lsrs	r2, r3, #18
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40012300 	.word	0x40012300
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	10000012 	.word	0x10000012
 8001f80:	20000008 	.word	0x20000008
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f90:	4b79      	ldr	r3, [pc, #484]	; (8002178 <ADC_Init+0x1f0>)
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	021a      	lsls	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	4a58      	ldr	r2, [pc, #352]	; (800217c <ADC_Init+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800202e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6899      	ldr	r1, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6899      	ldr	r1, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	e00f      	b.n	8002086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002084:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0202 	bic.w	r2, r2, #2
 8002094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6899      	ldr	r1, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7e1b      	ldrb	r3, [r3, #24]
 80020a0:	005a      	lsls	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	3b01      	subs	r3, #1
 80020e0:	035a      	lsls	r2, r3, #13
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	e007      	b.n	80020fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	3b01      	subs	r3, #1
 8002118:	051a      	lsls	r2, r3, #20
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800213e:	025a      	lsls	r2, r3, #9
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	029a      	lsls	r2, r3, #10
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	0f000001 	.word	0x0f000001

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff47 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff5c 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffb0 	bl	80022a0 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e159      	b.n	800261c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	f040 8148 	bne.w	8002616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	2b02      	cmp	r3, #2
 800239c:	d130      	bne.n	8002400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 0201 	and.w	r2, r3, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b03      	cmp	r3, #3
 800240a:	d017      	beq.n	800243c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d123      	bne.n	8002490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a2 	beq.w	8002616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_GPIO_Init+0x2e8>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_GPIO_Init+0x2e8>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <HAL_GPIO_Init+0x2e8>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ee:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_GPIO_Init+0x2ec>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_GPIO_Init+0x2f0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d019      	beq.n	800254e <HAL_GPIO_Init+0x202>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a48      	ldr	r2, [pc, #288]	; (8002640 <HAL_GPIO_Init+0x2f4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x1fe>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a47      	ldr	r2, [pc, #284]	; (8002644 <HAL_GPIO_Init+0x2f8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00d      	beq.n	8002546 <HAL_GPIO_Init+0x1fa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a46      	ldr	r2, [pc, #280]	; (8002648 <HAL_GPIO_Init+0x2fc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x1f6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a45      	ldr	r2, [pc, #276]	; (800264c <HAL_GPIO_Init+0x300>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_GPIO_Init+0x1f2>
 800253a:	2304      	movs	r3, #4
 800253c:	e008      	b.n	8002550 <HAL_GPIO_Init+0x204>
 800253e:	2307      	movs	r3, #7
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x204>
 8002542:	2303      	movs	r3, #3
 8002544:	e004      	b.n	8002550 <HAL_GPIO_Init+0x204>
 8002546:	2302      	movs	r3, #2
 8002548:	e002      	b.n	8002550 <HAL_GPIO_Init+0x204>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_GPIO_Init+0x204>
 800254e:	2300      	movs	r3, #0
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f002 0203 	and.w	r2, r2, #3
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	4093      	lsls	r3, r2
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002560:	4935      	ldr	r1, [pc, #212]	; (8002638 <HAL_GPIO_Init+0x2ec>)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_GPIO_Init+0x304>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002592:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <HAL_GPIO_Init+0x304>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_GPIO_Init+0x304>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025bc:	4a24      	ldr	r2, [pc, #144]	; (8002650 <HAL_GPIO_Init+0x304>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_GPIO_Init+0x304>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e6:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_GPIO_Init+0x304>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_GPIO_Init+0x304>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_GPIO_Init+0x304>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	f67f aea2 	bls.w	8002368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40013800 	.word	0x40013800
 800263c:	40020000 	.word	0x40020000
 8002640:	40020400 	.word	0x40020400
 8002644:	40020800 	.word	0x40020800
 8002648:	40020c00 	.word	0x40020c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40013c00 	.word	0x40013c00

08002654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e001      	b.n	8002676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e264      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d6:	4ba3      	ldr	r3, [pc, #652]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4ba0      	ldr	r3, [pc, #640]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b9d      	ldr	r3, [pc, #628]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b99      	ldr	r3, [pc, #612]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e23f      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b91      	ldr	r3, [pc, #580]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a90      	ldr	r2, [pc, #576]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b8b      	ldr	r3, [pc, #556]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a8a      	ldr	r2, [pc, #552]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b88      	ldr	r3, [pc, #544]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a87      	ldr	r2, [pc, #540]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b84      	ldr	r3, [pc, #528]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a83      	ldr	r2, [pc, #524]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff fa64 	bl	8001c3c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fa60 	bl	8001c3c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e204      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fa50 	bl	8001c3c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff fa4c 	bl	8001c3c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f0      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b62      	ldr	r3, [pc, #392]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b5f      	ldr	r3, [pc, #380]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b5c      	ldr	r3, [pc, #368]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c4      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4952      	ldr	r1, [pc, #328]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7ff fa05 	bl	8001c3c <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002836:	f7ff fa01 	bl	8001c3c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a5      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4940      	ldr	r1, [pc, #256]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f9e4 	bl	8001c3c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff f9e0 	bl	8001c3c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e184      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d030      	beq.n	8002904 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCC_OscConfig+0x2b4>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff f9c4 	bl	8001c3c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff f9c0 	bl	8001c3c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e164      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e015      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x2b4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff f9ad 	bl	8001c3c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff f9a9 	bl	8001c3c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e14d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a0 	beq.w	8002a52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x2b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d121      	bne.n	8002992 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCC_OscConfig+0x2b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <HAL_RCC_OscConfig+0x2b8>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7ff f96f 	bl	8001c3c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e011      	b.n	8002986 <HAL_RCC_OscConfig+0x2ce>
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	42470000 	.word	0x42470000
 800296c:	42470e80 	.word	0x42470e80
 8002970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7ff f962 	bl	8001c3c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e106      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_RCC_OscConfig+0x4e4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
 800299a:	4b81      	ldr	r3, [pc, #516]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a80      	ldr	r2, [pc, #512]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	e01c      	b.n	80029e2 <HAL_RCC_OscConfig+0x32a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x312>
 80029b0:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a77      	ldr	r2, [pc, #476]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x32a>
 80029ca:	4b75      	ldr	r3, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a74      	ldr	r2, [pc, #464]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	4b72      	ldr	r3, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a71      	ldr	r2, [pc, #452]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff f927 	bl	8001c3c <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff f923 	bl	8001c3c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0c5      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x33a>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7ff f911 	bl	8001c3c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff f90d 	bl	8001c3c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0af      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 809b 	beq.w	8002b92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d05c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d141      	bne.n	8002af4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7ff f8e1 	bl	8001c3c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7ff f8dd 	bl	8001c3c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e081      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a90:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
 8002ac0:	4937      	ldr	r1, [pc, #220]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff f8b6 	bl	8001c3c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff f8b2 	bl	8001c3c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e056      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x41c>
 8002af2:	e04e      	b.n	8002b92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff f89f 	bl	8001c3c <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b02:	f7ff f89b 	bl	8001c3c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e03f      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x44a>
 8002b20:	e037      	b.n	8002b92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e032      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d028      	beq.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d11a      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d111      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470060 	.word	0x42470060

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fe ffd0 	bl	8001c3c <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe ffcc 	bl	8001c3c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff30 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	0800838c 	.word	0x0800838c
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	2000000c 	.word	0x2000000c

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	2300      	movs	r3, #0
 8002d86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80bd 	bhi.w	8002f18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e0b7      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002daa:	60bb      	str	r3, [r7, #8]
       break;
 8002dac:	e0b7      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002db0:	60bb      	str	r3, [r7, #8]
      break;
 8002db2:	e0b4      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04d      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b58      	ldr	r3, [pc, #352]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	ea02 0800 	and.w	r8, r2, r0
 8002de2:	ea03 0901 	and.w	r9, r3, r1
 8002de6:	4640      	mov	r0, r8
 8002de8:	4649      	mov	r1, r9
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	014b      	lsls	r3, r1, #5
 8002df4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df8:	0142      	lsls	r2, r0, #5
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	ebb0 0008 	subs.w	r0, r0, r8
 8002e02:	eb61 0109 	sbc.w	r1, r1, r9
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	018b      	lsls	r3, r1, #6
 8002e10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e14:	0182      	lsls	r2, r0, #6
 8002e16:	1a12      	subs	r2, r2, r0
 8002e18:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1c:	f04f 0000 	mov.w	r0, #0
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	00d9      	lsls	r1, r3, #3
 8002e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e2a:	00d0      	lsls	r0, r2, #3
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	eb12 0208 	adds.w	r2, r2, r8
 8002e34:	eb43 0309 	adc.w	r3, r3, r9
 8002e38:	f04f 0000 	mov.w	r0, #0
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	0259      	lsls	r1, r3, #9
 8002e42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e46:	0250      	lsls	r0, r2, #9
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	f7fd fa1a 	bl	8000290 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e04a      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	ea02 0400 	and.w	r4, r2, r0
 8002e7e:	ea03 0501 	and.w	r5, r3, r1
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	014b      	lsls	r3, r1, #5
 8002e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e94:	0142      	lsls	r2, r0, #5
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	1b00      	subs	r0, r0, r4
 8002e9c:	eb61 0105 	sbc.w	r1, r1, r5
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	018b      	lsls	r3, r1, #6
 8002eaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eae:	0182      	lsls	r2, r0, #6
 8002eb0:	1a12      	subs	r2, r2, r0
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	00d9      	lsls	r1, r3, #3
 8002ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec4:	00d0      	lsls	r0, r2, #3
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	1912      	adds	r2, r2, r4
 8002ecc:	eb45 0303 	adc.w	r3, r5, r3
 8002ed0:	f04f 0000 	mov.w	r0, #0
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	0299      	lsls	r1, r3, #10
 8002eda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ede:	0290      	lsls	r0, r2, #10
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f7fd f9ce 	bl	8000290 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	60bb      	str	r3, [r7, #8]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f1a:	60bb      	str	r3, [r7, #8]
      break;
 8002f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	007a1200 	.word	0x007a1200

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000008 	.word	0x20000008

08002f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f54:	f7ff fff0 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	0800839c 	.word	0x0800839c

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f7c:	f7ff ffdc 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0b5b      	lsrs	r3, r3, #13
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	0800839c 	.word	0x0800839c

08002fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07b      	b.n	80030aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc2:	d009      	beq.n	8002fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe fb30 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	ea42 0103 	orr.w	r1, r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0104 	and.w	r1, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f003 0210 	and.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_SPI_Transmit+0x22>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e126      	b.n	8003322 <HAL_SPI_Transmit+0x270>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030dc:	f7fe fdae 	bl	8001c3c <HAL_GetTick>
 80030e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d002      	beq.n	80030f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030f6:	e10b      	b.n	8003310 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_SPI_Transmit+0x52>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003108:	e102      	b.n	8003310 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003150:	d10f      	bne.n	8003172 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003160:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003170:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d007      	beq.n	8003190 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003198:	d14b      	bne.n	8003232 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_SPI_Transmit+0xf6>
 80031a2:	8afb      	ldrh	r3, [r7, #22]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d13e      	bne.n	8003226 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031cc:	e02b      	b.n	8003226 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d112      	bne.n	8003202 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003200:	e011      	b.n	8003226 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003202:	f7fe fd1b 	bl	8001c3c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d803      	bhi.n	800321a <HAL_SPI_Transmit+0x168>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d102      	bne.n	8003220 <HAL_SPI_Transmit+0x16e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003224:	e074      	b.n	8003310 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ce      	bne.n	80031ce <HAL_SPI_Transmit+0x11c>
 8003230:	e04c      	b.n	80032cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_Transmit+0x18e>
 800323a:	8afb      	ldrh	r3, [r7, #22]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d140      	bne.n	80032c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003266:	e02c      	b.n	80032c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d113      	bne.n	800329e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	86da      	strh	r2, [r3, #54]	; 0x36
 800329c:	e011      	b.n	80032c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329e:	f7fe fccd 	bl	8001c3c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d803      	bhi.n	80032b6 <HAL_SPI_Transmit+0x204>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_Transmit+0x20a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032c0:	e026      	b.n	8003310 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1cd      	bne.n	8003268 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	6839      	ldr	r1, [r7, #0]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fbcb 	bl	8003a6c <SPI_EndRxTxTransaction>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e000      	b.n	8003310 <HAL_SPI_Transmit+0x25e>
  }

error:
 800330e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003320:	7ffb      	ldrb	r3, [r7, #31]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b088      	sub	sp, #32
 800332e:	af02      	add	r7, sp, #8
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d112      	bne.n	800336e <HAL_SPI_Receive+0x44>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10e      	bne.n	800336e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2204      	movs	r2, #4
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f8f1 	bl	800354c <HAL_SPI_TransmitReceive>
 800336a:	4603      	mov	r3, r0
 800336c:	e0ea      	b.n	8003544 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_SPI_Receive+0x52>
 8003378:	2302      	movs	r3, #2
 800337a:	e0e3      	b.n	8003544 <HAL_SPI_Receive+0x21a>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003384:	f7fe fc5a 	bl	8001c3c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	75fb      	strb	r3, [r7, #23]
    goto error;
 800339a:	e0ca      	b.n	8003532 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Receive+0x7e>
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ac:	e0c1      	b.n	8003532 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2204      	movs	r2, #4
 80033b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f4:	d10f      	bne.n	8003416 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d007      	beq.n	8003434 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d162      	bne.n	8003502 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800343c:	e02e      	b.n	800349c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d115      	bne.n	8003478 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f103 020c 	add.w	r2, r3, #12
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003476:	e011      	b.n	800349c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003478:	f7fe fbe0 	bl	8001c3c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d803      	bhi.n	8003490 <HAL_SPI_Receive+0x166>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d102      	bne.n	8003496 <HAL_SPI_Receive+0x16c>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	75fb      	strb	r3, [r7, #23]
          goto error;
 800349a:	e04a      	b.n	8003532 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1cb      	bne.n	800343e <HAL_SPI_Receive+0x114>
 80034a6:	e031      	b.n	800350c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d113      	bne.n	80034de <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	b292      	uxth	r2, r2
 80034c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034dc:	e011      	b.n	8003502 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034de:	f7fe fbad 	bl	8001c3c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d803      	bhi.n	80034f6 <HAL_SPI_Receive+0x1cc>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d102      	bne.n	80034fc <HAL_SPI_Receive+0x1d2>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003500:	e017      	b.n	8003532 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1cd      	bne.n	80034a8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	6839      	ldr	r1, [r7, #0]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fa45 	bl	80039a0 <SPI_EndRxTransaction>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
 800352e:	e000      	b.n	8003532 <HAL_SPI_Receive+0x208>
  }

error :
 8003530:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800355a:	2301      	movs	r3, #1
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x26>
 800356e:	2302      	movs	r3, #2
 8003570:	e18a      	b.n	8003888 <HAL_SPI_TransmitReceive+0x33c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357a:	f7fe fb5f 	bl	8001c3c <HAL_GetTick>
 800357e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003598:	2b01      	cmp	r3, #1
 800359a:	d00f      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x70>
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a2:	d107      	bne.n	80035b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <HAL_SPI_TransmitReceive+0x68>
 80035ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d003      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035ba:	e15b      	b.n	8003874 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_SPI_TransmitReceive+0x82>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_SPI_TransmitReceive+0x82>
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035d4:	e14e      	b.n	8003874 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d003      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2205      	movs	r2, #5
 80035e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	887a      	ldrh	r2, [r7, #2]
 80035fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d007      	beq.n	800363e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003646:	d178      	bne.n	800373a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_SPI_TransmitReceive+0x10a>
 8003650:	8b7b      	ldrh	r3, [r7, #26]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d166      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800367a:	e053      	b.n	8003724 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d11b      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x176>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d016      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x176>
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d113      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d119      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x1b8>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	b292      	uxth	r2, r2
 80036e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003700:	2301      	movs	r3, #1
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003704:	f7fe fa9a 	bl	8001c3c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003710:	429a      	cmp	r2, r3
 8003712:	d807      	bhi.n	8003724 <HAL_SPI_TransmitReceive+0x1d8>
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d003      	beq.n	8003724 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003722:	e0a7      	b.n	8003874 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1a6      	bne.n	800367c <HAL_SPI_TransmitReceive+0x130>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1a1      	bne.n	800367c <HAL_SPI_TransmitReceive+0x130>
 8003738:	e07c      	b.n	8003834 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x1fc>
 8003742:	8b7b      	ldrh	r3, [r7, #26]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d16b      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	7812      	ldrb	r2, [r2, #0]
 8003754:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376e:	e057      	b.n	8003820 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d11c      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x26c>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x26c>
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d114      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d119      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x2ae>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d014      	beq.n	80037fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037f6:	2301      	movs	r3, #1
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037fa:	f7fe fa1f 	bl	8001c3c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003806:	429a      	cmp	r2, r3
 8003808:	d803      	bhi.n	8003812 <HAL_SPI_TransmitReceive+0x2c6>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d102      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x2cc>
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800381e:	e029      	b.n	8003874 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1a2      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x224>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d19d      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f917 	bl	8003a6c <SPI_EndRxTxTransaction>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003850:	e010      	b.n	8003874 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	e000      	b.n	8003874 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003884:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038a0:	f7fe f9cc 	bl	8001c3c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4413      	add	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038b0:	f7fe f9c4 	bl	8001c3c <HAL_GetTick>
 80038b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	015b      	lsls	r3, r3, #5
 80038bc:	0d1b      	lsrs	r3, r3, #20
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	fb02 f303 	mul.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c6:	e054      	b.n	8003972 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d050      	beq.n	8003972 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038d0:	f7fe f9b4 	bl	8001c3c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d902      	bls.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d13d      	bne.n	8003962 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fe:	d111      	bne.n	8003924 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003908:	d004      	beq.n	8003914 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d107      	bne.n	8003924 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003922:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392c:	d10f      	bne.n	800394e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800394c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e017      	b.n	8003992 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3b01      	subs	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	bf0c      	ite	eq
 8003982:	2301      	moveq	r3, #1
 8003984:	2300      	movne	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	429a      	cmp	r2, r3
 800398e:	d19b      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000008 	.word	0x20000008

080039a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b4:	d111      	bne.n	80039da <SPI_EndRxTransaction+0x3a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039be:	d004      	beq.n	80039ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c8:	d107      	bne.n	80039da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e2:	d12a      	bne.n	8003a3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d012      	beq.n	8003a14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff ff49 	bl	8003890 <SPI_WaitFlagStateUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02d      	beq.n	8003a60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e026      	b.n	8003a62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff ff36 	bl	8003890 <SPI_WaitFlagStateUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01a      	beq.n	8003a60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e013      	b.n	8003a62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2101      	movs	r1, #1
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ff23 	bl	8003890 <SPI_WaitFlagStateUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <SPI_EndRxTxTransaction+0x7c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <SPI_EndRxTxTransaction+0x80>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0d5b      	lsrs	r3, r3, #21
 8003a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a96:	d112      	bne.n	8003abe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff fef4 	bl	8003890 <SPI_WaitFlagStateUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e00f      	b.n	8003ade <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d0f2      	beq.n	8003abe <SPI_EndRxTxTransaction+0x52>
 8003ad8:	e000      	b.n	8003adc <SPI_EndRxTxTransaction+0x70>
        break;
 8003ada:	bf00      	nop
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	165e9f81 	.word	0x165e9f81

08003af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e041      	b.n	8003b86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd ff32 	bl	8001980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 f8f0 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0ae      	b.n	8003d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	f200 809f 	bhi.w	8003cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003cfd 	.word	0x08003cfd
 8003bcc:	08003cfd 	.word	0x08003cfd
 8003bd0:	08003cfd 	.word	0x08003cfd
 8003bd4:	08003c39 	.word	0x08003c39
 8003bd8:	08003cfd 	.word	0x08003cfd
 8003bdc:	08003cfd 	.word	0x08003cfd
 8003be0:	08003cfd 	.word	0x08003cfd
 8003be4:	08003c7b 	.word	0x08003c7b
 8003be8:	08003cfd 	.word	0x08003cfd
 8003bec:	08003cfd 	.word	0x08003cfd
 8003bf0:	08003cfd 	.word	0x08003cfd
 8003bf4:	08003cbb 	.word	0x08003cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f908 	bl	8003e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0208 	orr.w	r2, r2, #8
 8003c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6999      	ldr	r1, [r3, #24]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	619a      	str	r2, [r3, #24]
      break;
 8003c36:	e064      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f94e 	bl	8003ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	021a      	lsls	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	619a      	str	r2, [r3, #24]
      break;
 8003c78:	e043      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f999 	bl	8003fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0208 	orr.w	r2, r2, #8
 8003c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0204 	bic.w	r2, r2, #4
 8003ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	61da      	str	r2, [r3, #28]
      break;
 8003cb8:	e023      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f9e3 	bl	800408c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	021a      	lsls	r2, r3, #8
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	61da      	str	r2, [r3, #28]
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <TIM_Base_SetConfig+0xe4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00f      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d32:	d00b      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <TIM_Base_SetConfig+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <TIM_Base_SetConfig+0xec>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0xf0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <TIM_Base_SetConfig+0xe4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01b      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d017      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <TIM_Base_SetConfig+0xe8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <TIM_Base_SetConfig+0xec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00f      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <TIM_Base_SetConfig+0xf0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <TIM_Base_SetConfig+0xf4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <TIM_Base_SetConfig+0xf8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <TIM_Base_SetConfig+0xfc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <TIM_Base_SetConfig+0xe4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 0302 	bic.w	r3, r3, #2
 8003e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <TIM_OC1_SetConfig+0xc8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10c      	bne.n	8003e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0308 	bic.w	r3, r3, #8
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a13      	ldr	r2, [pc, #76]	; (8003edc <TIM_OC1_SetConfig+0xc8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d111      	bne.n	8003eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000

08003ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0210 	bic.w	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <TIM_OC2_SetConfig+0xd4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10d      	bne.n	8003f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <TIM_OC2_SetConfig+0xd4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d113      	bne.n	8003f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000

08003fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <TIM_OC3_SetConfig+0xd0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10d      	bne.n	8004032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800401c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <TIM_OC3_SetConfig+0xd0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d113      	bne.n	8004062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40010000 	.word	0x40010000

0800408c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <TIM_OC4_SetConfig+0x9c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d109      	bne.n	8004100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000

0800412c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004140:	2302      	movs	r3, #2
 8004142:	e050      	b.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d013      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10c      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40014000 	.word	0x40014000

08004208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e03f      	b.n	800429a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fc2c 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800424a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f929 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08a      	sub	sp, #40	; 0x28
 80042a6:	af02      	add	r7, sp, #8
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d17c      	bne.n	80043bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_Transmit+0x2c>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e075      	b.n	80043be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x3e>
 80042dc:	2302      	movs	r3, #2
 80042de:	e06e      	b.n	80043be <HAL_UART_Transmit+0x11c>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2221      	movs	r2, #33	; 0x21
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f6:	f7fd fca1 	bl	8001c3c <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004310:	d108      	bne.n	8004324 <HAL_UART_Transmit+0x82>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d104      	bne.n	8004324 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e003      	b.n	800432c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004334:	e02a      	b.n	800438c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f840 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e036      	b.n	80043be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3302      	adds	r3, #2
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e007      	b.n	800437e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3301      	adds	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1cf      	bne.n	8004336 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2140      	movs	r1, #64	; 0x40
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f810 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e006      	b.n	80043be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b090      	sub	sp, #64	; 0x40
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	e050      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d04c      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e6:	f7fd fc29 	bl	8001c3c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d241      	bcs.n	800447a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004416:	637a      	str	r2, [r7, #52]	; 0x34
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	613b      	str	r3, [r7, #16]
   return(result);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800444a:	623a      	str	r2, [r7, #32]
 800444c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	69f9      	ldr	r1, [r7, #28]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	61bb      	str	r3, [r7, #24]
   return(result);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d09f      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3740      	adds	r7, #64	; 0x40
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a8:	b09f      	sub	sp, #124	; 0x7c
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	68d9      	ldr	r1, [r3, #12]
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	ea40 0301 	orr.w	r3, r0, r1
 80044c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044e8:	f021 010c 	bic.w	r1, r1, #12
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f2:	430b      	orrs	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	6999      	ldr	r1, [r3, #24]
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	ea40 0301 	orr.w	r3, r0, r1
 800450c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4bc5      	ldr	r3, [pc, #788]	; (8004828 <UART_SetConfig+0x384>)
 8004514:	429a      	cmp	r2, r3
 8004516:	d004      	beq.n	8004522 <UART_SetConfig+0x7e>
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4bc3      	ldr	r3, [pc, #780]	; (800482c <UART_SetConfig+0x388>)
 800451e:	429a      	cmp	r2, r3
 8004520:	d103      	bne.n	800452a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004522:	f7fe fd29 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8004526:	6778      	str	r0, [r7, #116]	; 0x74
 8004528:	e002      	b.n	8004530 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800452a:	f7fe fd11 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 800452e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004538:	f040 80b6 	bne.w	80046a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800453c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453e:	461c      	mov	r4, r3
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	4622      	mov	r2, r4
 8004546:	462b      	mov	r3, r5
 8004548:	1891      	adds	r1, r2, r2
 800454a:	6439      	str	r1, [r7, #64]	; 0x40
 800454c:	415b      	adcs	r3, r3
 800454e:	647b      	str	r3, [r7, #68]	; 0x44
 8004550:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004554:	1912      	adds	r2, r2, r4
 8004556:	eb45 0303 	adc.w	r3, r5, r3
 800455a:	f04f 0000 	mov.w	r0, #0
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	00d9      	lsls	r1, r3, #3
 8004564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004568:	00d0      	lsls	r0, r2, #3
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	1911      	adds	r1, r2, r4
 8004570:	6639      	str	r1, [r7, #96]	; 0x60
 8004572:	416b      	adcs	r3, r5
 8004574:	667b      	str	r3, [r7, #100]	; 0x64
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	1891      	adds	r1, r2, r2
 8004582:	63b9      	str	r1, [r7, #56]	; 0x38
 8004584:	415b      	adcs	r3, r3
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800458c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004590:	f7fb fe7e 	bl	8000290 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4ba5      	ldr	r3, [pc, #660]	; (8004830 <UART_SetConfig+0x38c>)
 800459a:	fba3 2302 	umull	r2, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	011e      	lsls	r6, r3, #4
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	461c      	mov	r4, r3
 80045a6:	f04f 0500 	mov.w	r5, #0
 80045aa:	4622      	mov	r2, r4
 80045ac:	462b      	mov	r3, r5
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	6339      	str	r1, [r7, #48]	; 0x30
 80045b2:	415b      	adcs	r3, r3
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
 80045b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045ba:	1912      	adds	r2, r2, r4
 80045bc:	eb45 0303 	adc.w	r3, r5, r3
 80045c0:	f04f 0000 	mov.w	r0, #0
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	00d9      	lsls	r1, r3, #3
 80045ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ce:	00d0      	lsls	r0, r2, #3
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	1911      	adds	r1, r2, r4
 80045d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80045d8:	416b      	adcs	r3, r5
 80045da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	1891      	adds	r1, r2, r2
 80045e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ea:	415b      	adcs	r3, r3
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045f6:	f7fb fe4b 	bl	8000290 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4b8c      	ldr	r3, [pc, #560]	; (8004830 <UART_SetConfig+0x38c>)
 8004600:	fba3 1302 	umull	r1, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	2164      	movs	r1, #100	; 0x64
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	3332      	adds	r3, #50	; 0x32
 8004612:	4a87      	ldr	r2, [pc, #540]	; (8004830 <UART_SetConfig+0x38c>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004620:	441e      	add	r6, r3
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	4618      	mov	r0, r3
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	1894      	adds	r4, r2, r2
 8004630:	623c      	str	r4, [r7, #32]
 8004632:	415b      	adcs	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463a:	1812      	adds	r2, r2, r0
 800463c:	eb41 0303 	adc.w	r3, r1, r3
 8004640:	f04f 0400 	mov.w	r4, #0
 8004644:	f04f 0500 	mov.w	r5, #0
 8004648:	00dd      	lsls	r5, r3, #3
 800464a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800464e:	00d4      	lsls	r4, r2, #3
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	1814      	adds	r4, r2, r0
 8004656:	653c      	str	r4, [r7, #80]	; 0x50
 8004658:	414b      	adcs	r3, r1
 800465a:	657b      	str	r3, [r7, #84]	; 0x54
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	1891      	adds	r1, r2, r2
 8004668:	61b9      	str	r1, [r7, #24]
 800466a:	415b      	adcs	r3, r3
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004672:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004676:	f7fb fe0b 	bl	8000290 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <UART_SetConfig+0x38c>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	; 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a67      	ldr	r2, [pc, #412]	; (8004830 <UART_SetConfig+0x38c>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 0207 	and.w	r2, r3, #7
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4432      	add	r2, r6
 80046a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a6:	e0b9      	b.n	800481c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046aa:	461c      	mov	r4, r3
 80046ac:	f04f 0500 	mov.w	r5, #0
 80046b0:	4622      	mov	r2, r4
 80046b2:	462b      	mov	r3, r5
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	6139      	str	r1, [r7, #16]
 80046b8:	415b      	adcs	r3, r3
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046c0:	1912      	adds	r2, r2, r4
 80046c2:	eb45 0303 	adc.w	r3, r5, r3
 80046c6:	f04f 0000 	mov.w	r0, #0
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	00d9      	lsls	r1, r3, #3
 80046d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d4:	00d0      	lsls	r0, r2, #3
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	eb12 0804 	adds.w	r8, r2, r4
 80046de:	eb43 0905 	adc.w	r9, r3, r5
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	008b      	lsls	r3, r1, #2
 80046f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046fa:	0082      	lsls	r2, r0, #2
 80046fc:	4640      	mov	r0, r8
 80046fe:	4649      	mov	r1, r9
 8004700:	f7fb fdc6 	bl	8000290 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4b49      	ldr	r3, [pc, #292]	; (8004830 <UART_SetConfig+0x38c>)
 800470a:	fba3 2302 	umull	r2, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	011e      	lsls	r6, r3, #4
 8004712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004714:	4618      	mov	r0, r3
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	1894      	adds	r4, r2, r2
 8004720:	60bc      	str	r4, [r7, #8]
 8004722:	415b      	adcs	r3, r3
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472a:	1812      	adds	r2, r2, r0
 800472c:	eb41 0303 	adc.w	r3, r1, r3
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	f04f 0500 	mov.w	r5, #0
 8004738:	00dd      	lsls	r5, r3, #3
 800473a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800473e:	00d4      	lsls	r4, r2, #3
 8004740:	4622      	mov	r2, r4
 8004742:	462b      	mov	r3, r5
 8004744:	1814      	adds	r4, r2, r0
 8004746:	64bc      	str	r4, [r7, #72]	; 0x48
 8004748:	414b      	adcs	r3, r1
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4618      	mov	r0, r3
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	008b      	lsls	r3, r1, #2
 8004760:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004764:	0082      	lsls	r2, r0, #2
 8004766:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800476a:	f7fb fd91 	bl	8000290 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <UART_SetConfig+0x38c>)
 8004774:	fba3 1302 	umull	r1, r3, r3, r2
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2164      	movs	r1, #100	; 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	; 0x32
 8004786:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <UART_SetConfig+0x38c>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004792:	441e      	add	r6, r3
 8004794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004796:	4618      	mov	r0, r3
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	1894      	adds	r4, r2, r2
 80047a2:	603c      	str	r4, [r7, #0]
 80047a4:	415b      	adcs	r3, r3
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ac:	1812      	adds	r2, r2, r0
 80047ae:	eb41 0303 	adc.w	r3, r1, r3
 80047b2:	f04f 0400 	mov.w	r4, #0
 80047b6:	f04f 0500 	mov.w	r5, #0
 80047ba:	00dd      	lsls	r5, r3, #3
 80047bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047c0:	00d4      	lsls	r4, r2, #3
 80047c2:	4622      	mov	r2, r4
 80047c4:	462b      	mov	r3, r5
 80047c6:	eb12 0a00 	adds.w	sl, r2, r0
 80047ca:	eb43 0b01 	adc.w	fp, r3, r1
 80047ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	008b      	lsls	r3, r1, #2
 80047e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047e6:	0082      	lsls	r2, r0, #2
 80047e8:	4650      	mov	r0, sl
 80047ea:	4659      	mov	r1, fp
 80047ec:	f7fb fd50 	bl	8000290 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <UART_SetConfig+0x38c>)
 80047f6:	fba3 1302 	umull	r1, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2164      	movs	r1, #100	; 0x64
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a09      	ldr	r2, [pc, #36]	; (8004830 <UART_SetConfig+0x38c>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4432      	add	r2, r6
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	377c      	adds	r7, #124	; 0x7c
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40011000 	.word	0x40011000
 800482c:	40011400 	.word	0x40011400
 8004830:	51eb851f 	.word	0x51eb851f

08004834 <__NVIC_SetPriority>:
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db0a      	blt.n	800485e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	490c      	ldr	r1, [pc, #48]	; (8004880 <__NVIC_SetPriority+0x4c>)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	440b      	add	r3, r1
 8004858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800485c:	e00a      	b.n	8004874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4908      	ldr	r1, [pc, #32]	; (8004884 <__NVIC_SetPriority+0x50>)
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3b04      	subs	r3, #4
 800486c:	0112      	lsls	r2, r2, #4
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	440b      	add	r3, r1
 8004872:	761a      	strb	r2, [r3, #24]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000e100 	.word	0xe000e100
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800488c:	2100      	movs	r1, #0
 800488e:	f06f 0004 	mvn.w	r0, #4
 8004892:	f7ff ffcf 	bl	8004834 <__NVIC_SetPriority>
#endif
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	603b      	str	r3, [r7, #0]
  return(result);
 80048a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048ae:	f06f 0305 	mvn.w	r3, #5
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e00c      	b.n	80048d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <osKernelInitialize+0x44>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <osKernelInitialize+0x44>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	e002      	b.n	80048d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048d0:	687b      	ldr	r3, [r7, #4]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	200000a8 	.word	0x200000a8

080048e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ea:	f3ef 8305 	mrs	r3, IPSR
 80048ee:	603b      	str	r3, [r7, #0]
  return(result);
 80048f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80048f6:	f06f 0305 	mvn.w	r3, #5
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e010      	b.n	8004920 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <osKernelStart+0x48>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d109      	bne.n	800491a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004906:	f7ff ffbf 	bl	8004888 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <osKernelStart+0x48>)
 800490c:	2202      	movs	r2, #2
 800490e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004910:	f001 f866 	bl	80059e0 <vTaskStartScheduler>
      stat = osOK;
 8004914:	2300      	movs	r3, #0
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	e002      	b.n	8004920 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
 800491e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004920:	687b      	ldr	r3, [r7, #4]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200000a8 	.word	0x200000a8

08004930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	; 0x38
 8004934:	af04      	add	r7, sp, #16
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004940:	f3ef 8305 	mrs	r3, IPSR
 8004944:	617b      	str	r3, [r7, #20]
  return(result);
 8004946:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004948:	2b00      	cmp	r3, #0
 800494a:	d17e      	bne.n	8004a4a <osThreadNew+0x11a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d07b      	beq.n	8004a4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004956:	2318      	movs	r3, #24
 8004958:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d045      	beq.n	80049f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <osThreadNew+0x48>
        name = attr->name;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <osThreadNew+0x6e>
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b38      	cmp	r3, #56	; 0x38
 8004990:	d805      	bhi.n	800499e <osThreadNew+0x6e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <osThreadNew+0x72>
        return (NULL);
 800499e:	2300      	movs	r3, #0
 80049a0:	e054      	b.n	8004a4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00e      	beq.n	80049d8 <osThreadNew+0xa8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b5b      	cmp	r3, #91	; 0x5b
 80049c0:	d90a      	bls.n	80049d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <osThreadNew+0xa8>
        mem = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e010      	b.n	80049fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10c      	bne.n	80049fa <osThreadNew+0xca>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <osThreadNew+0xca>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <osThreadNew+0xca>
          mem = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e001      	b.n	80049fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d110      	bne.n	8004a22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a08:	9202      	str	r2, [sp, #8]
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fe0c 	bl	8005634 <xTaskCreateStatic>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e013      	b.n	8004a4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d110      	bne.n	8004a4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fe57 	bl	80056ee <xTaskCreate>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d001      	beq.n	8004a4a <osThreadNew+0x11a>
            hTask = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a4a:	693b      	ldr	r3, [r7, #16]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	; 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a5c:	f3ef 8305 	mrs	r3, IPSR
 8004a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <osDelay+0x1c>
    stat = osErrorISR;
 8004a68:	f06f 0305 	mvn.w	r3, #5
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e007      	b.n	8004a80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 ff7c 	bl	8005978 <vTaskDelay>
    }
  }

  return (stat);
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a06      	ldr	r2, [pc, #24]	; (8004abc <vApplicationGetIdleTaskMemory+0x30>)
 8004aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2280      	movs	r2, #128	; 0x80
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	200000ac 	.word	0x200000ac
 8004abc:	20000108 	.word	0x20000108

08004ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a07      	ldr	r2, [pc, #28]	; (8004aec <vApplicationGetTimerTaskMemory+0x2c>)
 8004ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	20000308 	.word	0x20000308
 8004af0:	20000364 	.word	0x20000364

08004af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f103 0208 	add.w	r2, r3, #8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f103 0208 	add.w	r2, r3, #8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f103 0208 	add.w	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d103      	bne.n	8004bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e00c      	b.n	8004bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e002      	b.n	8004bc4 <vListInsert+0x2e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d2f6      	bcs.n	8004bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	601a      	str	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6852      	ldr	r2, [r2, #4]
 8004c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d103      	bne.n	8004c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1e5a      	subs	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c86:	f002 f84d 	bl	8006d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	68f9      	ldr	r1, [r7, #12]
 8004cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	441a      	add	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	22ff      	movs	r2, #255	; 0xff
 8004cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d114      	bne.n	8004d06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01a      	beq.n	8004d1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f001 f903 	bl	8005ef4 <xTaskRemoveFromEventList>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d012      	beq.n	8004d1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <xQueueGenericReset+0xcc>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	e009      	b.n	8004d1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3310      	adds	r3, #16
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fef2 	bl	8004af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3324      	adds	r3, #36	; 0x24
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff feed 	bl	8004af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f002 f833 	bl	8006d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d1e:	2301      	movs	r3, #1
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <xQueueGenericCreateStatic+0x52>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <xQueueGenericCreateStatic+0x56>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueGenericCreateStatic+0x58>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <xQueueGenericCreateStatic+0x7e>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <xQueueGenericCreateStatic+0x82>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueGenericCreateStatic+0x84>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	61fb      	str	r3, [r7, #28]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dca:	2350      	movs	r3, #80	; 0x50
 8004dcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d00a      	beq.n	8004dea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	61bb      	str	r3, [r7, #24]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00d      	beq.n	8004e12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f805 	bl	8004e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3730      	adds	r7, #48	; 0x30
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	69b8      	ldr	r0, [r7, #24]
 8004e4e:	f7ff ff05 	bl	8004c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08e      	sub	sp, #56	; 0x38
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericSend+0x32>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <xQueueGenericSend+0x40>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <xQueueGenericSend+0x44>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <xQueueGenericSend+0x46>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSend+0x6e>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <xQueueGenericSend+0x72>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueGenericSend+0x74>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	623b      	str	r3, [r7, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef2:	f001 f9bd 	bl	8006270 <xTaskGetSchedulerState>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <xQueueGenericSend+0x9e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSend+0xa2>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSend+0xa4>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61fb      	str	r3, [r7, #28]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f22:	f001 feff 	bl	8006d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <xQueueGenericSend+0xd4>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d129      	bne.n	8004f8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3e:	f000 fa0b 	bl	8005358 <prvCopyDataToQueue>
 8004f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 ffcf 	bl	8005ef4 <xTaskRemoveFromEventList>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f5c:	4b3f      	ldr	r3, [pc, #252]	; (800505c <xQueueGenericSend+0x1f8>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	e00a      	b.n	8004f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <xQueueGenericSend+0x1f8>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f84:	f001 fefe 	bl	8006d84 <vPortExitCritical>
				return pdPASS;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e063      	b.n	8005054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f92:	f001 fef7 	bl	8006d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e05c      	b.n	8005054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f809 	bl	8005fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004faa:	2301      	movs	r3, #1
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fae:	f001 fee9 	bl	8006d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fb2:	f000 fd7b 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb6:	f001 feb5 	bl	8006d24 <vPortEnterCritical>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc0:	b25b      	sxtb	r3, r3
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d103      	bne.n	8004fd0 <xQueueGenericSend+0x16c>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd6:	b25b      	sxtb	r3, r3
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSend+0x182>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe6:	f001 fecd 	bl	8006d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fea:	1d3a      	adds	r2, r7, #4
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fff8 	bl	8005fe8 <xTaskCheckForTimeOut>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d124      	bne.n	8005048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005000:	f000 faa2 	bl	8005548 <prvIsQueueFull>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	3310      	adds	r3, #16
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ff1e 	bl	8005e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501a:	f000 fa2d 	bl	8005478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800501e:	f000 fd53 	bl	8005ac8 <xTaskResumeAll>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f47f af7c 	bne.w	8004f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <xQueueGenericSend+0x1f8>)
 800502c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	e772      	b.n	8004f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800503c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800503e:	f000 fa1b 	bl	8005478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005042:	f000 fd41 	bl	8005ac8 <xTaskResumeAll>
 8005046:	e76c      	b.n	8004f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504a:	f000 fa15 	bl	8005478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800504e:	f000 fd3b 	bl	8005ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005054:	4618      	mov	r0, r3
 8005056:	3738      	adds	r7, #56	; 0x38
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b090      	sub	sp, #64	; 0x40
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <xQueueGenericSendFromISR+0x3c>
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <xQueueGenericSendFromISR+0x40>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <xQueueGenericSendFromISR+0x42>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d103      	bne.n	80050ca <xQueueGenericSendFromISR+0x6a>
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <xQueueGenericSendFromISR+0x6e>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueGenericSendFromISR+0x70>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ea:	f001 fefd 	bl	8006ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050ee:	f3ef 8211 	mrs	r2, BASEPRI
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	61fa      	str	r2, [r7, #28]
 8005104:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005106:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <xQueueGenericSendFromISR+0xbc>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d12f      	bne.n	800517c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005132:	f000 f911 	bl	8005358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005136:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d112      	bne.n	8005166 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fed1 	bl	8005ef4 <xTaskRemoveFromEventList>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00e      	beq.n	8005176 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800516a:	3301      	adds	r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	b25a      	sxtb	r2, r3
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005176:	2301      	movs	r3, #1
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800517a:	e001      	b.n	8005180 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800518e:	4618      	mov	r0, r3
 8005190:	3740      	adds	r7, #64	; 0x40
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <xQueueReceive+0x30>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	623b      	str	r3, [r7, #32]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <xQueueReceive+0x3e>
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <xQueueReceive+0x42>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueReceive+0x44>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueReceive+0x5e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61fb      	str	r3, [r7, #28]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f6:	f001 f83b 	bl	8006270 <xTaskGetSchedulerState>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <xQueueReceive+0x6e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <xQueueReceive+0x72>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <xQueueReceive+0x74>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xQueueReceive+0x8e>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61bb      	str	r3, [r7, #24]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005226:	f001 fd7d 	bl	8006d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01f      	beq.n	8005276 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f000 f8f7 	bl	800542c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3310      	adds	r3, #16
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fe4e 	bl	8005ef4 <xTaskRemoveFromEventList>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <xQueueReceive+0x1bc>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526e:	f001 fd89 	bl	8006d84 <vPortExitCritical>
				return pdPASS;
 8005272:	2301      	movs	r3, #1
 8005274:	e069      	b.n	800534a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800527c:	f001 fd82 	bl	8006d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005280:	2300      	movs	r3, #0
 8005282:	e062      	b.n	800534a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fe94 	bl	8005fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005298:	f001 fd74 	bl	8006d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800529c:	f000 fc06 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a0:	f001 fd40 	bl	8006d24 <vPortEnterCritical>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d103      	bne.n	80052ba <xQueueReceive+0x122>
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d103      	bne.n	80052d0 <xQueueReceive+0x138>
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d0:	f001 fd58 	bl	8006d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d4:	1d3a      	adds	r2, r7, #4
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fe83 	bl	8005fe8 <xTaskCheckForTimeOut>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d123      	bne.n	8005330 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ea:	f000 f917 	bl	800551c <prvIsQueueEmpty>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fda9 	bl	8005e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f000 f8b8 	bl	8005478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005308:	f000 fbde 	bl	8005ac8 <xTaskResumeAll>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d189      	bne.n	8005226 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <xQueueReceive+0x1bc>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	e780      	b.n	8005226 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005326:	f000 f8a7 	bl	8005478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532a:	f000 fbcd 	bl	8005ac8 <xTaskResumeAll>
 800532e:	e77a      	b.n	8005226 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	f000 f8a1 	bl	8005478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005336:	f000 fbc7 	bl	8005ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f000 f8ee 	bl	800551c <prvIsQueueEmpty>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f43f af6f 	beq.w	8005226 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800534a:	4618      	mov	r0, r3
 800534c:	3730      	adds	r7, #48	; 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10d      	bne.n	8005392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d14d      	bne.n	800541a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 ff92 	bl	80062ac <xTaskPriorityDisinherit>
 8005388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	e043      	b.n	800541a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d119      	bne.n	80053cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6858      	ldr	r0, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	461a      	mov	r2, r3
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	f001 fff4 	bl	8007390 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d32b      	bcc.n	800541a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	e026      	b.n	800541a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68d8      	ldr	r0, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	461a      	mov	r2, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	f001 ffda 	bl	8007390 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	425b      	negs	r3, r3
 80053e6:	441a      	add	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d207      	bcs.n	8005408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	425b      	negs	r3, r3
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d105      	bne.n	800541a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	3b01      	subs	r3, #1
 8005418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005422:	697b      	ldr	r3, [r7, #20]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	d303      	bcc.n	8005460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68d9      	ldr	r1, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	461a      	mov	r2, r3
 800546a:	6838      	ldr	r0, [r7, #0]
 800546c:	f001 ff90 	bl	8007390 <memcpy>
	}
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005480:	f001 fc50 	bl	8006d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800548c:	e011      	b.n	80054b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d012      	beq.n	80054bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fd2a 	bl	8005ef4 <xTaskRemoveFromEventList>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054a6:	f000 fe01 	bl	80060ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	dce9      	bgt.n	800548e <prvUnlockQueue+0x16>
 80054ba:	e000      	b.n	80054be <prvUnlockQueue+0x46>
					break;
 80054bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054c6:	f001 fc5d 	bl	8006d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054ca:	f001 fc2b 	bl	8006d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054d6:	e011      	b.n	80054fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3310      	adds	r3, #16
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fd05 	bl	8005ef4 <xTaskRemoveFromEventList>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054f0:	f000 fddc 	bl	80060ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005500:	2b00      	cmp	r3, #0
 8005502:	dce9      	bgt.n	80054d8 <prvUnlockQueue+0x60>
 8005504:	e000      	b.n	8005508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	22ff      	movs	r2, #255	; 0xff
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005510:	f001 fc38 	bl	8006d84 <vPortExitCritical>
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005524:	f001 fbfe 	bl	8006d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e001      	b.n	800553a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800553a:	f001 fc23 	bl	8006d84 <vPortExitCritical>

	return xReturn;
 800553e:	68fb      	ldr	r3, [r7, #12]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005550:	f001 fbe8 	bl	8006d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	429a      	cmp	r2, r3
 800555e:	d102      	bne.n	8005566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e001      	b.n	800556a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556a:	f001 fc0b 	bl	8006d84 <vPortExitCritical>

	return xReturn;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e014      	b.n	80055b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005588:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <vQueueAddToRegistry+0x50>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005594:	490c      	ldr	r1, [pc, #48]	; (80055c8 <vQueueAddToRegistry+0x50>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <vQueueAddToRegistry+0x50>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055aa:	e006      	b.n	80055ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d9e7      	bls.n	8005588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20004d3c 	.word	0x20004d3c

080055cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055dc:	f001 fba2 	bl	8006d24 <vPortEnterCritical>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d103      	bne.n	80055f6 <vQueueWaitForMessageRestricted+0x2a>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d103      	bne.n	800560c <vQueueWaitForMessageRestricted+0x40>
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560c:	f001 fbba 	bl	8006d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fc3b 	bl	8005e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7ff ff26 	bl	8005478 <prvUnlockQueue>
	}
 800562c:	bf00      	nop
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af04      	add	r7, sp, #16
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	623b      	str	r3, [r7, #32]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xTaskCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	61fb      	str	r3, [r7, #28]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800567a:	235c      	movs	r3, #92	; 0x5c
 800567c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b5c      	cmp	r3, #92	; 0x5c
 8005682:	d00a      	beq.n	800569a <xTaskCreateStatic+0x66>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800569a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01e      	beq.n	80056e0 <xTaskCreateStatic+0xac>
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ba:	2300      	movs	r3, #0
 80056bc:	9303      	str	r3, [sp, #12]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f850 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056da:	f000 f8dd 	bl	8005898 <prvAddNewTaskToReadyList>
 80056de:	e001      	b.n	80056e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
	}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08c      	sub	sp, #48	; 0x30
 80056f2:	af04      	add	r7, sp, #16
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4618      	mov	r0, r3
 8005704:	f001 fc30 	bl	8006f68 <pvPortMalloc>
 8005708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005710:	205c      	movs	r0, #92	; 0x5c
 8005712:	f001 fc29 	bl	8006f68 <pvPortMalloc>
 8005716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
 8005724:	e005      	b.n	8005732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f001 fcea 	bl	8007100 <vPortFree>
 800572c:	e001      	b.n	8005732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	2300      	movs	r3, #0
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f80e 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800575c:	69f8      	ldr	r0, [r7, #28]
 800575e:	f000 f89b 	bl	8005898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e002      	b.n	800576e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800576e:	69bb      	ldr	r3, [r7, #24]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	461a      	mov	r2, r3
 8005790:	21a5      	movs	r1, #165	; 0xa5
 8005792:	f001 fe0b 	bl	80073ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057a0:	3b01      	subs	r3, #1
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	617b      	str	r3, [r7, #20]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01f      	beq.n	8005816 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e012      	b.n	8005802 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	3334      	adds	r3, #52	; 0x34
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d9e9      	bls.n	80057dc <prvInitialiseNewTask+0x64>
 8005808:	e000      	b.n	800580c <prvInitialiseNewTask+0x94>
			{
				break;
 800580a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005814:	e003      	b.n	800581e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	2b37      	cmp	r3, #55	; 0x37
 8005822:	d901      	bls.n	8005828 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005824:	2337      	movs	r3, #55	; 0x37
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f978 	bl	8004b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	3318      	adds	r3, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f973 	bl	8004b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	69b8      	ldr	r0, [r7, #24]
 8005878:	f001 f928 	bl	8006acc <pxPortInitialiseStack>
 800587c:	4602      	mov	r2, r0
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800588e:	bf00      	nop
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fa40 	bl	8006d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a2c      	ldr	r2, [pc, #176]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ae:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058c4:	f000 fc16 	bl	80060f4 <prvInitialiseTaskLists>
 80058c8:	e00d      	b.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ca:	4b26      	ldr	r3, [pc, #152]	; (8005964 <prvAddNewTaskToReadyList+0xcc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058d2:	4b23      	ldr	r3, [pc, #140]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1e      	ldr	r2, [pc, #120]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <prvAddNewTaskToReadyList+0xd0>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <prvAddNewTaskToReadyList+0xd4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d903      	bls.n	800590c <prvAddNewTaskToReadyList+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <prvAddNewTaskToReadyList+0xd4>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a15      	ldr	r2, [pc, #84]	; (8005970 <prvAddNewTaskToReadyList+0xd8>)
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7ff f913 	bl	8004b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fa2c 	bl	8006d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <prvAddNewTaskToReadyList+0xcc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	429a      	cmp	r2, r3
 8005940:	d207      	bcs.n	8005952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005942:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <prvAddNewTaskToReadyList+0xdc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000c38 	.word	0x20000c38
 8005960:	20000764 	.word	0x20000764
 8005964:	20000c44 	.word	0x20000c44
 8005968:	20000c54 	.word	0x20000c54
 800596c:	20000c40 	.word	0x20000c40
 8005970:	20000768 	.word	0x20000768
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <vTaskDelay+0x60>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <vTaskDelay+0x30>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059a8:	f000 f880 	bl	8005aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ac:	2100      	movs	r1, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fcea 	bl	8006388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059b4:	f000 f888 	bl	8005ac8 <xTaskResumeAll>
 80059b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d107      	bne.n	80059d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <vTaskDelay+0x64>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000c60 	.word	0x20000c60
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ee:	463a      	mov	r2, r7
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f848 	bl	8004a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	9202      	str	r2, [sp, #8]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	4921      	ldr	r1, [pc, #132]	; (8005a94 <vTaskStartScheduler+0xb4>)
 8005a10:	4821      	ldr	r0, [pc, #132]	; (8005a98 <vTaskStartScheduler+0xb8>)
 8005a12:	f7ff fe0f 	bl	8005634 <xTaskCreateStatic>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e001      	b.n	8005a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d102      	bne.n	8005a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a34:	f000 fcfc 	bl	8006430 <xTimerCreateTimerTask>
 8005a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d116      	bne.n	8005a6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <vTaskStartScheduler+0xc0>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <vTaskStartScheduler+0xc4>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <vTaskStartScheduler+0xc8>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a68:	f001 f8ba 	bl	8006be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a6c:	e00e      	b.n	8005a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d10a      	bne.n	8005a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskStartScheduler+0xaa>
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08008350 	.word	0x08008350
 8005a98:	080060c5 	.word	0x080060c5
 8005a9c:	20000c5c 	.word	0x20000c5c
 8005aa0:	20000c58 	.word	0x20000c58
 8005aa4:	20000c44 	.word	0x20000c44
 8005aa8:	20000c3c 	.word	0x20000c3c

08005aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a03      	ldr	r2, [pc, #12]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20000c60 	.word	0x20000c60

08005ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ad6:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <xTaskResumeAll+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	603b      	str	r3, [r7, #0]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005af4:	f001 f916 	bl	8006d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005af8:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <xTaskResumeAll+0x118>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a38      	ldr	r2, [pc, #224]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d162      	bne.n	8005bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <xTaskResumeAll+0x11c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d05e      	beq.n	8005bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b12:	e02f      	b.n	8005b74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff f871 	bl	8004c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff f86c 	bl	8004c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b2d      	ldr	r3, [pc, #180]	; (8005bec <xTaskResumeAll+0x124>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskResumeAll+0x7c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <xTaskResumeAll+0x124>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <xTaskResumeAll+0x128>)
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe fff7 	bl	8004b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <xTaskResumeAll+0x12c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b74:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1cb      	bne.n	8005b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b82:	f000 fb55 	bl	8006230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <xTaskResumeAll+0x134>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f000 f847 	bl	8005c24 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f1      	bne.n	8005b92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <xTaskResumeAll+0x134>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskResumeAll+0x138>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd0:	f001 f8d8 	bl	8006d84 <vPortExitCritical>

	return xAlreadyYielded;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000c60 	.word	0x20000c60
 8005be4:	20000c38 	.word	0x20000c38
 8005be8:	20000bf8 	.word	0x20000bf8
 8005bec:	20000c40 	.word	0x20000c40
 8005bf0:	20000768 	.word	0x20000768
 8005bf4:	20000764 	.word	0x20000764
 8005bf8:	20000c4c 	.word	0x20000c4c
 8005bfc:	20000c48 	.word	0x20000c48
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <xTaskGetTickCount+0x1c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c10:	687b      	ldr	r3, [r7, #4]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000c3c 	.word	0x20000c3c

08005c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c2e:	4b4f      	ldr	r3, [pc, #316]	; (8005d6c <xTaskIncrementTick+0x148>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 808f 	bne.w	8005d56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c38:	4b4d      	ldr	r3, [pc, #308]	; (8005d70 <xTaskIncrementTick+0x14c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c40:	4a4b      	ldr	r2, [pc, #300]	; (8005d70 <xTaskIncrementTick+0x14c>)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d120      	bne.n	8005c8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c4c:	4b49      	ldr	r3, [pc, #292]	; (8005d74 <xTaskIncrementTick+0x150>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskIncrementTick+0x46>
 8005c6c:	4b41      	ldr	r3, [pc, #260]	; (8005d74 <xTaskIncrementTick+0x150>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <xTaskIncrementTick+0x154>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a3f      	ldr	r2, [pc, #252]	; (8005d74 <xTaskIncrementTick+0x150>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	4a3f      	ldr	r2, [pc, #252]	; (8005d78 <xTaskIncrementTick+0x154>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <xTaskIncrementTick+0x158>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	f000 fad1 	bl	8006230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c8e:	4b3c      	ldr	r3, [pc, #240]	; (8005d80 <xTaskIncrementTick+0x15c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d349      	bcc.n	8005d2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <xTaskIncrementTick+0x150>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <xTaskIncrementTick+0x15c>)
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	601a      	str	r2, [r3, #0]
					break;
 8005caa:	e03f      	b.n	8005d2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cac:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <xTaskIncrementTick+0x150>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d203      	bcs.n	8005ccc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cc4:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <xTaskIncrementTick+0x15c>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cca:	e02f      	b.n	8005d2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe ff99 	bl	8004c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3318      	adds	r3, #24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe ff90 	bl	8004c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <xTaskIncrementTick+0x160>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d903      	bls.n	8005cfc <xTaskIncrementTick+0xd8>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <xTaskIncrementTick+0x160>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <xTaskIncrementTick+0x164>)
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fe ff1b 	bl	8004b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <xTaskIncrementTick+0x168>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d3b8      	bcc.n	8005c98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d26:	2301      	movs	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2a:	e7b5      	b.n	8005c98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d2c:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <xTaskIncrementTick+0x168>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4915      	ldr	r1, [pc, #84]	; (8005d88 <xTaskIncrementTick+0x164>)
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d901      	bls.n	8005d48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <xTaskIncrementTick+0x16c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e004      	b.n	8005d60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d56:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <xTaskIncrementTick+0x170>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	; (8005d94 <xTaskIncrementTick+0x170>)
 8005d5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d60:	697b      	ldr	r3, [r7, #20]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000c60 	.word	0x20000c60
 8005d70:	20000c3c 	.word	0x20000c3c
 8005d74:	20000bf0 	.word	0x20000bf0
 8005d78:	20000bf4 	.word	0x20000bf4
 8005d7c:	20000c50 	.word	0x20000c50
 8005d80:	20000c58 	.word	0x20000c58
 8005d84:	20000c40 	.word	0x20000c40
 8005d88:	20000768 	.word	0x20000768
 8005d8c:	20000764 	.word	0x20000764
 8005d90:	20000c4c 	.word	0x20000c4c
 8005d94:	20000c48 	.word	0x20000c48

08005d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d9e:	4b28      	ldr	r3, [pc, #160]	; (8005e40 <vTaskSwitchContext+0xa8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005da6:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <vTaskSwitchContext+0xac>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dac:	e041      	b.n	8005e32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005dae:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <vTaskSwitchContext+0xac>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <vTaskSwitchContext+0xb0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e010      	b.n	8005dde <vTaskSwitchContext+0x46>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	607b      	str	r3, [r7, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <vTaskSwitchContext+0x3e>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	491b      	ldr	r1, [pc, #108]	; (8005e4c <vTaskSwitchContext+0xb4>)
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0e4      	beq.n	8005dbc <vTaskSwitchContext+0x24>
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <vTaskSwitchContext+0xb4>)
 8005dfe:	4413      	add	r3, r2
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	605a      	str	r2, [r3, #4]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3308      	adds	r3, #8
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d104      	bne.n	8005e22 <vTaskSwitchContext+0x8a>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <vTaskSwitchContext+0xb8>)
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	4a06      	ldr	r2, [pc, #24]	; (8005e48 <vTaskSwitchContext+0xb0>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000c60 	.word	0x20000c60
 8005e44:	20000c4c 	.word	0x20000c4c
 8005e48:	20000c40 	.word	0x20000c40
 8005e4c:	20000768 	.word	0x20000768
 8005e50:	20000764 	.word	0x20000764

08005e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <vTaskPlaceOnEventList+0x44>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3318      	adds	r3, #24
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe fe87 	bl	8004b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e88:	2101      	movs	r1, #1
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f000 fa7c 	bl	8006388 <prvAddCurrentTaskToDelayedList>
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000764 	.word	0x20000764

08005e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3318      	adds	r3, #24
 8005eca:	4619      	mov	r1, r3
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fe fe3e 	bl	8004b4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	68b8      	ldr	r0, [r7, #8]
 8005ee2:	f000 fa51 	bl	8006388 <prvAddCurrentTaskToDelayedList>
	}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000764 	.word	0x20000764

08005ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	60fb      	str	r3, [r7, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3318      	adds	r3, #24
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fe6f 	bl	8004c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	; (8005fa4 <xTaskRemoveFromEventList+0xb0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11d      	bne.n	8005f6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fe66 	bl	8004c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <xTaskRemoveFromEventList+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d903      	bls.n	8005f50 <xTaskRemoveFromEventList+0x5c>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <xTaskRemoveFromEventList+0xb4>)
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4a13      	ldr	r2, [pc, #76]	; (8005fac <xTaskRemoveFromEventList+0xb8>)
 8005f5e:	441a      	add	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fe fdf1 	bl	8004b4e <vListInsertEnd>
 8005f6c:	e005      	b.n	8005f7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3318      	adds	r3, #24
 8005f72:	4619      	mov	r1, r3
 8005f74:	480e      	ldr	r0, [pc, #56]	; (8005fb0 <xTaskRemoveFromEventList+0xbc>)
 8005f76:	f7fe fdea 	bl	8004b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <xTaskRemoveFromEventList+0xc0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d905      	bls.n	8005f94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <xTaskRemoveFromEventList+0xc4>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e001      	b.n	8005f98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f98:	697b      	ldr	r3, [r7, #20]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000c60 	.word	0x20000c60
 8005fa8:	20000c40 	.word	0x20000c40
 8005fac:	20000768 	.word	0x20000768
 8005fb0:	20000bf8 	.word	0x20000bf8
 8005fb4:	20000764 	.word	0x20000764
 8005fb8:	20000c4c 	.word	0x20000c4c

08005fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <vTaskInternalSetTimeOutState+0x24>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <vTaskInternalSetTimeOutState+0x28>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	605a      	str	r2, [r3, #4]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000c50 	.word	0x20000c50
 8005fe4:	20000c3c 	.word	0x20000c3c

08005fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	613b      	str	r3, [r7, #16]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800602a:	f000 fe7b 	bl	8006d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <xTaskCheckForTimeOut+0xbc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d102      	bne.n	800604e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	e023      	b.n	8006096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <xTaskCheckForTimeOut+0xc0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d007      	beq.n	800606a <xTaskCheckForTimeOut+0x82>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	429a      	cmp	r2, r3
 8006062:	d302      	bcc.n	800606a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e015      	b.n	8006096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	429a      	cmp	r2, r3
 8006072:	d20b      	bcs.n	800608c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff ff9b 	bl	8005fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	e004      	b.n	8006096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006096:	f000 fe75 	bl	8006d84 <vPortExitCritical>

	return xReturn;
 800609a:	69fb      	ldr	r3, [r7, #28]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000c3c 	.word	0x20000c3c
 80060a8:	20000c50 	.word	0x20000c50

080060ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <vTaskMissedYield+0x14>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000c4c 	.word	0x20000c4c

080060c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060cc:	f000 f852 	bl	8006174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <prvIdleTask+0x28>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d9f9      	bls.n	80060cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <prvIdleTask+0x2c>)
 80060da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060e8:	e7f0      	b.n	80060cc <prvIdleTask+0x8>
 80060ea:	bf00      	nop
 80060ec:	20000768 	.word	0x20000768
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	e00c      	b.n	800611a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <prvInitialiseTaskLists+0x60>)
 800610c:	4413      	add	r3, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fcf0 	bl	8004af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3301      	adds	r3, #1
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b37      	cmp	r3, #55	; 0x37
 800611e:	d9ef      	bls.n	8006100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006120:	480d      	ldr	r0, [pc, #52]	; (8006158 <prvInitialiseTaskLists+0x64>)
 8006122:	f7fe fce7 	bl	8004af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006126:	480d      	ldr	r0, [pc, #52]	; (800615c <prvInitialiseTaskLists+0x68>)
 8006128:	f7fe fce4 	bl	8004af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800612c:	480c      	ldr	r0, [pc, #48]	; (8006160 <prvInitialiseTaskLists+0x6c>)
 800612e:	f7fe fce1 	bl	8004af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006132:	480c      	ldr	r0, [pc, #48]	; (8006164 <prvInitialiseTaskLists+0x70>)
 8006134:	f7fe fcde 	bl	8004af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006138:	480b      	ldr	r0, [pc, #44]	; (8006168 <prvInitialiseTaskLists+0x74>)
 800613a:	f7fe fcdb 	bl	8004af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <prvInitialiseTaskLists+0x78>)
 8006140:	4a05      	ldr	r2, [pc, #20]	; (8006158 <prvInitialiseTaskLists+0x64>)
 8006142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <prvInitialiseTaskLists+0x7c>)
 8006146:	4a05      	ldr	r2, [pc, #20]	; (800615c <prvInitialiseTaskLists+0x68>)
 8006148:	601a      	str	r2, [r3, #0]
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000768 	.word	0x20000768
 8006158:	20000bc8 	.word	0x20000bc8
 800615c:	20000bdc 	.word	0x20000bdc
 8006160:	20000bf8 	.word	0x20000bf8
 8006164:	20000c0c 	.word	0x20000c0c
 8006168:	20000c24 	.word	0x20000c24
 800616c:	20000bf0 	.word	0x20000bf0
 8006170:	20000bf4 	.word	0x20000bf4

08006174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800617a:	e019      	b.n	80061b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800617c:	f000 fdd2 	bl	8006d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <prvCheckTasksWaitingTermination+0x50>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fd3b 	bl	8004c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006192:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <prvCheckTasksWaitingTermination+0x54>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <prvCheckTasksWaitingTermination+0x54>)
 800619a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <prvCheckTasksWaitingTermination+0x58>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <prvCheckTasksWaitingTermination+0x58>)
 80061a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061a6:	f000 fded 	bl	8006d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f810 	bl	80061d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <prvCheckTasksWaitingTermination+0x58>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e1      	bne.n	800617c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000c0c 	.word	0x20000c0c
 80061c8:	20000c38 	.word	0x20000c38
 80061cc:	20000c20 	.word	0x20000c20

080061d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d108      	bne.n	80061f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff8a 	bl	8007100 <vPortFree>
				vPortFree( pxTCB );
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 ff87 	bl	8007100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061f2:	e018      	b.n	8006226 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d103      	bne.n	8006206 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 ff7e 	bl	8007100 <vPortFree>
	}
 8006204:	e00f      	b.n	8006226 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800620c:	2b02      	cmp	r3, #2
 800620e:	d00a      	beq.n	8006226 <prvDeleteTCB+0x56>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <prvDeleteTCB+0x54>
	}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <prvResetNextTaskUnblockTime+0x38>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <prvResetNextTaskUnblockTime+0x3c>)
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006248:	e008      	b.n	800625c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <prvResetNextTaskUnblockTime+0x38>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4a04      	ldr	r2, [pc, #16]	; (800626c <prvResetNextTaskUnblockTime+0x3c>)
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20000bf0 	.word	0x20000bf0
 800626c:	20000c58 	.word	0x20000c58

08006270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <xTaskGetSchedulerState+0x34>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800627e:	2301      	movs	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	e008      	b.n	8006296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <xTaskGetSchedulerState+0x38>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800628c:	2302      	movs	r3, #2
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e001      	b.n	8006296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006296:	687b      	ldr	r3, [r7, #4]
	}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20000c44 	.word	0x20000c44
 80062a8:	20000c60 	.word	0x20000c60

080062ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d056      	beq.n	8006370 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062c2:	4b2e      	ldr	r3, [pc, #184]	; (800637c <xTaskPriorityDisinherit+0xd0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d00a      	beq.n	80062e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	60fb      	str	r3, [r7, #12]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60bb      	str	r3, [r7, #8]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006304:	1e5a      	subs	r2, r3, #1
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006312:	429a      	cmp	r2, r3
 8006314:	d02c      	beq.n	8006370 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631a:	2b00      	cmp	r3, #0
 800631c:	d128      	bne.n	8006370 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3304      	adds	r3, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fc70 	bl	8004c08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <xTaskPriorityDisinherit+0xd4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <xTaskPriorityDisinherit+0xa4>
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <xTaskPriorityDisinherit+0xd4>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a09      	ldr	r2, [pc, #36]	; (8006384 <xTaskPriorityDisinherit+0xd8>)
 800635e:	441a      	add	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fe fbf1 	bl	8004b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800636c:	2301      	movs	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006370:	697b      	ldr	r3, [r7, #20]
	}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000764 	.word	0x20000764
 8006380:	20000c40 	.word	0x20000c40
 8006384:	20000768 	.word	0x20000768

08006388 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <prvAddCurrentTaskToDelayedList+0x90>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006398:	4b20      	ldr	r3, [pc, #128]	; (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fc32 	bl	8004c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d10a      	bne.n	80063c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b2:	4b1a      	ldr	r3, [pc, #104]	; (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4819      	ldr	r0, [pc, #100]	; (8006420 <prvAddCurrentTaskToDelayedList+0x98>)
 80063bc:	f7fe fbc7 	bl	8004b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063c0:	e026      	b.n	8006410 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4413      	add	r3, r2
 80063c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d209      	bcs.n	80063ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe fbd5 	bl	8004b96 <vListInsert>
}
 80063ec:	e010      	b.n	8006410 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fbcb 	bl	8004b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d202      	bcs.n	8006410 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800640a:	4a08      	ldr	r2, [pc, #32]	; (800642c <prvAddCurrentTaskToDelayedList+0xa4>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000c3c 	.word	0x20000c3c
 800641c:	20000764 	.word	0x20000764
 8006420:	20000c24 	.word	0x20000c24
 8006424:	20000bf4 	.word	0x20000bf4
 8006428:	20000bf0 	.word	0x20000bf0
 800642c:	20000c58 	.word	0x20000c58

08006430 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800643a:	f000 fb07 	bl	8006a4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <xTimerCreateTimerTask+0x80>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d021      	beq.n	800648a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800644e:	1d3a      	adds	r2, r7, #4
 8006450:	f107 0108 	add.w	r1, r7, #8
 8006454:	f107 030c 	add.w	r3, r7, #12
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fb31 	bl	8004ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	9202      	str	r2, [sp, #8]
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	2302      	movs	r3, #2
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	460a      	mov	r2, r1
 8006470:	4910      	ldr	r1, [pc, #64]	; (80064b4 <xTimerCreateTimerTask+0x84>)
 8006472:	4811      	ldr	r0, [pc, #68]	; (80064b8 <xTimerCreateTimerTask+0x88>)
 8006474:	f7ff f8de 	bl	8005634 <xTaskCreateStatic>
 8006478:	4603      	mov	r3, r0
 800647a:	4a10      	ldr	r2, [pc, #64]	; (80064bc <xTimerCreateTimerTask+0x8c>)
 800647c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <xTimerCreateTimerTask+0x8c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064a6:	697b      	ldr	r3, [r7, #20]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000c94 	.word	0x20000c94
 80064b4:	08008358 	.word	0x08008358
 80064b8:	080065f5 	.word	0x080065f5
 80064bc:	20000c98 	.word	0x20000c98

080064c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	623b      	str	r3, [r7, #32]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <xTimerGenericCommand+0x98>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d02a      	beq.n	800654c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b05      	cmp	r3, #5
 8006506:	dc18      	bgt.n	800653a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006508:	f7ff feb2 	bl	8006270 <xTaskGetSchedulerState>
 800650c:	4603      	mov	r3, r0
 800650e:	2b02      	cmp	r3, #2
 8006510:	d109      	bne.n	8006526 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006512:	4b11      	ldr	r3, [pc, #68]	; (8006558 <xTimerGenericCommand+0x98>)
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	f107 0110 	add.w	r1, r7, #16
 800651a:	2300      	movs	r3, #0
 800651c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651e:	f7fe fca1 	bl	8004e64 <xQueueGenericSend>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24
 8006524:	e012      	b.n	800654c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <xTimerGenericCommand+0x98>)
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	f107 0110 	add.w	r1, r7, #16
 800652e:	2300      	movs	r3, #0
 8006530:	2200      	movs	r2, #0
 8006532:	f7fe fc97 	bl	8004e64 <xQueueGenericSend>
 8006536:	6278      	str	r0, [r7, #36]	; 0x24
 8006538:	e008      	b.n	800654c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800653a:	4b07      	ldr	r3, [pc, #28]	; (8006558 <xTimerGenericCommand+0x98>)
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	f107 0110 	add.w	r1, r7, #16
 8006542:	2300      	movs	r3, #0
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	f7fe fd8b 	bl	8005060 <xQueueGenericSendFromISR>
 800654a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800654e:	4618      	mov	r0, r3
 8006550:	3728      	adds	r7, #40	; 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000c94 	.word	0x20000c94

0800655c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af02      	add	r7, sp, #8
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006566:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <prvProcessExpiredTimer+0x94>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe fb47 	bl	8004c08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d022      	beq.n	80065ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	18d1      	adds	r1, r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	6978      	ldr	r0, [r7, #20]
 8006596:	f000 f8d1 	bl	800673c <prvInsertTimerInActiveList>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01f      	beq.n	80065e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a0:	2300      	movs	r3, #0
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	2100      	movs	r1, #0
 80065aa:	6978      	ldr	r0, [r7, #20]
 80065ac:	f7ff ff88 	bl	80064c0 <xTimerGenericCommand>
 80065b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d113      	bne.n	80065e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	4798      	blx	r3
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000c8c 	.word	0x20000c8c

080065f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f857 	bl	80066b4 <prvGetNextExpireTime>
 8006606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f803 	bl	8006618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006612:	f000 f8d5 	bl	80067c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006616:	e7f1      	b.n	80065fc <prvTimerTask+0x8>

08006618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006622:	f7ff fa43 	bl	8005aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006626:	f107 0308 	add.w	r3, r7, #8
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f866 	bl	80066fc <prvSampleTimeNow>
 8006630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d130      	bne.n	800669a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <prvProcessTimerOrBlockTask+0x3c>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	429a      	cmp	r2, r3
 8006644:	d806      	bhi.n	8006654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006646:	f7ff fa3f 	bl	8005ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff85 	bl	800655c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006652:	e024      	b.n	800669e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <prvProcessTimerOrBlockTask+0x90>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <prvProcessTimerOrBlockTask+0x50>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <prvProcessTimerOrBlockTask+0x52>
 8006668:	2300      	movs	r3, #0
 800666a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800666c:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <prvProcessTimerOrBlockTask+0x94>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	f7fe ffa7 	bl	80055cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800667e:	f7ff fa23 	bl	8005ac8 <xTaskResumeAll>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <prvProcessTimerOrBlockTask+0x98>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
}
 8006698:	e001      	b.n	800669e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800669a:	f7ff fa15 	bl	8005ac8 <xTaskResumeAll>
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000c90 	.word	0x20000c90
 80066ac:	20000c94 	.word	0x20000c94
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <prvGetNextExpireTime+0x44>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <prvGetNextExpireTime+0x16>
 80066c6:	2201      	movs	r2, #1
 80066c8:	e000      	b.n	80066cc <prvGetNextExpireTime+0x18>
 80066ca:	2200      	movs	r2, #0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <prvGetNextExpireTime+0x44>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e001      	b.n	80066e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000c8c 	.word	0x20000c8c

080066fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006704:	f7ff fa7e 	bl	8005c04 <xTaskGetTickCount>
 8006708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <prvSampleTimeNow+0x3c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	429a      	cmp	r2, r3
 8006712:	d205      	bcs.n	8006720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006714:	f000 f936 	bl	8006984 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e002      	b.n	8006726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006726:	4a04      	ldr	r2, [pc, #16]	; (8006738 <prvSampleTimeNow+0x3c>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000c9c 	.word	0x20000c9c

0800673c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d812      	bhi.n	8006788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e01b      	b.n	80067ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <prvInsertTimerInActiveList+0x7c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fe fa08 	bl	8004b96 <vListInsert>
 8006786:	e012      	b.n	80067ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d206      	bcs.n	800679e <prvInsertTimerInActiveList+0x62>
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e007      	b.n	80067ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <prvInsertTimerInActiveList+0x80>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fe f9f4 	bl	8004b96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ae:	697b      	ldr	r3, [r7, #20]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000c90 	.word	0x20000c90
 80067bc:	20000c8c 	.word	0x20000c8c

080067c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08e      	sub	sp, #56	; 0x38
 80067c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c6:	e0ca      	b.n	800695e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da18      	bge.n	8006800 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	3304      	adds	r3, #4
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61fb      	str	r3, [r7, #28]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f6:	6850      	ldr	r0, [r2, #4]
 80067f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067fa:	6892      	ldr	r2, [r2, #8]
 80067fc:	4611      	mov	r1, r2
 80067fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f2c0 80aa 	blt.w	800695c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	3304      	adds	r3, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe f9f5 	bl	8004c08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800681e:	463b      	mov	r3, r7
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff ff6b 	bl	80066fc <prvSampleTimeNow>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b09      	cmp	r3, #9
 800682c:	f200 8097 	bhi.w	800695e <prvProcessReceivedCommands+0x19e>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <prvProcessReceivedCommands+0x78>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006861 	.word	0x08006861
 800683c:	08006861 	.word	0x08006861
 8006840:	08006861 	.word	0x08006861
 8006844:	080068d5 	.word	0x080068d5
 8006848:	080068e9 	.word	0x080068e9
 800684c:	08006933 	.word	0x08006933
 8006850:	08006861 	.word	0x08006861
 8006854:	08006861 	.word	0x08006861
 8006858:	080068d5 	.word	0x080068d5
 800685c:	080068e9 	.word	0x080068e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	18d1      	adds	r1, r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006880:	f7ff ff5c 	bl	800673c <prvInsertTimerInActiveList>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d069      	beq.n	800695e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006890:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d05e      	beq.n	800695e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	441a      	add	r2, r3
 80068a8:	2300      	movs	r3, #0
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	2300      	movs	r3, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b2:	f7ff fe05 	bl	80064c0 <xTimerGenericCommand>
 80068b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d14f      	bne.n	800695e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	61bb      	str	r3, [r7, #24]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80068e6:	e03a      	b.n	800695e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	617b      	str	r3, [r7, #20]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	18d1      	adds	r1, r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692c:	f7ff ff06 	bl	800673c <prvInsertTimerInActiveList>
					break;
 8006930:	e015      	b.n	800695e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006942:	f000 fbdd 	bl	8007100 <vPortFree>
 8006946:	e00a      	b.n	800695e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800694e:	f023 0301 	bic.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800695a:	e000      	b.n	800695e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800695c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800695e:	4b08      	ldr	r3, [pc, #32]	; (8006980 <prvProcessReceivedCommands+0x1c0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1d39      	adds	r1, r7, #4
 8006964:	2200      	movs	r2, #0
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fc16 	bl	8005198 <xQueueReceive>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	f47f af2a 	bne.w	80067c8 <prvProcessReceivedCommands+0x8>
	}
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3730      	adds	r7, #48	; 0x30
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000c94 	.word	0x20000c94

08006984 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800698a:	e048      	b.n	8006a1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800698c:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006996:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe f92f 	bl	8004c08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02e      	beq.n	8006a1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d90e      	bls.n	80069f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069de:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fe f8d4 	bl	8004b96 <vListInsert>
 80069ee:	e016      	b.n	8006a1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	2100      	movs	r1, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fd60 	bl	80064c0 <xTimerGenericCommand>
 8006a00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	603b      	str	r3, [r7, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1b1      	bne.n	800698c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a28:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a04      	ldr	r2, [pc, #16]	; (8006a44 <prvSwitchTimerLists+0xc0>)
 8006a34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a36:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000c8c 	.word	0x20000c8c
 8006a48:	20000c90 	.word	0x20000c90

08006a4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a52:	f000 f967 	bl	8006d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d120      	bne.n	8006aa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a5e:	4814      	ldr	r0, [pc, #80]	; (8006ab0 <prvCheckForValidListAndQueue+0x64>)
 8006a60:	f7fe f848 	bl	8004af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a64:	4813      	ldr	r0, [pc, #76]	; (8006ab4 <prvCheckForValidListAndQueue+0x68>)
 8006a66:	f7fe f845 	bl	8004af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <prvCheckForValidListAndQueue+0x6c>)
 8006a6c:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <prvCheckForValidListAndQueue+0x64>)
 8006a6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <prvCheckForValidListAndQueue+0x70>)
 8006a72:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <prvCheckForValidListAndQueue+0x68>)
 8006a74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a76:	2300      	movs	r3, #0
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <prvCheckForValidListAndQueue+0x74>)
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <prvCheckForValidListAndQueue+0x78>)
 8006a7e:	2110      	movs	r1, #16
 8006a80:	200a      	movs	r0, #10
 8006a82:	f7fe f953 	bl	8004d2c <xQueueGenericCreateStatic>
 8006a86:	4603      	mov	r3, r0
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <prvCheckForValidListAndQueue+0x60>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	490b      	ldr	r1, [pc, #44]	; (8006ac8 <prvCheckForValidListAndQueue+0x7c>)
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fd6c 	bl	8005578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aa0:	f000 f970 	bl	8006d84 <vPortExitCritical>
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000c94 	.word	0x20000c94
 8006ab0:	20000c64 	.word	0x20000c64
 8006ab4:	20000c78 	.word	0x20000c78
 8006ab8:	20000c8c 	.word	0x20000c8c
 8006abc:	20000c90 	.word	0x20000c90
 8006ac0:	20000d40 	.word	0x20000d40
 8006ac4:	20000ca0 	.word	0x20000ca0
 8006ac8:	08008360 	.word	0x08008360

08006acc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3b04      	subs	r3, #4
 8006adc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3b04      	subs	r3, #4
 8006aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f023 0201 	bic.w	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3b04      	subs	r3, #4
 8006afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006afc:	4a0c      	ldr	r2, [pc, #48]	; (8006b30 <pxPortInitialiseStack+0x64>)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3b14      	subs	r3, #20
 8006b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f06f 0202 	mvn.w	r2, #2
 8006b1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3b20      	subs	r3, #32
 8006b20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	08006b35 	.word	0x08006b35

08006b34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <prvTaskExitError+0x54>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d00a      	beq.n	8006b5e <prvTaskExitError+0x2a>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <prvTaskExitError+0x28>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60bb      	str	r3, [r7, #8]
}
 8006b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b72:	bf00      	nop
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0fc      	beq.n	8006b74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	20000014 	.word	0x20000014
 8006b8c:	00000000 	.word	0x00000000

08006b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <pxCurrentTCBConst2>)
 8006b92:	6819      	ldr	r1, [r3, #0]
 8006b94:	6808      	ldr	r0, [r1, #0]
 8006b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9a:	f380 8809 	msr	PSP, r0
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f04f 0000 	mov.w	r0, #0
 8006ba6:	f380 8811 	msr	BASEPRI, r0
 8006baa:	4770      	bx	lr
 8006bac:	f3af 8000 	nop.w

08006bb0 <pxCurrentTCBConst2>:
 8006bb0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop

08006bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bb8:	4808      	ldr	r0, [pc, #32]	; (8006bdc <prvPortStartFirstTask+0x24>)
 8006bba:	6800      	ldr	r0, [r0, #0]
 8006bbc:	6800      	ldr	r0, [r0, #0]
 8006bbe:	f380 8808 	msr	MSP, r0
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f380 8814 	msr	CONTROL, r0
 8006bca:	b662      	cpsie	i
 8006bcc:	b661      	cpsie	f
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	df00      	svc	0
 8006bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bda:	bf00      	nop
 8006bdc:	e000ed08 	.word	0xe000ed08

08006be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006be6:	4b46      	ldr	r3, [pc, #280]	; (8006d00 <xPortStartScheduler+0x120>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a46      	ldr	r2, [pc, #280]	; (8006d04 <xPortStartScheduler+0x124>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10a      	bne.n	8006c06 <xPortStartScheduler+0x26>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	613b      	str	r3, [r7, #16]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c06:	4b3e      	ldr	r3, [pc, #248]	; (8006d00 <xPortStartScheduler+0x120>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a3f      	ldr	r2, [pc, #252]	; (8006d08 <xPortStartScheduler+0x128>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10a      	bne.n	8006c26 <xPortStartScheduler+0x46>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c26:	4b39      	ldr	r3, [pc, #228]	; (8006d0c <xPortStartScheduler+0x12c>)
 8006c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	22ff      	movs	r2, #255	; 0xff
 8006c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <xPortStartScheduler+0x130>)
 8006c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c4e:	4b31      	ldr	r3, [pc, #196]	; (8006d14 <xPortStartScheduler+0x134>)
 8006c50:	2207      	movs	r2, #7
 8006c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c54:	e009      	b.n	8006c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006c56:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <xPortStartScheduler+0x134>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	4a2d      	ldr	r2, [pc, #180]	; (8006d14 <xPortStartScheduler+0x134>)
 8006c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d0ef      	beq.n	8006c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c76:	4b27      	ldr	r3, [pc, #156]	; (8006d14 <xPortStartScheduler+0x134>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f1c3 0307 	rsb	r3, r3, #7
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d00a      	beq.n	8006c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60bb      	str	r3, [r7, #8]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c98:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <xPortStartScheduler+0x134>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <xPortStartScheduler+0x134>)
 8006ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <xPortStartScheduler+0x134>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006caa:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <xPortStartScheduler+0x134>)
 8006cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cb6:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <xPortStartScheduler+0x138>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <xPortStartScheduler+0x138>)
 8006cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <xPortStartScheduler+0x138>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <xPortStartScheduler+0x138>)
 8006cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cce:	f000 f8dd 	bl	8006e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cd2:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <xPortStartScheduler+0x13c>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cd8:	f000 f8fc 	bl	8006ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cdc:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <xPortStartScheduler+0x140>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <xPortStartScheduler+0x140>)
 8006ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ce8:	f7ff ff66 	bl	8006bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cec:	f7ff f854 	bl	8005d98 <vTaskSwitchContext>
	prvTaskExitError();
 8006cf0:	f7ff ff20 	bl	8006b34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000ed00 	.word	0xe000ed00
 8006d04:	410fc271 	.word	0x410fc271
 8006d08:	410fc270 	.word	0x410fc270
 8006d0c:	e000e400 	.word	0xe000e400
 8006d10:	20000d90 	.word	0x20000d90
 8006d14:	20000d94 	.word	0x20000d94
 8006d18:	e000ed20 	.word	0xe000ed20
 8006d1c:	20000014 	.word	0x20000014
 8006d20:	e000ef34 	.word	0xe000ef34

08006d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	607b      	str	r3, [r7, #4]
}
 8006d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <vPortEnterCritical+0x58>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3301      	adds	r3, #1
 8006d44:	4a0d      	ldr	r2, [pc, #52]	; (8006d7c <vPortEnterCritical+0x58>)
 8006d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <vPortEnterCritical+0x58>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d10f      	bne.n	8006d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <vPortEnterCritical+0x5c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	603b      	str	r3, [r7, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <vPortEnterCritical+0x4a>
	}
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000014 	.word	0x20000014
 8006d80:	e000ed04 	.word	0xe000ed04

08006d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d8a:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <vPortExitCritical+0x50>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <vPortExitCritical+0x24>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	607b      	str	r3, [r7, #4]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <vPortExitCritical+0x50>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <vPortExitCritical+0x50>)
 8006db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006db2:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <vPortExitCritical+0x50>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <vPortExitCritical+0x42>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	f383 8811 	msr	BASEPRI, r3
}
 8006dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000014 	.word	0x20000014
	...

08006de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006de0:	f3ef 8009 	mrs	r0, PSP
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <pxCurrentTCBConst>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	f01e 0f10 	tst.w	lr, #16
 8006df0:	bf08      	it	eq
 8006df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfa:	6010      	str	r0, [r2, #0]
 8006dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e04:	f380 8811 	msr	BASEPRI, r0
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f7fe ffc2 	bl	8005d98 <vTaskSwitchContext>
 8006e14:	f04f 0000 	mov.w	r0, #0
 8006e18:	f380 8811 	msr	BASEPRI, r0
 8006e1c:	bc09      	pop	{r0, r3}
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	6808      	ldr	r0, [r1, #0]
 8006e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e26:	f01e 0f10 	tst.w	lr, #16
 8006e2a:	bf08      	it	eq
 8006e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e30:	f380 8809 	msr	PSP, r0
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w

08006e40 <pxCurrentTCBConst>:
 8006e40:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop

08006e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e62:	f7fe fedf 	bl	8005c24 <xTaskIncrementTick>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <xPortSysTickHandler+0x40>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	2300      	movs	r3, #0
 8006e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f383 8811 	msr	BASEPRI, r3
}
 8006e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <vPortSetupTimerInterrupt+0x34>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <vPortSetupTimerInterrupt+0x38>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <vPortSetupTimerInterrupt+0x3c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <vPortSetupTimerInterrupt+0x40>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	099b      	lsrs	r3, r3, #6
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <vPortSetupTimerInterrupt+0x44>)
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <vPortSetupTimerInterrupt+0x34>)
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	e000e010 	.word	0xe000e010
 8006ec4:	e000e018 	.word	0xe000e018
 8006ec8:	20000008 	.word	0x20000008
 8006ecc:	10624dd3 	.word	0x10624dd3
 8006ed0:	e000e014 	.word	0xe000e014

08006ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ee4 <vPortEnableVFP+0x10>
 8006ed8:	6801      	ldr	r1, [r0, #0]
 8006eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ede:	6001      	str	r1, [r0, #0]
 8006ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ee2:	bf00      	nop
 8006ee4:	e000ed88 	.word	0xe000ed88

08006ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006eee:	f3ef 8305 	mrs	r3, IPSR
 8006ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b0f      	cmp	r3, #15
 8006ef8:	d914      	bls.n	8006f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <vPortValidateInterruptPriority+0x70>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f04:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <vPortValidateInterruptPriority+0x74>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	7afa      	ldrb	r2, [r7, #11]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d20a      	bcs.n	8006f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <vPortValidateInterruptPriority+0x78>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <vPortValidateInterruptPriority+0x7c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d90a      	bls.n	8006f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	603b      	str	r3, [r7, #0]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <vPortValidateInterruptPriority+0x60>
	}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	e000e3f0 	.word	0xe000e3f0
 8006f5c:	20000d90 	.word	0x20000d90
 8006f60:	e000ed0c 	.word	0xe000ed0c
 8006f64:	20000d94 	.word	0x20000d94

08006f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f74:	f7fe fd9a 	bl	8005aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f78:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <pvPortMalloc+0x180>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f80:	f000 f920 	bl	80071c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f84:	4b59      	ldr	r3, [pc, #356]	; (80070ec <pvPortMalloc+0x184>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 8093 	bne.w	80070b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01d      	beq.n	8006fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f98:	2208      	movs	r2, #8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d014      	beq.n	8006fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	617b      	str	r3, [r7, #20]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d06e      	beq.n	80070b8 <pvPortMalloc+0x150>
 8006fda:	4b45      	ldr	r3, [pc, #276]	; (80070f0 <pvPortMalloc+0x188>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d869      	bhi.n	80070b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fe4:	4b43      	ldr	r3, [pc, #268]	; (80070f4 <pvPortMalloc+0x18c>)
 8006fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fe8:	4b42      	ldr	r3, [pc, #264]	; (80070f4 <pvPortMalloc+0x18c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fee:	e004      	b.n	8006ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d903      	bls.n	800700c <pvPortMalloc+0xa4>
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f1      	bne.n	8006ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <pvPortMalloc+0x180>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	429a      	cmp	r2, r3
 8007014:	d050      	beq.n	80070b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2208      	movs	r2, #8
 800701c:	4413      	add	r3, r2
 800701e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	2308      	movs	r3, #8
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	d91f      	bls.n	8007078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <pvPortMalloc+0xf8>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	613b      	str	r3, [r7, #16]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007072:	69b8      	ldr	r0, [r7, #24]
 8007074:	f000 f908 	bl	8007288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007078:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <pvPortMalloc+0x188>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <pvPortMalloc+0x188>)
 8007084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007086:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <pvPortMalloc+0x188>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <pvPortMalloc+0x190>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d203      	bcs.n	800709a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <pvPortMalloc+0x188>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <pvPortMalloc+0x190>)
 8007098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <pvPortMalloc+0x184>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070ae:	4b13      	ldr	r3, [pc, #76]	; (80070fc <pvPortMalloc+0x194>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a11      	ldr	r2, [pc, #68]	; (80070fc <pvPortMalloc+0x194>)
 80070b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070b8:	f7fe fd06 	bl	8005ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <pvPortMalloc+0x174>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <pvPortMalloc+0x172>
	return pvReturn;
 80070dc:	69fb      	ldr	r3, [r7, #28]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3728      	adds	r7, #40	; 0x28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	200049a0 	.word	0x200049a0
 80070ec:	200049b4 	.word	0x200049b4
 80070f0:	200049a4 	.word	0x200049a4
 80070f4:	20004998 	.word	0x20004998
 80070f8:	200049a8 	.word	0x200049a8
 80070fc:	200049ac 	.word	0x200049ac

08007100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d04d      	beq.n	80071ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007112:	2308      	movs	r3, #8
 8007114:	425b      	negs	r3, r3
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <vPortFree+0xb8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <vPortFree+0x44>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60fb      	str	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <vPortFree+0x62>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60bb      	str	r3, [r7, #8]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <vPortFree+0xb8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01e      	beq.n	80071ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11a      	bne.n	80071ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <vPortFree+0xb8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	43db      	mvns	r3, r3
 8007182:	401a      	ands	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007188:	f7fe fc90 	bl	8005aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <vPortFree+0xbc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4413      	add	r3, r2
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <vPortFree+0xbc>)
 8007198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f000 f874 	bl	8007288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <vPortFree+0xc0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	4a06      	ldr	r2, [pc, #24]	; (80071c0 <vPortFree+0xc0>)
 80071a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071aa:	f7fe fc8d 	bl	8005ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071ae:	bf00      	nop
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200049b4 	.word	0x200049b4
 80071bc:	200049a4 	.word	0x200049a4
 80071c0:	200049b0 	.word	0x200049b0

080071c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <prvHeapInit+0xac>)
 80071d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3307      	adds	r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0307 	bic.w	r3, r3, #7
 80071ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <prvHeapInit+0xac>)
 80071f4:	4413      	add	r3, r2
 80071f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <prvHeapInit+0xb0>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <prvHeapInit+0xb0>)
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007210:	2208      	movs	r2, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <prvHeapInit+0xb4>)
 8007224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <prvHeapInit+0xb4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <prvHeapInit+0xb4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <prvHeapInit+0xb4>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <prvHeapInit+0xb8>)
 8007252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <prvHeapInit+0xbc>)
 800725a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <prvHeapInit+0xc0>)
 800725e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000d98 	.word	0x20000d98
 8007274:	20004998 	.word	0x20004998
 8007278:	200049a0 	.word	0x200049a0
 800727c:	200049a8 	.word	0x200049a8
 8007280:	200049a4 	.word	0x200049a4
 8007284:	200049b4 	.word	0x200049b4

08007288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <prvInsertBlockIntoFreeList+0xac>)
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e002      	b.n	800729c <prvInsertBlockIntoFreeList+0x14>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d8f7      	bhi.n	8007296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d108      	bne.n	80072ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d118      	bne.n	8007310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d00d      	beq.n	8007306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e008      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e003      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d002      	beq.n	8007326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20004998 	.word	0x20004998
 8007338:	200049a0 	.word	0x200049a0

0800733c <__errno>:
 800733c:	4b01      	ldr	r3, [pc, #4]	; (8007344 <__errno+0x8>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000018 	.word	0x20000018

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4d0d      	ldr	r5, [pc, #52]	; (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	; (8007384 <__libc_init_array+0x3c>)
 800734e:	1b64      	subs	r4, r4, r5
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2600      	movs	r6, #0
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4d0b      	ldr	r5, [pc, #44]	; (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	; (800738c <__libc_init_array+0x44>)
 800735c:	f000 ff84 	bl	8008268 <_init>
 8007360:	1b64      	subs	r4, r4, r5
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2600      	movs	r6, #0
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	08008444 	.word	0x08008444
 8007384:	08008444 	.word	0x08008444
 8007388:	08008444 	.word	0x08008444
 800738c:	08008448 	.word	0x08008448

08007390 <memcpy>:
 8007390:	440a      	add	r2, r1
 8007392:	4291      	cmp	r1, r2
 8007394:	f100 33ff 	add.w	r3, r0, #4294967295
 8007398:	d100      	bne.n	800739c <memcpy+0xc>
 800739a:	4770      	bx	lr
 800739c:	b510      	push	{r4, lr}
 800739e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a6:	4291      	cmp	r1, r2
 80073a8:	d1f9      	bne.n	800739e <memcpy+0xe>
 80073aa:	bd10      	pop	{r4, pc}

080073ac <memset>:
 80073ac:	4402      	add	r2, r0
 80073ae:	4603      	mov	r3, r0
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d100      	bne.n	80073b6 <memset+0xa>
 80073b4:	4770      	bx	lr
 80073b6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ba:	e7f9      	b.n	80073b0 <memset+0x4>

080073bc <iprintf>:
 80073bc:	b40f      	push	{r0, r1, r2, r3}
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <iprintf+0x2c>)
 80073c0:	b513      	push	{r0, r1, r4, lr}
 80073c2:	681c      	ldr	r4, [r3, #0]
 80073c4:	b124      	cbz	r4, 80073d0 <iprintf+0x14>
 80073c6:	69a3      	ldr	r3, [r4, #24]
 80073c8:	b913      	cbnz	r3, 80073d0 <iprintf+0x14>
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f866 	bl	800749c <__sinit>
 80073d0:	ab05      	add	r3, sp, #20
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	68a1      	ldr	r1, [r4, #8]
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 f983 	bl	80076e4 <_vfiprintf_r>
 80073de:	b002      	add	sp, #8
 80073e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e4:	b004      	add	sp, #16
 80073e6:	4770      	bx	lr
 80073e8:	20000018 	.word	0x20000018

080073ec <std>:
 80073ec:	2300      	movs	r3, #0
 80073ee:	b510      	push	{r4, lr}
 80073f0:	4604      	mov	r4, r0
 80073f2:	e9c0 3300 	strd	r3, r3, [r0]
 80073f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073fa:	6083      	str	r3, [r0, #8]
 80073fc:	8181      	strh	r1, [r0, #12]
 80073fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007400:	81c2      	strh	r2, [r0, #14]
 8007402:	6183      	str	r3, [r0, #24]
 8007404:	4619      	mov	r1, r3
 8007406:	2208      	movs	r2, #8
 8007408:	305c      	adds	r0, #92	; 0x5c
 800740a:	f7ff ffcf 	bl	80073ac <memset>
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <std+0x38>)
 8007410:	6263      	str	r3, [r4, #36]	; 0x24
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <std+0x3c>)
 8007414:	62a3      	str	r3, [r4, #40]	; 0x28
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <std+0x40>)
 8007418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <std+0x44>)
 800741c:	6224      	str	r4, [r4, #32]
 800741e:	6323      	str	r3, [r4, #48]	; 0x30
 8007420:	bd10      	pop	{r4, pc}
 8007422:	bf00      	nop
 8007424:	08007c8d 	.word	0x08007c8d
 8007428:	08007caf 	.word	0x08007caf
 800742c:	08007ce7 	.word	0x08007ce7
 8007430:	08007d0b 	.word	0x08007d0b

08007434 <_cleanup_r>:
 8007434:	4901      	ldr	r1, [pc, #4]	; (800743c <_cleanup_r+0x8>)
 8007436:	f000 b8af 	b.w	8007598 <_fwalk_reent>
 800743a:	bf00      	nop
 800743c:	08007fe5 	.word	0x08007fe5

08007440 <__sfmoreglue>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	1e4a      	subs	r2, r1, #1
 8007444:	2568      	movs	r5, #104	; 0x68
 8007446:	4355      	muls	r5, r2
 8007448:	460e      	mov	r6, r1
 800744a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800744e:	f000 f8c5 	bl	80075dc <_malloc_r>
 8007452:	4604      	mov	r4, r0
 8007454:	b140      	cbz	r0, 8007468 <__sfmoreglue+0x28>
 8007456:	2100      	movs	r1, #0
 8007458:	e9c0 1600 	strd	r1, r6, [r0]
 800745c:	300c      	adds	r0, #12
 800745e:	60a0      	str	r0, [r4, #8]
 8007460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007464:	f7ff ffa2 	bl	80073ac <memset>
 8007468:	4620      	mov	r0, r4
 800746a:	bd70      	pop	{r4, r5, r6, pc}

0800746c <__sfp_lock_acquire>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__sfp_lock_acquire+0x8>)
 800746e:	f000 b8b3 	b.w	80075d8 <__retarget_lock_acquire_recursive>
 8007472:	bf00      	nop
 8007474:	20004d84 	.word	0x20004d84

08007478 <__sfp_lock_release>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__sfp_lock_release+0x8>)
 800747a:	f000 b8ae 	b.w	80075da <__retarget_lock_release_recursive>
 800747e:	bf00      	nop
 8007480:	20004d84 	.word	0x20004d84

08007484 <__sinit_lock_acquire>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__sinit_lock_acquire+0x8>)
 8007486:	f000 b8a7 	b.w	80075d8 <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	20004d7f 	.word	0x20004d7f

08007490 <__sinit_lock_release>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__sinit_lock_release+0x8>)
 8007492:	f000 b8a2 	b.w	80075da <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	20004d7f 	.word	0x20004d7f

0800749c <__sinit>:
 800749c:	b510      	push	{r4, lr}
 800749e:	4604      	mov	r4, r0
 80074a0:	f7ff fff0 	bl	8007484 <__sinit_lock_acquire>
 80074a4:	69a3      	ldr	r3, [r4, #24]
 80074a6:	b11b      	cbz	r3, 80074b0 <__sinit+0x14>
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	f7ff bff0 	b.w	8007490 <__sinit_lock_release>
 80074b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074b4:	6523      	str	r3, [r4, #80]	; 0x50
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <__sinit+0x68>)
 80074b8:	4a13      	ldr	r2, [pc, #76]	; (8007508 <__sinit+0x6c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80074be:	42a3      	cmp	r3, r4
 80074c0:	bf04      	itt	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	61a3      	streq	r3, [r4, #24]
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f820 	bl	800750c <__sfp>
 80074cc:	6060      	str	r0, [r4, #4]
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f81c 	bl	800750c <__sfp>
 80074d4:	60a0      	str	r0, [r4, #8]
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 f818 	bl	800750c <__sfp>
 80074dc:	2200      	movs	r2, #0
 80074de:	60e0      	str	r0, [r4, #12]
 80074e0:	2104      	movs	r1, #4
 80074e2:	6860      	ldr	r0, [r4, #4]
 80074e4:	f7ff ff82 	bl	80073ec <std>
 80074e8:	68a0      	ldr	r0, [r4, #8]
 80074ea:	2201      	movs	r2, #1
 80074ec:	2109      	movs	r1, #9
 80074ee:	f7ff ff7d 	bl	80073ec <std>
 80074f2:	68e0      	ldr	r0, [r4, #12]
 80074f4:	2202      	movs	r2, #2
 80074f6:	2112      	movs	r1, #18
 80074f8:	f7ff ff78 	bl	80073ec <std>
 80074fc:	2301      	movs	r3, #1
 80074fe:	61a3      	str	r3, [r4, #24]
 8007500:	e7d2      	b.n	80074a8 <__sinit+0xc>
 8007502:	bf00      	nop
 8007504:	080083a4 	.word	0x080083a4
 8007508:	08007435 	.word	0x08007435

0800750c <__sfp>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	4607      	mov	r7, r0
 8007510:	f7ff ffac 	bl	800746c <__sfp_lock_acquire>
 8007514:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <__sfp+0x84>)
 8007516:	681e      	ldr	r6, [r3, #0]
 8007518:	69b3      	ldr	r3, [r6, #24]
 800751a:	b913      	cbnz	r3, 8007522 <__sfp+0x16>
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffbd 	bl	800749c <__sinit>
 8007522:	3648      	adds	r6, #72	; 0x48
 8007524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	d503      	bpl.n	8007534 <__sfp+0x28>
 800752c:	6833      	ldr	r3, [r6, #0]
 800752e:	b30b      	cbz	r3, 8007574 <__sfp+0x68>
 8007530:	6836      	ldr	r6, [r6, #0]
 8007532:	e7f7      	b.n	8007524 <__sfp+0x18>
 8007534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007538:	b9d5      	cbnz	r5, 8007570 <__sfp+0x64>
 800753a:	4b16      	ldr	r3, [pc, #88]	; (8007594 <__sfp+0x88>)
 800753c:	60e3      	str	r3, [r4, #12]
 800753e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007542:	6665      	str	r5, [r4, #100]	; 0x64
 8007544:	f000 f847 	bl	80075d6 <__retarget_lock_init_recursive>
 8007548:	f7ff ff96 	bl	8007478 <__sfp_lock_release>
 800754c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007554:	6025      	str	r5, [r4, #0]
 8007556:	61a5      	str	r5, [r4, #24]
 8007558:	2208      	movs	r2, #8
 800755a:	4629      	mov	r1, r5
 800755c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007560:	f7ff ff24 	bl	80073ac <memset>
 8007564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800756c:	4620      	mov	r0, r4
 800756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007570:	3468      	adds	r4, #104	; 0x68
 8007572:	e7d9      	b.n	8007528 <__sfp+0x1c>
 8007574:	2104      	movs	r1, #4
 8007576:	4638      	mov	r0, r7
 8007578:	f7ff ff62 	bl	8007440 <__sfmoreglue>
 800757c:	4604      	mov	r4, r0
 800757e:	6030      	str	r0, [r6, #0]
 8007580:	2800      	cmp	r0, #0
 8007582:	d1d5      	bne.n	8007530 <__sfp+0x24>
 8007584:	f7ff ff78 	bl	8007478 <__sfp_lock_release>
 8007588:	230c      	movs	r3, #12
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	e7ee      	b.n	800756c <__sfp+0x60>
 800758e:	bf00      	nop
 8007590:	080083a4 	.word	0x080083a4
 8007594:	ffff0001 	.word	0xffff0001

08007598 <_fwalk_reent>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	4606      	mov	r6, r0
 800759e:	4688      	mov	r8, r1
 80075a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075a4:	2700      	movs	r7, #0
 80075a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075aa:	f1b9 0901 	subs.w	r9, r9, #1
 80075ae:	d505      	bpl.n	80075bc <_fwalk_reent+0x24>
 80075b0:	6824      	ldr	r4, [r4, #0]
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d1f7      	bne.n	80075a6 <_fwalk_reent+0xe>
 80075b6:	4638      	mov	r0, r7
 80075b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075bc:	89ab      	ldrh	r3, [r5, #12]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d907      	bls.n	80075d2 <_fwalk_reent+0x3a>
 80075c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075c6:	3301      	adds	r3, #1
 80075c8:	d003      	beq.n	80075d2 <_fwalk_reent+0x3a>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	47c0      	blx	r8
 80075d0:	4307      	orrs	r7, r0
 80075d2:	3568      	adds	r5, #104	; 0x68
 80075d4:	e7e9      	b.n	80075aa <_fwalk_reent+0x12>

080075d6 <__retarget_lock_init_recursive>:
 80075d6:	4770      	bx	lr

080075d8 <__retarget_lock_acquire_recursive>:
 80075d8:	4770      	bx	lr

080075da <__retarget_lock_release_recursive>:
 80075da:	4770      	bx	lr

080075dc <_malloc_r>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	1ccd      	adds	r5, r1, #3
 80075e0:	f025 0503 	bic.w	r5, r5, #3
 80075e4:	3508      	adds	r5, #8
 80075e6:	2d0c      	cmp	r5, #12
 80075e8:	bf38      	it	cc
 80075ea:	250c      	movcc	r5, #12
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	4606      	mov	r6, r0
 80075f0:	db01      	blt.n	80075f6 <_malloc_r+0x1a>
 80075f2:	42a9      	cmp	r1, r5
 80075f4:	d903      	bls.n	80075fe <_malloc_r+0x22>
 80075f6:	230c      	movs	r3, #12
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	2000      	movs	r0, #0
 80075fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075fe:	f000 fda3 	bl	8008148 <__malloc_lock>
 8007602:	4921      	ldr	r1, [pc, #132]	; (8007688 <_malloc_r+0xac>)
 8007604:	680a      	ldr	r2, [r1, #0]
 8007606:	4614      	mov	r4, r2
 8007608:	b99c      	cbnz	r4, 8007632 <_malloc_r+0x56>
 800760a:	4f20      	ldr	r7, [pc, #128]	; (800768c <_malloc_r+0xb0>)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	b923      	cbnz	r3, 800761a <_malloc_r+0x3e>
 8007610:	4621      	mov	r1, r4
 8007612:	4630      	mov	r0, r6
 8007614:	f000 fb2a 	bl	8007c6c <_sbrk_r>
 8007618:	6038      	str	r0, [r7, #0]
 800761a:	4629      	mov	r1, r5
 800761c:	4630      	mov	r0, r6
 800761e:	f000 fb25 	bl	8007c6c <_sbrk_r>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d123      	bne.n	800766e <_malloc_r+0x92>
 8007626:	230c      	movs	r3, #12
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	4630      	mov	r0, r6
 800762c:	f000 fd92 	bl	8008154 <__malloc_unlock>
 8007630:	e7e3      	b.n	80075fa <_malloc_r+0x1e>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	1b5b      	subs	r3, r3, r5
 8007636:	d417      	bmi.n	8007668 <_malloc_r+0x8c>
 8007638:	2b0b      	cmp	r3, #11
 800763a:	d903      	bls.n	8007644 <_malloc_r+0x68>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	441c      	add	r4, r3
 8007640:	6025      	str	r5, [r4, #0]
 8007642:	e004      	b.n	800764e <_malloc_r+0x72>
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	42a2      	cmp	r2, r4
 8007648:	bf0c      	ite	eq
 800764a:	600b      	streq	r3, [r1, #0]
 800764c:	6053      	strne	r3, [r2, #4]
 800764e:	4630      	mov	r0, r6
 8007650:	f000 fd80 	bl	8008154 <__malloc_unlock>
 8007654:	f104 000b 	add.w	r0, r4, #11
 8007658:	1d23      	adds	r3, r4, #4
 800765a:	f020 0007 	bic.w	r0, r0, #7
 800765e:	1ac2      	subs	r2, r0, r3
 8007660:	d0cc      	beq.n	80075fc <_malloc_r+0x20>
 8007662:	1a1b      	subs	r3, r3, r0
 8007664:	50a3      	str	r3, [r4, r2]
 8007666:	e7c9      	b.n	80075fc <_malloc_r+0x20>
 8007668:	4622      	mov	r2, r4
 800766a:	6864      	ldr	r4, [r4, #4]
 800766c:	e7cc      	b.n	8007608 <_malloc_r+0x2c>
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d0e3      	beq.n	8007640 <_malloc_r+0x64>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4630      	mov	r0, r6
 800767c:	f000 faf6 	bl	8007c6c <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d1dd      	bne.n	8007640 <_malloc_r+0x64>
 8007684:	e7cf      	b.n	8007626 <_malloc_r+0x4a>
 8007686:	bf00      	nop
 8007688:	200049b8 	.word	0x200049b8
 800768c:	200049bc 	.word	0x200049bc

08007690 <__sfputc_r>:
 8007690:	6893      	ldr	r3, [r2, #8]
 8007692:	3b01      	subs	r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	b410      	push	{r4}
 8007698:	6093      	str	r3, [r2, #8]
 800769a:	da08      	bge.n	80076ae <__sfputc_r+0x1e>
 800769c:	6994      	ldr	r4, [r2, #24]
 800769e:	42a3      	cmp	r3, r4
 80076a0:	db01      	blt.n	80076a6 <__sfputc_r+0x16>
 80076a2:	290a      	cmp	r1, #10
 80076a4:	d103      	bne.n	80076ae <__sfputc_r+0x1e>
 80076a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076aa:	f000 bb33 	b.w	8007d14 <__swbuf_r>
 80076ae:	6813      	ldr	r3, [r2, #0]
 80076b0:	1c58      	adds	r0, r3, #1
 80076b2:	6010      	str	r0, [r2, #0]
 80076b4:	7019      	strb	r1, [r3, #0]
 80076b6:	4608      	mov	r0, r1
 80076b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076bc:	4770      	bx	lr

080076be <__sfputs_r>:
 80076be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c0:	4606      	mov	r6, r0
 80076c2:	460f      	mov	r7, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	18d5      	adds	r5, r2, r3
 80076c8:	42ac      	cmp	r4, r5
 80076ca:	d101      	bne.n	80076d0 <__sfputs_r+0x12>
 80076cc:	2000      	movs	r0, #0
 80076ce:	e007      	b.n	80076e0 <__sfputs_r+0x22>
 80076d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d4:	463a      	mov	r2, r7
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7ff ffda 	bl	8007690 <__sfputc_r>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d1f3      	bne.n	80076c8 <__sfputs_r+0xa>
 80076e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076e4 <_vfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	460d      	mov	r5, r1
 80076ea:	b09d      	sub	sp, #116	; 0x74
 80076ec:	4614      	mov	r4, r2
 80076ee:	4698      	mov	r8, r3
 80076f0:	4606      	mov	r6, r0
 80076f2:	b118      	cbz	r0, 80076fc <_vfiprintf_r+0x18>
 80076f4:	6983      	ldr	r3, [r0, #24]
 80076f6:	b90b      	cbnz	r3, 80076fc <_vfiprintf_r+0x18>
 80076f8:	f7ff fed0 	bl	800749c <__sinit>
 80076fc:	4b89      	ldr	r3, [pc, #548]	; (8007924 <_vfiprintf_r+0x240>)
 80076fe:	429d      	cmp	r5, r3
 8007700:	d11b      	bne.n	800773a <_vfiprintf_r+0x56>
 8007702:	6875      	ldr	r5, [r6, #4]
 8007704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	d405      	bmi.n	8007716 <_vfiprintf_r+0x32>
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	059a      	lsls	r2, r3, #22
 800770e:	d402      	bmi.n	8007716 <_vfiprintf_r+0x32>
 8007710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007712:	f7ff ff61 	bl	80075d8 <__retarget_lock_acquire_recursive>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	071b      	lsls	r3, r3, #28
 800771a:	d501      	bpl.n	8007720 <_vfiprintf_r+0x3c>
 800771c:	692b      	ldr	r3, [r5, #16]
 800771e:	b9eb      	cbnz	r3, 800775c <_vfiprintf_r+0x78>
 8007720:	4629      	mov	r1, r5
 8007722:	4630      	mov	r0, r6
 8007724:	f000 fb5a 	bl	8007ddc <__swsetup_r>
 8007728:	b1c0      	cbz	r0, 800775c <_vfiprintf_r+0x78>
 800772a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772c:	07dc      	lsls	r4, r3, #31
 800772e:	d50e      	bpl.n	800774e <_vfiprintf_r+0x6a>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	b01d      	add	sp, #116	; 0x74
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	4b7b      	ldr	r3, [pc, #492]	; (8007928 <_vfiprintf_r+0x244>)
 800773c:	429d      	cmp	r5, r3
 800773e:	d101      	bne.n	8007744 <_vfiprintf_r+0x60>
 8007740:	68b5      	ldr	r5, [r6, #8]
 8007742:	e7df      	b.n	8007704 <_vfiprintf_r+0x20>
 8007744:	4b79      	ldr	r3, [pc, #484]	; (800792c <_vfiprintf_r+0x248>)
 8007746:	429d      	cmp	r5, r3
 8007748:	bf08      	it	eq
 800774a:	68f5      	ldreq	r5, [r6, #12]
 800774c:	e7da      	b.n	8007704 <_vfiprintf_r+0x20>
 800774e:	89ab      	ldrh	r3, [r5, #12]
 8007750:	0598      	lsls	r0, r3, #22
 8007752:	d4ed      	bmi.n	8007730 <_vfiprintf_r+0x4c>
 8007754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007756:	f7ff ff40 	bl	80075da <__retarget_lock_release_recursive>
 800775a:	e7e9      	b.n	8007730 <_vfiprintf_r+0x4c>
 800775c:	2300      	movs	r3, #0
 800775e:	9309      	str	r3, [sp, #36]	; 0x24
 8007760:	2320      	movs	r3, #32
 8007762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007766:	f8cd 800c 	str.w	r8, [sp, #12]
 800776a:	2330      	movs	r3, #48	; 0x30
 800776c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007930 <_vfiprintf_r+0x24c>
 8007770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007774:	f04f 0901 	mov.w	r9, #1
 8007778:	4623      	mov	r3, r4
 800777a:	469a      	mov	sl, r3
 800777c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007780:	b10a      	cbz	r2, 8007786 <_vfiprintf_r+0xa2>
 8007782:	2a25      	cmp	r2, #37	; 0x25
 8007784:	d1f9      	bne.n	800777a <_vfiprintf_r+0x96>
 8007786:	ebba 0b04 	subs.w	fp, sl, r4
 800778a:	d00b      	beq.n	80077a4 <_vfiprintf_r+0xc0>
 800778c:	465b      	mov	r3, fp
 800778e:	4622      	mov	r2, r4
 8007790:	4629      	mov	r1, r5
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff ff93 	bl	80076be <__sfputs_r>
 8007798:	3001      	adds	r0, #1
 800779a:	f000 80aa 	beq.w	80078f2 <_vfiprintf_r+0x20e>
 800779e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a0:	445a      	add	r2, fp
 80077a2:	9209      	str	r2, [sp, #36]	; 0x24
 80077a4:	f89a 3000 	ldrb.w	r3, [sl]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 80a2 	beq.w	80078f2 <_vfiprintf_r+0x20e>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f04f 32ff 	mov.w	r2, #4294967295
 80077b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077b8:	f10a 0a01 	add.w	sl, sl, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077c4:	931a      	str	r3, [sp, #104]	; 0x68
 80077c6:	4654      	mov	r4, sl
 80077c8:	2205      	movs	r2, #5
 80077ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ce:	4858      	ldr	r0, [pc, #352]	; (8007930 <_vfiprintf_r+0x24c>)
 80077d0:	f7f8 fd0e 	bl	80001f0 <memchr>
 80077d4:	9a04      	ldr	r2, [sp, #16]
 80077d6:	b9d8      	cbnz	r0, 8007810 <_vfiprintf_r+0x12c>
 80077d8:	06d1      	lsls	r1, r2, #27
 80077da:	bf44      	itt	mi
 80077dc:	2320      	movmi	r3, #32
 80077de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e2:	0713      	lsls	r3, r2, #28
 80077e4:	bf44      	itt	mi
 80077e6:	232b      	movmi	r3, #43	; 0x2b
 80077e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ec:	f89a 3000 	ldrb.w	r3, [sl]
 80077f0:	2b2a      	cmp	r3, #42	; 0x2a
 80077f2:	d015      	beq.n	8007820 <_vfiprintf_r+0x13c>
 80077f4:	9a07      	ldr	r2, [sp, #28]
 80077f6:	4654      	mov	r4, sl
 80077f8:	2000      	movs	r0, #0
 80077fa:	f04f 0c0a 	mov.w	ip, #10
 80077fe:	4621      	mov	r1, r4
 8007800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007804:	3b30      	subs	r3, #48	; 0x30
 8007806:	2b09      	cmp	r3, #9
 8007808:	d94e      	bls.n	80078a8 <_vfiprintf_r+0x1c4>
 800780a:	b1b0      	cbz	r0, 800783a <_vfiprintf_r+0x156>
 800780c:	9207      	str	r2, [sp, #28]
 800780e:	e014      	b.n	800783a <_vfiprintf_r+0x156>
 8007810:	eba0 0308 	sub.w	r3, r0, r8
 8007814:	fa09 f303 	lsl.w	r3, r9, r3
 8007818:	4313      	orrs	r3, r2
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	46a2      	mov	sl, r4
 800781e:	e7d2      	b.n	80077c6 <_vfiprintf_r+0xe2>
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	1d19      	adds	r1, r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	9103      	str	r1, [sp, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfbb      	ittet	lt
 800782c:	425b      	neglt	r3, r3
 800782e:	f042 0202 	orrlt.w	r2, r2, #2
 8007832:	9307      	strge	r3, [sp, #28]
 8007834:	9307      	strlt	r3, [sp, #28]
 8007836:	bfb8      	it	lt
 8007838:	9204      	strlt	r2, [sp, #16]
 800783a:	7823      	ldrb	r3, [r4, #0]
 800783c:	2b2e      	cmp	r3, #46	; 0x2e
 800783e:	d10c      	bne.n	800785a <_vfiprintf_r+0x176>
 8007840:	7863      	ldrb	r3, [r4, #1]
 8007842:	2b2a      	cmp	r3, #42	; 0x2a
 8007844:	d135      	bne.n	80078b2 <_vfiprintf_r+0x1ce>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	9203      	str	r2, [sp, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfb8      	it	lt
 8007852:	f04f 33ff 	movlt.w	r3, #4294967295
 8007856:	3402      	adds	r4, #2
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007940 <_vfiprintf_r+0x25c>
 800785e:	7821      	ldrb	r1, [r4, #0]
 8007860:	2203      	movs	r2, #3
 8007862:	4650      	mov	r0, sl
 8007864:	f7f8 fcc4 	bl	80001f0 <memchr>
 8007868:	b140      	cbz	r0, 800787c <_vfiprintf_r+0x198>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	eba0 000a 	sub.w	r0, r0, sl
 8007870:	fa03 f000 	lsl.w	r0, r3, r0
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	4303      	orrs	r3, r0
 8007878:	3401      	adds	r4, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007880:	482c      	ldr	r0, [pc, #176]	; (8007934 <_vfiprintf_r+0x250>)
 8007882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007886:	2206      	movs	r2, #6
 8007888:	f7f8 fcb2 	bl	80001f0 <memchr>
 800788c:	2800      	cmp	r0, #0
 800788e:	d03f      	beq.n	8007910 <_vfiprintf_r+0x22c>
 8007890:	4b29      	ldr	r3, [pc, #164]	; (8007938 <_vfiprintf_r+0x254>)
 8007892:	bb1b      	cbnz	r3, 80078dc <_vfiprintf_r+0x1f8>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	3307      	adds	r3, #7
 8007898:	f023 0307 	bic.w	r3, r3, #7
 800789c:	3308      	adds	r3, #8
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	443b      	add	r3, r7
 80078a4:	9309      	str	r3, [sp, #36]	; 0x24
 80078a6:	e767      	b.n	8007778 <_vfiprintf_r+0x94>
 80078a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ac:	460c      	mov	r4, r1
 80078ae:	2001      	movs	r0, #1
 80078b0:	e7a5      	b.n	80077fe <_vfiprintf_r+0x11a>
 80078b2:	2300      	movs	r3, #0
 80078b4:	3401      	adds	r4, #1
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	4619      	mov	r1, r3
 80078ba:	f04f 0c0a 	mov.w	ip, #10
 80078be:	4620      	mov	r0, r4
 80078c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c4:	3a30      	subs	r2, #48	; 0x30
 80078c6:	2a09      	cmp	r2, #9
 80078c8:	d903      	bls.n	80078d2 <_vfiprintf_r+0x1ee>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c5      	beq.n	800785a <_vfiprintf_r+0x176>
 80078ce:	9105      	str	r1, [sp, #20]
 80078d0:	e7c3      	b.n	800785a <_vfiprintf_r+0x176>
 80078d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078d6:	4604      	mov	r4, r0
 80078d8:	2301      	movs	r3, #1
 80078da:	e7f0      	b.n	80078be <_vfiprintf_r+0x1da>
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	462a      	mov	r2, r5
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <_vfiprintf_r+0x258>)
 80078e4:	a904      	add	r1, sp, #16
 80078e6:	4630      	mov	r0, r6
 80078e8:	f3af 8000 	nop.w
 80078ec:	4607      	mov	r7, r0
 80078ee:	1c78      	adds	r0, r7, #1
 80078f0:	d1d6      	bne.n	80078a0 <_vfiprintf_r+0x1bc>
 80078f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f4:	07d9      	lsls	r1, r3, #31
 80078f6:	d405      	bmi.n	8007904 <_vfiprintf_r+0x220>
 80078f8:	89ab      	ldrh	r3, [r5, #12]
 80078fa:	059a      	lsls	r2, r3, #22
 80078fc:	d402      	bmi.n	8007904 <_vfiprintf_r+0x220>
 80078fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007900:	f7ff fe6b 	bl	80075da <__retarget_lock_release_recursive>
 8007904:	89ab      	ldrh	r3, [r5, #12]
 8007906:	065b      	lsls	r3, r3, #25
 8007908:	f53f af12 	bmi.w	8007730 <_vfiprintf_r+0x4c>
 800790c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800790e:	e711      	b.n	8007734 <_vfiprintf_r+0x50>
 8007910:	ab03      	add	r3, sp, #12
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	462a      	mov	r2, r5
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <_vfiprintf_r+0x258>)
 8007918:	a904      	add	r1, sp, #16
 800791a:	4630      	mov	r0, r6
 800791c:	f000 f880 	bl	8007a20 <_printf_i>
 8007920:	e7e4      	b.n	80078ec <_vfiprintf_r+0x208>
 8007922:	bf00      	nop
 8007924:	080083c8 	.word	0x080083c8
 8007928:	080083e8 	.word	0x080083e8
 800792c:	080083a8 	.word	0x080083a8
 8007930:	08008408 	.word	0x08008408
 8007934:	08008412 	.word	0x08008412
 8007938:	00000000 	.word	0x00000000
 800793c:	080076bf 	.word	0x080076bf
 8007940:	0800840e 	.word	0x0800840e

08007944 <_printf_common>:
 8007944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	4616      	mov	r6, r2
 800794a:	4699      	mov	r9, r3
 800794c:	688a      	ldr	r2, [r1, #8]
 800794e:	690b      	ldr	r3, [r1, #16]
 8007950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007954:	4293      	cmp	r3, r2
 8007956:	bfb8      	it	lt
 8007958:	4613      	movlt	r3, r2
 800795a:	6033      	str	r3, [r6, #0]
 800795c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007960:	4607      	mov	r7, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b10a      	cbz	r2, 800796a <_printf_common+0x26>
 8007966:	3301      	adds	r3, #1
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	0699      	lsls	r1, r3, #26
 800796e:	bf42      	ittt	mi
 8007970:	6833      	ldrmi	r3, [r6, #0]
 8007972:	3302      	addmi	r3, #2
 8007974:	6033      	strmi	r3, [r6, #0]
 8007976:	6825      	ldr	r5, [r4, #0]
 8007978:	f015 0506 	ands.w	r5, r5, #6
 800797c:	d106      	bne.n	800798c <_printf_common+0x48>
 800797e:	f104 0a19 	add.w	sl, r4, #25
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	6832      	ldr	r2, [r6, #0]
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	42ab      	cmp	r3, r5
 800798a:	dc26      	bgt.n	80079da <_printf_common+0x96>
 800798c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007990:	1e13      	subs	r3, r2, #0
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	bf18      	it	ne
 8007996:	2301      	movne	r3, #1
 8007998:	0692      	lsls	r2, r2, #26
 800799a:	d42b      	bmi.n	80079f4 <_printf_common+0xb0>
 800799c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079a0:	4649      	mov	r1, r9
 80079a2:	4638      	mov	r0, r7
 80079a4:	47c0      	blx	r8
 80079a6:	3001      	adds	r0, #1
 80079a8:	d01e      	beq.n	80079e8 <_printf_common+0xa4>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	68e5      	ldr	r5, [r4, #12]
 80079ae:	6832      	ldr	r2, [r6, #0]
 80079b0:	f003 0306 	and.w	r3, r3, #6
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	bf08      	it	eq
 80079b8:	1aad      	subeq	r5, r5, r2
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	6922      	ldr	r2, [r4, #16]
 80079be:	bf0c      	ite	eq
 80079c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c4:	2500      	movne	r5, #0
 80079c6:	4293      	cmp	r3, r2
 80079c8:	bfc4      	itt	gt
 80079ca:	1a9b      	subgt	r3, r3, r2
 80079cc:	18ed      	addgt	r5, r5, r3
 80079ce:	2600      	movs	r6, #0
 80079d0:	341a      	adds	r4, #26
 80079d2:	42b5      	cmp	r5, r6
 80079d4:	d11a      	bne.n	8007a0c <_printf_common+0xc8>
 80079d6:	2000      	movs	r0, #0
 80079d8:	e008      	b.n	80079ec <_printf_common+0xa8>
 80079da:	2301      	movs	r3, #1
 80079dc:	4652      	mov	r2, sl
 80079de:	4649      	mov	r1, r9
 80079e0:	4638      	mov	r0, r7
 80079e2:	47c0      	blx	r8
 80079e4:	3001      	adds	r0, #1
 80079e6:	d103      	bne.n	80079f0 <_printf_common+0xac>
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f0:	3501      	adds	r5, #1
 80079f2:	e7c6      	b.n	8007982 <_printf_common+0x3e>
 80079f4:	18e1      	adds	r1, r4, r3
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	2030      	movs	r0, #48	; 0x30
 80079fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079fe:	4422      	add	r2, r4
 8007a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a08:	3302      	adds	r3, #2
 8007a0a:	e7c7      	b.n	800799c <_printf_common+0x58>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	4622      	mov	r2, r4
 8007a10:	4649      	mov	r1, r9
 8007a12:	4638      	mov	r0, r7
 8007a14:	47c0      	blx	r8
 8007a16:	3001      	adds	r0, #1
 8007a18:	d0e6      	beq.n	80079e8 <_printf_common+0xa4>
 8007a1a:	3601      	adds	r6, #1
 8007a1c:	e7d9      	b.n	80079d2 <_printf_common+0x8e>
	...

08007a20 <_printf_i>:
 8007a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	460c      	mov	r4, r1
 8007a26:	4691      	mov	r9, r2
 8007a28:	7e27      	ldrb	r7, [r4, #24]
 8007a2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a2c:	2f78      	cmp	r7, #120	; 0x78
 8007a2e:	4680      	mov	r8, r0
 8007a30:	469a      	mov	sl, r3
 8007a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a36:	d807      	bhi.n	8007a48 <_printf_i+0x28>
 8007a38:	2f62      	cmp	r7, #98	; 0x62
 8007a3a:	d80a      	bhi.n	8007a52 <_printf_i+0x32>
 8007a3c:	2f00      	cmp	r7, #0
 8007a3e:	f000 80d8 	beq.w	8007bf2 <_printf_i+0x1d2>
 8007a42:	2f58      	cmp	r7, #88	; 0x58
 8007a44:	f000 80a3 	beq.w	8007b8e <_printf_i+0x16e>
 8007a48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a50:	e03a      	b.n	8007ac8 <_printf_i+0xa8>
 8007a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a56:	2b15      	cmp	r3, #21
 8007a58:	d8f6      	bhi.n	8007a48 <_printf_i+0x28>
 8007a5a:	a001      	add	r0, pc, #4	; (adr r0, 8007a60 <_printf_i+0x40>)
 8007a5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a60:	08007ab9 	.word	0x08007ab9
 8007a64:	08007acd 	.word	0x08007acd
 8007a68:	08007a49 	.word	0x08007a49
 8007a6c:	08007a49 	.word	0x08007a49
 8007a70:	08007a49 	.word	0x08007a49
 8007a74:	08007a49 	.word	0x08007a49
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007a49 	.word	0x08007a49
 8007a80:	08007a49 	.word	0x08007a49
 8007a84:	08007a49 	.word	0x08007a49
 8007a88:	08007a49 	.word	0x08007a49
 8007a8c:	08007bd9 	.word	0x08007bd9
 8007a90:	08007afd 	.word	0x08007afd
 8007a94:	08007bbb 	.word	0x08007bbb
 8007a98:	08007a49 	.word	0x08007a49
 8007a9c:	08007a49 	.word	0x08007a49
 8007aa0:	08007bfb 	.word	0x08007bfb
 8007aa4:	08007a49 	.word	0x08007a49
 8007aa8:	08007afd 	.word	0x08007afd
 8007aac:	08007a49 	.word	0x08007a49
 8007ab0:	08007a49 	.word	0x08007a49
 8007ab4:	08007bc3 	.word	0x08007bc3
 8007ab8:	680b      	ldr	r3, [r1, #0]
 8007aba:	1d1a      	adds	r2, r3, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	600a      	str	r2, [r1, #0]
 8007ac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0a3      	b.n	8007c14 <_printf_i+0x1f4>
 8007acc:	6825      	ldr	r5, [r4, #0]
 8007ace:	6808      	ldr	r0, [r1, #0]
 8007ad0:	062e      	lsls	r6, r5, #24
 8007ad2:	f100 0304 	add.w	r3, r0, #4
 8007ad6:	d50a      	bpl.n	8007aee <_printf_i+0xce>
 8007ad8:	6805      	ldr	r5, [r0, #0]
 8007ada:	600b      	str	r3, [r1, #0]
 8007adc:	2d00      	cmp	r5, #0
 8007ade:	da03      	bge.n	8007ae8 <_printf_i+0xc8>
 8007ae0:	232d      	movs	r3, #45	; 0x2d
 8007ae2:	426d      	negs	r5, r5
 8007ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae8:	485e      	ldr	r0, [pc, #376]	; (8007c64 <_printf_i+0x244>)
 8007aea:	230a      	movs	r3, #10
 8007aec:	e019      	b.n	8007b22 <_printf_i+0x102>
 8007aee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007af2:	6805      	ldr	r5, [r0, #0]
 8007af4:	600b      	str	r3, [r1, #0]
 8007af6:	bf18      	it	ne
 8007af8:	b22d      	sxthne	r5, r5
 8007afa:	e7ef      	b.n	8007adc <_printf_i+0xbc>
 8007afc:	680b      	ldr	r3, [r1, #0]
 8007afe:	6825      	ldr	r5, [r4, #0]
 8007b00:	1d18      	adds	r0, r3, #4
 8007b02:	6008      	str	r0, [r1, #0]
 8007b04:	0628      	lsls	r0, r5, #24
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0xec>
 8007b08:	681d      	ldr	r5, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <_printf_i+0xf2>
 8007b0c:	0669      	lsls	r1, r5, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0xe8>
 8007b10:	881d      	ldrh	r5, [r3, #0]
 8007b12:	4854      	ldr	r0, [pc, #336]	; (8007c64 <_printf_i+0x244>)
 8007b14:	2f6f      	cmp	r7, #111	; 0x6f
 8007b16:	bf0c      	ite	eq
 8007b18:	2308      	moveq	r3, #8
 8007b1a:	230a      	movne	r3, #10
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b22:	6866      	ldr	r6, [r4, #4]
 8007b24:	60a6      	str	r6, [r4, #8]
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	bfa2      	ittt	ge
 8007b2a:	6821      	ldrge	r1, [r4, #0]
 8007b2c:	f021 0104 	bicge.w	r1, r1, #4
 8007b30:	6021      	strge	r1, [r4, #0]
 8007b32:	b90d      	cbnz	r5, 8007b38 <_printf_i+0x118>
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	d04d      	beq.n	8007bd4 <_printf_i+0x1b4>
 8007b38:	4616      	mov	r6, r2
 8007b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b42:	5dc7      	ldrb	r7, [r0, r7]
 8007b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b48:	462f      	mov	r7, r5
 8007b4a:	42bb      	cmp	r3, r7
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	d9f4      	bls.n	8007b3a <_printf_i+0x11a>
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d10b      	bne.n	8007b6c <_printf_i+0x14c>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	07df      	lsls	r7, r3, #31
 8007b58:	d508      	bpl.n	8007b6c <_printf_i+0x14c>
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	6861      	ldr	r1, [r4, #4]
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	bfde      	ittt	le
 8007b62:	2330      	movle	r3, #48	; 0x30
 8007b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b6c:	1b92      	subs	r2, r2, r6
 8007b6e:	6122      	str	r2, [r4, #16]
 8007b70:	f8cd a000 	str.w	sl, [sp]
 8007b74:	464b      	mov	r3, r9
 8007b76:	aa03      	add	r2, sp, #12
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	f7ff fee2 	bl	8007944 <_printf_common>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d14c      	bne.n	8007c1e <_printf_i+0x1fe>
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	b004      	add	sp, #16
 8007b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8e:	4835      	ldr	r0, [pc, #212]	; (8007c64 <_printf_i+0x244>)
 8007b90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	680e      	ldr	r6, [r1, #0]
 8007b98:	061f      	lsls	r7, r3, #24
 8007b9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b9e:	600e      	str	r6, [r1, #0]
 8007ba0:	d514      	bpl.n	8007bcc <_printf_i+0x1ac>
 8007ba2:	07d9      	lsls	r1, r3, #31
 8007ba4:	bf44      	itt	mi
 8007ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8007baa:	6023      	strmi	r3, [r4, #0]
 8007bac:	b91d      	cbnz	r5, 8007bb6 <_printf_i+0x196>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	f023 0320 	bic.w	r3, r3, #32
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	2310      	movs	r3, #16
 8007bb8:	e7b0      	b.n	8007b1c <_printf_i+0xfc>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	f043 0320 	orr.w	r3, r3, #32
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	2378      	movs	r3, #120	; 0x78
 8007bc4:	4828      	ldr	r0, [pc, #160]	; (8007c68 <_printf_i+0x248>)
 8007bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bca:	e7e3      	b.n	8007b94 <_printf_i+0x174>
 8007bcc:	065e      	lsls	r6, r3, #25
 8007bce:	bf48      	it	mi
 8007bd0:	b2ad      	uxthmi	r5, r5
 8007bd2:	e7e6      	b.n	8007ba2 <_printf_i+0x182>
 8007bd4:	4616      	mov	r6, r2
 8007bd6:	e7bb      	b.n	8007b50 <_printf_i+0x130>
 8007bd8:	680b      	ldr	r3, [r1, #0]
 8007bda:	6826      	ldr	r6, [r4, #0]
 8007bdc:	6960      	ldr	r0, [r4, #20]
 8007bde:	1d1d      	adds	r5, r3, #4
 8007be0:	600d      	str	r5, [r1, #0]
 8007be2:	0635      	lsls	r5, r6, #24
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	d501      	bpl.n	8007bec <_printf_i+0x1cc>
 8007be8:	6018      	str	r0, [r3, #0]
 8007bea:	e002      	b.n	8007bf2 <_printf_i+0x1d2>
 8007bec:	0671      	lsls	r1, r6, #25
 8007bee:	d5fb      	bpl.n	8007be8 <_printf_i+0x1c8>
 8007bf0:	8018      	strh	r0, [r3, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	4616      	mov	r6, r2
 8007bf8:	e7ba      	b.n	8007b70 <_printf_i+0x150>
 8007bfa:	680b      	ldr	r3, [r1, #0]
 8007bfc:	1d1a      	adds	r2, r3, #4
 8007bfe:	600a      	str	r2, [r1, #0]
 8007c00:	681e      	ldr	r6, [r3, #0]
 8007c02:	6862      	ldr	r2, [r4, #4]
 8007c04:	2100      	movs	r1, #0
 8007c06:	4630      	mov	r0, r6
 8007c08:	f7f8 faf2 	bl	80001f0 <memchr>
 8007c0c:	b108      	cbz	r0, 8007c12 <_printf_i+0x1f2>
 8007c0e:	1b80      	subs	r0, r0, r6
 8007c10:	6060      	str	r0, [r4, #4]
 8007c12:	6863      	ldr	r3, [r4, #4]
 8007c14:	6123      	str	r3, [r4, #16]
 8007c16:	2300      	movs	r3, #0
 8007c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c1c:	e7a8      	b.n	8007b70 <_printf_i+0x150>
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	4632      	mov	r2, r6
 8007c22:	4649      	mov	r1, r9
 8007c24:	4640      	mov	r0, r8
 8007c26:	47d0      	blx	sl
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d0ab      	beq.n	8007b84 <_printf_i+0x164>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	079b      	lsls	r3, r3, #30
 8007c30:	d413      	bmi.n	8007c5a <_printf_i+0x23a>
 8007c32:	68e0      	ldr	r0, [r4, #12]
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	4298      	cmp	r0, r3
 8007c38:	bfb8      	it	lt
 8007c3a:	4618      	movlt	r0, r3
 8007c3c:	e7a4      	b.n	8007b88 <_printf_i+0x168>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4632      	mov	r2, r6
 8007c42:	4649      	mov	r1, r9
 8007c44:	4640      	mov	r0, r8
 8007c46:	47d0      	blx	sl
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d09b      	beq.n	8007b84 <_printf_i+0x164>
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	9903      	ldr	r1, [sp, #12]
 8007c52:	1a5b      	subs	r3, r3, r1
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dcf2      	bgt.n	8007c3e <_printf_i+0x21e>
 8007c58:	e7eb      	b.n	8007c32 <_printf_i+0x212>
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	f104 0619 	add.w	r6, r4, #25
 8007c60:	e7f5      	b.n	8007c4e <_printf_i+0x22e>
 8007c62:	bf00      	nop
 8007c64:	08008419 	.word	0x08008419
 8007c68:	0800842a 	.word	0x0800842a

08007c6c <_sbrk_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d06      	ldr	r5, [pc, #24]	; (8007c88 <_sbrk_r+0x1c>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	602b      	str	r3, [r5, #0]
 8007c78:	f7f9 fdd6 	bl	8001828 <_sbrk>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_sbrk_r+0x1a>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_sbrk_r+0x1a>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	20004d88 	.word	0x20004d88

08007c8c <__sread>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	f000 fab4 	bl	8008200 <_read_r>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	bfab      	itete	ge
 8007c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ca0:	181b      	addge	r3, r3, r0
 8007ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ca6:	bfac      	ite	ge
 8007ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007caa:	81a3      	strhlt	r3, [r4, #12]
 8007cac:	bd10      	pop	{r4, pc}

08007cae <__swrite>:
 8007cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	898b      	ldrh	r3, [r1, #12]
 8007cb6:	05db      	lsls	r3, r3, #23
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	d505      	bpl.n	8007ccc <__swrite+0x1e>
 8007cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f000 f9c8 	bl	800805c <_lseek_r>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	4632      	mov	r2, r6
 8007cda:	463b      	mov	r3, r7
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce2:	f000 b869 	b.w	8007db8 <_write_r>

08007ce6 <__sseek>:
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	460c      	mov	r4, r1
 8007cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cee:	f000 f9b5 	bl	800805c <_lseek_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	bf15      	itete	ne
 8007cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d02:	81a3      	strheq	r3, [r4, #12]
 8007d04:	bf18      	it	ne
 8007d06:	81a3      	strhne	r3, [r4, #12]
 8007d08:	bd10      	pop	{r4, pc}

08007d0a <__sclose>:
 8007d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0e:	f000 b8d3 	b.w	8007eb8 <_close_r>
	...

08007d14 <__swbuf_r>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	460e      	mov	r6, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	b118      	cbz	r0, 8007d26 <__swbuf_r+0x12>
 8007d1e:	6983      	ldr	r3, [r0, #24]
 8007d20:	b90b      	cbnz	r3, 8007d26 <__swbuf_r+0x12>
 8007d22:	f7ff fbbb 	bl	800749c <__sinit>
 8007d26:	4b21      	ldr	r3, [pc, #132]	; (8007dac <__swbuf_r+0x98>)
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	d12b      	bne.n	8007d84 <__swbuf_r+0x70>
 8007d2c:	686c      	ldr	r4, [r5, #4]
 8007d2e:	69a3      	ldr	r3, [r4, #24]
 8007d30:	60a3      	str	r3, [r4, #8]
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	071a      	lsls	r2, r3, #28
 8007d36:	d52f      	bpl.n	8007d98 <__swbuf_r+0x84>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	b36b      	cbz	r3, 8007d98 <__swbuf_r+0x84>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1ac0      	subs	r0, r0, r3
 8007d42:	6963      	ldr	r3, [r4, #20]
 8007d44:	b2f6      	uxtb	r6, r6
 8007d46:	4283      	cmp	r3, r0
 8007d48:	4637      	mov	r7, r6
 8007d4a:	dc04      	bgt.n	8007d56 <__swbuf_r+0x42>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 f948 	bl	8007fe4 <_fflush_r>
 8007d54:	bb30      	cbnz	r0, 8007da4 <__swbuf_r+0x90>
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	60a3      	str	r3, [r4, #8]
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	6022      	str	r2, [r4, #0]
 8007d62:	701e      	strb	r6, [r3, #0]
 8007d64:	6963      	ldr	r3, [r4, #20]
 8007d66:	3001      	adds	r0, #1
 8007d68:	4283      	cmp	r3, r0
 8007d6a:	d004      	beq.n	8007d76 <__swbuf_r+0x62>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	07db      	lsls	r3, r3, #31
 8007d70:	d506      	bpl.n	8007d80 <__swbuf_r+0x6c>
 8007d72:	2e0a      	cmp	r6, #10
 8007d74:	d104      	bne.n	8007d80 <__swbuf_r+0x6c>
 8007d76:	4621      	mov	r1, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f933 	bl	8007fe4 <_fflush_r>
 8007d7e:	b988      	cbnz	r0, 8007da4 <__swbuf_r+0x90>
 8007d80:	4638      	mov	r0, r7
 8007d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <__swbuf_r+0x9c>)
 8007d86:	429c      	cmp	r4, r3
 8007d88:	d101      	bne.n	8007d8e <__swbuf_r+0x7a>
 8007d8a:	68ac      	ldr	r4, [r5, #8]
 8007d8c:	e7cf      	b.n	8007d2e <__swbuf_r+0x1a>
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <__swbuf_r+0xa0>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	bf08      	it	eq
 8007d94:	68ec      	ldreq	r4, [r5, #12]
 8007d96:	e7ca      	b.n	8007d2e <__swbuf_r+0x1a>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f000 f81e 	bl	8007ddc <__swsetup_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d0cb      	beq.n	8007d3c <__swbuf_r+0x28>
 8007da4:	f04f 37ff 	mov.w	r7, #4294967295
 8007da8:	e7ea      	b.n	8007d80 <__swbuf_r+0x6c>
 8007daa:	bf00      	nop
 8007dac:	080083c8 	.word	0x080083c8
 8007db0:	080083e8 	.word	0x080083e8
 8007db4:	080083a8 	.word	0x080083a8

08007db8 <_write_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	; (8007dd8 <_write_r+0x20>)
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f7f8 fbde 	bl	8000588 <_write>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_write_r+0x1e>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_write_r+0x1e>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	20004d88 	.word	0x20004d88

08007ddc <__swsetup_r>:
 8007ddc:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <__swsetup_r+0xcc>)
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	681d      	ldr	r5, [r3, #0]
 8007de2:	4606      	mov	r6, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	b125      	cbz	r5, 8007df2 <__swsetup_r+0x16>
 8007de8:	69ab      	ldr	r3, [r5, #24]
 8007dea:	b913      	cbnz	r3, 8007df2 <__swsetup_r+0x16>
 8007dec:	4628      	mov	r0, r5
 8007dee:	f7ff fb55 	bl	800749c <__sinit>
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <__swsetup_r+0xd0>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d10f      	bne.n	8007e18 <__swsetup_r+0x3c>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e00:	0719      	lsls	r1, r3, #28
 8007e02:	d42c      	bmi.n	8007e5e <__swsetup_r+0x82>
 8007e04:	06dd      	lsls	r5, r3, #27
 8007e06:	d411      	bmi.n	8007e2c <__swsetup_r+0x50>
 8007e08:	2309      	movs	r3, #9
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	e03e      	b.n	8007e96 <__swsetup_r+0xba>
 8007e18:	4b25      	ldr	r3, [pc, #148]	; (8007eb0 <__swsetup_r+0xd4>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d101      	bne.n	8007e22 <__swsetup_r+0x46>
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	e7eb      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <__swsetup_r+0xd8>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	bf08      	it	eq
 8007e28:	68ec      	ldreq	r4, [r5, #12]
 8007e2a:	e7e6      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e2c:	0758      	lsls	r0, r3, #29
 8007e2e:	d512      	bpl.n	8007e56 <__swsetup_r+0x7a>
 8007e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e32:	b141      	cbz	r1, 8007e46 <__swsetup_r+0x6a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__swsetup_r+0x66>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f000 f98f 	bl	8008160 <_free_r>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6363      	str	r3, [r4, #52]	; 0x34
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0308 	orr.w	r3, r3, #8
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	b94b      	cbnz	r3, 8007e76 <__swsetup_r+0x9a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d003      	beq.n	8007e76 <__swsetup_r+0x9a>
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 f929 	bl	80080c8 <__smakebuf_r>
 8007e76:	89a0      	ldrh	r0, [r4, #12]
 8007e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e7c:	f010 0301 	ands.w	r3, r0, #1
 8007e80:	d00a      	beq.n	8007e98 <__swsetup_r+0xbc>
 8007e82:	2300      	movs	r3, #0
 8007e84:	60a3      	str	r3, [r4, #8]
 8007e86:	6963      	ldr	r3, [r4, #20]
 8007e88:	425b      	negs	r3, r3
 8007e8a:	61a3      	str	r3, [r4, #24]
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	b943      	cbnz	r3, 8007ea2 <__swsetup_r+0xc6>
 8007e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e94:	d1ba      	bne.n	8007e0c <__swsetup_r+0x30>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	0781      	lsls	r1, r0, #30
 8007e9a:	bf58      	it	pl
 8007e9c:	6963      	ldrpl	r3, [r4, #20]
 8007e9e:	60a3      	str	r3, [r4, #8]
 8007ea0:	e7f4      	b.n	8007e8c <__swsetup_r+0xb0>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7f7      	b.n	8007e96 <__swsetup_r+0xba>
 8007ea6:	bf00      	nop
 8007ea8:	20000018 	.word	0x20000018
 8007eac:	080083c8 	.word	0x080083c8
 8007eb0:	080083e8 	.word	0x080083e8
 8007eb4:	080083a8 	.word	0x080083a8

08007eb8 <_close_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	; (8007ed4 <_close_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f9 fc7c 	bl	80017c0 <_close>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_close_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_close_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20004d88 	.word	0x20004d88

08007ed8 <__sflush_r>:
 8007ed8:	898a      	ldrh	r2, [r1, #12]
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ede:	4605      	mov	r5, r0
 8007ee0:	0710      	lsls	r0, r2, #28
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	d458      	bmi.n	8007f98 <__sflush_r+0xc0>
 8007ee6:	684b      	ldr	r3, [r1, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc05      	bgt.n	8007ef8 <__sflush_r+0x20>
 8007eec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dc02      	bgt.n	8007ef8 <__sflush_r+0x20>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d0f9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f04:	682f      	ldr	r7, [r5, #0]
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	d032      	beq.n	8007f70 <__sflush_r+0x98>
 8007f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	075a      	lsls	r2, r3, #29
 8007f10:	d505      	bpl.n	8007f1e <__sflush_r+0x46>
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	1ac0      	subs	r0, r0, r3
 8007f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f18:	b10b      	cbz	r3, 8007f1e <__sflush_r+0x46>
 8007f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1c:	1ac0      	subs	r0, r0, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4602      	mov	r2, r0
 8007f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f24:	6a21      	ldr	r1, [r4, #32]
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b0      	blx	r6
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	d106      	bne.n	8007f3e <__sflush_r+0x66>
 8007f30:	6829      	ldr	r1, [r5, #0]
 8007f32:	291d      	cmp	r1, #29
 8007f34:	d82c      	bhi.n	8007f90 <__sflush_r+0xb8>
 8007f36:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <__sflush_r+0x108>)
 8007f38:	40ca      	lsrs	r2, r1
 8007f3a:	07d6      	lsls	r6, r2, #31
 8007f3c:	d528      	bpl.n	8007f90 <__sflush_r+0xb8>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	04d9      	lsls	r1, r3, #19
 8007f44:	6922      	ldr	r2, [r4, #16]
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	d504      	bpl.n	8007f54 <__sflush_r+0x7c>
 8007f4a:	1c42      	adds	r2, r0, #1
 8007f4c:	d101      	bne.n	8007f52 <__sflush_r+0x7a>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b903      	cbnz	r3, 8007f54 <__sflush_r+0x7c>
 8007f52:	6560      	str	r0, [r4, #84]	; 0x54
 8007f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f56:	602f      	str	r7, [r5, #0]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d0ca      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <__sflush_r+0x92>
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f8fb 	bl	8008160 <_free_r>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f6e:	e7c1      	b.n	8007ef4 <__sflush_r+0x1c>
 8007f70:	6a21      	ldr	r1, [r4, #32]
 8007f72:	2301      	movs	r3, #1
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b0      	blx	r6
 8007f78:	1c41      	adds	r1, r0, #1
 8007f7a:	d1c7      	bne.n	8007f0c <__sflush_r+0x34>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0c4      	beq.n	8007f0c <__sflush_r+0x34>
 8007f82:	2b1d      	cmp	r3, #29
 8007f84:	d001      	beq.n	8007f8a <__sflush_r+0xb2>
 8007f86:	2b16      	cmp	r3, #22
 8007f88:	d101      	bne.n	8007f8e <__sflush_r+0xb6>
 8007f8a:	602f      	str	r7, [r5, #0]
 8007f8c:	e7b1      	b.n	8007ef2 <__sflush_r+0x1a>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	e7ad      	b.n	8007ef4 <__sflush_r+0x1c>
 8007f98:	690f      	ldr	r7, [r1, #16]
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	d0a9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007f9e:	0793      	lsls	r3, r2, #30
 8007fa0:	680e      	ldr	r6, [r1, #0]
 8007fa2:	bf08      	it	eq
 8007fa4:	694b      	ldreq	r3, [r1, #20]
 8007fa6:	600f      	str	r7, [r1, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	2300      	movne	r3, #0
 8007fac:	eba6 0807 	sub.w	r8, r6, r7
 8007fb0:	608b      	str	r3, [r1, #8]
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	dd9c      	ble.n	8007ef2 <__sflush_r+0x1a>
 8007fb8:	6a21      	ldr	r1, [r4, #32]
 8007fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fbc:	4643      	mov	r3, r8
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b0      	blx	r6
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	dc06      	bgt.n	8007fd6 <__sflush_r+0xfe>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e78e      	b.n	8007ef4 <__sflush_r+0x1c>
 8007fd6:	4407      	add	r7, r0
 8007fd8:	eba8 0800 	sub.w	r8, r8, r0
 8007fdc:	e7e9      	b.n	8007fb2 <__sflush_r+0xda>
 8007fde:	bf00      	nop
 8007fe0:	20400001 	.word	0x20400001

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6983      	ldr	r3, [r0, #24]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7ff fa4f 	bl	800749c <__sinit>
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <_fflush_r+0x6c>)
 8008000:	429c      	cmp	r4, r3
 8008002:	d11b      	bne.n	800803c <_fflush_r+0x58>
 8008004:	686c      	ldr	r4, [r5, #4]
 8008006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ef      	beq.n	8007fee <_fflush_r+0xa>
 800800e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008010:	07d0      	lsls	r0, r2, #31
 8008012:	d404      	bmi.n	800801e <_fflush_r+0x3a>
 8008014:	0599      	lsls	r1, r3, #22
 8008016:	d402      	bmi.n	800801e <_fflush_r+0x3a>
 8008018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800801a:	f7ff fadd 	bl	80075d8 <__retarget_lock_acquire_recursive>
 800801e:	4628      	mov	r0, r5
 8008020:	4621      	mov	r1, r4
 8008022:	f7ff ff59 	bl	8007ed8 <__sflush_r>
 8008026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008028:	07da      	lsls	r2, r3, #31
 800802a:	4605      	mov	r5, r0
 800802c:	d4e0      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	059b      	lsls	r3, r3, #22
 8008032:	d4dd      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008036:	f7ff fad0 	bl	80075da <__retarget_lock_release_recursive>
 800803a:	e7d9      	b.n	8007ff0 <_fflush_r+0xc>
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <_fflush_r+0x70>)
 800803e:	429c      	cmp	r4, r3
 8008040:	d101      	bne.n	8008046 <_fflush_r+0x62>
 8008042:	68ac      	ldr	r4, [r5, #8]
 8008044:	e7df      	b.n	8008006 <_fflush_r+0x22>
 8008046:	4b04      	ldr	r3, [pc, #16]	; (8008058 <_fflush_r+0x74>)
 8008048:	429c      	cmp	r4, r3
 800804a:	bf08      	it	eq
 800804c:	68ec      	ldreq	r4, [r5, #12]
 800804e:	e7da      	b.n	8008006 <_fflush_r+0x22>
 8008050:	080083c8 	.word	0x080083c8
 8008054:	080083e8 	.word	0x080083e8
 8008058:	080083a8 	.word	0x080083a8

0800805c <_lseek_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d07      	ldr	r5, [pc, #28]	; (800807c <_lseek_r+0x20>)
 8008060:	4604      	mov	r4, r0
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	2200      	movs	r2, #0
 8008068:	602a      	str	r2, [r5, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f7f9 fbcf 	bl	800180e <_lseek>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_lseek_r+0x1e>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_lseek_r+0x1e>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20004d88 	.word	0x20004d88

08008080 <__swhatbuf_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460e      	mov	r6, r1
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2900      	cmp	r1, #0
 800808a:	b096      	sub	sp, #88	; 0x58
 800808c:	4614      	mov	r4, r2
 800808e:	461d      	mov	r5, r3
 8008090:	da07      	bge.n	80080a2 <__swhatbuf_r+0x22>
 8008092:	2300      	movs	r3, #0
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	89b3      	ldrh	r3, [r6, #12]
 8008098:	061a      	lsls	r2, r3, #24
 800809a:	d410      	bmi.n	80080be <__swhatbuf_r+0x3e>
 800809c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a0:	e00e      	b.n	80080c0 <__swhatbuf_r+0x40>
 80080a2:	466a      	mov	r2, sp
 80080a4:	f000 f8be 	bl	8008224 <_fstat_r>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	dbf2      	blt.n	8008092 <__swhatbuf_r+0x12>
 80080ac:	9a01      	ldr	r2, [sp, #4]
 80080ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080b6:	425a      	negs	r2, r3
 80080b8:	415a      	adcs	r2, r3
 80080ba:	602a      	str	r2, [r5, #0]
 80080bc:	e7ee      	b.n	800809c <__swhatbuf_r+0x1c>
 80080be:	2340      	movs	r3, #64	; 0x40
 80080c0:	2000      	movs	r0, #0
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	b016      	add	sp, #88	; 0x58
 80080c6:	bd70      	pop	{r4, r5, r6, pc}

080080c8 <__smakebuf_r>:
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080cc:	079d      	lsls	r5, r3, #30
 80080ce:	4606      	mov	r6, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	d507      	bpl.n	80080e4 <__smakebuf_r+0x1c>
 80080d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	2301      	movs	r3, #1
 80080de:	6163      	str	r3, [r4, #20]
 80080e0:	b002      	add	sp, #8
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	ab01      	add	r3, sp, #4
 80080e6:	466a      	mov	r2, sp
 80080e8:	f7ff ffca 	bl	8008080 <__swhatbuf_r>
 80080ec:	9900      	ldr	r1, [sp, #0]
 80080ee:	4605      	mov	r5, r0
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff fa73 	bl	80075dc <_malloc_r>
 80080f6:	b948      	cbnz	r0, 800810c <__smakebuf_r+0x44>
 80080f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d4ef      	bmi.n	80080e0 <__smakebuf_r+0x18>
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	f043 0302 	orr.w	r3, r3, #2
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	e7e3      	b.n	80080d4 <__smakebuf_r+0xc>
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <__smakebuf_r+0x7c>)
 800810e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	6163      	str	r3, [r4, #20]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6120      	str	r0, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x74>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f88d 	bl	8008248 <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x74>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a0      	ldrh	r0, [r4, #12]
 800813e:	4305      	orrs	r5, r0
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cd      	b.n	80080e0 <__smakebuf_r+0x18>
 8008144:	08007435 	.word	0x08007435

08008148 <__malloc_lock>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__malloc_lock+0x8>)
 800814a:	f7ff ba45 	b.w	80075d8 <__retarget_lock_acquire_recursive>
 800814e:	bf00      	nop
 8008150:	20004d80 	.word	0x20004d80

08008154 <__malloc_unlock>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__malloc_unlock+0x8>)
 8008156:	f7ff ba40 	b.w	80075da <__retarget_lock_release_recursive>
 800815a:	bf00      	nop
 800815c:	20004d80 	.word	0x20004d80

08008160 <_free_r>:
 8008160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008162:	2900      	cmp	r1, #0
 8008164:	d048      	beq.n	80081f8 <_free_r+0x98>
 8008166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800816a:	9001      	str	r0, [sp, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f1a1 0404 	sub.w	r4, r1, #4
 8008172:	bfb8      	it	lt
 8008174:	18e4      	addlt	r4, r4, r3
 8008176:	f7ff ffe7 	bl	8008148 <__malloc_lock>
 800817a:	4a20      	ldr	r2, [pc, #128]	; (80081fc <_free_r+0x9c>)
 800817c:	9801      	ldr	r0, [sp, #4]
 800817e:	6813      	ldr	r3, [r2, #0]
 8008180:	4615      	mov	r5, r2
 8008182:	b933      	cbnz	r3, 8008192 <_free_r+0x32>
 8008184:	6063      	str	r3, [r4, #4]
 8008186:	6014      	str	r4, [r2, #0]
 8008188:	b003      	add	sp, #12
 800818a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800818e:	f7ff bfe1 	b.w	8008154 <__malloc_unlock>
 8008192:	42a3      	cmp	r3, r4
 8008194:	d90b      	bls.n	80081ae <_free_r+0x4e>
 8008196:	6821      	ldr	r1, [r4, #0]
 8008198:	1862      	adds	r2, r4, r1
 800819a:	4293      	cmp	r3, r2
 800819c:	bf04      	itt	eq
 800819e:	681a      	ldreq	r2, [r3, #0]
 80081a0:	685b      	ldreq	r3, [r3, #4]
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	bf04      	itt	eq
 80081a6:	1852      	addeq	r2, r2, r1
 80081a8:	6022      	streq	r2, [r4, #0]
 80081aa:	602c      	str	r4, [r5, #0]
 80081ac:	e7ec      	b.n	8008188 <_free_r+0x28>
 80081ae:	461a      	mov	r2, r3
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b10b      	cbz	r3, 80081b8 <_free_r+0x58>
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d9fa      	bls.n	80081ae <_free_r+0x4e>
 80081b8:	6811      	ldr	r1, [r2, #0]
 80081ba:	1855      	adds	r5, r2, r1
 80081bc:	42a5      	cmp	r5, r4
 80081be:	d10b      	bne.n	80081d8 <_free_r+0x78>
 80081c0:	6824      	ldr	r4, [r4, #0]
 80081c2:	4421      	add	r1, r4
 80081c4:	1854      	adds	r4, r2, r1
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	d1dd      	bne.n	8008188 <_free_r+0x28>
 80081cc:	681c      	ldr	r4, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	6053      	str	r3, [r2, #4]
 80081d2:	4421      	add	r1, r4
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	e7d7      	b.n	8008188 <_free_r+0x28>
 80081d8:	d902      	bls.n	80081e0 <_free_r+0x80>
 80081da:	230c      	movs	r3, #12
 80081dc:	6003      	str	r3, [r0, #0]
 80081de:	e7d3      	b.n	8008188 <_free_r+0x28>
 80081e0:	6825      	ldr	r5, [r4, #0]
 80081e2:	1961      	adds	r1, r4, r5
 80081e4:	428b      	cmp	r3, r1
 80081e6:	bf04      	itt	eq
 80081e8:	6819      	ldreq	r1, [r3, #0]
 80081ea:	685b      	ldreq	r3, [r3, #4]
 80081ec:	6063      	str	r3, [r4, #4]
 80081ee:	bf04      	itt	eq
 80081f0:	1949      	addeq	r1, r1, r5
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	6054      	str	r4, [r2, #4]
 80081f6:	e7c7      	b.n	8008188 <_free_r+0x28>
 80081f8:	b003      	add	sp, #12
 80081fa:	bd30      	pop	{r4, r5, pc}
 80081fc:	200049b8 	.word	0x200049b8

08008200 <_read_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d07      	ldr	r5, [pc, #28]	; (8008220 <_read_r+0x20>)
 8008204:	4604      	mov	r4, r0
 8008206:	4608      	mov	r0, r1
 8008208:	4611      	mov	r1, r2
 800820a:	2200      	movs	r2, #0
 800820c:	602a      	str	r2, [r5, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	f7f9 fab9 	bl	8001786 <_read>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d102      	bne.n	800821e <_read_r+0x1e>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	b103      	cbz	r3, 800821e <_read_r+0x1e>
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	20004d88 	.word	0x20004d88

08008224 <_fstat_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d07      	ldr	r5, [pc, #28]	; (8008244 <_fstat_r+0x20>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	f7f9 fad1 	bl	80017d8 <_fstat>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d102      	bne.n	8008240 <_fstat_r+0x1c>
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	b103      	cbz	r3, 8008240 <_fstat_r+0x1c>
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	20004d88 	.word	0x20004d88

08008248 <_isatty_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	; (8008264 <_isatty_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f9 fad0 	bl	80017f8 <_isatty>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_isatty_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_isatty_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20004d88 	.word	0x20004d88

08008268 <_init>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr

08008274 <_fini>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr
